/* eslint-disable */

import { AllTypesProps, ReturnTypes, Ops } from './const';
export const HOST = "https://api.5stack.gg/v1/graphql"


export const HEADERS = {}
export const apiSubscription = (options: chainOptions) => (query: string) => {
  try {
    const queryString = options[0] + '?query=' + encodeURIComponent(query);
    const wsString = queryString.replace('http', 'ws');
    const host = (options.length > 1 && options[1]?.websocket?.[0]) || wsString;
    const webSocketOptions = options[1]?.websocket || [host];
    const ws = new WebSocket(...webSocketOptions);
    return {
      ws,
      on: (e: (args: any) => void) => {
        ws.onmessage = (event: any) => {
          if (event.data) {
            const parsed = JSON.parse(event.data);
            const data = parsed.data;
            return e(data);
          }
        };
      },
      off: (e: (args: any) => void) => {
        ws.onclose = e;
      },
      error: (e: (args: any) => void) => {
        ws.onerror = e;
      },
      open: (e: () => void) => {
        ws.onopen = e;
      },
    };
  } catch {
    throw new Error('No websockets implemented');
  }
};
const handleFetchResponse = (response: Response): Promise<GraphQLResponse> => {
  if (!response.ok) {
    return new Promise((_, reject) => {
      response
        .text()
        .then((text) => {
          try {
            reject(JSON.parse(text));
          } catch (err) {
            reject(text);
          }
        })
        .catch(reject);
    });
  }
  return response.json() as Promise<GraphQLResponse>;
};

export const apiFetch =
  (options: fetchOptions) =>
  (query: string, variables: Record<string, unknown> = {}) => {
    const fetchOptions = options[1] || {};
    if (fetchOptions.method && fetchOptions.method === 'GET') {
      return fetch(`${options[0]}?query=${encodeURIComponent(query)}`, fetchOptions)
        .then(handleFetchResponse)
        .then((response: GraphQLResponse) => {
          if (response.errors) {
            throw new GraphQLError(response);
          }
          return response.data;
        });
    }
    return fetch(`${options[0]}`, {
      body: JSON.stringify({ query, variables }),
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      ...fetchOptions,
    })
      .then(handleFetchResponse)
      .then((response: GraphQLResponse) => {
        if (response.errors) {
          throw new GraphQLError(response);
        }
        return response.data;
      });
  };

export const InternalsBuildQuery = ({
  ops,
  props,
  returns,
  options,
  scalars,
}: {
  props: AllTypesPropsType;
  returns: ReturnTypesType;
  ops: Operations;
  options?: OperationOptions;
  scalars?: ScalarDefinition;
}) => {
  const ibb = (
    k: string,
    o: InputValueType | VType,
    p = '',
    root = true,
    vars: Array<{ name: string; graphQLType: string }> = [],
  ): string => {
    const keyForPath = purifyGraphQLKey(k);
    const newPath = [p, keyForPath].join(SEPARATOR);
    if (!o) {
      return '';
    }
    if (typeof o === 'boolean' || typeof o === 'number') {
      return k;
    }
    if (typeof o === 'string') {
      return `${k} ${o}`;
    }
    if (Array.isArray(o)) {
      const args = InternalArgsBuilt({
        props,
        returns,
        ops,
        scalars,
        vars,
      })(o[0], newPath);
      return `${ibb(args ? `${k}(${args})` : k, o[1], p, false, vars)}`;
    }
    if (k === '__alias') {
      return Object.entries(o)
        .map(([alias, objectUnderAlias]) => {
          if (typeof objectUnderAlias !== 'object' || Array.isArray(objectUnderAlias)) {
            throw new Error(
              'Invalid alias it should be __alias:{ YOUR_ALIAS_NAME: { OPERATION_NAME: { ...selectors }}}',
            );
          }
          const operationName = Object.keys(objectUnderAlias)[0];
          const operation = objectUnderAlias[operationName];
          return ibb(`${alias}:${operationName}`, operation, p, false, vars);
        })
        .join('\n');
    }
    const hasOperationName = root && options?.operationName ? ' ' + options.operationName : '';
    const keyForDirectives = o.__directives ?? '';
    const query = `{${Object.entries(o)
      .filter(([k]) => k !== '__directives')
      .map((e) => ibb(...e, [p, `field<>${keyForPath}`].join(SEPARATOR), false, vars))
      .join('\n')}}`;
    if (!root) {
      return `${k} ${keyForDirectives}${hasOperationName} ${query}`;
    }
    const varsString = vars.map((v) => `${v.name}: ${v.graphQLType}`).join(', ');
    return `${k} ${keyForDirectives}${hasOperationName}${varsString ? `(${varsString})` : ''} ${query}`;
  };
  return ibb;
};

type UnionOverrideKeys<T, U> = Omit<T, keyof U> & U;

export const Thunder =
  <SCLR extends ScalarDefinition>(fn: FetchFunction, thunderGraphQLOptions?: ThunderGraphQLOptions<SCLR>) =>
  <O extends keyof typeof Ops, OVERRIDESCLR extends SCLR, R extends keyof ValueTypes = GenericOperation<O>>(
    operation: O,
    graphqlOptions?: ThunderGraphQLOptions<OVERRIDESCLR>,
  ) =>
  <Z extends ValueTypes[R]>(
    o: Z & {
      [P in keyof Z]: P extends keyof ValueTypes[R] ? Z[P] : never;
    },
    ops?: OperationOptions & { variables?: Record<string, unknown> },
  ) => {
    const options = {
      ...thunderGraphQLOptions,
      ...graphqlOptions,
    };
    return fn(
      Zeus(operation, o, {
        operationOptions: ops,
        scalars: options?.scalars,
      }),
      ops?.variables,
    ).then((data) => {
      if (options?.scalars) {
        return decodeScalarsInResponse({
          response: data,
          initialOp: operation,
          initialZeusQuery: o as VType,
          returns: ReturnTypes,
          scalars: options.scalars,
          ops: Ops,
        });
      }
      return data;
    }) as Promise<InputType<GraphQLTypes[R], Z, UnionOverrideKeys<SCLR, OVERRIDESCLR>>>;
  };

export const Chain = (...options: chainOptions) => Thunder(apiFetch(options));

export const SubscriptionThunder =
  <SCLR extends ScalarDefinition>(fn: SubscriptionFunction, thunderGraphQLOptions?: ThunderGraphQLOptions<SCLR>) =>
  <O extends keyof typeof Ops, OVERRIDESCLR extends SCLR, R extends keyof ValueTypes = GenericOperation<O>>(
    operation: O,
    graphqlOptions?: ThunderGraphQLOptions<OVERRIDESCLR>,
  ) =>
  <Z extends ValueTypes[R]>(
    o: Z & {
      [P in keyof Z]: P extends keyof ValueTypes[R] ? Z[P] : never;
    },
    ops?: OperationOptions & { variables?: ExtractVariables<Z> },
  ) => {
    const options = {
      ...thunderGraphQLOptions,
      ...graphqlOptions,
    };
    type CombinedSCLR = UnionOverrideKeys<SCLR, OVERRIDESCLR>;
    const returnedFunction = fn(
      Zeus(operation, o, {
        operationOptions: ops,
        scalars: options?.scalars,
      }),
    ) as SubscriptionToGraphQL<Z, GraphQLTypes[R], CombinedSCLR>;
    if (returnedFunction?.on && options?.scalars) {
      const wrapped = returnedFunction.on;
      returnedFunction.on = (fnToCall: (args: InputType<GraphQLTypes[R], Z, CombinedSCLR>) => void) =>
        wrapped((data: InputType<GraphQLTypes[R], Z, CombinedSCLR>) => {
          if (options?.scalars) {
            return fnToCall(
              decodeScalarsInResponse({
                response: data,
                initialOp: operation,
                initialZeusQuery: o as VType,
                returns: ReturnTypes,
                scalars: options.scalars,
                ops: Ops,
              }),
            );
          }
          return fnToCall(data);
        });
    }
    return returnedFunction;
  };

export const Subscription = (...options: chainOptions) => SubscriptionThunder(apiSubscription(options));
export const Zeus = <
  Z extends ValueTypes[R],
  O extends keyof typeof Ops,
  R extends keyof ValueTypes = GenericOperation<O>,
>(
  operation: O,
  o: Z,
  ops?: {
    operationOptions?: OperationOptions;
    scalars?: ScalarDefinition;
  },
) =>
  InternalsBuildQuery({
    props: AllTypesProps,
    returns: ReturnTypes,
    ops: Ops,
    options: ops?.operationOptions,
    scalars: ops?.scalars,
  })(operation, o as VType);

export const ZeusSelect = <T>() => ((t: unknown) => t) as SelectionFunction<T>;

export const Selector = <T extends keyof ValueTypes>(key: T) => key && ZeusSelect<ValueTypes[T]>();

export const TypeFromSelector = <T extends keyof ValueTypes>(key: T) => key && ZeusSelect<ValueTypes[T]>();
export const Gql = Chain(HOST, {
  headers: {
    'Content-Type': 'application/json',
    ...HEADERS,
  },
});

export const ZeusScalars = ZeusSelect<ScalarCoders>();

export const decodeScalarsInResponse = <O extends Operations>({
  response,
  scalars,
  returns,
  ops,
  initialZeusQuery,
  initialOp,
}: {
  ops: O;
  response: any;
  returns: ReturnTypesType;
  scalars?: Record<string, ScalarResolver | undefined>;
  initialOp: keyof O;
  initialZeusQuery: InputValueType | VType;
}) => {
  if (!scalars) {
    return response;
  }
  const builder = PrepareScalarPaths({
    ops,
    returns,
  });

  const scalarPaths = builder(initialOp as string, ops[initialOp], initialZeusQuery);
  if (scalarPaths) {
    const r = traverseResponse({ scalarPaths, resolvers: scalars })(initialOp as string, response, [ops[initialOp]]);
    return r;
  }
  return response;
};

export const traverseResponse = ({
  resolvers,
  scalarPaths,
}: {
  scalarPaths: { [x: string]: `scalar.${string}` };
  resolvers: {
    [x: string]: ScalarResolver | undefined;
  };
}) => {
  const ibb = (k: string, o: InputValueType | VType, p: string[] = []): unknown => {
    if (Array.isArray(o)) {
      return o.map((eachO) => ibb(k, eachO, p));
    }
    if (o == null) {
      return o;
    }
    const scalarPathString = p.join(SEPARATOR);
    const currentScalarString = scalarPaths[scalarPathString];
    if (currentScalarString) {
      const currentDecoder = resolvers[currentScalarString.split('.')[1]]?.decode;
      if (currentDecoder) {
        return currentDecoder(o);
      }
    }
    if (typeof o === 'boolean' || typeof o === 'number' || typeof o === 'string' || !o) {
      return o;
    }
    const entries = Object.entries(o).map(([k, v]) => [k, ibb(k, v, [...p, purifyGraphQLKey(k)])] as const);
    const objectFromEntries = entries.reduce<Record<string, unknown>>((a, [k, v]) => {
      a[k] = v;
      return a;
    }, {});
    return objectFromEntries;
  };
  return ibb;
};

export type AllTypesPropsType = {
  [x: string]:
    | undefined
    | `scalar.${string}`
    | 'enum'
    | {
        [x: string]:
          | undefined
          | string
          | {
              [x: string]: string | undefined;
            };
      };
};

export type ReturnTypesType = {
  [x: string]:
    | {
        [x: string]: string | undefined;
      }
    | `scalar.${string}`
    | undefined;
};
export type InputValueType = {
  [x: string]: undefined | boolean | string | number | [any, undefined | boolean | InputValueType] | InputValueType;
};
export type VType =
  | undefined
  | boolean
  | string
  | number
  | [any, undefined | boolean | InputValueType]
  | InputValueType;

export type PlainType = boolean | number | string | null | undefined;
export type ZeusArgsType =
  | PlainType
  | {
      [x: string]: ZeusArgsType;
    }
  | Array<ZeusArgsType>;

export type Operations = Record<string, string>;

export type VariableDefinition = {
  [x: string]: unknown;
};

export const SEPARATOR = '|';

export type fetchOptions = Parameters<typeof fetch>;
type websocketOptions = typeof WebSocket extends new (...args: infer R) => WebSocket ? R : never;
export type chainOptions = [fetchOptions[0], fetchOptions[1] & { websocket?: websocketOptions }] | [fetchOptions[0]];
export type FetchFunction = (query: string, variables?: Record<string, unknown>) => Promise<any>;
export type SubscriptionFunction = (query: string) => any;
type NotUndefined<T> = T extends undefined ? never : T;
export type ResolverType<F> = NotUndefined<F extends [infer ARGS, any] ? ARGS : undefined>;

export type OperationOptions = {
  operationName?: string;
};

export type ScalarCoder = Record<string, (s: unknown) => string>;

export interface GraphQLResponse {
  data?: Record<string, any>;
  errors?: Array<{
    message: string;
  }>;
}
export class GraphQLError extends Error {
  constructor(public response: GraphQLResponse) {
    super('');
    console.error(response);
  }
  toString() {
    return 'GraphQL Response Error';
  }
}
export type GenericOperation<O> = O extends keyof typeof Ops ? typeof Ops[O] : never;
export type ThunderGraphQLOptions<SCLR extends ScalarDefinition> = {
  scalars?: SCLR | ScalarCoders;
};

const ExtractScalar = (mappedParts: string[], returns: ReturnTypesType): `scalar.${string}` | undefined => {
  if (mappedParts.length === 0) {
    return;
  }
  const oKey = mappedParts[0];
  const returnP1 = returns[oKey];
  if (typeof returnP1 === 'object') {
    const returnP2 = returnP1[mappedParts[1]];
    if (returnP2) {
      return ExtractScalar([returnP2, ...mappedParts.slice(2)], returns);
    }
    return undefined;
  }
  return returnP1 as `scalar.${string}` | undefined;
};

export const PrepareScalarPaths = ({ ops, returns }: { returns: ReturnTypesType; ops: Operations }) => {
  const ibb = (
    k: string,
    originalKey: string,
    o: InputValueType | VType,
    p: string[] = [],
    pOriginals: string[] = [],
    root = true,
  ): { [x: string]: `scalar.${string}` } | undefined => {
    if (!o) {
      return;
    }
    if (typeof o === 'boolean' || typeof o === 'number' || typeof o === 'string') {
      const extractionArray = [...pOriginals, originalKey];
      const isScalar = ExtractScalar(extractionArray, returns);
      if (isScalar?.startsWith('scalar')) {
        const partOfTree = {
          [[...p, k].join(SEPARATOR)]: isScalar,
        };
        return partOfTree;
      }
      return {};
    }
    if (Array.isArray(o)) {
      return ibb(k, k, o[1], p, pOriginals, false);
    }
    if (k === '__alias') {
      return Object.entries(o)
        .map(([alias, objectUnderAlias]) => {
          if (typeof objectUnderAlias !== 'object' || Array.isArray(objectUnderAlias)) {
            throw new Error(
              'Invalid alias it should be __alias:{ YOUR_ALIAS_NAME: { OPERATION_NAME: { ...selectors }}}',
            );
          }
          const operationName = Object.keys(objectUnderAlias)[0];
          const operation = objectUnderAlias[operationName];
          return ibb(alias, operationName, operation, p, pOriginals, false);
        })
        .reduce((a, b) => ({
          ...a,
          ...b,
        }));
    }
    const keyName = root ? ops[k] : k;
    return Object.entries(o)
      .filter(([k]) => k !== '__directives')
      .map(([k, v]) => {
        // Inline fragments shouldn't be added to the path as they aren't a field
        const isInlineFragment = originalKey.match(/^...\s*on/) != null;
        return ibb(
          k,
          k,
          v,
          isInlineFragment ? p : [...p, purifyGraphQLKey(keyName || k)],
          isInlineFragment ? pOriginals : [...pOriginals, purifyGraphQLKey(originalKey)],
          false,
        );
      })
      .reduce((a, b) => ({
        ...a,
        ...b,
      }));
  };
  return ibb;
};

export const purifyGraphQLKey = (k: string) => k.replace(/\([^)]*\)/g, '').replace(/^[^:]*\:/g, '');

const mapPart = (p: string) => {
  const [isArg, isField] = p.split('<>');
  if (isField) {
    return {
      v: isField,
      __type: 'field',
    } as const;
  }
  return {
    v: isArg,
    __type: 'arg',
  } as const;
};

type Part = ReturnType<typeof mapPart>;

export const ResolveFromPath = (props: AllTypesPropsType, returns: ReturnTypesType, ops: Operations) => {
  const ResolvePropsType = (mappedParts: Part[]) => {
    const oKey = ops[mappedParts[0].v];
    const propsP1 = oKey ? props[oKey] : props[mappedParts[0].v];
    if (propsP1 === 'enum' && mappedParts.length === 1) {
      return 'enum';
    }
    if (typeof propsP1 === 'string' && propsP1.startsWith('scalar.') && mappedParts.length === 1) {
      return propsP1;
    }
    if (typeof propsP1 === 'object') {
      if (mappedParts.length < 2) {
        return 'not';
      }
      const propsP2 = propsP1[mappedParts[1].v];
      if (typeof propsP2 === 'string') {
        return rpp(
          `${propsP2}${SEPARATOR}${mappedParts
            .slice(2)
            .map((mp) => mp.v)
            .join(SEPARATOR)}`,
        );
      }
      if (typeof propsP2 === 'object') {
        if (mappedParts.length < 3) {
          return 'not';
        }
        const propsP3 = propsP2[mappedParts[2].v];
        if (propsP3 && mappedParts[2].__type === 'arg') {
          return rpp(
            `${propsP3}${SEPARATOR}${mappedParts
              .slice(3)
              .map((mp) => mp.v)
              .join(SEPARATOR)}`,
          );
        }
      }
    }
  };
  const ResolveReturnType = (mappedParts: Part[]) => {
    if (mappedParts.length === 0) {
      return 'not';
    }
    const oKey = ops[mappedParts[0].v];
    const returnP1 = oKey ? returns[oKey] : returns[mappedParts[0].v];
    if (typeof returnP1 === 'object') {
      if (mappedParts.length < 2) return 'not';
      const returnP2 = returnP1[mappedParts[1].v];
      if (returnP2) {
        return rpp(
          `${returnP2}${SEPARATOR}${mappedParts
            .slice(2)
            .map((mp) => mp.v)
            .join(SEPARATOR)}`,
        );
      }
    }
  };
  const rpp = (path: string): 'enum' | 'not' | `scalar.${string}` => {
    const parts = path.split(SEPARATOR).filter((l) => l.length > 0);
    const mappedParts = parts.map(mapPart);
    const propsP1 = ResolvePropsType(mappedParts);
    if (propsP1) {
      return propsP1;
    }
    const returnP1 = ResolveReturnType(mappedParts);
    if (returnP1) {
      return returnP1;
    }
    return 'not';
  };
  return rpp;
};

export const InternalArgsBuilt = ({
  props,
  ops,
  returns,
  scalars,
  vars,
}: {
  props: AllTypesPropsType;
  returns: ReturnTypesType;
  ops: Operations;
  scalars?: ScalarDefinition;
  vars: Array<{ name: string; graphQLType: string }>;
}) => {
  const arb = (a: ZeusArgsType, p = '', root = true): string => {
    if (typeof a === 'string') {
      if (a.startsWith(START_VAR_NAME)) {
        const [varName, graphQLType] = a.replace(START_VAR_NAME, '$').split(GRAPHQL_TYPE_SEPARATOR);
        const v = vars.find((v) => v.name === varName);
        if (!v) {
          vars.push({
            name: varName,
            graphQLType,
          });
        } else {
          if (v.graphQLType !== graphQLType) {
            throw new Error(
              `Invalid variable exists with two different GraphQL Types, "${v.graphQLType}" and ${graphQLType}`,
            );
          }
        }
        return varName;
      }
    }
    const checkType = ResolveFromPath(props, returns, ops)(p);
    if (checkType.startsWith('scalar.')) {
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      const [_, ...splittedScalar] = checkType.split('.');
      const scalarKey = splittedScalar.join('.');
      return (scalars?.[scalarKey]?.encode?.(a) as string) || JSON.stringify(a);
    }
    if (Array.isArray(a)) {
      return `[${a.map((arr) => arb(arr, p, false)).join(', ')}]`;
    }
    if (typeof a === 'string') {
      if (checkType === 'enum') {
        return a;
      }
      return `${JSON.stringify(a)}`;
    }
    if (typeof a === 'object') {
      if (a === null) {
        return `null`;
      }
      const returnedObjectString = Object.entries(a)
        .filter(([, v]) => typeof v !== 'undefined')
        .map(([k, v]) => `${k}: ${arb(v, [p, k].join(SEPARATOR), false)}`)
        .join(',\n');
      if (!root) {
        return `{${returnedObjectString}}`;
      }
      return returnedObjectString;
    }
    return `${a}`;
  };
  return arb;
};

export const resolverFor = <X, T extends keyof ResolverInputTypes, Z extends keyof ResolverInputTypes[T]>(
  type: T,
  field: Z,
  fn: (
    args: Required<ResolverInputTypes[T]>[Z] extends [infer Input, any] ? Input : any,
    source: any,
  ) => Z extends keyof ModelTypes[T] ? ModelTypes[T][Z] | Promise<ModelTypes[T][Z]> | X : never,
) => fn as (args?: any, source?: any) => ReturnType<typeof fn>;

export type UnwrapPromise<T> = T extends Promise<infer R> ? R : T;
export type ZeusState<T extends (...args: any[]) => Promise<any>> = NonNullable<UnwrapPromise<ReturnType<T>>>;
export type ZeusHook<
  T extends (...args: any[]) => Record<string, (...args: any[]) => Promise<any>>,
  N extends keyof ReturnType<T>,
> = ZeusState<ReturnType<T>[N]>;

export type WithTypeNameValue<T> = T & {
  __typename?: boolean;
  __directives?: string;
};
export type AliasType<T> = WithTypeNameValue<T> & {
  __alias?: Record<string, WithTypeNameValue<T>>;
};
type DeepAnify<T> = {
  [P in keyof T]?: any;
};
type IsPayLoad<T> = T extends [any, infer PayLoad] ? PayLoad : T;
export type ScalarDefinition = Record<string, ScalarResolver>;

type IsScalar<S, SCLR extends ScalarDefinition> = S extends 'scalar' & { name: infer T }
  ? T extends keyof SCLR
    ? SCLR[T]['decode'] extends (s: unknown) => unknown
      ? ReturnType<SCLR[T]['decode']>
      : unknown
    : unknown
  : S;
type IsArray<T, U, SCLR extends ScalarDefinition> = T extends Array<infer R>
  ? InputType<R, U, SCLR>[]
  : InputType<T, U, SCLR>;
type FlattenArray<T> = T extends Array<infer R> ? R : T;
type BaseZeusResolver = boolean | 1 | string | Variable<any, string>;

type IsInterfaced<SRC extends DeepAnify<DST>, DST, SCLR extends ScalarDefinition> = FlattenArray<SRC> extends
  | ZEUS_INTERFACES
  | ZEUS_UNIONS
  ? {
      [P in keyof SRC]: SRC[P] extends '__union' & infer R
        ? P extends keyof DST
          ? IsArray<R, '__typename' extends keyof DST ? DST[P] & { __typename: true } : DST[P], SCLR>
          : IsArray<R, '__typename' extends keyof DST ? { __typename: true } : Record<string, never>, SCLR>
        : never;
    }[keyof SRC] & {
      [P in keyof Omit<
        Pick<
          SRC,
          {
            [P in keyof DST]: SRC[P] extends '__union' & infer R ? never : P;
          }[keyof DST]
        >,
        '__typename'
      >]: IsPayLoad<DST[P]> extends BaseZeusResolver ? IsScalar<SRC[P], SCLR> : IsArray<SRC[P], DST[P], SCLR>;
    }
  : {
      [P in keyof Pick<SRC, keyof DST>]: IsPayLoad<DST[P]> extends BaseZeusResolver
        ? IsScalar<SRC[P], SCLR>
        : IsArray<SRC[P], DST[P], SCLR>;
    };

export type MapType<SRC, DST, SCLR extends ScalarDefinition> = SRC extends DeepAnify<DST>
  ? IsInterfaced<SRC, DST, SCLR>
  : never;
// eslint-disable-next-line @typescript-eslint/ban-types
export type InputType<SRC, DST, SCLR extends ScalarDefinition = {}> = IsPayLoad<DST> extends { __alias: infer R }
  ? {
      [P in keyof R]: MapType<SRC, R[P], SCLR>[keyof MapType<SRC, R[P], SCLR>];
    } & MapType<SRC, Omit<IsPayLoad<DST>, '__alias'>, SCLR>
  : MapType<SRC, IsPayLoad<DST>, SCLR>;
export type SubscriptionToGraphQL<Z, T, SCLR extends ScalarDefinition> = {
  ws: WebSocket;
  on: (fn: (args: InputType<T, Z, SCLR>) => void) => void;
  off: (fn: (e: { data?: InputType<T, Z, SCLR>; code?: number; reason?: string; message?: string }) => void) => void;
  error: (fn: (e: { data?: InputType<T, Z, SCLR>; errors?: string[] }) => void) => void;
  open: () => void;
};

// eslint-disable-next-line @typescript-eslint/ban-types
export type FromSelector<SELECTOR, NAME extends keyof GraphQLTypes, SCLR extends ScalarDefinition = {}> = InputType<
  GraphQLTypes[NAME],
  SELECTOR,
  SCLR
>;

export type ScalarResolver = {
  encode?: (s: unknown) => string;
  decode?: (s: unknown) => unknown;
};

export type SelectionFunction<V> = <Z extends V>(
  t: Z & {
    [P in keyof Z]: P extends keyof V ? Z[P] : never;
  },
) => Z;

type BuiltInVariableTypes = {
  ['String']: string;
  ['Int']: number;
  ['Float']: number;
  ['ID']: unknown;
  ['Boolean']: boolean;
};
type AllVariableTypes = keyof BuiltInVariableTypes | keyof ZEUS_VARIABLES;
type VariableRequired<T extends string> = `${T}!` | T | `[${T}]` | `[${T}]!` | `[${T}!]` | `[${T}!]!`;
type VR<T extends string> = VariableRequired<VariableRequired<T>>;

export type GraphQLVariableType = VR<AllVariableTypes>;

type ExtractVariableTypeString<T extends string> = T extends VR<infer R1>
  ? R1 extends VR<infer R2>
    ? R2 extends VR<infer R3>
      ? R3 extends VR<infer R4>
        ? R4 extends VR<infer R5>
          ? R5
          : R4
        : R3
      : R2
    : R1
  : T;

type DecomposeType<T, Type> = T extends `[${infer R}]`
  ? Array<DecomposeType<R, Type>> | undefined
  : T extends `${infer R}!`
  ? NonNullable<DecomposeType<R, Type>>
  : Type | undefined;

type ExtractTypeFromGraphQLType<T extends string> = T extends keyof ZEUS_VARIABLES
  ? ZEUS_VARIABLES[T]
  : T extends keyof BuiltInVariableTypes
  ? BuiltInVariableTypes[T]
  : any;

export type GetVariableType<T extends string> = DecomposeType<
  T,
  ExtractTypeFromGraphQLType<ExtractVariableTypeString<T>>
>;

type UndefinedKeys<T> = {
  [K in keyof T]-?: T[K] extends NonNullable<T[K]> ? never : K;
}[keyof T];

type WithNullableKeys<T> = Pick<T, UndefinedKeys<T>>;
type WithNonNullableKeys<T> = Omit<T, UndefinedKeys<T>>;

type OptionalKeys<T> = {
  [P in keyof T]?: T[P];
};

export type WithOptionalNullables<T> = OptionalKeys<WithNullableKeys<T>> & WithNonNullableKeys<T>;

export type Variable<T extends GraphQLVariableType, Name extends string> = {
  ' __zeus_name': Name;
  ' __zeus_type': T;
};

export type ExtractVariablesDeep<Query> = Query extends Variable<infer VType, infer VName>
  ? { [key in VName]: GetVariableType<VType> }
  : Query extends string | number | boolean | Array<string | number | boolean>
  ? // eslint-disable-next-line @typescript-eslint/ban-types
    {}
  : UnionToIntersection<{ [K in keyof Query]: WithOptionalNullables<ExtractVariablesDeep<Query[K]>> }[keyof Query]>;

export type ExtractVariables<Query> = Query extends Variable<infer VType, infer VName>
  ? { [key in VName]: GetVariableType<VType> }
  : Query extends [infer Inputs, infer Outputs]
  ? ExtractVariablesDeep<Inputs> & ExtractVariables<Outputs>
  : Query extends string | number | boolean | Array<string | number | boolean>
  ? // eslint-disable-next-line @typescript-eslint/ban-types
    {}
  : UnionToIntersection<{ [K in keyof Query]: WithOptionalNullables<ExtractVariables<Query[K]>> }[keyof Query]>;

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never;

export const START_VAR_NAME = `$ZEUS_VAR`;
export const GRAPHQL_TYPE_SEPARATOR = `__$GRAPHQL__`;

export const $ = <Type extends GraphQLVariableType, Name extends string>(name: Name, graphqlType: Type) => {
  return (START_VAR_NAME + name + GRAPHQL_TYPE_SEPARATOR + graphqlType) as unknown as Variable<Type, Name>;
};
type ZEUS_INTERFACES = never
export type ScalarCoders = {
	bigint?: ScalarResolver;
	bytea?: ScalarResolver;
	date?: ScalarResolver;
	jsonb?: ScalarResolver;
	numeric?: ScalarResolver;
	timestamptz?: ScalarResolver;
	uuid?: ScalarResolver;
}
type ZEUS_UNIONS = never

export type ValueTypes = {
    /** Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'. */
["Boolean_comparison_exp"]: {
	_eq?: boolean | undefined | null | Variable<any, string>,
	_gt?: boolean | undefined | null | Variable<any, string>,
	_gte?: boolean | undefined | null | Variable<any, string>,
	_in?: Array<boolean> | undefined | null | Variable<any, string>,
	_is_null?: boolean | undefined | null | Variable<any, string>,
	_lt?: boolean | undefined | null | Variable<any, string>,
	_lte?: boolean | undefined | null | Variable<any, string>,
	_neq?: boolean | undefined | null | Variable<any, string>,
	_nin?: Array<boolean> | undefined | null | Variable<any, string>
};
	/** Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'. */
["Int_comparison_exp"]: {
	_eq?: number | undefined | null | Variable<any, string>,
	_gt?: number | undefined | null | Variable<any, string>,
	_gte?: number | undefined | null | Variable<any, string>,
	_in?: Array<number> | undefined | null | Variable<any, string>,
	_is_null?: boolean | undefined | null | Variable<any, string>,
	_lt?: number | undefined | null | Variable<any, string>,
	_lte?: number | undefined | null | Variable<any, string>,
	_neq?: number | undefined | null | Variable<any, string>,
	_nin?: Array<number> | undefined | null | Variable<any, string>
};
	["MeResponse"]: AliasType<{
	avatar_url?:boolean | `@${string}`,
	discord_id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	player?:ValueTypes["players"],
	profile_url?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'. */
["String_comparison_exp"]: {
	_eq?: string | undefined | null | Variable<any, string>,
	_gt?: string | undefined | null | Variable<any, string>,
	_gte?: string | undefined | null | Variable<any, string>,
	/** does the column match the given case-insensitive pattern */
	_ilike?: string | undefined | null | Variable<any, string>,
	_in?: Array<string> | undefined | null | Variable<any, string>,
	/** does the column match the given POSIX regular expression, case insensitive */
	_iregex?: string | undefined | null | Variable<any, string>,
	_is_null?: boolean | undefined | null | Variable<any, string>,
	/** does the column match the given pattern */
	_like?: string | undefined | null | Variable<any, string>,
	_lt?: string | undefined | null | Variable<any, string>,
	_lte?: string | undefined | null | Variable<any, string>,
	_neq?: string | undefined | null | Variable<any, string>,
	/** does the column NOT match the given case-insensitive pattern */
	_nilike?: string | undefined | null | Variable<any, string>,
	_nin?: Array<string> | undefined | null | Variable<any, string>,
	/** does the column NOT match the given POSIX regular expression, case insensitive */
	_niregex?: string | undefined | null | Variable<any, string>,
	/** does the column NOT match the given pattern */
	_nlike?: string | undefined | null | Variable<any, string>,
	/** does the column NOT match the given POSIX regular expression, case sensitive */
	_nregex?: string | undefined | null | Variable<any, string>,
	/** does the column NOT match the given SQL regular expression */
	_nsimilar?: string | undefined | null | Variable<any, string>,
	/** does the column match the given POSIX regular expression, case sensitive */
	_regex?: string | undefined | null | Variable<any, string>,
	/** does the column match the given SQL regular expression */
	_similar?: string | undefined | null | Variable<any, string>
};
	["SuccessOutput"]: AliasType<{
	success?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** columns and relationships of "_map_pool" */
["_map_pool"]: AliasType<{
	map_id?:boolean | `@${string}`,
	map_pool_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "_map_pool" */
["_map_pool_aggregate"]: AliasType<{
	aggregate?:ValueTypes["_map_pool_aggregate_fields"],
	nodes?:ValueTypes["_map_pool"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "_map_pool" */
["_map_pool_aggregate_fields"]: AliasType<{
count?: [{	columns?: Array<ValueTypes["_map_pool_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["_map_pool_max_fields"],
	min?:ValueTypes["_map_pool_min_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "_map_pool". All fields are combined with a logical 'AND'. */
["_map_pool_bool_exp"]: {
	_and?: Array<ValueTypes["_map_pool_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["_map_pool_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["_map_pool_bool_exp"]> | undefined | null | Variable<any, string>,
	map_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	map_pool_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "_map_pool" */
["_map_pool_constraint"]:_map_pool_constraint;
	/** input type for inserting data into table "_map_pool" */
["_map_pool_insert_input"]: {
	map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	map_pool_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["_map_pool_max_fields"]: AliasType<{
	map_id?:boolean | `@${string}`,
	map_pool_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["_map_pool_min_fields"]: AliasType<{
	map_id?:boolean | `@${string}`,
	map_pool_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "_map_pool" */
["_map_pool_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["_map_pool"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "_map_pool" */
["_map_pool_on_conflict"]: {
	constraint: ValueTypes["_map_pool_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["_map_pool_update_column"]> | Variable<any, string>,
	where?: ValueTypes["_map_pool_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "_map_pool". */
["_map_pool_order_by"]: {
	map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	map_pool_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: _map_pool */
["_map_pool_pk_columns_input"]: {
	map_id: ValueTypes["uuid"] | Variable<any, string>,
	map_pool_id: ValueTypes["uuid"] | Variable<any, string>
};
	/** select columns of table "_map_pool" */
["_map_pool_select_column"]:_map_pool_select_column;
	/** input type for updating data in table "_map_pool" */
["_map_pool_set_input"]: {
	map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	map_pool_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "_map_pool" */
["_map_pool_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["_map_pool_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["_map_pool_stream_cursor_value_input"]: {
	map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	map_pool_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>
};
	/** update columns of table "_map_pool" */
["_map_pool_update_column"]:_map_pool_update_column;
	["_map_pool_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["_map_pool_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["_map_pool_bool_exp"] | Variable<any, string>
};
	["bigint"]:unknown;
	/** Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'. */
["bigint_comparison_exp"]: {
	_eq?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	_gt?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	_gte?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	_in?: Array<ValueTypes["bigint"]> | undefined | null | Variable<any, string>,
	_is_null?: boolean | undefined | null | Variable<any, string>,
	_lt?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	_lte?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	_neq?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	_nin?: Array<ValueTypes["bigint"]> | undefined | null | Variable<any, string>
};
	["bytea"]:unknown;
	/** Boolean expression to compare columns of type "bytea". All fields are combined with logical 'AND'. */
["bytea_comparison_exp"]: {
	_eq?: ValueTypes["bytea"] | undefined | null | Variable<any, string>,
	_gt?: ValueTypes["bytea"] | undefined | null | Variable<any, string>,
	_gte?: ValueTypes["bytea"] | undefined | null | Variable<any, string>,
	_in?: Array<ValueTypes["bytea"]> | undefined | null | Variable<any, string>,
	_is_null?: boolean | undefined | null | Variable<any, string>,
	_lt?: ValueTypes["bytea"] | undefined | null | Variable<any, string>,
	_lte?: ValueTypes["bytea"] | undefined | null | Variable<any, string>,
	_neq?: ValueTypes["bytea"] | undefined | null | Variable<any, string>,
	_nin?: Array<ValueTypes["bytea"]> | undefined | null | Variable<any, string>
};
	/** ordering argument of a cursor */
["cursor_ordering"]:cursor_ordering;
	["date"]:unknown;
	/** Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'. */
["date_comparison_exp"]: {
	_eq?: ValueTypes["date"] | undefined | null | Variable<any, string>,
	_gt?: ValueTypes["date"] | undefined | null | Variable<any, string>,
	_gte?: ValueTypes["date"] | undefined | null | Variable<any, string>,
	_in?: Array<ValueTypes["date"]> | undefined | null | Variable<any, string>,
	_is_null?: boolean | undefined | null | Variable<any, string>,
	_lt?: ValueTypes["date"] | undefined | null | Variable<any, string>,
	_lte?: ValueTypes["date"] | undefined | null | Variable<any, string>,
	_neq?: ValueTypes["date"] | undefined | null | Variable<any, string>,
	_nin?: Array<ValueTypes["date"]> | undefined | null | Variable<any, string>
};
	/** columns and relationships of "e_match_map_status" */
["e_match_map_status"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "e_match_map_status" */
["e_match_map_status_aggregate"]: AliasType<{
	aggregate?:ValueTypes["e_match_map_status_aggregate_fields"],
	nodes?:ValueTypes["e_match_map_status"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "e_match_map_status" */
["e_match_map_status_aggregate_fields"]: AliasType<{
count?: [{	columns?: Array<ValueTypes["e_match_map_status_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["e_match_map_status_max_fields"],
	min?:ValueTypes["e_match_map_status_min_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "e_match_map_status". All fields are combined with a logical 'AND'. */
["e_match_map_status_bool_exp"]: {
	_and?: Array<ValueTypes["e_match_map_status_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["e_match_map_status_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["e_match_map_status_bool_exp"]> | undefined | null | Variable<any, string>,
	description?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	value?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "e_match_map_status" */
["e_match_map_status_constraint"]:e_match_map_status_constraint;
	["e_match_map_status_enum"]:e_match_map_status_enum;
	/** Boolean expression to compare columns of type "e_match_map_status_enum". All fields are combined with logical 'AND'. */
["e_match_map_status_enum_comparison_exp"]: {
	_eq?: ValueTypes["e_match_map_status_enum"] | undefined | null | Variable<any, string>,
	_in?: Array<ValueTypes["e_match_map_status_enum"]> | undefined | null | Variable<any, string>,
	_is_null?: boolean | undefined | null | Variable<any, string>,
	_neq?: ValueTypes["e_match_map_status_enum"] | undefined | null | Variable<any, string>,
	_nin?: Array<ValueTypes["e_match_map_status_enum"]> | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "e_match_map_status" */
["e_match_map_status_insert_input"]: {
	description?: string | undefined | null | Variable<any, string>,
	value?: string | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["e_match_map_status_max_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["e_match_map_status_min_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "e_match_map_status" */
["e_match_map_status_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["e_match_map_status"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "e_match_map_status" */
["e_match_map_status_obj_rel_insert_input"]: {
	data: ValueTypes["e_match_map_status_insert_input"] | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["e_match_map_status_on_conflict"] | undefined | null | Variable<any, string>
};
	/** on_conflict condition type for table "e_match_map_status" */
["e_match_map_status_on_conflict"]: {
	constraint: ValueTypes["e_match_map_status_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["e_match_map_status_update_column"]> | Variable<any, string>,
	where?: ValueTypes["e_match_map_status_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "e_match_map_status". */
["e_match_map_status_order_by"]: {
	description?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	value?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: e_match_map_status */
["e_match_map_status_pk_columns_input"]: {
	value: string | Variable<any, string>
};
	/** select columns of table "e_match_map_status" */
["e_match_map_status_select_column"]:e_match_map_status_select_column;
	/** input type for updating data in table "e_match_map_status" */
["e_match_map_status_set_input"]: {
	description?: string | undefined | null | Variable<any, string>,
	value?: string | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "e_match_map_status" */
["e_match_map_status_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["e_match_map_status_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["e_match_map_status_stream_cursor_value_input"]: {
	description?: string | undefined | null | Variable<any, string>,
	value?: string | undefined | null | Variable<any, string>
};
	/** update columns of table "e_match_map_status" */
["e_match_map_status_update_column"]:e_match_map_status_update_column;
	["e_match_map_status_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["e_match_map_status_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["e_match_map_status_bool_exp"] | Variable<any, string>
};
	/** columns and relationships of "e_match_status" */
["e_match_status"]: AliasType<{
	description?:boolean | `@${string}`,
matches?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["matches_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["matches_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["matches_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["matches"]],
matches_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["matches_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["matches_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["matches_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["matches_aggregate"]],
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "e_match_status" */
["e_match_status_aggregate"]: AliasType<{
	aggregate?:ValueTypes["e_match_status_aggregate_fields"],
	nodes?:ValueTypes["e_match_status"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "e_match_status" */
["e_match_status_aggregate_fields"]: AliasType<{
count?: [{	columns?: Array<ValueTypes["e_match_status_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["e_match_status_max_fields"],
	min?:ValueTypes["e_match_status_min_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "e_match_status". All fields are combined with a logical 'AND'. */
["e_match_status_bool_exp"]: {
	_and?: Array<ValueTypes["e_match_status_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["e_match_status_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["e_match_status_bool_exp"]> | undefined | null | Variable<any, string>,
	description?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	matches?: ValueTypes["matches_bool_exp"] | undefined | null | Variable<any, string>,
	matches_aggregate?: ValueTypes["matches_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	value?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "e_match_status" */
["e_match_status_constraint"]:e_match_status_constraint;
	["e_match_status_enum"]:e_match_status_enum;
	/** Boolean expression to compare columns of type "e_match_status_enum". All fields are combined with logical 'AND'. */
["e_match_status_enum_comparison_exp"]: {
	_eq?: ValueTypes["e_match_status_enum"] | undefined | null | Variable<any, string>,
	_in?: Array<ValueTypes["e_match_status_enum"]> | undefined | null | Variable<any, string>,
	_is_null?: boolean | undefined | null | Variable<any, string>,
	_neq?: ValueTypes["e_match_status_enum"] | undefined | null | Variable<any, string>,
	_nin?: Array<ValueTypes["e_match_status_enum"]> | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "e_match_status" */
["e_match_status_insert_input"]: {
	description?: string | undefined | null | Variable<any, string>,
	matches?: ValueTypes["matches_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	value?: string | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["e_match_status_max_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["e_match_status_min_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "e_match_status" */
["e_match_status_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["e_match_status"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "e_match_status" */
["e_match_status_obj_rel_insert_input"]: {
	data: ValueTypes["e_match_status_insert_input"] | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["e_match_status_on_conflict"] | undefined | null | Variable<any, string>
};
	/** on_conflict condition type for table "e_match_status" */
["e_match_status_on_conflict"]: {
	constraint: ValueTypes["e_match_status_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["e_match_status_update_column"]> | Variable<any, string>,
	where?: ValueTypes["e_match_status_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "e_match_status". */
["e_match_status_order_by"]: {
	description?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	matches_aggregate?: ValueTypes["matches_aggregate_order_by"] | undefined | null | Variable<any, string>,
	value?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: e_match_status */
["e_match_status_pk_columns_input"]: {
	value: string | Variable<any, string>
};
	/** select columns of table "e_match_status" */
["e_match_status_select_column"]:e_match_status_select_column;
	/** input type for updating data in table "e_match_status" */
["e_match_status_set_input"]: {
	description?: string | undefined | null | Variable<any, string>,
	value?: string | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "e_match_status" */
["e_match_status_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["e_match_status_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["e_match_status_stream_cursor_value_input"]: {
	description?: string | undefined | null | Variable<any, string>,
	value?: string | undefined | null | Variable<any, string>
};
	/** update columns of table "e_match_status" */
["e_match_status_update_column"]:e_match_status_update_column;
	["e_match_status_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["e_match_status_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["e_match_status_bool_exp"] | Variable<any, string>
};
	/** columns and relationships of "e_match_types" */
["e_match_types"]: AliasType<{
	description?:boolean | `@${string}`,
maps?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["maps_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["maps_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["maps_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["maps"]],
maps_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["maps_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["maps_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["maps_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["maps_aggregate"]],
matches?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["matches_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["matches_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["matches_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["matches"]],
matches_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["matches_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["matches_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["matches_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["matches_aggregate"]],
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "e_match_types" */
["e_match_types_aggregate"]: AliasType<{
	aggregate?:ValueTypes["e_match_types_aggregate_fields"],
	nodes?:ValueTypes["e_match_types"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "e_match_types" */
["e_match_types_aggregate_fields"]: AliasType<{
count?: [{	columns?: Array<ValueTypes["e_match_types_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["e_match_types_max_fields"],
	min?:ValueTypes["e_match_types_min_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "e_match_types". All fields are combined with a logical 'AND'. */
["e_match_types_bool_exp"]: {
	_and?: Array<ValueTypes["e_match_types_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["e_match_types_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["e_match_types_bool_exp"]> | undefined | null | Variable<any, string>,
	description?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	maps?: ValueTypes["maps_bool_exp"] | undefined | null | Variable<any, string>,
	maps_aggregate?: ValueTypes["maps_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	matches?: ValueTypes["matches_bool_exp"] | undefined | null | Variable<any, string>,
	matches_aggregate?: ValueTypes["matches_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	value?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "e_match_types" */
["e_match_types_constraint"]:e_match_types_constraint;
	["e_match_types_enum"]:e_match_types_enum;
	/** Boolean expression to compare columns of type "e_match_types_enum". All fields are combined with logical 'AND'. */
["e_match_types_enum_comparison_exp"]: {
	_eq?: ValueTypes["e_match_types_enum"] | undefined | null | Variable<any, string>,
	_in?: Array<ValueTypes["e_match_types_enum"]> | undefined | null | Variable<any, string>,
	_is_null?: boolean | undefined | null | Variable<any, string>,
	_neq?: ValueTypes["e_match_types_enum"] | undefined | null | Variable<any, string>,
	_nin?: Array<ValueTypes["e_match_types_enum"]> | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "e_match_types" */
["e_match_types_insert_input"]: {
	description?: string | undefined | null | Variable<any, string>,
	maps?: ValueTypes["maps_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	matches?: ValueTypes["matches_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	value?: string | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["e_match_types_max_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["e_match_types_min_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "e_match_types" */
["e_match_types_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["e_match_types"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "e_match_types" */
["e_match_types_obj_rel_insert_input"]: {
	data: ValueTypes["e_match_types_insert_input"] | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["e_match_types_on_conflict"] | undefined | null | Variable<any, string>
};
	/** on_conflict condition type for table "e_match_types" */
["e_match_types_on_conflict"]: {
	constraint: ValueTypes["e_match_types_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["e_match_types_update_column"]> | Variable<any, string>,
	where?: ValueTypes["e_match_types_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "e_match_types". */
["e_match_types_order_by"]: {
	description?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	maps_aggregate?: ValueTypes["maps_aggregate_order_by"] | undefined | null | Variable<any, string>,
	matches_aggregate?: ValueTypes["matches_aggregate_order_by"] | undefined | null | Variable<any, string>,
	value?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: e_match_types */
["e_match_types_pk_columns_input"]: {
	value: string | Variable<any, string>
};
	/** select columns of table "e_match_types" */
["e_match_types_select_column"]:e_match_types_select_column;
	/** input type for updating data in table "e_match_types" */
["e_match_types_set_input"]: {
	description?: string | undefined | null | Variable<any, string>,
	value?: string | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "e_match_types" */
["e_match_types_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["e_match_types_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["e_match_types_stream_cursor_value_input"]: {
	description?: string | undefined | null | Variable<any, string>,
	value?: string | undefined | null | Variable<any, string>
};
	/** update columns of table "e_match_types" */
["e_match_types_update_column"]:e_match_types_update_column;
	["e_match_types_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["e_match_types_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["e_match_types_bool_exp"] | Variable<any, string>
};
	/** columns and relationships of "e_objective_types" */
["e_objective_types"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "e_objective_types" */
["e_objective_types_aggregate"]: AliasType<{
	aggregate?:ValueTypes["e_objective_types_aggregate_fields"],
	nodes?:ValueTypes["e_objective_types"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "e_objective_types" */
["e_objective_types_aggregate_fields"]: AliasType<{
count?: [{	columns?: Array<ValueTypes["e_objective_types_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["e_objective_types_max_fields"],
	min?:ValueTypes["e_objective_types_min_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "e_objective_types". All fields are combined with a logical 'AND'. */
["e_objective_types_bool_exp"]: {
	_and?: Array<ValueTypes["e_objective_types_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["e_objective_types_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["e_objective_types_bool_exp"]> | undefined | null | Variable<any, string>,
	description?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	value?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "e_objective_types" */
["e_objective_types_constraint"]:e_objective_types_constraint;
	["e_objective_types_enum"]:e_objective_types_enum;
	/** Boolean expression to compare columns of type "e_objective_types_enum". All fields are combined with logical 'AND'. */
["e_objective_types_enum_comparison_exp"]: {
	_eq?: ValueTypes["e_objective_types_enum"] | undefined | null | Variable<any, string>,
	_in?: Array<ValueTypes["e_objective_types_enum"]> | undefined | null | Variable<any, string>,
	_is_null?: boolean | undefined | null | Variable<any, string>,
	_neq?: ValueTypes["e_objective_types_enum"] | undefined | null | Variable<any, string>,
	_nin?: Array<ValueTypes["e_objective_types_enum"]> | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "e_objective_types" */
["e_objective_types_insert_input"]: {
	description?: string | undefined | null | Variable<any, string>,
	value?: string | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["e_objective_types_max_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["e_objective_types_min_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "e_objective_types" */
["e_objective_types_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["e_objective_types"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "e_objective_types" */
["e_objective_types_on_conflict"]: {
	constraint: ValueTypes["e_objective_types_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["e_objective_types_update_column"]> | Variable<any, string>,
	where?: ValueTypes["e_objective_types_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "e_objective_types". */
["e_objective_types_order_by"]: {
	description?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	value?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: e_objective_types */
["e_objective_types_pk_columns_input"]: {
	value: string | Variable<any, string>
};
	/** select columns of table "e_objective_types" */
["e_objective_types_select_column"]:e_objective_types_select_column;
	/** input type for updating data in table "e_objective_types" */
["e_objective_types_set_input"]: {
	description?: string | undefined | null | Variable<any, string>,
	value?: string | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "e_objective_types" */
["e_objective_types_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["e_objective_types_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["e_objective_types_stream_cursor_value_input"]: {
	description?: string | undefined | null | Variable<any, string>,
	value?: string | undefined | null | Variable<any, string>
};
	/** update columns of table "e_objective_types" */
["e_objective_types_update_column"]:e_objective_types_update_column;
	["e_objective_types_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["e_objective_types_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["e_objective_types_bool_exp"] | Variable<any, string>
};
	/** columns and relationships of "e_sides" */
["e_sides"]: AliasType<{
	description?:boolean | `@${string}`,
match_map_lineup_1?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_maps_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_maps_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_maps_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_maps"]],
match_map_lineup_1_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_maps_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_maps_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_maps_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_maps_aggregate"]],
match_map_lineup_2?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_maps_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_maps_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_maps_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_maps"]],
match_map_lineup_2_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_maps_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_maps_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_maps_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_maps_aggregate"]],
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "e_sides" */
["e_sides_aggregate"]: AliasType<{
	aggregate?:ValueTypes["e_sides_aggregate_fields"],
	nodes?:ValueTypes["e_sides"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "e_sides" */
["e_sides_aggregate_fields"]: AliasType<{
count?: [{	columns?: Array<ValueTypes["e_sides_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["e_sides_max_fields"],
	min?:ValueTypes["e_sides_min_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "e_sides". All fields are combined with a logical 'AND'. */
["e_sides_bool_exp"]: {
	_and?: Array<ValueTypes["e_sides_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["e_sides_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["e_sides_bool_exp"]> | undefined | null | Variable<any, string>,
	description?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	match_map_lineup_1?: ValueTypes["match_maps_bool_exp"] | undefined | null | Variable<any, string>,
	match_map_lineup_1_aggregate?: ValueTypes["match_maps_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	match_map_lineup_2?: ValueTypes["match_maps_bool_exp"] | undefined | null | Variable<any, string>,
	match_map_lineup_2_aggregate?: ValueTypes["match_maps_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	value?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "e_sides" */
["e_sides_constraint"]:e_sides_constraint;
	["e_sides_enum"]:e_sides_enum;
	/** Boolean expression to compare columns of type "e_sides_enum". All fields are combined with logical 'AND'. */
["e_sides_enum_comparison_exp"]: {
	_eq?: ValueTypes["e_sides_enum"] | undefined | null | Variable<any, string>,
	_in?: Array<ValueTypes["e_sides_enum"]> | undefined | null | Variable<any, string>,
	_is_null?: boolean | undefined | null | Variable<any, string>,
	_neq?: ValueTypes["e_sides_enum"] | undefined | null | Variable<any, string>,
	_nin?: Array<ValueTypes["e_sides_enum"]> | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "e_sides" */
["e_sides_insert_input"]: {
	description?: string | undefined | null | Variable<any, string>,
	match_map_lineup_1?: ValueTypes["match_maps_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	match_map_lineup_2?: ValueTypes["match_maps_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	value?: string | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["e_sides_max_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["e_sides_min_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "e_sides" */
["e_sides_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["e_sides"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "e_sides" */
["e_sides_on_conflict"]: {
	constraint: ValueTypes["e_sides_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["e_sides_update_column"]> | Variable<any, string>,
	where?: ValueTypes["e_sides_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "e_sides". */
["e_sides_order_by"]: {
	description?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_map_lineup_1_aggregate?: ValueTypes["match_maps_aggregate_order_by"] | undefined | null | Variable<any, string>,
	match_map_lineup_2_aggregate?: ValueTypes["match_maps_aggregate_order_by"] | undefined | null | Variable<any, string>,
	value?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: e_sides */
["e_sides_pk_columns_input"]: {
	value: string | Variable<any, string>
};
	/** select columns of table "e_sides" */
["e_sides_select_column"]:e_sides_select_column;
	/** input type for updating data in table "e_sides" */
["e_sides_set_input"]: {
	description?: string | undefined | null | Variable<any, string>,
	value?: string | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "e_sides" */
["e_sides_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["e_sides_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["e_sides_stream_cursor_value_input"]: {
	description?: string | undefined | null | Variable<any, string>,
	value?: string | undefined | null | Variable<any, string>
};
	/** update columns of table "e_sides" */
["e_sides_update_column"]:e_sides_update_column;
	["e_sides_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["e_sides_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["e_sides_bool_exp"] | Variable<any, string>
};
	/** columns and relationships of "e_team_roles" */
["e_team_roles"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "e_team_roles" */
["e_team_roles_aggregate"]: AliasType<{
	aggregate?:ValueTypes["e_team_roles_aggregate_fields"],
	nodes?:ValueTypes["e_team_roles"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "e_team_roles" */
["e_team_roles_aggregate_fields"]: AliasType<{
count?: [{	columns?: Array<ValueTypes["e_team_roles_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["e_team_roles_max_fields"],
	min?:ValueTypes["e_team_roles_min_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "e_team_roles". All fields are combined with a logical 'AND'. */
["e_team_roles_bool_exp"]: {
	_and?: Array<ValueTypes["e_team_roles_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["e_team_roles_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["e_team_roles_bool_exp"]> | undefined | null | Variable<any, string>,
	description?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	value?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "e_team_roles" */
["e_team_roles_constraint"]:e_team_roles_constraint;
	["e_team_roles_enum"]:e_team_roles_enum;
	/** Boolean expression to compare columns of type "e_team_roles_enum". All fields are combined with logical 'AND'. */
["e_team_roles_enum_comparison_exp"]: {
	_eq?: ValueTypes["e_team_roles_enum"] | undefined | null | Variable<any, string>,
	_in?: Array<ValueTypes["e_team_roles_enum"]> | undefined | null | Variable<any, string>,
	_is_null?: boolean | undefined | null | Variable<any, string>,
	_neq?: ValueTypes["e_team_roles_enum"] | undefined | null | Variable<any, string>,
	_nin?: Array<ValueTypes["e_team_roles_enum"]> | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "e_team_roles" */
["e_team_roles_insert_input"]: {
	description?: string | undefined | null | Variable<any, string>,
	value?: string | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["e_team_roles_max_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["e_team_roles_min_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "e_team_roles" */
["e_team_roles_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["e_team_roles"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "e_team_roles" */
["e_team_roles_on_conflict"]: {
	constraint: ValueTypes["e_team_roles_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["e_team_roles_update_column"]> | Variable<any, string>,
	where?: ValueTypes["e_team_roles_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "e_team_roles". */
["e_team_roles_order_by"]: {
	description?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	value?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: e_team_roles */
["e_team_roles_pk_columns_input"]: {
	value: string | Variable<any, string>
};
	/** select columns of table "e_team_roles" */
["e_team_roles_select_column"]:e_team_roles_select_column;
	/** input type for updating data in table "e_team_roles" */
["e_team_roles_set_input"]: {
	description?: string | undefined | null | Variable<any, string>,
	value?: string | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "e_team_roles" */
["e_team_roles_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["e_team_roles_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["e_team_roles_stream_cursor_value_input"]: {
	description?: string | undefined | null | Variable<any, string>,
	value?: string | undefined | null | Variable<any, string>
};
	/** update columns of table "e_team_roles" */
["e_team_roles_update_column"]:e_team_roles_update_column;
	["e_team_roles_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["e_team_roles_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["e_team_roles_bool_exp"] | Variable<any, string>
};
	/** columns and relationships of "e_timeout_settings" */
["e_timeout_settings"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "e_timeout_settings" */
["e_timeout_settings_aggregate"]: AliasType<{
	aggregate?:ValueTypes["e_timeout_settings_aggregate_fields"],
	nodes?:ValueTypes["e_timeout_settings"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "e_timeout_settings" */
["e_timeout_settings_aggregate_fields"]: AliasType<{
count?: [{	columns?: Array<ValueTypes["e_timeout_settings_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["e_timeout_settings_max_fields"],
	min?:ValueTypes["e_timeout_settings_min_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "e_timeout_settings". All fields are combined with a logical 'AND'. */
["e_timeout_settings_bool_exp"]: {
	_and?: Array<ValueTypes["e_timeout_settings_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["e_timeout_settings_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["e_timeout_settings_bool_exp"]> | undefined | null | Variable<any, string>,
	description?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	value?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "e_timeout_settings" */
["e_timeout_settings_constraint"]:e_timeout_settings_constraint;
	["e_timeout_settings_enum"]:e_timeout_settings_enum;
	/** Boolean expression to compare columns of type "e_timeout_settings_enum". All fields are combined with logical 'AND'. */
["e_timeout_settings_enum_comparison_exp"]: {
	_eq?: ValueTypes["e_timeout_settings_enum"] | undefined | null | Variable<any, string>,
	_in?: Array<ValueTypes["e_timeout_settings_enum"]> | undefined | null | Variable<any, string>,
	_is_null?: boolean | undefined | null | Variable<any, string>,
	_neq?: ValueTypes["e_timeout_settings_enum"] | undefined | null | Variable<any, string>,
	_nin?: Array<ValueTypes["e_timeout_settings_enum"]> | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "e_timeout_settings" */
["e_timeout_settings_insert_input"]: {
	description?: string | undefined | null | Variable<any, string>,
	value?: string | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["e_timeout_settings_max_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["e_timeout_settings_min_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "e_timeout_settings" */
["e_timeout_settings_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["e_timeout_settings"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "e_timeout_settings" */
["e_timeout_settings_on_conflict"]: {
	constraint: ValueTypes["e_timeout_settings_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["e_timeout_settings_update_column"]> | Variable<any, string>,
	where?: ValueTypes["e_timeout_settings_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "e_timeout_settings". */
["e_timeout_settings_order_by"]: {
	description?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	value?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: e_timeout_settings */
["e_timeout_settings_pk_columns_input"]: {
	value: string | Variable<any, string>
};
	/** select columns of table "e_timeout_settings" */
["e_timeout_settings_select_column"]:e_timeout_settings_select_column;
	/** input type for updating data in table "e_timeout_settings" */
["e_timeout_settings_set_input"]: {
	description?: string | undefined | null | Variable<any, string>,
	value?: string | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "e_timeout_settings" */
["e_timeout_settings_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["e_timeout_settings_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["e_timeout_settings_stream_cursor_value_input"]: {
	description?: string | undefined | null | Variable<any, string>,
	value?: string | undefined | null | Variable<any, string>
};
	/** update columns of table "e_timeout_settings" */
["e_timeout_settings_update_column"]:e_timeout_settings_update_column;
	["e_timeout_settings_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["e_timeout_settings_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["e_timeout_settings_bool_exp"] | Variable<any, string>
};
	/** columns and relationships of "e_utility_types" */
["e_utility_types"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "e_utility_types" */
["e_utility_types_aggregate"]: AliasType<{
	aggregate?:ValueTypes["e_utility_types_aggregate_fields"],
	nodes?:ValueTypes["e_utility_types"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "e_utility_types" */
["e_utility_types_aggregate_fields"]: AliasType<{
count?: [{	columns?: Array<ValueTypes["e_utility_types_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["e_utility_types_max_fields"],
	min?:ValueTypes["e_utility_types_min_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "e_utility_types". All fields are combined with a logical 'AND'. */
["e_utility_types_bool_exp"]: {
	_and?: Array<ValueTypes["e_utility_types_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["e_utility_types_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["e_utility_types_bool_exp"]> | undefined | null | Variable<any, string>,
	description?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	value?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "e_utility_types" */
["e_utility_types_constraint"]:e_utility_types_constraint;
	["e_utility_types_enum"]:e_utility_types_enum;
	/** Boolean expression to compare columns of type "e_utility_types_enum". All fields are combined with logical 'AND'. */
["e_utility_types_enum_comparison_exp"]: {
	_eq?: ValueTypes["e_utility_types_enum"] | undefined | null | Variable<any, string>,
	_in?: Array<ValueTypes["e_utility_types_enum"]> | undefined | null | Variable<any, string>,
	_is_null?: boolean | undefined | null | Variable<any, string>,
	_neq?: ValueTypes["e_utility_types_enum"] | undefined | null | Variable<any, string>,
	_nin?: Array<ValueTypes["e_utility_types_enum"]> | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "e_utility_types" */
["e_utility_types_insert_input"]: {
	description?: string | undefined | null | Variable<any, string>,
	value?: string | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["e_utility_types_max_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["e_utility_types_min_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "e_utility_types" */
["e_utility_types_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["e_utility_types"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "e_utility_types" */
["e_utility_types_on_conflict"]: {
	constraint: ValueTypes["e_utility_types_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["e_utility_types_update_column"]> | Variable<any, string>,
	where?: ValueTypes["e_utility_types_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "e_utility_types". */
["e_utility_types_order_by"]: {
	description?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	value?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: e_utility_types */
["e_utility_types_pk_columns_input"]: {
	value: string | Variable<any, string>
};
	/** select columns of table "e_utility_types" */
["e_utility_types_select_column"]:e_utility_types_select_column;
	/** input type for updating data in table "e_utility_types" */
["e_utility_types_set_input"]: {
	description?: string | undefined | null | Variable<any, string>,
	value?: string | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "e_utility_types" */
["e_utility_types_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["e_utility_types_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["e_utility_types_stream_cursor_value_input"]: {
	description?: string | undefined | null | Variable<any, string>,
	value?: string | undefined | null | Variable<any, string>
};
	/** update columns of table "e_utility_types" */
["e_utility_types_update_column"]:e_utility_types_update_column;
	["e_utility_types_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["e_utility_types_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["e_utility_types_bool_exp"] | Variable<any, string>
};
	/** columns and relationships of "e_veto_pick_types" */
["e_veto_pick_types"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "e_veto_pick_types" */
["e_veto_pick_types_aggregate"]: AliasType<{
	aggregate?:ValueTypes["e_veto_pick_types_aggregate_fields"],
	nodes?:ValueTypes["e_veto_pick_types"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "e_veto_pick_types" */
["e_veto_pick_types_aggregate_fields"]: AliasType<{
count?: [{	columns?: Array<ValueTypes["e_veto_pick_types_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["e_veto_pick_types_max_fields"],
	min?:ValueTypes["e_veto_pick_types_min_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "e_veto_pick_types". All fields are combined with a logical 'AND'. */
["e_veto_pick_types_bool_exp"]: {
	_and?: Array<ValueTypes["e_veto_pick_types_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["e_veto_pick_types_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["e_veto_pick_types_bool_exp"]> | undefined | null | Variable<any, string>,
	description?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	value?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "e_veto_pick_types" */
["e_veto_pick_types_constraint"]:e_veto_pick_types_constraint;
	["e_veto_pick_types_enum"]:e_veto_pick_types_enum;
	/** Boolean expression to compare columns of type "e_veto_pick_types_enum". All fields are combined with logical 'AND'. */
["e_veto_pick_types_enum_comparison_exp"]: {
	_eq?: ValueTypes["e_veto_pick_types_enum"] | undefined | null | Variable<any, string>,
	_in?: Array<ValueTypes["e_veto_pick_types_enum"]> | undefined | null | Variable<any, string>,
	_is_null?: boolean | undefined | null | Variable<any, string>,
	_neq?: ValueTypes["e_veto_pick_types_enum"] | undefined | null | Variable<any, string>,
	_nin?: Array<ValueTypes["e_veto_pick_types_enum"]> | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "e_veto_pick_types" */
["e_veto_pick_types_insert_input"]: {
	description?: string | undefined | null | Variable<any, string>,
	value?: string | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["e_veto_pick_types_max_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["e_veto_pick_types_min_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "e_veto_pick_types" */
["e_veto_pick_types_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["e_veto_pick_types"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "e_veto_pick_types" */
["e_veto_pick_types_on_conflict"]: {
	constraint: ValueTypes["e_veto_pick_types_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["e_veto_pick_types_update_column"]> | Variable<any, string>,
	where?: ValueTypes["e_veto_pick_types_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "e_veto_pick_types". */
["e_veto_pick_types_order_by"]: {
	description?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	value?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: e_veto_pick_types */
["e_veto_pick_types_pk_columns_input"]: {
	value: string | Variable<any, string>
};
	/** select columns of table "e_veto_pick_types" */
["e_veto_pick_types_select_column"]:e_veto_pick_types_select_column;
	/** input type for updating data in table "e_veto_pick_types" */
["e_veto_pick_types_set_input"]: {
	description?: string | undefined | null | Variable<any, string>,
	value?: string | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "e_veto_pick_types" */
["e_veto_pick_types_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["e_veto_pick_types_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["e_veto_pick_types_stream_cursor_value_input"]: {
	description?: string | undefined | null | Variable<any, string>,
	value?: string | undefined | null | Variable<any, string>
};
	/** update columns of table "e_veto_pick_types" */
["e_veto_pick_types_update_column"]:e_veto_pick_types_update_column;
	["e_veto_pick_types_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["e_veto_pick_types_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["e_veto_pick_types_bool_exp"] | Variable<any, string>
};
	["jsonb"]:unknown;
	["jsonb_cast_exp"]: {
	String?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'. */
["jsonb_comparison_exp"]: {
	_cast?: ValueTypes["jsonb_cast_exp"] | undefined | null | Variable<any, string>,
	/** is the column contained in the given json value */
	_contained_in?: ValueTypes["jsonb"] | undefined | null | Variable<any, string>,
	/** does the column contain the given json value at the top level */
	_contains?: ValueTypes["jsonb"] | undefined | null | Variable<any, string>,
	_eq?: ValueTypes["jsonb"] | undefined | null | Variable<any, string>,
	_gt?: ValueTypes["jsonb"] | undefined | null | Variable<any, string>,
	_gte?: ValueTypes["jsonb"] | undefined | null | Variable<any, string>,
	/** does the string exist as a top-level key in the column */
	_has_key?: string | undefined | null | Variable<any, string>,
	/** do all of these strings exist as top-level keys in the column */
	_has_keys_all?: Array<string> | undefined | null | Variable<any, string>,
	/** do any of these strings exist as top-level keys in the column */
	_has_keys_any?: Array<string> | undefined | null | Variable<any, string>,
	_in?: Array<ValueTypes["jsonb"]> | undefined | null | Variable<any, string>,
	_is_null?: boolean | undefined | null | Variable<any, string>,
	_lt?: ValueTypes["jsonb"] | undefined | null | Variable<any, string>,
	_lte?: ValueTypes["jsonb"] | undefined | null | Variable<any, string>,
	_neq?: ValueTypes["jsonb"] | undefined | null | Variable<any, string>,
	_nin?: Array<ValueTypes["jsonb"]> | undefined | null | Variable<any, string>
};
	/** columns and relationships of "map_pools" */
["map_pools"]: AliasType<{
	enabled?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	label?:boolean | `@${string}`,
maps?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_pool_maps_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_pool_maps_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_pool_maps_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_pool_maps"]],
maps_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_pool_maps_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_pool_maps_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_pool_maps_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_pool_maps_aggregate"]],
matches?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["matches_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["matches_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["matches_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["matches"]],
matches_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["matches_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["matches_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["matches_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["matches_aggregate"]],
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "map_pools" */
["map_pools_aggregate"]: AliasType<{
	aggregate?:ValueTypes["map_pools_aggregate_fields"],
	nodes?:ValueTypes["map_pools"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "map_pools" */
["map_pools_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["map_pools_avg_fields"],
count?: [{	columns?: Array<ValueTypes["map_pools_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["map_pools_max_fields"],
	min?:ValueTypes["map_pools_min_fields"],
	stddev?:ValueTypes["map_pools_stddev_fields"],
	stddev_pop?:ValueTypes["map_pools_stddev_pop_fields"],
	stddev_samp?:ValueTypes["map_pools_stddev_samp_fields"],
	sum?:ValueTypes["map_pools_sum_fields"],
	var_pop?:ValueTypes["map_pools_var_pop_fields"],
	var_samp?:ValueTypes["map_pools_var_samp_fields"],
	variance?:ValueTypes["map_pools_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate avg on columns */
["map_pools_avg_fields"]: AliasType<{
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "map_pools". All fields are combined with a logical 'AND'. */
["map_pools_bool_exp"]: {
	_and?: Array<ValueTypes["map_pools_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["map_pools_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["map_pools_bool_exp"]> | undefined | null | Variable<any, string>,
	enabled?: ValueTypes["Boolean_comparison_exp"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	label?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	maps?: ValueTypes["v_pool_maps_bool_exp"] | undefined | null | Variable<any, string>,
	maps_aggregate?: ValueTypes["v_pool_maps_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	matches?: ValueTypes["matches_bool_exp"] | undefined | null | Variable<any, string>,
	matches_aggregate?: ValueTypes["matches_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	owner_steam_id?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "map_pools" */
["map_pools_constraint"]:map_pools_constraint;
	/** input type for incrementing numeric columns in table "map_pools" */
["map_pools_inc_input"]: {
	owner_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "map_pools" */
["map_pools_insert_input"]: {
	enabled?: boolean | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	label?: string | undefined | null | Variable<any, string>,
	maps?: ValueTypes["v_pool_maps_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	matches?: ValueTypes["matches_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	owner_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["map_pools_max_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	label?:boolean | `@${string}`,
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["map_pools_min_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	label?:boolean | `@${string}`,
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "map_pools" */
["map_pools_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["map_pools"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "map_pools" */
["map_pools_obj_rel_insert_input"]: {
	data: ValueTypes["map_pools_insert_input"] | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["map_pools_on_conflict"] | undefined | null | Variable<any, string>
};
	/** on_conflict condition type for table "map_pools" */
["map_pools_on_conflict"]: {
	constraint: ValueTypes["map_pools_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["map_pools_update_column"]> | Variable<any, string>,
	where?: ValueTypes["map_pools_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "map_pools". */
["map_pools_order_by"]: {
	enabled?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	label?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	maps_aggregate?: ValueTypes["v_pool_maps_aggregate_order_by"] | undefined | null | Variable<any, string>,
	matches_aggregate?: ValueTypes["matches_aggregate_order_by"] | undefined | null | Variable<any, string>,
	owner_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: map_pools */
["map_pools_pk_columns_input"]: {
	id: ValueTypes["uuid"] | Variable<any, string>
};
	/** select columns of table "map_pools" */
["map_pools_select_column"]:map_pools_select_column;
	/** input type for updating data in table "map_pools" */
["map_pools_set_input"]: {
	enabled?: boolean | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	label?: string | undefined | null | Variable<any, string>,
	owner_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["map_pools_stddev_fields"]: AliasType<{
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_pop on columns */
["map_pools_stddev_pop_fields"]: AliasType<{
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_samp on columns */
["map_pools_stddev_samp_fields"]: AliasType<{
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Streaming cursor of the table "map_pools" */
["map_pools_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["map_pools_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["map_pools_stream_cursor_value_input"]: {
	enabled?: boolean | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	label?: string | undefined | null | Variable<any, string>,
	owner_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["map_pools_sum_fields"]: AliasType<{
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** update columns of table "map_pools" */
["map_pools_update_column"]:map_pools_update_column;
	["map_pools_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["map_pools_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["map_pools_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["map_pools_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["map_pools_var_pop_fields"]: AliasType<{
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate var_samp on columns */
["map_pools_var_samp_fields"]: AliasType<{
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate variance on columns */
["map_pools_variance_fields"]: AliasType<{
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** columns and relationships of "maps" */
["maps"]: AliasType<{
	active_pool?:boolean | `@${string}`,
	/** An object relationship */
	e_match_type?:ValueTypes["e_match_types"],
	id?:boolean | `@${string}`,
match_maps?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_maps_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_maps_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_maps_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_maps"]],
match_maps_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_maps_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_maps_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_maps_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_maps_aggregate"]],
match_veto_picks?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_veto_picks_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_veto_picks_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_veto_picks_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_veto_picks"]],
match_veto_picks_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_veto_picks_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_veto_picks_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_veto_picks_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_veto_picks_aggregate"]],
	name?:boolean | `@${string}`,
	type?:boolean | `@${string}`,
	workshop_map_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "maps" */
["maps_aggregate"]: AliasType<{
	aggregate?:ValueTypes["maps_aggregate_fields"],
	nodes?:ValueTypes["maps"],
		__typename?: boolean | `@${string}`
}>;
	["maps_aggregate_bool_exp"]: {
	bool_and?: ValueTypes["maps_aggregate_bool_exp_bool_and"] | undefined | null | Variable<any, string>,
	bool_or?: ValueTypes["maps_aggregate_bool_exp_bool_or"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["maps_aggregate_bool_exp_count"] | undefined | null | Variable<any, string>
};
	["maps_aggregate_bool_exp_bool_and"]: {
	arguments: ValueTypes["maps_select_column_maps_aggregate_bool_exp_bool_and_arguments_columns"] | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["maps_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Boolean_comparison_exp"] | Variable<any, string>
};
	["maps_aggregate_bool_exp_bool_or"]: {
	arguments: ValueTypes["maps_select_column_maps_aggregate_bool_exp_bool_or_arguments_columns"] | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["maps_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Boolean_comparison_exp"] | Variable<any, string>
};
	["maps_aggregate_bool_exp_count"]: {
	arguments?: Array<ValueTypes["maps_select_column"]> | undefined | null | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["maps_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Int_comparison_exp"] | Variable<any, string>
};
	/** aggregate fields of "maps" */
["maps_aggregate_fields"]: AliasType<{
count?: [{	columns?: Array<ValueTypes["maps_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["maps_max_fields"],
	min?:ValueTypes["maps_min_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "maps" */
["maps_aggregate_order_by"]: {
	count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["maps_max_order_by"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["maps_min_order_by"] | undefined | null | Variable<any, string>
};
	/** input type for inserting array relation for remote table "maps" */
["maps_arr_rel_insert_input"]: {
	data: Array<ValueTypes["maps_insert_input"]> | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["maps_on_conflict"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to filter rows from the table "maps". All fields are combined with a logical 'AND'. */
["maps_bool_exp"]: {
	_and?: Array<ValueTypes["maps_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["maps_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["maps_bool_exp"]> | undefined | null | Variable<any, string>,
	active_pool?: ValueTypes["Boolean_comparison_exp"] | undefined | null | Variable<any, string>,
	e_match_type?: ValueTypes["e_match_types_bool_exp"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	match_maps?: ValueTypes["match_maps_bool_exp"] | undefined | null | Variable<any, string>,
	match_maps_aggregate?: ValueTypes["match_maps_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	match_veto_picks?: ValueTypes["match_veto_picks_bool_exp"] | undefined | null | Variable<any, string>,
	match_veto_picks_aggregate?: ValueTypes["match_veto_picks_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	name?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	type?: ValueTypes["e_match_types_enum_comparison_exp"] | undefined | null | Variable<any, string>,
	workshop_map_id?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "maps" */
["maps_constraint"]:maps_constraint;
	/** input type for inserting data into table "maps" */
["maps_insert_input"]: {
	active_pool?: boolean | undefined | null | Variable<any, string>,
	e_match_type?: ValueTypes["e_match_types_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_maps?: ValueTypes["match_maps_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	match_veto_picks?: ValueTypes["match_veto_picks_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	name?: string | undefined | null | Variable<any, string>,
	type?: ValueTypes["e_match_types_enum"] | undefined | null | Variable<any, string>,
	workshop_map_id?: string | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["maps_max_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	workshop_map_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "maps" */
["maps_max_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	name?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	workshop_map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate min on columns */
["maps_min_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	workshop_map_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "maps" */
["maps_min_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	name?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	workshop_map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** response of any mutation on the table "maps" */
["maps_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["maps"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "maps" */
["maps_obj_rel_insert_input"]: {
	data: ValueTypes["maps_insert_input"] | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["maps_on_conflict"] | undefined | null | Variable<any, string>
};
	/** on_conflict condition type for table "maps" */
["maps_on_conflict"]: {
	constraint: ValueTypes["maps_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["maps_update_column"]> | Variable<any, string>,
	where?: ValueTypes["maps_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "maps". */
["maps_order_by"]: {
	active_pool?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	e_match_type?: ValueTypes["e_match_types_order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_maps_aggregate?: ValueTypes["match_maps_aggregate_order_by"] | undefined | null | Variable<any, string>,
	match_veto_picks_aggregate?: ValueTypes["match_veto_picks_aggregate_order_by"] | undefined | null | Variable<any, string>,
	name?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	type?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	workshop_map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: maps */
["maps_pk_columns_input"]: {
	id: ValueTypes["uuid"] | Variable<any, string>
};
	/** select columns of table "maps" */
["maps_select_column"]:maps_select_column;
	/** select "maps_aggregate_bool_exp_bool_and_arguments_columns" columns of table "maps" */
["maps_select_column_maps_aggregate_bool_exp_bool_and_arguments_columns"]:maps_select_column_maps_aggregate_bool_exp_bool_and_arguments_columns;
	/** select "maps_aggregate_bool_exp_bool_or_arguments_columns" columns of table "maps" */
["maps_select_column_maps_aggregate_bool_exp_bool_or_arguments_columns"]:maps_select_column_maps_aggregate_bool_exp_bool_or_arguments_columns;
	/** input type for updating data in table "maps" */
["maps_set_input"]: {
	active_pool?: boolean | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	name?: string | undefined | null | Variable<any, string>,
	type?: ValueTypes["e_match_types_enum"] | undefined | null | Variable<any, string>,
	workshop_map_id?: string | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "maps" */
["maps_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["maps_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["maps_stream_cursor_value_input"]: {
	active_pool?: boolean | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	name?: string | undefined | null | Variable<any, string>,
	type?: ValueTypes["e_match_types_enum"] | undefined | null | Variable<any, string>,
	workshop_map_id?: string | undefined | null | Variable<any, string>
};
	/** update columns of table "maps" */
["maps_update_column"]:maps_update_column;
	["maps_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["maps_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["maps_bool_exp"] | Variable<any, string>
};
	/** relational table for assigning a players to a match and lineup */
["match_lineup_players"]: AliasType<{
	captain?:boolean | `@${string}`,
	discord_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** An object relationship */
	lineup?:ValueTypes["match_lineups"],
	match_lineup_id?:boolean | `@${string}`,
	placeholder_name?:boolean | `@${string}`,
	/** An object relationship */
	player?:ValueTypes["players"],
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "match_lineup_players" */
["match_lineup_players_aggregate"]: AliasType<{
	aggregate?:ValueTypes["match_lineup_players_aggregate_fields"],
	nodes?:ValueTypes["match_lineup_players"],
		__typename?: boolean | `@${string}`
}>;
	["match_lineup_players_aggregate_bool_exp"]: {
	bool_and?: ValueTypes["match_lineup_players_aggregate_bool_exp_bool_and"] | undefined | null | Variable<any, string>,
	bool_or?: ValueTypes["match_lineup_players_aggregate_bool_exp_bool_or"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["match_lineup_players_aggregate_bool_exp_count"] | undefined | null | Variable<any, string>
};
	["match_lineup_players_aggregate_bool_exp_bool_and"]: {
	arguments: ValueTypes["match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_and_arguments_columns"] | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["match_lineup_players_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Boolean_comparison_exp"] | Variable<any, string>
};
	["match_lineup_players_aggregate_bool_exp_bool_or"]: {
	arguments: ValueTypes["match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_or_arguments_columns"] | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["match_lineup_players_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Boolean_comparison_exp"] | Variable<any, string>
};
	["match_lineup_players_aggregate_bool_exp_count"]: {
	arguments?: Array<ValueTypes["match_lineup_players_select_column"]> | undefined | null | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["match_lineup_players_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Int_comparison_exp"] | Variable<any, string>
};
	/** aggregate fields of "match_lineup_players" */
["match_lineup_players_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["match_lineup_players_avg_fields"],
count?: [{	columns?: Array<ValueTypes["match_lineup_players_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["match_lineup_players_max_fields"],
	min?:ValueTypes["match_lineup_players_min_fields"],
	stddev?:ValueTypes["match_lineup_players_stddev_fields"],
	stddev_pop?:ValueTypes["match_lineup_players_stddev_pop_fields"],
	stddev_samp?:ValueTypes["match_lineup_players_stddev_samp_fields"],
	sum?:ValueTypes["match_lineup_players_sum_fields"],
	var_pop?:ValueTypes["match_lineup_players_var_pop_fields"],
	var_samp?:ValueTypes["match_lineup_players_var_samp_fields"],
	variance?:ValueTypes["match_lineup_players_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "match_lineup_players" */
["match_lineup_players_aggregate_order_by"]: {
	avg?: ValueTypes["match_lineup_players_avg_order_by"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["match_lineup_players_max_order_by"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["match_lineup_players_min_order_by"] | undefined | null | Variable<any, string>,
	stddev?: ValueTypes["match_lineup_players_stddev_order_by"] | undefined | null | Variable<any, string>,
	stddev_pop?: ValueTypes["match_lineup_players_stddev_pop_order_by"] | undefined | null | Variable<any, string>,
	stddev_samp?: ValueTypes["match_lineup_players_stddev_samp_order_by"] | undefined | null | Variable<any, string>,
	sum?: ValueTypes["match_lineup_players_sum_order_by"] | undefined | null | Variable<any, string>,
	var_pop?: ValueTypes["match_lineup_players_var_pop_order_by"] | undefined | null | Variable<any, string>,
	var_samp?: ValueTypes["match_lineup_players_var_samp_order_by"] | undefined | null | Variable<any, string>,
	variance?: ValueTypes["match_lineup_players_variance_order_by"] | undefined | null | Variable<any, string>
};
	/** input type for inserting array relation for remote table "match_lineup_players" */
["match_lineup_players_arr_rel_insert_input"]: {
	data: Array<ValueTypes["match_lineup_players_insert_input"]> | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["match_lineup_players_on_conflict"] | undefined | null | Variable<any, string>
};
	/** aggregate avg on columns */
["match_lineup_players_avg_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "match_lineup_players" */
["match_lineup_players_avg_order_by"]: {
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to filter rows from the table "match_lineup_players". All fields are combined with a logical 'AND'. */
["match_lineup_players_bool_exp"]: {
	_and?: Array<ValueTypes["match_lineup_players_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["match_lineup_players_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["match_lineup_players_bool_exp"]> | undefined | null | Variable<any, string>,
	captain?: ValueTypes["Boolean_comparison_exp"] | undefined | null | Variable<any, string>,
	discord_id?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	lineup?: ValueTypes["match_lineups_bool_exp"] | undefined | null | Variable<any, string>,
	match_lineup_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	placeholder_name?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_bool_exp"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "match_lineup_players" */
["match_lineup_players_constraint"]:match_lineup_players_constraint;
	/** input type for incrementing numeric columns in table "match_lineup_players" */
["match_lineup_players_inc_input"]: {
	steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "match_lineup_players" */
["match_lineup_players_insert_input"]: {
	captain?: boolean | undefined | null | Variable<any, string>,
	discord_id?: string | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	lineup?: ValueTypes["match_lineups_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	match_lineup_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	placeholder_name?: string | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["match_lineup_players_max_fields"]: AliasType<{
	discord_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_lineup_id?:boolean | `@${string}`,
	placeholder_name?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "match_lineup_players" */
["match_lineup_players_max_order_by"]: {
	discord_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_lineup_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	placeholder_name?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate min on columns */
["match_lineup_players_min_fields"]: AliasType<{
	discord_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_lineup_id?:boolean | `@${string}`,
	placeholder_name?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "match_lineup_players" */
["match_lineup_players_min_order_by"]: {
	discord_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_lineup_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	placeholder_name?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** response of any mutation on the table "match_lineup_players" */
["match_lineup_players_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["match_lineup_players"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "match_lineup_players" */
["match_lineup_players_on_conflict"]: {
	constraint: ValueTypes["match_lineup_players_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["match_lineup_players_update_column"]> | Variable<any, string>,
	where?: ValueTypes["match_lineup_players_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "match_lineup_players". */
["match_lineup_players_order_by"]: {
	captain?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	discord_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup?: ValueTypes["match_lineups_order_by"] | undefined | null | Variable<any, string>,
	match_lineup_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	placeholder_name?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_order_by"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: match_lineup_players */
["match_lineup_players_pk_columns_input"]: {
	id: ValueTypes["uuid"] | Variable<any, string>
};
	/** select columns of table "match_lineup_players" */
["match_lineup_players_select_column"]:match_lineup_players_select_column;
	/** select "match_lineup_players_aggregate_bool_exp_bool_and_arguments_columns" columns of table "match_lineup_players" */
["match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_and_arguments_columns"]:match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_and_arguments_columns;
	/** select "match_lineup_players_aggregate_bool_exp_bool_or_arguments_columns" columns of table "match_lineup_players" */
["match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_or_arguments_columns"]:match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_or_arguments_columns;
	/** input type for updating data in table "match_lineup_players" */
["match_lineup_players_set_input"]: {
	captain?: boolean | undefined | null | Variable<any, string>,
	discord_id?: string | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_lineup_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	placeholder_name?: string | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["match_lineup_players_stddev_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "match_lineup_players" */
["match_lineup_players_stddev_order_by"]: {
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_pop on columns */
["match_lineup_players_stddev_pop_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "match_lineup_players" */
["match_lineup_players_stddev_pop_order_by"]: {
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_samp on columns */
["match_lineup_players_stddev_samp_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "match_lineup_players" */
["match_lineup_players_stddev_samp_order_by"]: {
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "match_lineup_players" */
["match_lineup_players_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["match_lineup_players_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["match_lineup_players_stream_cursor_value_input"]: {
	captain?: boolean | undefined | null | Variable<any, string>,
	discord_id?: string | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_lineup_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	placeholder_name?: string | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["match_lineup_players_sum_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "match_lineup_players" */
["match_lineup_players_sum_order_by"]: {
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** update columns of table "match_lineup_players" */
["match_lineup_players_update_column"]:match_lineup_players_update_column;
	["match_lineup_players_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["match_lineup_players_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["match_lineup_players_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["match_lineup_players_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["match_lineup_players_var_pop_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "match_lineup_players" */
["match_lineup_players_var_pop_order_by"]: {
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate var_samp on columns */
["match_lineup_players_var_samp_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "match_lineup_players" */
["match_lineup_players_var_samp_order_by"]: {
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate variance on columns */
["match_lineup_players_variance_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "match_lineup_players" */
["match_lineup_players_variance_order_by"]: {
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** relational table for assigning a team to a match and lineup */
["match_lineups"]: AliasType<{
	/** An object relationship */
	captain?:ValueTypes["v_match_captains"],
	/** An object relationship */
	coach?:ValueTypes["players"],
	coach_steam_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
lineup_players?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_lineup_players_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_lineup_players_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_lineup_players_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_lineup_players"]],
lineup_players_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_lineup_players_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_lineup_players_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_lineup_players_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_lineup_players_aggregate"]],
	/** An object relationship */
	match?:ValueTypes["matches"],
	match_id?:boolean | `@${string}`,
match_veto_picks?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_veto_picks_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_veto_picks_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_veto_picks_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_veto_picks"]],
match_veto_picks_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_veto_picks_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_veto_picks_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_veto_picks_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_veto_picks_aggregate"]],
	/** A computed field, executes function "get_team_name" */
	name?:boolean | `@${string}`,
	/** An object relationship */
	player?:ValueTypes["players"],
	/** An object relationship */
	team?:ValueTypes["teams"],
	team_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "match_lineups" */
["match_lineups_aggregate"]: AliasType<{
	aggregate?:ValueTypes["match_lineups_aggregate_fields"],
	nodes?:ValueTypes["match_lineups"],
		__typename?: boolean | `@${string}`
}>;
	["match_lineups_aggregate_bool_exp"]: {
	count?: ValueTypes["match_lineups_aggregate_bool_exp_count"] | undefined | null | Variable<any, string>
};
	["match_lineups_aggregate_bool_exp_count"]: {
	arguments?: Array<ValueTypes["match_lineups_select_column"]> | undefined | null | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["match_lineups_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Int_comparison_exp"] | Variable<any, string>
};
	/** aggregate fields of "match_lineups" */
["match_lineups_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["match_lineups_avg_fields"],
count?: [{	columns?: Array<ValueTypes["match_lineups_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["match_lineups_max_fields"],
	min?:ValueTypes["match_lineups_min_fields"],
	stddev?:ValueTypes["match_lineups_stddev_fields"],
	stddev_pop?:ValueTypes["match_lineups_stddev_pop_fields"],
	stddev_samp?:ValueTypes["match_lineups_stddev_samp_fields"],
	sum?:ValueTypes["match_lineups_sum_fields"],
	var_pop?:ValueTypes["match_lineups_var_pop_fields"],
	var_samp?:ValueTypes["match_lineups_var_samp_fields"],
	variance?:ValueTypes["match_lineups_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "match_lineups" */
["match_lineups_aggregate_order_by"]: {
	avg?: ValueTypes["match_lineups_avg_order_by"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["match_lineups_max_order_by"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["match_lineups_min_order_by"] | undefined | null | Variable<any, string>,
	stddev?: ValueTypes["match_lineups_stddev_order_by"] | undefined | null | Variable<any, string>,
	stddev_pop?: ValueTypes["match_lineups_stddev_pop_order_by"] | undefined | null | Variable<any, string>,
	stddev_samp?: ValueTypes["match_lineups_stddev_samp_order_by"] | undefined | null | Variable<any, string>,
	sum?: ValueTypes["match_lineups_sum_order_by"] | undefined | null | Variable<any, string>,
	var_pop?: ValueTypes["match_lineups_var_pop_order_by"] | undefined | null | Variable<any, string>,
	var_samp?: ValueTypes["match_lineups_var_samp_order_by"] | undefined | null | Variable<any, string>,
	variance?: ValueTypes["match_lineups_variance_order_by"] | undefined | null | Variable<any, string>
};
	/** input type for inserting array relation for remote table "match_lineups" */
["match_lineups_arr_rel_insert_input"]: {
	data: Array<ValueTypes["match_lineups_insert_input"]> | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["match_lineups_on_conflict"] | undefined | null | Variable<any, string>
};
	/** aggregate avg on columns */
["match_lineups_avg_fields"]: AliasType<{
	coach_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "match_lineups" */
["match_lineups_avg_order_by"]: {
	coach_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to filter rows from the table "match_lineups". All fields are combined with a logical 'AND'. */
["match_lineups_bool_exp"]: {
	_and?: Array<ValueTypes["match_lineups_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["match_lineups_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["match_lineups_bool_exp"]> | undefined | null | Variable<any, string>,
	captain?: ValueTypes["v_match_captains_bool_exp"] | undefined | null | Variable<any, string>,
	coach?: ValueTypes["players_bool_exp"] | undefined | null | Variable<any, string>,
	coach_steam_id?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	lineup_players?: ValueTypes["match_lineup_players_bool_exp"] | undefined | null | Variable<any, string>,
	lineup_players_aggregate?: ValueTypes["match_lineup_players_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	match?: ValueTypes["matches_bool_exp"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	match_veto_picks?: ValueTypes["match_veto_picks_bool_exp"] | undefined | null | Variable<any, string>,
	match_veto_picks_aggregate?: ValueTypes["match_veto_picks_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	name?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_bool_exp"] | undefined | null | Variable<any, string>,
	team?: ValueTypes["teams_bool_exp"] | undefined | null | Variable<any, string>,
	team_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "match_lineups" */
["match_lineups_constraint"]:match_lineups_constraint;
	/** input type for incrementing numeric columns in table "match_lineups" */
["match_lineups_inc_input"]: {
	coach_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "match_lineups" */
["match_lineups_insert_input"]: {
	captain?: ValueTypes["v_match_captains_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	coach?: ValueTypes["players_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	coach_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	lineup_players?: ValueTypes["match_lineup_players_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	match?: ValueTypes["matches_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_veto_picks?: ValueTypes["match_veto_picks_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	team?: ValueTypes["teams_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	team_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["match_lineups_max_fields"]: AliasType<{
	coach_steam_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	/** A computed field, executes function "get_team_name" */
	name?:boolean | `@${string}`,
	team_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "match_lineups" */
["match_lineups_max_order_by"]: {
	coach_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	team_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate min on columns */
["match_lineups_min_fields"]: AliasType<{
	coach_steam_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	/** A computed field, executes function "get_team_name" */
	name?:boolean | `@${string}`,
	team_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "match_lineups" */
["match_lineups_min_order_by"]: {
	coach_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	team_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** response of any mutation on the table "match_lineups" */
["match_lineups_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["match_lineups"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "match_lineups" */
["match_lineups_obj_rel_insert_input"]: {
	data: ValueTypes["match_lineups_insert_input"] | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["match_lineups_on_conflict"] | undefined | null | Variable<any, string>
};
	/** on_conflict condition type for table "match_lineups" */
["match_lineups_on_conflict"]: {
	constraint: ValueTypes["match_lineups_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["match_lineups_update_column"]> | Variable<any, string>,
	where?: ValueTypes["match_lineups_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "match_lineups". */
["match_lineups_order_by"]: {
	captain?: ValueTypes["v_match_captains_order_by"] | undefined | null | Variable<any, string>,
	coach?: ValueTypes["players_order_by"] | undefined | null | Variable<any, string>,
	coach_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_players_aggregate?: ValueTypes["match_lineup_players_aggregate_order_by"] | undefined | null | Variable<any, string>,
	match?: ValueTypes["matches_order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_veto_picks_aggregate?: ValueTypes["match_veto_picks_aggregate_order_by"] | undefined | null | Variable<any, string>,
	name?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_order_by"] | undefined | null | Variable<any, string>,
	team?: ValueTypes["teams_order_by"] | undefined | null | Variable<any, string>,
	team_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: match_lineups */
["match_lineups_pk_columns_input"]: {
	id: ValueTypes["uuid"] | Variable<any, string>
};
	/** select columns of table "match_lineups" */
["match_lineups_select_column"]:match_lineups_select_column;
	/** input type for updating data in table "match_lineups" */
["match_lineups_set_input"]: {
	coach_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	team_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["match_lineups_stddev_fields"]: AliasType<{
	coach_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "match_lineups" */
["match_lineups_stddev_order_by"]: {
	coach_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_pop on columns */
["match_lineups_stddev_pop_fields"]: AliasType<{
	coach_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "match_lineups" */
["match_lineups_stddev_pop_order_by"]: {
	coach_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_samp on columns */
["match_lineups_stddev_samp_fields"]: AliasType<{
	coach_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "match_lineups" */
["match_lineups_stddev_samp_order_by"]: {
	coach_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "match_lineups" */
["match_lineups_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["match_lineups_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["match_lineups_stream_cursor_value_input"]: {
	coach_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	team_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["match_lineups_sum_fields"]: AliasType<{
	coach_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "match_lineups" */
["match_lineups_sum_order_by"]: {
	coach_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** update columns of table "match_lineups" */
["match_lineups_update_column"]:match_lineups_update_column;
	["match_lineups_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["match_lineups_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["match_lineups_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["match_lineups_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["match_lineups_var_pop_fields"]: AliasType<{
	coach_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "match_lineups" */
["match_lineups_var_pop_order_by"]: {
	coach_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate var_samp on columns */
["match_lineups_var_samp_fields"]: AliasType<{
	coach_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "match_lineups" */
["match_lineups_var_samp_order_by"]: {
	coach_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate variance on columns */
["match_lineups_variance_fields"]: AliasType<{
	coach_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "match_lineups" */
["match_lineups_variance_order_by"]: {
	coach_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** columns and relationships of "match_map_demos" */
["match_map_demos"]: AliasType<{
	file?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	size?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "match_map_demos" */
["match_map_demos_aggregate"]: AliasType<{
	aggregate?:ValueTypes["match_map_demos_aggregate_fields"],
	nodes?:ValueTypes["match_map_demos"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "match_map_demos" */
["match_map_demos_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["match_map_demos_avg_fields"],
count?: [{	columns?: Array<ValueTypes["match_map_demos_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["match_map_demos_max_fields"],
	min?:ValueTypes["match_map_demos_min_fields"],
	stddev?:ValueTypes["match_map_demos_stddev_fields"],
	stddev_pop?:ValueTypes["match_map_demos_stddev_pop_fields"],
	stddev_samp?:ValueTypes["match_map_demos_stddev_samp_fields"],
	sum?:ValueTypes["match_map_demos_sum_fields"],
	var_pop?:ValueTypes["match_map_demos_var_pop_fields"],
	var_samp?:ValueTypes["match_map_demos_var_samp_fields"],
	variance?:ValueTypes["match_map_demos_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate avg on columns */
["match_map_demos_avg_fields"]: AliasType<{
	size?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "match_map_demos". All fields are combined with a logical 'AND'. */
["match_map_demos_bool_exp"]: {
	_and?: Array<ValueTypes["match_map_demos_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["match_map_demos_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["match_map_demos_bool_exp"]> | undefined | null | Variable<any, string>,
	file?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	size?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "match_map_demos" */
["match_map_demos_constraint"]:match_map_demos_constraint;
	/** input type for incrementing numeric columns in table "match_map_demos" */
["match_map_demos_inc_input"]: {
	size?: number | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "match_map_demos" */
["match_map_demos_insert_input"]: {
	file?: string | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	size?: number | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["match_map_demos_max_fields"]: AliasType<{
	file?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	size?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["match_map_demos_min_fields"]: AliasType<{
	file?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	size?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "match_map_demos" */
["match_map_demos_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["match_map_demos"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "match_map_demos" */
["match_map_demos_on_conflict"]: {
	constraint: ValueTypes["match_map_demos_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["match_map_demos_update_column"]> | Variable<any, string>,
	where?: ValueTypes["match_map_demos_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "match_map_demos". */
["match_map_demos_order_by"]: {
	file?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	size?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: match_map_demos */
["match_map_demos_pk_columns_input"]: {
	id: ValueTypes["uuid"] | Variable<any, string>
};
	/** select columns of table "match_map_demos" */
["match_map_demos_select_column"]:match_map_demos_select_column;
	/** input type for updating data in table "match_map_demos" */
["match_map_demos_set_input"]: {
	file?: string | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	size?: number | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["match_map_demos_stddev_fields"]: AliasType<{
	size?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_pop on columns */
["match_map_demos_stddev_pop_fields"]: AliasType<{
	size?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_samp on columns */
["match_map_demos_stddev_samp_fields"]: AliasType<{
	size?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Streaming cursor of the table "match_map_demos" */
["match_map_demos_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["match_map_demos_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["match_map_demos_stream_cursor_value_input"]: {
	file?: string | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	size?: number | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["match_map_demos_sum_fields"]: AliasType<{
	size?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** update columns of table "match_map_demos" */
["match_map_demos_update_column"]:match_map_demos_update_column;
	["match_map_demos_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["match_map_demos_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["match_map_demos_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["match_map_demos_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["match_map_demos_var_pop_fields"]: AliasType<{
	size?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate var_samp on columns */
["match_map_demos_var_samp_fields"]: AliasType<{
	size?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate variance on columns */
["match_map_demos_variance_fields"]: AliasType<{
	size?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** columns and relationships of "match_map_rounds" */
["match_map_rounds"]: AliasType<{
	backup_file?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
kills?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_kills_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_kills_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_kills_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_kills"]],
kills_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_kills_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_kills_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_kills_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_kills_aggregate"]],
	lineup_1_money?:boolean | `@${string}`,
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	lineup_2_money?:boolean | `@${string}`,
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	/** An object relationship */
	match_map?:ValueTypes["match_maps"],
	match_map_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "match_map_rounds" */
["match_map_rounds_aggregate"]: AliasType<{
	aggregate?:ValueTypes["match_map_rounds_aggregate_fields"],
	nodes?:ValueTypes["match_map_rounds"],
		__typename?: boolean | `@${string}`
}>;
	["match_map_rounds_aggregate_bool_exp"]: {
	count?: ValueTypes["match_map_rounds_aggregate_bool_exp_count"] | undefined | null | Variable<any, string>
};
	["match_map_rounds_aggregate_bool_exp_count"]: {
	arguments?: Array<ValueTypes["match_map_rounds_select_column"]> | undefined | null | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["match_map_rounds_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Int_comparison_exp"] | Variable<any, string>
};
	/** aggregate fields of "match_map_rounds" */
["match_map_rounds_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["match_map_rounds_avg_fields"],
count?: [{	columns?: Array<ValueTypes["match_map_rounds_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["match_map_rounds_max_fields"],
	min?:ValueTypes["match_map_rounds_min_fields"],
	stddev?:ValueTypes["match_map_rounds_stddev_fields"],
	stddev_pop?:ValueTypes["match_map_rounds_stddev_pop_fields"],
	stddev_samp?:ValueTypes["match_map_rounds_stddev_samp_fields"],
	sum?:ValueTypes["match_map_rounds_sum_fields"],
	var_pop?:ValueTypes["match_map_rounds_var_pop_fields"],
	var_samp?:ValueTypes["match_map_rounds_var_samp_fields"],
	variance?:ValueTypes["match_map_rounds_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "match_map_rounds" */
["match_map_rounds_aggregate_order_by"]: {
	avg?: ValueTypes["match_map_rounds_avg_order_by"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["match_map_rounds_max_order_by"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["match_map_rounds_min_order_by"] | undefined | null | Variable<any, string>,
	stddev?: ValueTypes["match_map_rounds_stddev_order_by"] | undefined | null | Variable<any, string>,
	stddev_pop?: ValueTypes["match_map_rounds_stddev_pop_order_by"] | undefined | null | Variable<any, string>,
	stddev_samp?: ValueTypes["match_map_rounds_stddev_samp_order_by"] | undefined | null | Variable<any, string>,
	sum?: ValueTypes["match_map_rounds_sum_order_by"] | undefined | null | Variable<any, string>,
	var_pop?: ValueTypes["match_map_rounds_var_pop_order_by"] | undefined | null | Variable<any, string>,
	var_samp?: ValueTypes["match_map_rounds_var_samp_order_by"] | undefined | null | Variable<any, string>,
	variance?: ValueTypes["match_map_rounds_variance_order_by"] | undefined | null | Variable<any, string>
};
	/** input type for inserting array relation for remote table "match_map_rounds" */
["match_map_rounds_arr_rel_insert_input"]: {
	data: Array<ValueTypes["match_map_rounds_insert_input"]> | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["match_map_rounds_on_conflict"] | undefined | null | Variable<any, string>
};
	/** aggregate avg on columns */
["match_map_rounds_avg_fields"]: AliasType<{
	lineup_1_money?:boolean | `@${string}`,
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	lineup_2_money?:boolean | `@${string}`,
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "match_map_rounds" */
["match_map_rounds_avg_order_by"]: {
	lineup_1_money?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_1_score?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_1_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_money?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_score?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to filter rows from the table "match_map_rounds". All fields are combined with a logical 'AND'. */
["match_map_rounds_bool_exp"]: {
	_and?: Array<ValueTypes["match_map_rounds_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["match_map_rounds_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["match_map_rounds_bool_exp"]> | undefined | null | Variable<any, string>,
	backup_file?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	kills?: ValueTypes["player_kills_bool_exp"] | undefined | null | Variable<any, string>,
	kills_aggregate?: ValueTypes["player_kills_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	lineup_1_money?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	lineup_1_score?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	lineup_1_timeouts_available?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	lineup_2_money?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	lineup_2_score?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	lineup_2_timeouts_available?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	match_map?: ValueTypes["match_maps_bool_exp"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	time?: ValueTypes["timestamptz_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "match_map_rounds" */
["match_map_rounds_constraint"]:match_map_rounds_constraint;
	/** input type for incrementing numeric columns in table "match_map_rounds" */
["match_map_rounds_inc_input"]: {
	lineup_1_money?: number | undefined | null | Variable<any, string>,
	lineup_1_score?: number | undefined | null | Variable<any, string>,
	lineup_1_timeouts_available?: number | undefined | null | Variable<any, string>,
	lineup_2_money?: number | undefined | null | Variable<any, string>,
	lineup_2_score?: number | undefined | null | Variable<any, string>,
	lineup_2_timeouts_available?: number | undefined | null | Variable<any, string>,
	round?: number | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "match_map_rounds" */
["match_map_rounds_insert_input"]: {
	backup_file?: string | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	kills?: ValueTypes["player_kills_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	lineup_1_money?: number | undefined | null | Variable<any, string>,
	lineup_1_score?: number | undefined | null | Variable<any, string>,
	lineup_1_timeouts_available?: number | undefined | null | Variable<any, string>,
	lineup_2_money?: number | undefined | null | Variable<any, string>,
	lineup_2_score?: number | undefined | null | Variable<any, string>,
	lineup_2_timeouts_available?: number | undefined | null | Variable<any, string>,
	match_map?: ValueTypes["match_maps_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	round?: number | undefined | null | Variable<any, string>,
	time?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["match_map_rounds_max_fields"]: AliasType<{
	backup_file?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	lineup_1_money?:boolean | `@${string}`,
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	lineup_2_money?:boolean | `@${string}`,
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "match_map_rounds" */
["match_map_rounds_max_order_by"]: {
	backup_file?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_1_money?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_1_score?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_1_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_money?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_score?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	time?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate min on columns */
["match_map_rounds_min_fields"]: AliasType<{
	backup_file?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	lineup_1_money?:boolean | `@${string}`,
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	lineup_2_money?:boolean | `@${string}`,
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "match_map_rounds" */
["match_map_rounds_min_order_by"]: {
	backup_file?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_1_money?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_1_score?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_1_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_money?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_score?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	time?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** response of any mutation on the table "match_map_rounds" */
["match_map_rounds_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["match_map_rounds"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "match_map_rounds" */
["match_map_rounds_on_conflict"]: {
	constraint: ValueTypes["match_map_rounds_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["match_map_rounds_update_column"]> | Variable<any, string>,
	where?: ValueTypes["match_map_rounds_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "match_map_rounds". */
["match_map_rounds_order_by"]: {
	backup_file?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	kills_aggregate?: ValueTypes["player_kills_aggregate_order_by"] | undefined | null | Variable<any, string>,
	lineup_1_money?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_1_score?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_1_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_money?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_score?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_map?: ValueTypes["match_maps_order_by"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	time?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: match_map_rounds */
["match_map_rounds_pk_columns_input"]: {
	id: ValueTypes["uuid"] | Variable<any, string>
};
	/** select columns of table "match_map_rounds" */
["match_map_rounds_select_column"]:match_map_rounds_select_column;
	/** input type for updating data in table "match_map_rounds" */
["match_map_rounds_set_input"]: {
	backup_file?: string | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	lineup_1_money?: number | undefined | null | Variable<any, string>,
	lineup_1_score?: number | undefined | null | Variable<any, string>,
	lineup_1_timeouts_available?: number | undefined | null | Variable<any, string>,
	lineup_2_money?: number | undefined | null | Variable<any, string>,
	lineup_2_score?: number | undefined | null | Variable<any, string>,
	lineup_2_timeouts_available?: number | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	round?: number | undefined | null | Variable<any, string>,
	time?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["match_map_rounds_stddev_fields"]: AliasType<{
	lineup_1_money?:boolean | `@${string}`,
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	lineup_2_money?:boolean | `@${string}`,
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "match_map_rounds" */
["match_map_rounds_stddev_order_by"]: {
	lineup_1_money?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_1_score?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_1_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_money?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_score?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_pop on columns */
["match_map_rounds_stddev_pop_fields"]: AliasType<{
	lineup_1_money?:boolean | `@${string}`,
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	lineup_2_money?:boolean | `@${string}`,
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "match_map_rounds" */
["match_map_rounds_stddev_pop_order_by"]: {
	lineup_1_money?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_1_score?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_1_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_money?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_score?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_samp on columns */
["match_map_rounds_stddev_samp_fields"]: AliasType<{
	lineup_1_money?:boolean | `@${string}`,
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	lineup_2_money?:boolean | `@${string}`,
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "match_map_rounds" */
["match_map_rounds_stddev_samp_order_by"]: {
	lineup_1_money?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_1_score?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_1_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_money?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_score?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "match_map_rounds" */
["match_map_rounds_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["match_map_rounds_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["match_map_rounds_stream_cursor_value_input"]: {
	backup_file?: string | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	lineup_1_money?: number | undefined | null | Variable<any, string>,
	lineup_1_score?: number | undefined | null | Variable<any, string>,
	lineup_1_timeouts_available?: number | undefined | null | Variable<any, string>,
	lineup_2_money?: number | undefined | null | Variable<any, string>,
	lineup_2_score?: number | undefined | null | Variable<any, string>,
	lineup_2_timeouts_available?: number | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	round?: number | undefined | null | Variable<any, string>,
	time?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["match_map_rounds_sum_fields"]: AliasType<{
	lineup_1_money?:boolean | `@${string}`,
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	lineup_2_money?:boolean | `@${string}`,
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "match_map_rounds" */
["match_map_rounds_sum_order_by"]: {
	lineup_1_money?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_1_score?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_1_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_money?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_score?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** update columns of table "match_map_rounds" */
["match_map_rounds_update_column"]:match_map_rounds_update_column;
	["match_map_rounds_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["match_map_rounds_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["match_map_rounds_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["match_map_rounds_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["match_map_rounds_var_pop_fields"]: AliasType<{
	lineup_1_money?:boolean | `@${string}`,
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	lineup_2_money?:boolean | `@${string}`,
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "match_map_rounds" */
["match_map_rounds_var_pop_order_by"]: {
	lineup_1_money?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_1_score?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_1_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_money?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_score?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate var_samp on columns */
["match_map_rounds_var_samp_fields"]: AliasType<{
	lineup_1_money?:boolean | `@${string}`,
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	lineup_2_money?:boolean | `@${string}`,
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "match_map_rounds" */
["match_map_rounds_var_samp_order_by"]: {
	lineup_1_money?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_1_score?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_1_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_money?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_score?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate variance on columns */
["match_map_rounds_variance_fields"]: AliasType<{
	lineup_1_money?:boolean | `@${string}`,
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	lineup_2_money?:boolean | `@${string}`,
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "match_map_rounds" */
["match_map_rounds_variance_order_by"]: {
	lineup_1_money?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_1_score?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_1_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_money?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_score?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** columns and relationships of "match_maps" */
["match_maps"]: AliasType<{
	created_at?:boolean | `@${string}`,
	/** An object relationship */
	e_match_map_status?:ValueTypes["e_match_map_status"],
flashes?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_flashes_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_flashes_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_flashes_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_flashes"]],
flashes_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_flashes_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_flashes_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_flashes_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_flashes_aggregate"]],
	id?:boolean | `@${string}`,
	/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_side?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_side?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	/** An object relationship */
	map?:ValueTypes["maps"],
	map_id?:boolean | `@${string}`,
	/** An object relationship */
	match?:ValueTypes["matches"],
	match_id?:boolean | `@${string}`,
objectives?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_objectives_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_objectives_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_objectives_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_objectives"]],
objectives_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_objectives_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_objectives_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_objectives_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_objectives_aggregate"]],
	order?:boolean | `@${string}`,
player_assists?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_assists_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_assists_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_assists_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_assists"]],
player_assists_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_assists_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_assists_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_assists_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_assists_aggregate"]],
player_damages?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_damages_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_damages_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_damages_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_damages"]],
player_damages_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_damages_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_damages_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_damages_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_damages_aggregate"]],
player_kills?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_kills_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_kills_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_kills_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_kills"]],
player_kills_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_kills_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_kills_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_kills_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_kills_aggregate"]],
player_unused_utilities?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_unused_utility_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_unused_utility_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_unused_utility_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_unused_utility"]],
player_unused_utilities_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_unused_utility_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_unused_utility_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_unused_utility_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_unused_utility_aggregate"]],
rounds?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_map_rounds_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_map_rounds_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_map_rounds_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_map_rounds"]],
rounds_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_map_rounds_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_map_rounds_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_map_rounds_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_map_rounds_aggregate"]],
	status?:boolean | `@${string}`,
utility?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_utility_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_utility_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_utility_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_utility"]],
utility_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_utility_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_utility_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_utility_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_utility_aggregate"]],
vetos?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_veto_picks_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_veto_picks_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_veto_picks_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_veto_picks"]],
vetos_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_veto_picks_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_veto_picks_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_veto_picks_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_veto_picks_aggregate"]],
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "match_maps" */
["match_maps_aggregate"]: AliasType<{
	aggregate?:ValueTypes["match_maps_aggregate_fields"],
	nodes?:ValueTypes["match_maps"],
		__typename?: boolean | `@${string}`
}>;
	["match_maps_aggregate_bool_exp"]: {
	count?: ValueTypes["match_maps_aggregate_bool_exp_count"] | undefined | null | Variable<any, string>
};
	["match_maps_aggregate_bool_exp_count"]: {
	arguments?: Array<ValueTypes["match_maps_select_column"]> | undefined | null | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["match_maps_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Int_comparison_exp"] | Variable<any, string>
};
	/** aggregate fields of "match_maps" */
["match_maps_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["match_maps_avg_fields"],
count?: [{	columns?: Array<ValueTypes["match_maps_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["match_maps_max_fields"],
	min?:ValueTypes["match_maps_min_fields"],
	stddev?:ValueTypes["match_maps_stddev_fields"],
	stddev_pop?:ValueTypes["match_maps_stddev_pop_fields"],
	stddev_samp?:ValueTypes["match_maps_stddev_samp_fields"],
	sum?:ValueTypes["match_maps_sum_fields"],
	var_pop?:ValueTypes["match_maps_var_pop_fields"],
	var_samp?:ValueTypes["match_maps_var_samp_fields"],
	variance?:ValueTypes["match_maps_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "match_maps" */
["match_maps_aggregate_order_by"]: {
	avg?: ValueTypes["match_maps_avg_order_by"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["match_maps_max_order_by"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["match_maps_min_order_by"] | undefined | null | Variable<any, string>,
	stddev?: ValueTypes["match_maps_stddev_order_by"] | undefined | null | Variable<any, string>,
	stddev_pop?: ValueTypes["match_maps_stddev_pop_order_by"] | undefined | null | Variable<any, string>,
	stddev_samp?: ValueTypes["match_maps_stddev_samp_order_by"] | undefined | null | Variable<any, string>,
	sum?: ValueTypes["match_maps_sum_order_by"] | undefined | null | Variable<any, string>,
	var_pop?: ValueTypes["match_maps_var_pop_order_by"] | undefined | null | Variable<any, string>,
	var_samp?: ValueTypes["match_maps_var_samp_order_by"] | undefined | null | Variable<any, string>,
	variance?: ValueTypes["match_maps_variance_order_by"] | undefined | null | Variable<any, string>
};
	/** input type for inserting array relation for remote table "match_maps" */
["match_maps_arr_rel_insert_input"]: {
	data: Array<ValueTypes["match_maps_insert_input"]> | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["match_maps_on_conflict"] | undefined | null | Variable<any, string>
};
	/** aggregate avg on columns */
["match_maps_avg_fields"]: AliasType<{
	/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	order?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "match_maps" */
["match_maps_avg_order_by"]: {
	lineup_1_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	order?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to filter rows from the table "match_maps". All fields are combined with a logical 'AND'. */
["match_maps_bool_exp"]: {
	_and?: Array<ValueTypes["match_maps_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["match_maps_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["match_maps_bool_exp"]> | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamptz_comparison_exp"] | undefined | null | Variable<any, string>,
	e_match_map_status?: ValueTypes["e_match_map_status_bool_exp"] | undefined | null | Variable<any, string>,
	flashes?: ValueTypes["player_flashes_bool_exp"] | undefined | null | Variable<any, string>,
	flashes_aggregate?: ValueTypes["player_flashes_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	lineup_1_score?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	lineup_1_side?: ValueTypes["e_sides_enum_comparison_exp"] | undefined | null | Variable<any, string>,
	lineup_1_timeouts_available?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	lineup_2_score?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	lineup_2_side?: ValueTypes["e_sides_enum_comparison_exp"] | undefined | null | Variable<any, string>,
	lineup_2_timeouts_available?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	map?: ValueTypes["maps_bool_exp"] | undefined | null | Variable<any, string>,
	map_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	match?: ValueTypes["matches_bool_exp"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	objectives?: ValueTypes["player_objectives_bool_exp"] | undefined | null | Variable<any, string>,
	objectives_aggregate?: ValueTypes["player_objectives_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	order?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	player_assists?: ValueTypes["player_assists_bool_exp"] | undefined | null | Variable<any, string>,
	player_assists_aggregate?: ValueTypes["player_assists_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	player_damages?: ValueTypes["player_damages_bool_exp"] | undefined | null | Variable<any, string>,
	player_damages_aggregate?: ValueTypes["player_damages_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	player_kills?: ValueTypes["player_kills_bool_exp"] | undefined | null | Variable<any, string>,
	player_kills_aggregate?: ValueTypes["player_kills_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	player_unused_utilities?: ValueTypes["player_unused_utility_bool_exp"] | undefined | null | Variable<any, string>,
	player_unused_utilities_aggregate?: ValueTypes["player_unused_utility_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	rounds?: ValueTypes["match_map_rounds_bool_exp"] | undefined | null | Variable<any, string>,
	rounds_aggregate?: ValueTypes["match_map_rounds_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	status?: ValueTypes["e_match_map_status_enum_comparison_exp"] | undefined | null | Variable<any, string>,
	utility?: ValueTypes["player_utility_bool_exp"] | undefined | null | Variable<any, string>,
	utility_aggregate?: ValueTypes["player_utility_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	vetos?: ValueTypes["match_veto_picks_bool_exp"] | undefined | null | Variable<any, string>,
	vetos_aggregate?: ValueTypes["match_veto_picks_aggregate_bool_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "match_maps" */
["match_maps_constraint"]:match_maps_constraint;
	/** input type for incrementing numeric columns in table "match_maps" */
["match_maps_inc_input"]: {
	lineup_1_timeouts_available?: number | undefined | null | Variable<any, string>,
	lineup_2_timeouts_available?: number | undefined | null | Variable<any, string>,
	order?: number | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "match_maps" */
["match_maps_insert_input"]: {
	created_at?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	e_match_map_status?: ValueTypes["e_match_map_status_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	flashes?: ValueTypes["player_flashes_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	lineup_1_side?: ValueTypes["e_sides_enum"] | undefined | null | Variable<any, string>,
	lineup_1_timeouts_available?: number | undefined | null | Variable<any, string>,
	lineup_2_side?: ValueTypes["e_sides_enum"] | undefined | null | Variable<any, string>,
	lineup_2_timeouts_available?: number | undefined | null | Variable<any, string>,
	map?: ValueTypes["maps_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match?: ValueTypes["matches_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	objectives?: ValueTypes["player_objectives_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	order?: number | undefined | null | Variable<any, string>,
	player_assists?: ValueTypes["player_assists_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	player_damages?: ValueTypes["player_damages_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	player_kills?: ValueTypes["player_kills_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	player_unused_utilities?: ValueTypes["player_unused_utility_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	rounds?: ValueTypes["match_map_rounds_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	status?: ValueTypes["e_match_map_status_enum"] | undefined | null | Variable<any, string>,
	utility?: ValueTypes["player_utility_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	vetos?: ValueTypes["match_veto_picks_arr_rel_insert_input"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["match_maps_max_fields"]: AliasType<{
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	map_id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	order?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "match_maps" */
["match_maps_max_order_by"]: {
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_1_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	order?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate min on columns */
["match_maps_min_fields"]: AliasType<{
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	map_id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	order?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "match_maps" */
["match_maps_min_order_by"]: {
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_1_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	order?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** response of any mutation on the table "match_maps" */
["match_maps_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["match_maps"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "match_maps" */
["match_maps_obj_rel_insert_input"]: {
	data: ValueTypes["match_maps_insert_input"] | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["match_maps_on_conflict"] | undefined | null | Variable<any, string>
};
	/** on_conflict condition type for table "match_maps" */
["match_maps_on_conflict"]: {
	constraint: ValueTypes["match_maps_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["match_maps_update_column"]> | Variable<any, string>,
	where?: ValueTypes["match_maps_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "match_maps". */
["match_maps_order_by"]: {
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	e_match_map_status?: ValueTypes["e_match_map_status_order_by"] | undefined | null | Variable<any, string>,
	flashes_aggregate?: ValueTypes["player_flashes_aggregate_order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_1_score?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_1_side?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_1_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_score?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_side?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	map?: ValueTypes["maps_order_by"] | undefined | null | Variable<any, string>,
	map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match?: ValueTypes["matches_order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	objectives_aggregate?: ValueTypes["player_objectives_aggregate_order_by"] | undefined | null | Variable<any, string>,
	order?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	player_assists_aggregate?: ValueTypes["player_assists_aggregate_order_by"] | undefined | null | Variable<any, string>,
	player_damages_aggregate?: ValueTypes["player_damages_aggregate_order_by"] | undefined | null | Variable<any, string>,
	player_kills_aggregate?: ValueTypes["player_kills_aggregate_order_by"] | undefined | null | Variable<any, string>,
	player_unused_utilities_aggregate?: ValueTypes["player_unused_utility_aggregate_order_by"] | undefined | null | Variable<any, string>,
	rounds_aggregate?: ValueTypes["match_map_rounds_aggregate_order_by"] | undefined | null | Variable<any, string>,
	status?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	utility_aggregate?: ValueTypes["player_utility_aggregate_order_by"] | undefined | null | Variable<any, string>,
	vetos_aggregate?: ValueTypes["match_veto_picks_aggregate_order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: match_maps */
["match_maps_pk_columns_input"]: {
	id: ValueTypes["uuid"] | Variable<any, string>
};
	/** select columns of table "match_maps" */
["match_maps_select_column"]:match_maps_select_column;
	/** input type for updating data in table "match_maps" */
["match_maps_set_input"]: {
	created_at?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	lineup_1_side?: ValueTypes["e_sides_enum"] | undefined | null | Variable<any, string>,
	lineup_1_timeouts_available?: number | undefined | null | Variable<any, string>,
	lineup_2_side?: ValueTypes["e_sides_enum"] | undefined | null | Variable<any, string>,
	lineup_2_timeouts_available?: number | undefined | null | Variable<any, string>,
	map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	order?: number | undefined | null | Variable<any, string>,
	status?: ValueTypes["e_match_map_status_enum"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["match_maps_stddev_fields"]: AliasType<{
	/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	order?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "match_maps" */
["match_maps_stddev_order_by"]: {
	lineup_1_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	order?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_pop on columns */
["match_maps_stddev_pop_fields"]: AliasType<{
	/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	order?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "match_maps" */
["match_maps_stddev_pop_order_by"]: {
	lineup_1_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	order?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_samp on columns */
["match_maps_stddev_samp_fields"]: AliasType<{
	/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	order?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "match_maps" */
["match_maps_stddev_samp_order_by"]: {
	lineup_1_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	order?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "match_maps" */
["match_maps_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["match_maps_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["match_maps_stream_cursor_value_input"]: {
	created_at?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	lineup_1_side?: ValueTypes["e_sides_enum"] | undefined | null | Variable<any, string>,
	lineup_1_timeouts_available?: number | undefined | null | Variable<any, string>,
	lineup_2_side?: ValueTypes["e_sides_enum"] | undefined | null | Variable<any, string>,
	lineup_2_timeouts_available?: number | undefined | null | Variable<any, string>,
	map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	order?: number | undefined | null | Variable<any, string>,
	status?: ValueTypes["e_match_map_status_enum"] | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["match_maps_sum_fields"]: AliasType<{
	/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	order?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "match_maps" */
["match_maps_sum_order_by"]: {
	lineup_1_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	order?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** update columns of table "match_maps" */
["match_maps_update_column"]:match_maps_update_column;
	["match_maps_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["match_maps_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["match_maps_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["match_maps_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["match_maps_var_pop_fields"]: AliasType<{
	/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	order?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "match_maps" */
["match_maps_var_pop_order_by"]: {
	lineup_1_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	order?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate var_samp on columns */
["match_maps_var_samp_fields"]: AliasType<{
	/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	order?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "match_maps" */
["match_maps_var_samp_order_by"]: {
	lineup_1_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	order?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate variance on columns */
["match_maps_variance_fields"]: AliasType<{
	/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	order?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "match_maps" */
["match_maps_variance_order_by"]: {
	lineup_1_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_timeouts_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	order?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** columns and relationships of "match_veto_picks" */
["match_veto_picks"]: AliasType<{
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** An object relationship */
	map?:ValueTypes["maps"],
	map_id?:boolean | `@${string}`,
	/** An object relationship */
	match?:ValueTypes["matches"],
	match_id?:boolean | `@${string}`,
	/** An object relationship */
	match_lineup?:ValueTypes["match_lineups"],
	match_lineup_id?:boolean | `@${string}`,
	side?:boolean | `@${string}`,
	type?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "match_veto_picks" */
["match_veto_picks_aggregate"]: AliasType<{
	aggregate?:ValueTypes["match_veto_picks_aggregate_fields"],
	nodes?:ValueTypes["match_veto_picks"],
		__typename?: boolean | `@${string}`
}>;
	["match_veto_picks_aggregate_bool_exp"]: {
	count?: ValueTypes["match_veto_picks_aggregate_bool_exp_count"] | undefined | null | Variable<any, string>
};
	["match_veto_picks_aggregate_bool_exp_count"]: {
	arguments?: Array<ValueTypes["match_veto_picks_select_column"]> | undefined | null | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["match_veto_picks_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Int_comparison_exp"] | Variable<any, string>
};
	/** aggregate fields of "match_veto_picks" */
["match_veto_picks_aggregate_fields"]: AliasType<{
count?: [{	columns?: Array<ValueTypes["match_veto_picks_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["match_veto_picks_max_fields"],
	min?:ValueTypes["match_veto_picks_min_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "match_veto_picks" */
["match_veto_picks_aggregate_order_by"]: {
	count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["match_veto_picks_max_order_by"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["match_veto_picks_min_order_by"] | undefined | null | Variable<any, string>
};
	/** input type for inserting array relation for remote table "match_veto_picks" */
["match_veto_picks_arr_rel_insert_input"]: {
	data: Array<ValueTypes["match_veto_picks_insert_input"]> | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["match_veto_picks_on_conflict"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to filter rows from the table "match_veto_picks". All fields are combined with a logical 'AND'. */
["match_veto_picks_bool_exp"]: {
	_and?: Array<ValueTypes["match_veto_picks_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["match_veto_picks_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["match_veto_picks_bool_exp"]> | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamptz_comparison_exp"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	map?: ValueTypes["maps_bool_exp"] | undefined | null | Variable<any, string>,
	map_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	match?: ValueTypes["matches_bool_exp"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	match_lineup?: ValueTypes["match_lineups_bool_exp"] | undefined | null | Variable<any, string>,
	match_lineup_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	side?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	type?: ValueTypes["e_veto_pick_types_enum_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "match_veto_picks" */
["match_veto_picks_constraint"]:match_veto_picks_constraint;
	/** input type for inserting data into table "match_veto_picks" */
["match_veto_picks_insert_input"]: {
	created_at?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	map?: ValueTypes["maps_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match?: ValueTypes["matches_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_lineup?: ValueTypes["match_lineups_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	match_lineup_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	side?: string | undefined | null | Variable<any, string>,
	type?: ValueTypes["e_veto_pick_types_enum"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["match_veto_picks_max_fields"]: AliasType<{
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	map_id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_lineup_id?:boolean | `@${string}`,
	side?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "match_veto_picks" */
["match_veto_picks_max_order_by"]: {
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_lineup_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	side?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate min on columns */
["match_veto_picks_min_fields"]: AliasType<{
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	map_id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_lineup_id?:boolean | `@${string}`,
	side?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "match_veto_picks" */
["match_veto_picks_min_order_by"]: {
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_lineup_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	side?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** response of any mutation on the table "match_veto_picks" */
["match_veto_picks_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["match_veto_picks"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "match_veto_picks" */
["match_veto_picks_on_conflict"]: {
	constraint: ValueTypes["match_veto_picks_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["match_veto_picks_update_column"]> | Variable<any, string>,
	where?: ValueTypes["match_veto_picks_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "match_veto_picks". */
["match_veto_picks_order_by"]: {
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	map?: ValueTypes["maps_order_by"] | undefined | null | Variable<any, string>,
	map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match?: ValueTypes["matches_order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_lineup?: ValueTypes["match_lineups_order_by"] | undefined | null | Variable<any, string>,
	match_lineup_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	side?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	type?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: match_veto_picks */
["match_veto_picks_pk_columns_input"]: {
	id: ValueTypes["uuid"] | Variable<any, string>
};
	/** select columns of table "match_veto_picks" */
["match_veto_picks_select_column"]:match_veto_picks_select_column;
	/** input type for updating data in table "match_veto_picks" */
["match_veto_picks_set_input"]: {
	created_at?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_lineup_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	side?: string | undefined | null | Variable<any, string>,
	type?: ValueTypes["e_veto_pick_types_enum"] | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "match_veto_picks" */
["match_veto_picks_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["match_veto_picks_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["match_veto_picks_stream_cursor_value_input"]: {
	created_at?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_lineup_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	side?: string | undefined | null | Variable<any, string>,
	type?: ValueTypes["e_veto_pick_types_enum"] | undefined | null | Variable<any, string>
};
	/** update columns of table "match_veto_picks" */
["match_veto_picks_update_column"]:match_veto_picks_update_column;
	["match_veto_picks_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["match_veto_picks_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["match_veto_picks_bool_exp"] | Variable<any, string>
};
	/** columns and relationships of "matches" */
["matches"]: AliasType<{
	best_of?:boolean | `@${string}`,
	coaches?:boolean | `@${string}`,
	/** A computed field, executes function "get_match_connection_link" */
	connection_link?:boolean | `@${string}`,
	/** A computed field, executes function "get_match_connection_string" */
	connection_string?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	/** A computed field, executes function "get_current_match_map" */
	current_match_map_id?:boolean | `@${string}`,
	/** An object relationship */
	e_match_status?:ValueTypes["e_match_status"],
	/** An object relationship */
	e_match_type?:ValueTypes["e_match_types"],
	id?:boolean | `@${string}`,
	/** A computed field, executes function "is_match_server_available" */
	is_match_server_available?:boolean | `@${string}`,
	knife_round?:boolean | `@${string}`,
	label?:boolean | `@${string}`,
	/** A computed field, executes function "get_match_lineup_1_id" */
	lineup_1_id?:boolean | `@${string}`,
	/** A computed field, executes function "get_match_lineup_2_id" */
	lineup_2_id?:boolean | `@${string}`,
lineups?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_lineups_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_lineups_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_lineups_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_lineups"]],
lineups_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_lineups_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_lineups_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_lineups_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_lineups_aggregate"]],
	/** An object relationship */
	map_pool?:ValueTypes["map_pools"],
	map_veto?:boolean | `@${string}`,
match_maps?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_maps_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_maps_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_maps_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_maps"]],
match_maps_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_maps_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_maps_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_maps_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_maps_aggregate"]],
	match_pool_id?:boolean | `@${string}`,
	mr?:boolean | `@${string}`,
	number_of_substitutes?:boolean | `@${string}`,
	/** An object relationship */
	organizer?:ValueTypes["players"],
	organizer_steam_id?:boolean | `@${string}`,
	overtime?:boolean | `@${string}`,
	password?:boolean | `@${string}`,
player_assists?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_assists_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_assists_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_assists_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_assists"]],
player_assists_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_assists_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_assists_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_assists_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_assists_aggregate"]],
player_damages?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_damages_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_damages_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_damages_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_damages"]],
player_damages_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_damages_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_damages_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_damages_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_damages_aggregate"]],
player_flashes?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_flashes_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_flashes_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_flashes_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_flashes"]],
player_flashes_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_flashes_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_flashes_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_flashes_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_flashes_aggregate"]],
player_kills?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_kills_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_kills_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_kills_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_kills"]],
player_kills_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_kills_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_kills_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_kills_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_kills_aggregate"]],
player_objectives?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_objectives_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_objectives_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_objectives_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_objectives"]],
player_objectives_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_objectives_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_objectives_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_objectives_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_objectives_aggregate"]],
player_unused_utilities?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_unused_utility_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_unused_utility_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_unused_utility_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_unused_utility"]],
player_unused_utilities_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_unused_utility_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_unused_utility_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_unused_utility_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_unused_utility_aggregate"]],
player_utility?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_utility_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_utility_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_utility_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_utility"]],
player_utility_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_utility_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_utility_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_utility_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_utility_aggregate"]],
	scheduled_at?:boolean | `@${string}`,
	/** An object relationship */
	server?:ValueTypes["servers"],
	server_id?:boolean | `@${string}`,
	status?:boolean | `@${string}`,
teams?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["teams_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["teams_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["teams_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["teams"]],
	tech_timeout_setting?:boolean | `@${string}`,
	timeout_setting?:boolean | `@${string}`,
	/** A computed field, executes function "get_match_tv_connection_link" */
	tv_connection_link?:boolean | `@${string}`,
	/** A computed field, executes function "get_match_tv_connection_string" */
	tv_connection_string?:boolean | `@${string}`,
	type?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
	/** A computed field, executes function "get_veto_picking_lineup_id" */
	veto_picking_lineup_id?:boolean | `@${string}`,
veto_picks?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_veto_picks_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_veto_picks_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_veto_picks_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_veto_picks"]],
veto_picks_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_veto_picks_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_veto_picks_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_veto_picks_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_veto_picks_aggregate"]],
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "matches" */
["matches_aggregate"]: AliasType<{
	aggregate?:ValueTypes["matches_aggregate_fields"],
	nodes?:ValueTypes["matches"],
		__typename?: boolean | `@${string}`
}>;
	["matches_aggregate_bool_exp"]: {
	bool_and?: ValueTypes["matches_aggregate_bool_exp_bool_and"] | undefined | null | Variable<any, string>,
	bool_or?: ValueTypes["matches_aggregate_bool_exp_bool_or"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["matches_aggregate_bool_exp_count"] | undefined | null | Variable<any, string>
};
	["matches_aggregate_bool_exp_bool_and"]: {
	arguments: ValueTypes["matches_select_column_matches_aggregate_bool_exp_bool_and_arguments_columns"] | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["matches_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Boolean_comparison_exp"] | Variable<any, string>
};
	["matches_aggregate_bool_exp_bool_or"]: {
	arguments: ValueTypes["matches_select_column_matches_aggregate_bool_exp_bool_or_arguments_columns"] | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["matches_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Boolean_comparison_exp"] | Variable<any, string>
};
	["matches_aggregate_bool_exp_count"]: {
	arguments?: Array<ValueTypes["matches_select_column"]> | undefined | null | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["matches_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Int_comparison_exp"] | Variable<any, string>
};
	/** aggregate fields of "matches" */
["matches_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["matches_avg_fields"],
count?: [{	columns?: Array<ValueTypes["matches_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["matches_max_fields"],
	min?:ValueTypes["matches_min_fields"],
	stddev?:ValueTypes["matches_stddev_fields"],
	stddev_pop?:ValueTypes["matches_stddev_pop_fields"],
	stddev_samp?:ValueTypes["matches_stddev_samp_fields"],
	sum?:ValueTypes["matches_sum_fields"],
	var_pop?:ValueTypes["matches_var_pop_fields"],
	var_samp?:ValueTypes["matches_var_samp_fields"],
	variance?:ValueTypes["matches_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "matches" */
["matches_aggregate_order_by"]: {
	avg?: ValueTypes["matches_avg_order_by"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["matches_max_order_by"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["matches_min_order_by"] | undefined | null | Variable<any, string>,
	stddev?: ValueTypes["matches_stddev_order_by"] | undefined | null | Variable<any, string>,
	stddev_pop?: ValueTypes["matches_stddev_pop_order_by"] | undefined | null | Variable<any, string>,
	stddev_samp?: ValueTypes["matches_stddev_samp_order_by"] | undefined | null | Variable<any, string>,
	sum?: ValueTypes["matches_sum_order_by"] | undefined | null | Variable<any, string>,
	var_pop?: ValueTypes["matches_var_pop_order_by"] | undefined | null | Variable<any, string>,
	var_samp?: ValueTypes["matches_var_samp_order_by"] | undefined | null | Variable<any, string>,
	variance?: ValueTypes["matches_variance_order_by"] | undefined | null | Variable<any, string>
};
	/** input type for inserting array relation for remote table "matches" */
["matches_arr_rel_insert_input"]: {
	data: Array<ValueTypes["matches_insert_input"]> | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["matches_on_conflict"] | undefined | null | Variable<any, string>
};
	/** aggregate avg on columns */
["matches_avg_fields"]: AliasType<{
	best_of?:boolean | `@${string}`,
	mr?:boolean | `@${string}`,
	number_of_substitutes?:boolean | `@${string}`,
	organizer_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "matches" */
["matches_avg_order_by"]: {
	best_of?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	mr?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	number_of_substitutes?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	organizer_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to filter rows from the table "matches". All fields are combined with a logical 'AND'. */
["matches_bool_exp"]: {
	_and?: Array<ValueTypes["matches_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["matches_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["matches_bool_exp"]> | undefined | null | Variable<any, string>,
	best_of?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	coaches?: ValueTypes["Boolean_comparison_exp"] | undefined | null | Variable<any, string>,
	connection_link?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	connection_string?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamptz_comparison_exp"] | undefined | null | Variable<any, string>,
	current_match_map_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	e_match_status?: ValueTypes["e_match_status_bool_exp"] | undefined | null | Variable<any, string>,
	e_match_type?: ValueTypes["e_match_types_bool_exp"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	is_match_server_available?: ValueTypes["Boolean_comparison_exp"] | undefined | null | Variable<any, string>,
	knife_round?: ValueTypes["Boolean_comparison_exp"] | undefined | null | Variable<any, string>,
	label?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	lineup_1_id?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	lineup_2_id?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	lineups?: ValueTypes["match_lineups_bool_exp"] | undefined | null | Variable<any, string>,
	lineups_aggregate?: ValueTypes["match_lineups_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	map_pool?: ValueTypes["map_pools_bool_exp"] | undefined | null | Variable<any, string>,
	map_veto?: ValueTypes["Boolean_comparison_exp"] | undefined | null | Variable<any, string>,
	match_maps?: ValueTypes["match_maps_bool_exp"] | undefined | null | Variable<any, string>,
	match_maps_aggregate?: ValueTypes["match_maps_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	match_pool_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	mr?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	number_of_substitutes?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	organizer?: ValueTypes["players_bool_exp"] | undefined | null | Variable<any, string>,
	organizer_steam_id?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>,
	overtime?: ValueTypes["Boolean_comparison_exp"] | undefined | null | Variable<any, string>,
	password?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	player_assists?: ValueTypes["player_assists_bool_exp"] | undefined | null | Variable<any, string>,
	player_assists_aggregate?: ValueTypes["player_assists_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	player_damages?: ValueTypes["player_damages_bool_exp"] | undefined | null | Variable<any, string>,
	player_damages_aggregate?: ValueTypes["player_damages_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	player_flashes?: ValueTypes["player_flashes_bool_exp"] | undefined | null | Variable<any, string>,
	player_flashes_aggregate?: ValueTypes["player_flashes_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	player_kills?: ValueTypes["player_kills_bool_exp"] | undefined | null | Variable<any, string>,
	player_kills_aggregate?: ValueTypes["player_kills_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	player_objectives?: ValueTypes["player_objectives_bool_exp"] | undefined | null | Variable<any, string>,
	player_objectives_aggregate?: ValueTypes["player_objectives_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	player_unused_utilities?: ValueTypes["player_unused_utility_bool_exp"] | undefined | null | Variable<any, string>,
	player_unused_utilities_aggregate?: ValueTypes["player_unused_utility_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	player_utility?: ValueTypes["player_utility_bool_exp"] | undefined | null | Variable<any, string>,
	player_utility_aggregate?: ValueTypes["player_utility_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	scheduled_at?: ValueTypes["date_comparison_exp"] | undefined | null | Variable<any, string>,
	server?: ValueTypes["servers_bool_exp"] | undefined | null | Variable<any, string>,
	server_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	status?: ValueTypes["e_match_status_enum_comparison_exp"] | undefined | null | Variable<any, string>,
	teams?: ValueTypes["teams_bool_exp"] | undefined | null | Variable<any, string>,
	tech_timeout_setting?: ValueTypes["e_timeout_settings_enum_comparison_exp"] | undefined | null | Variable<any, string>,
	timeout_setting?: ValueTypes["e_timeout_settings_enum_comparison_exp"] | undefined | null | Variable<any, string>,
	tv_connection_link?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	tv_connection_string?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	type?: ValueTypes["e_match_types_enum_comparison_exp"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamptz_comparison_exp"] | undefined | null | Variable<any, string>,
	veto_picking_lineup_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	veto_picks?: ValueTypes["match_veto_picks_bool_exp"] | undefined | null | Variable<any, string>,
	veto_picks_aggregate?: ValueTypes["match_veto_picks_aggregate_bool_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "matches" */
["matches_constraint"]:matches_constraint;
	/** input type for incrementing numeric columns in table "matches" */
["matches_inc_input"]: {
	best_of?: number | undefined | null | Variable<any, string>,
	mr?: number | undefined | null | Variable<any, string>,
	number_of_substitutes?: number | undefined | null | Variable<any, string>,
	organizer_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "matches" */
["matches_insert_input"]: {
	best_of?: number | undefined | null | Variable<any, string>,
	coaches?: boolean | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	e_match_status?: ValueTypes["e_match_status_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	e_match_type?: ValueTypes["e_match_types_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	knife_round?: boolean | undefined | null | Variable<any, string>,
	label?: string | undefined | null | Variable<any, string>,
	lineups?: ValueTypes["match_lineups_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	map_pool?: ValueTypes["map_pools_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	map_veto?: boolean | undefined | null | Variable<any, string>,
	match_maps?: ValueTypes["match_maps_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	match_pool_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	mr?: number | undefined | null | Variable<any, string>,
	number_of_substitutes?: number | undefined | null | Variable<any, string>,
	organizer?: ValueTypes["players_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	organizer_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	overtime?: boolean | undefined | null | Variable<any, string>,
	password?: string | undefined | null | Variable<any, string>,
	player_assists?: ValueTypes["player_assists_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	player_damages?: ValueTypes["player_damages_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	player_flashes?: ValueTypes["player_flashes_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	player_kills?: ValueTypes["player_kills_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	player_objectives?: ValueTypes["player_objectives_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	player_unused_utilities?: ValueTypes["player_unused_utility_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	player_utility?: ValueTypes["player_utility_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	scheduled_at?: ValueTypes["date"] | undefined | null | Variable<any, string>,
	server?: ValueTypes["servers_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	server_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	status?: ValueTypes["e_match_status_enum"] | undefined | null | Variable<any, string>,
	tech_timeout_setting?: ValueTypes["e_timeout_settings_enum"] | undefined | null | Variable<any, string>,
	timeout_setting?: ValueTypes["e_timeout_settings_enum"] | undefined | null | Variable<any, string>,
	type?: ValueTypes["e_match_types_enum"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	veto_picks?: ValueTypes["match_veto_picks_arr_rel_insert_input"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["matches_max_fields"]: AliasType<{
	best_of?:boolean | `@${string}`,
	/** A computed field, executes function "get_match_connection_link" */
	connection_link?:boolean | `@${string}`,
	/** A computed field, executes function "get_match_connection_string" */
	connection_string?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	/** A computed field, executes function "get_current_match_map" */
	current_match_map_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	label?:boolean | `@${string}`,
	/** A computed field, executes function "get_match_lineup_1_id" */
	lineup_1_id?:boolean | `@${string}`,
	/** A computed field, executes function "get_match_lineup_2_id" */
	lineup_2_id?:boolean | `@${string}`,
	match_pool_id?:boolean | `@${string}`,
	mr?:boolean | `@${string}`,
	number_of_substitutes?:boolean | `@${string}`,
	organizer_steam_id?:boolean | `@${string}`,
	password?:boolean | `@${string}`,
	scheduled_at?:boolean | `@${string}`,
	server_id?:boolean | `@${string}`,
	/** A computed field, executes function "get_match_tv_connection_link" */
	tv_connection_link?:boolean | `@${string}`,
	/** A computed field, executes function "get_match_tv_connection_string" */
	tv_connection_string?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
	/** A computed field, executes function "get_veto_picking_lineup_id" */
	veto_picking_lineup_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "matches" */
["matches_max_order_by"]: {
	best_of?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	label?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_pool_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	mr?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	number_of_substitutes?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	organizer_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	password?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	scheduled_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	server_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate min on columns */
["matches_min_fields"]: AliasType<{
	best_of?:boolean | `@${string}`,
	/** A computed field, executes function "get_match_connection_link" */
	connection_link?:boolean | `@${string}`,
	/** A computed field, executes function "get_match_connection_string" */
	connection_string?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	/** A computed field, executes function "get_current_match_map" */
	current_match_map_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	label?:boolean | `@${string}`,
	/** A computed field, executes function "get_match_lineup_1_id" */
	lineup_1_id?:boolean | `@${string}`,
	/** A computed field, executes function "get_match_lineup_2_id" */
	lineup_2_id?:boolean | `@${string}`,
	match_pool_id?:boolean | `@${string}`,
	mr?:boolean | `@${string}`,
	number_of_substitutes?:boolean | `@${string}`,
	organizer_steam_id?:boolean | `@${string}`,
	password?:boolean | `@${string}`,
	scheduled_at?:boolean | `@${string}`,
	server_id?:boolean | `@${string}`,
	/** A computed field, executes function "get_match_tv_connection_link" */
	tv_connection_link?:boolean | `@${string}`,
	/** A computed field, executes function "get_match_tv_connection_string" */
	tv_connection_string?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
	/** A computed field, executes function "get_veto_picking_lineup_id" */
	veto_picking_lineup_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "matches" */
["matches_min_order_by"]: {
	best_of?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	label?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_pool_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	mr?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	number_of_substitutes?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	organizer_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	password?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	scheduled_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	server_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** response of any mutation on the table "matches" */
["matches_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["matches"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "matches" */
["matches_obj_rel_insert_input"]: {
	data: ValueTypes["matches_insert_input"] | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["matches_on_conflict"] | undefined | null | Variable<any, string>
};
	/** on_conflict condition type for table "matches" */
["matches_on_conflict"]: {
	constraint: ValueTypes["matches_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["matches_update_column"]> | Variable<any, string>,
	where?: ValueTypes["matches_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "matches". */
["matches_order_by"]: {
	best_of?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	coaches?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	connection_link?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	connection_string?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	current_match_map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	e_match_status?: ValueTypes["e_match_status_order_by"] | undefined | null | Variable<any, string>,
	e_match_type?: ValueTypes["e_match_types_order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	is_match_server_available?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	knife_round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	label?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_1_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup_2_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineups_aggregate?: ValueTypes["match_lineups_aggregate_order_by"] | undefined | null | Variable<any, string>,
	map_pool?: ValueTypes["map_pools_order_by"] | undefined | null | Variable<any, string>,
	map_veto?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_maps_aggregate?: ValueTypes["match_maps_aggregate_order_by"] | undefined | null | Variable<any, string>,
	match_pool_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	mr?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	number_of_substitutes?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	organizer?: ValueTypes["players_order_by"] | undefined | null | Variable<any, string>,
	organizer_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	overtime?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	password?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	player_assists_aggregate?: ValueTypes["player_assists_aggregate_order_by"] | undefined | null | Variable<any, string>,
	player_damages_aggregate?: ValueTypes["player_damages_aggregate_order_by"] | undefined | null | Variable<any, string>,
	player_flashes_aggregate?: ValueTypes["player_flashes_aggregate_order_by"] | undefined | null | Variable<any, string>,
	player_kills_aggregate?: ValueTypes["player_kills_aggregate_order_by"] | undefined | null | Variable<any, string>,
	player_objectives_aggregate?: ValueTypes["player_objectives_aggregate_order_by"] | undefined | null | Variable<any, string>,
	player_unused_utilities_aggregate?: ValueTypes["player_unused_utility_aggregate_order_by"] | undefined | null | Variable<any, string>,
	player_utility_aggregate?: ValueTypes["player_utility_aggregate_order_by"] | undefined | null | Variable<any, string>,
	scheduled_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	server?: ValueTypes["servers_order_by"] | undefined | null | Variable<any, string>,
	server_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	status?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	teams_aggregate?: ValueTypes["teams_aggregate_order_by"] | undefined | null | Variable<any, string>,
	tech_timeout_setting?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	timeout_setting?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	tv_connection_link?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	tv_connection_string?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	type?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	veto_picking_lineup_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	veto_picks_aggregate?: ValueTypes["match_veto_picks_aggregate_order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: matches */
["matches_pk_columns_input"]: {
	id: ValueTypes["uuid"] | Variable<any, string>
};
	/** select columns of table "matches" */
["matches_select_column"]:matches_select_column;
	/** select "matches_aggregate_bool_exp_bool_and_arguments_columns" columns of table "matches" */
["matches_select_column_matches_aggregate_bool_exp_bool_and_arguments_columns"]:matches_select_column_matches_aggregate_bool_exp_bool_and_arguments_columns;
	/** select "matches_aggregate_bool_exp_bool_or_arguments_columns" columns of table "matches" */
["matches_select_column_matches_aggregate_bool_exp_bool_or_arguments_columns"]:matches_select_column_matches_aggregate_bool_exp_bool_or_arguments_columns;
	/** input type for updating data in table "matches" */
["matches_set_input"]: {
	best_of?: number | undefined | null | Variable<any, string>,
	coaches?: boolean | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	knife_round?: boolean | undefined | null | Variable<any, string>,
	label?: string | undefined | null | Variable<any, string>,
	map_veto?: boolean | undefined | null | Variable<any, string>,
	match_pool_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	mr?: number | undefined | null | Variable<any, string>,
	number_of_substitutes?: number | undefined | null | Variable<any, string>,
	organizer_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	overtime?: boolean | undefined | null | Variable<any, string>,
	password?: string | undefined | null | Variable<any, string>,
	scheduled_at?: ValueTypes["date"] | undefined | null | Variable<any, string>,
	server_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	status?: ValueTypes["e_match_status_enum"] | undefined | null | Variable<any, string>,
	tech_timeout_setting?: ValueTypes["e_timeout_settings_enum"] | undefined | null | Variable<any, string>,
	timeout_setting?: ValueTypes["e_timeout_settings_enum"] | undefined | null | Variable<any, string>,
	type?: ValueTypes["e_match_types_enum"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["matches_stddev_fields"]: AliasType<{
	best_of?:boolean | `@${string}`,
	mr?:boolean | `@${string}`,
	number_of_substitutes?:boolean | `@${string}`,
	organizer_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "matches" */
["matches_stddev_order_by"]: {
	best_of?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	mr?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	number_of_substitutes?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	organizer_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_pop on columns */
["matches_stddev_pop_fields"]: AliasType<{
	best_of?:boolean | `@${string}`,
	mr?:boolean | `@${string}`,
	number_of_substitutes?:boolean | `@${string}`,
	organizer_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "matches" */
["matches_stddev_pop_order_by"]: {
	best_of?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	mr?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	number_of_substitutes?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	organizer_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_samp on columns */
["matches_stddev_samp_fields"]: AliasType<{
	best_of?:boolean | `@${string}`,
	mr?:boolean | `@${string}`,
	number_of_substitutes?:boolean | `@${string}`,
	organizer_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "matches" */
["matches_stddev_samp_order_by"]: {
	best_of?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	mr?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	number_of_substitutes?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	organizer_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "matches" */
["matches_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["matches_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["matches_stream_cursor_value_input"]: {
	best_of?: number | undefined | null | Variable<any, string>,
	coaches?: boolean | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	knife_round?: boolean | undefined | null | Variable<any, string>,
	label?: string | undefined | null | Variable<any, string>,
	map_veto?: boolean | undefined | null | Variable<any, string>,
	match_pool_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	mr?: number | undefined | null | Variable<any, string>,
	number_of_substitutes?: number | undefined | null | Variable<any, string>,
	organizer_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	overtime?: boolean | undefined | null | Variable<any, string>,
	password?: string | undefined | null | Variable<any, string>,
	scheduled_at?: ValueTypes["date"] | undefined | null | Variable<any, string>,
	server_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	status?: ValueTypes["e_match_status_enum"] | undefined | null | Variable<any, string>,
	tech_timeout_setting?: ValueTypes["e_timeout_settings_enum"] | undefined | null | Variable<any, string>,
	timeout_setting?: ValueTypes["e_timeout_settings_enum"] | undefined | null | Variable<any, string>,
	type?: ValueTypes["e_match_types_enum"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["matches_sum_fields"]: AliasType<{
	best_of?:boolean | `@${string}`,
	mr?:boolean | `@${string}`,
	number_of_substitutes?:boolean | `@${string}`,
	organizer_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "matches" */
["matches_sum_order_by"]: {
	best_of?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	mr?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	number_of_substitutes?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	organizer_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** update columns of table "matches" */
["matches_update_column"]:matches_update_column;
	["matches_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["matches_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["matches_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["matches_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["matches_var_pop_fields"]: AliasType<{
	best_of?:boolean | `@${string}`,
	mr?:boolean | `@${string}`,
	number_of_substitutes?:boolean | `@${string}`,
	organizer_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "matches" */
["matches_var_pop_order_by"]: {
	best_of?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	mr?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	number_of_substitutes?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	organizer_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate var_samp on columns */
["matches_var_samp_fields"]: AliasType<{
	best_of?:boolean | `@${string}`,
	mr?:boolean | `@${string}`,
	number_of_substitutes?:boolean | `@${string}`,
	organizer_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "matches" */
["matches_var_samp_order_by"]: {
	best_of?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	mr?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	number_of_substitutes?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	organizer_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate variance on columns */
["matches_variance_fields"]: AliasType<{
	best_of?:boolean | `@${string}`,
	mr?:boolean | `@${string}`,
	number_of_substitutes?:boolean | `@${string}`,
	organizer_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "matches" */
["matches_variance_order_by"]: {
	best_of?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	mr?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	number_of_substitutes?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	organizer_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** mutation root */
["mutation_root"]: AliasType<{
acceptTeamInvite?: [{	invite_id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["SuccessOutput"]],
cancelMatch?: [{	match_id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["SuccessOutput"]],
delete__map_pool?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["_map_pool_bool_exp"] | Variable<any, string>},ValueTypes["_map_pool_mutation_response"]],
delete__map_pool_by_pk?: [{	map_id: ValueTypes["uuid"] | Variable<any, string>,	map_pool_id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["_map_pool"]],
delete_e_match_map_status?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["e_match_map_status_bool_exp"] | Variable<any, string>},ValueTypes["e_match_map_status_mutation_response"]],
delete_e_match_map_status_by_pk?: [{	value: string | Variable<any, string>},ValueTypes["e_match_map_status"]],
delete_e_match_status?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["e_match_status_bool_exp"] | Variable<any, string>},ValueTypes["e_match_status_mutation_response"]],
delete_e_match_status_by_pk?: [{	value: string | Variable<any, string>},ValueTypes["e_match_status"]],
delete_e_match_types?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["e_match_types_bool_exp"] | Variable<any, string>},ValueTypes["e_match_types_mutation_response"]],
delete_e_match_types_by_pk?: [{	value: string | Variable<any, string>},ValueTypes["e_match_types"]],
delete_e_objective_types?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["e_objective_types_bool_exp"] | Variable<any, string>},ValueTypes["e_objective_types_mutation_response"]],
delete_e_objective_types_by_pk?: [{	value: string | Variable<any, string>},ValueTypes["e_objective_types"]],
delete_e_sides?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["e_sides_bool_exp"] | Variable<any, string>},ValueTypes["e_sides_mutation_response"]],
delete_e_sides_by_pk?: [{	value: string | Variable<any, string>},ValueTypes["e_sides"]],
delete_e_team_roles?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["e_team_roles_bool_exp"] | Variable<any, string>},ValueTypes["e_team_roles_mutation_response"]],
delete_e_team_roles_by_pk?: [{	value: string | Variable<any, string>},ValueTypes["e_team_roles"]],
delete_e_timeout_settings?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["e_timeout_settings_bool_exp"] | Variable<any, string>},ValueTypes["e_timeout_settings_mutation_response"]],
delete_e_timeout_settings_by_pk?: [{	value: string | Variable<any, string>},ValueTypes["e_timeout_settings"]],
delete_e_utility_types?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["e_utility_types_bool_exp"] | Variable<any, string>},ValueTypes["e_utility_types_mutation_response"]],
delete_e_utility_types_by_pk?: [{	value: string | Variable<any, string>},ValueTypes["e_utility_types"]],
delete_e_veto_pick_types?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["e_veto_pick_types_bool_exp"] | Variable<any, string>},ValueTypes["e_veto_pick_types_mutation_response"]],
delete_e_veto_pick_types_by_pk?: [{	value: string | Variable<any, string>},ValueTypes["e_veto_pick_types"]],
delete_map_pools?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["map_pools_bool_exp"] | Variable<any, string>},ValueTypes["map_pools_mutation_response"]],
delete_map_pools_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["map_pools"]],
delete_maps?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["maps_bool_exp"] | Variable<any, string>},ValueTypes["maps_mutation_response"]],
delete_maps_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["maps"]],
delete_match_lineup_players?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["match_lineup_players_bool_exp"] | Variable<any, string>},ValueTypes["match_lineup_players_mutation_response"]],
delete_match_lineup_players_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["match_lineup_players"]],
delete_match_lineups?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["match_lineups_bool_exp"] | Variable<any, string>},ValueTypes["match_lineups_mutation_response"]],
delete_match_lineups_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["match_lineups"]],
delete_match_map_demos?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["match_map_demos_bool_exp"] | Variable<any, string>},ValueTypes["match_map_demos_mutation_response"]],
delete_match_map_demos_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["match_map_demos"]],
delete_match_map_rounds?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["match_map_rounds_bool_exp"] | Variable<any, string>},ValueTypes["match_map_rounds_mutation_response"]],
delete_match_map_rounds_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["match_map_rounds"]],
delete_match_maps?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["match_maps_bool_exp"] | Variable<any, string>},ValueTypes["match_maps_mutation_response"]],
delete_match_maps_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["match_maps"]],
delete_match_veto_picks?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["match_veto_picks_bool_exp"] | Variable<any, string>},ValueTypes["match_veto_picks_mutation_response"]],
delete_match_veto_picks_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["match_veto_picks"]],
delete_matches?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["matches_bool_exp"] | Variable<any, string>},ValueTypes["matches_mutation_response"]],
delete_matches_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["matches"]],
delete_player_assists?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["player_assists_bool_exp"] | Variable<any, string>},ValueTypes["player_assists_mutation_response"]],
delete_player_assists_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["player_assists"]],
delete_player_damages?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["player_damages_bool_exp"] | Variable<any, string>},ValueTypes["player_damages_mutation_response"]],
delete_player_damages_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["player_damages"]],
delete_player_flashes?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["player_flashes_bool_exp"] | Variable<any, string>},ValueTypes["player_flashes_mutation_response"]],
delete_player_flashes_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["player_flashes"]],
delete_player_kills?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["player_kills_bool_exp"] | Variable<any, string>},ValueTypes["player_kills_mutation_response"]],
delete_player_kills_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["player_kills"]],
delete_player_objectives?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["player_objectives_bool_exp"] | Variable<any, string>},ValueTypes["player_objectives_mutation_response"]],
delete_player_objectives_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["player_objectives"]],
delete_player_unused_utility?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["player_unused_utility_bool_exp"] | Variable<any, string>},ValueTypes["player_unused_utility_mutation_response"]],
delete_player_unused_utility_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["player_unused_utility"]],
delete_player_utility?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["player_utility_bool_exp"] | Variable<any, string>},ValueTypes["player_utility_mutation_response"]],
delete_player_utility_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["player_utility"]],
delete_players?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["players_bool_exp"] | Variable<any, string>},ValueTypes["players_mutation_response"]],
delete_players_by_pk?: [{	steam_id: ValueTypes["bigint"] | Variable<any, string>},ValueTypes["players"]],
delete_servers?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["servers_bool_exp"] | Variable<any, string>},ValueTypes["servers_mutation_response"]],
delete_servers_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["servers"]],
delete_team_invites?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["team_invites_bool_exp"] | Variable<any, string>},ValueTypes["team_invites_mutation_response"]],
delete_team_invites_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["team_invites"]],
delete_team_roster?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["team_roster_bool_exp"] | Variable<any, string>},ValueTypes["team_roster_mutation_response"]],
delete_team_roster_by_pk?: [{	player_steam_id: ValueTypes["bigint"] | Variable<any, string>,	team_id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["team_roster"]],
delete_teams?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["teams_bool_exp"] | Variable<any, string>},ValueTypes["teams_mutation_response"]],
delete_teams_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["teams"]],
delete_tournament_organizers?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["tournament_organizers_bool_exp"] | Variable<any, string>},ValueTypes["tournament_organizers_mutation_response"]],
delete_tournament_organizers_by_pk?: [{	steam_id: ValueTypes["bigint"] | Variable<any, string>,	tournament_id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["tournament_organizers"]],
delete_tournament_roster?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["tournament_roster_bool_exp"] | Variable<any, string>},ValueTypes["tournament_roster_mutation_response"]],
delete_tournament_roster_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["tournament_roster"]],
delete_tournament_servers?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["tournament_servers_bool_exp"] | Variable<any, string>},ValueTypes["tournament_servers_mutation_response"]],
delete_tournament_servers_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["tournament_servers"]],
delete_tournament_stages?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["tournament_stages_bool_exp"] | Variable<any, string>},ValueTypes["tournament_stages_mutation_response"]],
delete_tournament_stages_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["tournament_stages"]],
delete_tournament_teams?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["tournament_teams_bool_exp"] | Variable<any, string>},ValueTypes["tournament_teams_mutation_response"]],
delete_tournament_teams_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["tournament_teams"]],
delete_tournaments?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["tournaments_bool_exp"] | Variable<any, string>},ValueTypes["tournaments_mutation_response"]],
delete_tournaments_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["tournaments"]],
delete_v_match_captains?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["v_match_captains_bool_exp"] | Variable<any, string>},ValueTypes["v_match_captains_mutation_response"]],
delete_v_pool_maps?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["v_pool_maps_bool_exp"] | Variable<any, string>},ValueTypes["v_pool_maps_mutation_response"]],
insert__map_pool?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["_map_pool_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["_map_pool_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["_map_pool_mutation_response"]],
insert__map_pool_one?: [{	/** the row to be inserted */
	object: ValueTypes["_map_pool_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["_map_pool_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["_map_pool"]],
insert_e_match_map_status?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["e_match_map_status_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["e_match_map_status_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["e_match_map_status_mutation_response"]],
insert_e_match_map_status_one?: [{	/** the row to be inserted */
	object: ValueTypes["e_match_map_status_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["e_match_map_status_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["e_match_map_status"]],
insert_e_match_status?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["e_match_status_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["e_match_status_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["e_match_status_mutation_response"]],
insert_e_match_status_one?: [{	/** the row to be inserted */
	object: ValueTypes["e_match_status_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["e_match_status_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["e_match_status"]],
insert_e_match_types?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["e_match_types_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["e_match_types_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["e_match_types_mutation_response"]],
insert_e_match_types_one?: [{	/** the row to be inserted */
	object: ValueTypes["e_match_types_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["e_match_types_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["e_match_types"]],
insert_e_objective_types?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["e_objective_types_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["e_objective_types_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["e_objective_types_mutation_response"]],
insert_e_objective_types_one?: [{	/** the row to be inserted */
	object: ValueTypes["e_objective_types_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["e_objective_types_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["e_objective_types"]],
insert_e_sides?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["e_sides_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["e_sides_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["e_sides_mutation_response"]],
insert_e_sides_one?: [{	/** the row to be inserted */
	object: ValueTypes["e_sides_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["e_sides_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["e_sides"]],
insert_e_team_roles?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["e_team_roles_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["e_team_roles_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["e_team_roles_mutation_response"]],
insert_e_team_roles_one?: [{	/** the row to be inserted */
	object: ValueTypes["e_team_roles_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["e_team_roles_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["e_team_roles"]],
insert_e_timeout_settings?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["e_timeout_settings_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["e_timeout_settings_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["e_timeout_settings_mutation_response"]],
insert_e_timeout_settings_one?: [{	/** the row to be inserted */
	object: ValueTypes["e_timeout_settings_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["e_timeout_settings_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["e_timeout_settings"]],
insert_e_utility_types?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["e_utility_types_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["e_utility_types_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["e_utility_types_mutation_response"]],
insert_e_utility_types_one?: [{	/** the row to be inserted */
	object: ValueTypes["e_utility_types_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["e_utility_types_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["e_utility_types"]],
insert_e_veto_pick_types?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["e_veto_pick_types_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["e_veto_pick_types_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["e_veto_pick_types_mutation_response"]],
insert_e_veto_pick_types_one?: [{	/** the row to be inserted */
	object: ValueTypes["e_veto_pick_types_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["e_veto_pick_types_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["e_veto_pick_types"]],
insert_map_pools?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["map_pools_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["map_pools_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["map_pools_mutation_response"]],
insert_map_pools_one?: [{	/** the row to be inserted */
	object: ValueTypes["map_pools_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["map_pools_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["map_pools"]],
insert_maps?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["maps_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["maps_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["maps_mutation_response"]],
insert_maps_one?: [{	/** the row to be inserted */
	object: ValueTypes["maps_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["maps_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["maps"]],
insert_match_lineup_players?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["match_lineup_players_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["match_lineup_players_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["match_lineup_players_mutation_response"]],
insert_match_lineup_players_one?: [{	/** the row to be inserted */
	object: ValueTypes["match_lineup_players_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["match_lineup_players_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["match_lineup_players"]],
insert_match_lineups?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["match_lineups_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["match_lineups_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["match_lineups_mutation_response"]],
insert_match_lineups_one?: [{	/** the row to be inserted */
	object: ValueTypes["match_lineups_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["match_lineups_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["match_lineups"]],
insert_match_map_demos?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["match_map_demos_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["match_map_demos_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["match_map_demos_mutation_response"]],
insert_match_map_demos_one?: [{	/** the row to be inserted */
	object: ValueTypes["match_map_demos_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["match_map_demos_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["match_map_demos"]],
insert_match_map_rounds?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["match_map_rounds_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["match_map_rounds_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["match_map_rounds_mutation_response"]],
insert_match_map_rounds_one?: [{	/** the row to be inserted */
	object: ValueTypes["match_map_rounds_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["match_map_rounds_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["match_map_rounds"]],
insert_match_maps?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["match_maps_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["match_maps_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["match_maps_mutation_response"]],
insert_match_maps_one?: [{	/** the row to be inserted */
	object: ValueTypes["match_maps_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["match_maps_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["match_maps"]],
insert_match_veto_picks?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["match_veto_picks_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["match_veto_picks_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["match_veto_picks_mutation_response"]],
insert_match_veto_picks_one?: [{	/** the row to be inserted */
	object: ValueTypes["match_veto_picks_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["match_veto_picks_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["match_veto_picks"]],
insert_matches?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["matches_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["matches_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["matches_mutation_response"]],
insert_matches_one?: [{	/** the row to be inserted */
	object: ValueTypes["matches_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["matches_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["matches"]],
insert_player_assists?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["player_assists_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["player_assists_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["player_assists_mutation_response"]],
insert_player_assists_one?: [{	/** the row to be inserted */
	object: ValueTypes["player_assists_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["player_assists_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["player_assists"]],
insert_player_damages?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["player_damages_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["player_damages_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["player_damages_mutation_response"]],
insert_player_damages_one?: [{	/** the row to be inserted */
	object: ValueTypes["player_damages_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["player_damages_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["player_damages"]],
insert_player_flashes?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["player_flashes_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["player_flashes_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["player_flashes_mutation_response"]],
insert_player_flashes_one?: [{	/** the row to be inserted */
	object: ValueTypes["player_flashes_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["player_flashes_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["player_flashes"]],
insert_player_kills?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["player_kills_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["player_kills_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["player_kills_mutation_response"]],
insert_player_kills_one?: [{	/** the row to be inserted */
	object: ValueTypes["player_kills_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["player_kills_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["player_kills"]],
insert_player_objectives?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["player_objectives_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["player_objectives_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["player_objectives_mutation_response"]],
insert_player_objectives_one?: [{	/** the row to be inserted */
	object: ValueTypes["player_objectives_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["player_objectives_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["player_objectives"]],
insert_player_unused_utility?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["player_unused_utility_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["player_unused_utility_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["player_unused_utility_mutation_response"]],
insert_player_unused_utility_one?: [{	/** the row to be inserted */
	object: ValueTypes["player_unused_utility_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["player_unused_utility_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["player_unused_utility"]],
insert_player_utility?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["player_utility_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["player_utility_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["player_utility_mutation_response"]],
insert_player_utility_one?: [{	/** the row to be inserted */
	object: ValueTypes["player_utility_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["player_utility_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["player_utility"]],
insert_players?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["players_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["players_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["players_mutation_response"]],
insert_players_one?: [{	/** the row to be inserted */
	object: ValueTypes["players_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["players_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["players"]],
insert_servers?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["servers_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["servers_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["servers_mutation_response"]],
insert_servers_one?: [{	/** the row to be inserted */
	object: ValueTypes["servers_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["servers_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["servers"]],
insert_team_invites?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["team_invites_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["team_invites_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["team_invites_mutation_response"]],
insert_team_invites_one?: [{	/** the row to be inserted */
	object: ValueTypes["team_invites_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["team_invites_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["team_invites"]],
insert_team_roster?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["team_roster_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["team_roster_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["team_roster_mutation_response"]],
insert_team_roster_one?: [{	/** the row to be inserted */
	object: ValueTypes["team_roster_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["team_roster_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["team_roster"]],
insert_teams?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["teams_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["teams_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["teams_mutation_response"]],
insert_teams_one?: [{	/** the row to be inserted */
	object: ValueTypes["teams_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["teams_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["teams"]],
insert_tournament_organizers?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["tournament_organizers_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["tournament_organizers_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["tournament_organizers_mutation_response"]],
insert_tournament_organizers_one?: [{	/** the row to be inserted */
	object: ValueTypes["tournament_organizers_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["tournament_organizers_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["tournament_organizers"]],
insert_tournament_roster?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["tournament_roster_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["tournament_roster_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["tournament_roster_mutation_response"]],
insert_tournament_roster_one?: [{	/** the row to be inserted */
	object: ValueTypes["tournament_roster_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["tournament_roster_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["tournament_roster"]],
insert_tournament_servers?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["tournament_servers_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["tournament_servers_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["tournament_servers_mutation_response"]],
insert_tournament_servers_one?: [{	/** the row to be inserted */
	object: ValueTypes["tournament_servers_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["tournament_servers_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["tournament_servers"]],
insert_tournament_stages?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["tournament_stages_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["tournament_stages_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["tournament_stages_mutation_response"]],
insert_tournament_stages_one?: [{	/** the row to be inserted */
	object: ValueTypes["tournament_stages_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["tournament_stages_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["tournament_stages"]],
insert_tournament_teams?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["tournament_teams_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["tournament_teams_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["tournament_teams_mutation_response"]],
insert_tournament_teams_one?: [{	/** the row to be inserted */
	object: ValueTypes["tournament_teams_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["tournament_teams_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["tournament_teams"]],
insert_tournaments?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["tournaments_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["tournaments_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["tournaments_mutation_response"]],
insert_tournaments_one?: [{	/** the row to be inserted */
	object: ValueTypes["tournaments_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["tournaments_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["tournaments"]],
insert_v_match_captains?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["v_match_captains_insert_input"]> | Variable<any, string>},ValueTypes["v_match_captains_mutation_response"]],
insert_v_match_captains_one?: [{	/** the row to be inserted */
	object: ValueTypes["v_match_captains_insert_input"] | Variable<any, string>},ValueTypes["v_match_captains"]],
insert_v_pool_maps?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["v_pool_maps_insert_input"]> | Variable<any, string>},ValueTypes["v_pool_maps_mutation_response"]],
insert_v_pool_maps_one?: [{	/** the row to be inserted */
	object: ValueTypes["v_pool_maps_insert_input"] | Variable<any, string>},ValueTypes["v_pool_maps"]],
scheduleMatch?: [{	match_id: ValueTypes["uuid"] | Variable<any, string>,	time?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>},ValueTypes["SuccessOutput"]],
startMatch?: [{	match_id: ValueTypes["uuid"] | Variable<any, string>,	server_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>},ValueTypes["SuccessOutput"]],
update__map_pool?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["_map_pool_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["_map_pool_bool_exp"] | Variable<any, string>},ValueTypes["_map_pool_mutation_response"]],
update__map_pool_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["_map_pool_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["_map_pool_pk_columns_input"] | Variable<any, string>},ValueTypes["_map_pool"]],
update__map_pool_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["_map_pool_updates"]> | Variable<any, string>},ValueTypes["_map_pool_mutation_response"]],
update_e_match_map_status?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["e_match_map_status_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["e_match_map_status_bool_exp"] | Variable<any, string>},ValueTypes["e_match_map_status_mutation_response"]],
update_e_match_map_status_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["e_match_map_status_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["e_match_map_status_pk_columns_input"] | Variable<any, string>},ValueTypes["e_match_map_status"]],
update_e_match_map_status_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["e_match_map_status_updates"]> | Variable<any, string>},ValueTypes["e_match_map_status_mutation_response"]],
update_e_match_status?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["e_match_status_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["e_match_status_bool_exp"] | Variable<any, string>},ValueTypes["e_match_status_mutation_response"]],
update_e_match_status_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["e_match_status_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["e_match_status_pk_columns_input"] | Variable<any, string>},ValueTypes["e_match_status"]],
update_e_match_status_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["e_match_status_updates"]> | Variable<any, string>},ValueTypes["e_match_status_mutation_response"]],
update_e_match_types?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["e_match_types_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["e_match_types_bool_exp"] | Variable<any, string>},ValueTypes["e_match_types_mutation_response"]],
update_e_match_types_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["e_match_types_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["e_match_types_pk_columns_input"] | Variable<any, string>},ValueTypes["e_match_types"]],
update_e_match_types_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["e_match_types_updates"]> | Variable<any, string>},ValueTypes["e_match_types_mutation_response"]],
update_e_objective_types?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["e_objective_types_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["e_objective_types_bool_exp"] | Variable<any, string>},ValueTypes["e_objective_types_mutation_response"]],
update_e_objective_types_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["e_objective_types_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["e_objective_types_pk_columns_input"] | Variable<any, string>},ValueTypes["e_objective_types"]],
update_e_objective_types_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["e_objective_types_updates"]> | Variable<any, string>},ValueTypes["e_objective_types_mutation_response"]],
update_e_sides?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["e_sides_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["e_sides_bool_exp"] | Variable<any, string>},ValueTypes["e_sides_mutation_response"]],
update_e_sides_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["e_sides_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["e_sides_pk_columns_input"] | Variable<any, string>},ValueTypes["e_sides"]],
update_e_sides_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["e_sides_updates"]> | Variable<any, string>},ValueTypes["e_sides_mutation_response"]],
update_e_team_roles?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["e_team_roles_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["e_team_roles_bool_exp"] | Variable<any, string>},ValueTypes["e_team_roles_mutation_response"]],
update_e_team_roles_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["e_team_roles_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["e_team_roles_pk_columns_input"] | Variable<any, string>},ValueTypes["e_team_roles"]],
update_e_team_roles_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["e_team_roles_updates"]> | Variable<any, string>},ValueTypes["e_team_roles_mutation_response"]],
update_e_timeout_settings?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["e_timeout_settings_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["e_timeout_settings_bool_exp"] | Variable<any, string>},ValueTypes["e_timeout_settings_mutation_response"]],
update_e_timeout_settings_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["e_timeout_settings_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["e_timeout_settings_pk_columns_input"] | Variable<any, string>},ValueTypes["e_timeout_settings"]],
update_e_timeout_settings_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["e_timeout_settings_updates"]> | Variable<any, string>},ValueTypes["e_timeout_settings_mutation_response"]],
update_e_utility_types?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["e_utility_types_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["e_utility_types_bool_exp"] | Variable<any, string>},ValueTypes["e_utility_types_mutation_response"]],
update_e_utility_types_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["e_utility_types_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["e_utility_types_pk_columns_input"] | Variable<any, string>},ValueTypes["e_utility_types"]],
update_e_utility_types_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["e_utility_types_updates"]> | Variable<any, string>},ValueTypes["e_utility_types_mutation_response"]],
update_e_veto_pick_types?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["e_veto_pick_types_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["e_veto_pick_types_bool_exp"] | Variable<any, string>},ValueTypes["e_veto_pick_types_mutation_response"]],
update_e_veto_pick_types_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["e_veto_pick_types_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["e_veto_pick_types_pk_columns_input"] | Variable<any, string>},ValueTypes["e_veto_pick_types"]],
update_e_veto_pick_types_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["e_veto_pick_types_updates"]> | Variable<any, string>},ValueTypes["e_veto_pick_types_mutation_response"]],
update_map_pools?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["map_pools_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["map_pools_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["map_pools_bool_exp"] | Variable<any, string>},ValueTypes["map_pools_mutation_response"]],
update_map_pools_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["map_pools_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["map_pools_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["map_pools_pk_columns_input"] | Variable<any, string>},ValueTypes["map_pools"]],
update_map_pools_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["map_pools_updates"]> | Variable<any, string>},ValueTypes["map_pools_mutation_response"]],
update_maps?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["maps_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["maps_bool_exp"] | Variable<any, string>},ValueTypes["maps_mutation_response"]],
update_maps_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["maps_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["maps_pk_columns_input"] | Variable<any, string>},ValueTypes["maps"]],
update_maps_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["maps_updates"]> | Variable<any, string>},ValueTypes["maps_mutation_response"]],
update_match_lineup_players?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["match_lineup_players_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["match_lineup_players_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["match_lineup_players_bool_exp"] | Variable<any, string>},ValueTypes["match_lineup_players_mutation_response"]],
update_match_lineup_players_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["match_lineup_players_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["match_lineup_players_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["match_lineup_players_pk_columns_input"] | Variable<any, string>},ValueTypes["match_lineup_players"]],
update_match_lineup_players_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["match_lineup_players_updates"]> | Variable<any, string>},ValueTypes["match_lineup_players_mutation_response"]],
update_match_lineups?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["match_lineups_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["match_lineups_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["match_lineups_bool_exp"] | Variable<any, string>},ValueTypes["match_lineups_mutation_response"]],
update_match_lineups_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["match_lineups_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["match_lineups_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["match_lineups_pk_columns_input"] | Variable<any, string>},ValueTypes["match_lineups"]],
update_match_lineups_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["match_lineups_updates"]> | Variable<any, string>},ValueTypes["match_lineups_mutation_response"]],
update_match_map_demos?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["match_map_demos_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["match_map_demos_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["match_map_demos_bool_exp"] | Variable<any, string>},ValueTypes["match_map_demos_mutation_response"]],
update_match_map_demos_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["match_map_demos_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["match_map_demos_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["match_map_demos_pk_columns_input"] | Variable<any, string>},ValueTypes["match_map_demos"]],
update_match_map_demos_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["match_map_demos_updates"]> | Variable<any, string>},ValueTypes["match_map_demos_mutation_response"]],
update_match_map_rounds?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["match_map_rounds_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["match_map_rounds_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["match_map_rounds_bool_exp"] | Variable<any, string>},ValueTypes["match_map_rounds_mutation_response"]],
update_match_map_rounds_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["match_map_rounds_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["match_map_rounds_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["match_map_rounds_pk_columns_input"] | Variable<any, string>},ValueTypes["match_map_rounds"]],
update_match_map_rounds_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["match_map_rounds_updates"]> | Variable<any, string>},ValueTypes["match_map_rounds_mutation_response"]],
update_match_maps?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["match_maps_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["match_maps_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["match_maps_bool_exp"] | Variable<any, string>},ValueTypes["match_maps_mutation_response"]],
update_match_maps_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["match_maps_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["match_maps_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["match_maps_pk_columns_input"] | Variable<any, string>},ValueTypes["match_maps"]],
update_match_maps_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["match_maps_updates"]> | Variable<any, string>},ValueTypes["match_maps_mutation_response"]],
update_match_veto_picks?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["match_veto_picks_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["match_veto_picks_bool_exp"] | Variable<any, string>},ValueTypes["match_veto_picks_mutation_response"]],
update_match_veto_picks_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["match_veto_picks_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["match_veto_picks_pk_columns_input"] | Variable<any, string>},ValueTypes["match_veto_picks"]],
update_match_veto_picks_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["match_veto_picks_updates"]> | Variable<any, string>},ValueTypes["match_veto_picks_mutation_response"]],
update_matches?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["matches_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["matches_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["matches_bool_exp"] | Variable<any, string>},ValueTypes["matches_mutation_response"]],
update_matches_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["matches_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["matches_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["matches_pk_columns_input"] | Variable<any, string>},ValueTypes["matches"]],
update_matches_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["matches_updates"]> | Variable<any, string>},ValueTypes["matches_mutation_response"]],
update_player_assists?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["player_assists_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["player_assists_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["player_assists_bool_exp"] | Variable<any, string>},ValueTypes["player_assists_mutation_response"]],
update_player_assists_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["player_assists_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["player_assists_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["player_assists_pk_columns_input"] | Variable<any, string>},ValueTypes["player_assists"]],
update_player_assists_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["player_assists_updates"]> | Variable<any, string>},ValueTypes["player_assists_mutation_response"]],
update_player_damages?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["player_damages_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["player_damages_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["player_damages_bool_exp"] | Variable<any, string>},ValueTypes["player_damages_mutation_response"]],
update_player_damages_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["player_damages_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["player_damages_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["player_damages_pk_columns_input"] | Variable<any, string>},ValueTypes["player_damages"]],
update_player_damages_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["player_damages_updates"]> | Variable<any, string>},ValueTypes["player_damages_mutation_response"]],
update_player_flashes?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["player_flashes_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["player_flashes_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["player_flashes_bool_exp"] | Variable<any, string>},ValueTypes["player_flashes_mutation_response"]],
update_player_flashes_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["player_flashes_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["player_flashes_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["player_flashes_pk_columns_input"] | Variable<any, string>},ValueTypes["player_flashes"]],
update_player_flashes_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["player_flashes_updates"]> | Variable<any, string>},ValueTypes["player_flashes_mutation_response"]],
update_player_kills?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["player_kills_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["player_kills_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["player_kills_bool_exp"] | Variable<any, string>},ValueTypes["player_kills_mutation_response"]],
update_player_kills_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["player_kills_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["player_kills_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["player_kills_pk_columns_input"] | Variable<any, string>},ValueTypes["player_kills"]],
update_player_kills_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["player_kills_updates"]> | Variable<any, string>},ValueTypes["player_kills_mutation_response"]],
update_player_objectives?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["player_objectives_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["player_objectives_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["player_objectives_bool_exp"] | Variable<any, string>},ValueTypes["player_objectives_mutation_response"]],
update_player_objectives_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["player_objectives_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["player_objectives_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["player_objectives_pk_columns_input"] | Variable<any, string>},ValueTypes["player_objectives"]],
update_player_objectives_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["player_objectives_updates"]> | Variable<any, string>},ValueTypes["player_objectives_mutation_response"]],
update_player_unused_utility?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["player_unused_utility_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["player_unused_utility_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["player_unused_utility_bool_exp"] | Variable<any, string>},ValueTypes["player_unused_utility_mutation_response"]],
update_player_unused_utility_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["player_unused_utility_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["player_unused_utility_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["player_unused_utility_pk_columns_input"] | Variable<any, string>},ValueTypes["player_unused_utility"]],
update_player_unused_utility_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["player_unused_utility_updates"]> | Variable<any, string>},ValueTypes["player_unused_utility_mutation_response"]],
update_player_utility?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["player_utility_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["player_utility_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["player_utility_bool_exp"] | Variable<any, string>},ValueTypes["player_utility_mutation_response"]],
update_player_utility_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["player_utility_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["player_utility_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["player_utility_pk_columns_input"] | Variable<any, string>},ValueTypes["player_utility"]],
update_player_utility_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["player_utility_updates"]> | Variable<any, string>},ValueTypes["player_utility_mutation_response"]],
update_players?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["players_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["players_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["players_bool_exp"] | Variable<any, string>},ValueTypes["players_mutation_response"]],
update_players_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["players_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["players_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["players_pk_columns_input"] | Variable<any, string>},ValueTypes["players"]],
update_players_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["players_updates"]> | Variable<any, string>},ValueTypes["players_mutation_response"]],
update_servers?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["servers_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["servers_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["servers_bool_exp"] | Variable<any, string>},ValueTypes["servers_mutation_response"]],
update_servers_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["servers_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["servers_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["servers_pk_columns_input"] | Variable<any, string>},ValueTypes["servers"]],
update_servers_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["servers_updates"]> | Variable<any, string>},ValueTypes["servers_mutation_response"]],
update_team_invites?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["team_invites_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["team_invites_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["team_invites_bool_exp"] | Variable<any, string>},ValueTypes["team_invites_mutation_response"]],
update_team_invites_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["team_invites_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["team_invites_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["team_invites_pk_columns_input"] | Variable<any, string>},ValueTypes["team_invites"]],
update_team_invites_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["team_invites_updates"]> | Variable<any, string>},ValueTypes["team_invites_mutation_response"]],
update_team_roster?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["team_roster_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["team_roster_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["team_roster_bool_exp"] | Variable<any, string>},ValueTypes["team_roster_mutation_response"]],
update_team_roster_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["team_roster_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["team_roster_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["team_roster_pk_columns_input"] | Variable<any, string>},ValueTypes["team_roster"]],
update_team_roster_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["team_roster_updates"]> | Variable<any, string>},ValueTypes["team_roster_mutation_response"]],
update_teams?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["teams_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["teams_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["teams_bool_exp"] | Variable<any, string>},ValueTypes["teams_mutation_response"]],
update_teams_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["teams_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["teams_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["teams_pk_columns_input"] | Variable<any, string>},ValueTypes["teams"]],
update_teams_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["teams_updates"]> | Variable<any, string>},ValueTypes["teams_mutation_response"]],
update_tournament_organizers?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["tournament_organizers_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["tournament_organizers_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["tournament_organizers_bool_exp"] | Variable<any, string>},ValueTypes["tournament_organizers_mutation_response"]],
update_tournament_organizers_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["tournament_organizers_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["tournament_organizers_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["tournament_organizers_pk_columns_input"] | Variable<any, string>},ValueTypes["tournament_organizers"]],
update_tournament_organizers_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["tournament_organizers_updates"]> | Variable<any, string>},ValueTypes["tournament_organizers_mutation_response"]],
update_tournament_roster?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["tournament_roster_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["tournament_roster_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["tournament_roster_bool_exp"] | Variable<any, string>},ValueTypes["tournament_roster_mutation_response"]],
update_tournament_roster_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["tournament_roster_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["tournament_roster_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["tournament_roster_pk_columns_input"] | Variable<any, string>},ValueTypes["tournament_roster"]],
update_tournament_roster_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["tournament_roster_updates"]> | Variable<any, string>},ValueTypes["tournament_roster_mutation_response"]],
update_tournament_servers?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["tournament_servers_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["tournament_servers_bool_exp"] | Variable<any, string>},ValueTypes["tournament_servers_mutation_response"]],
update_tournament_servers_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["tournament_servers_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["tournament_servers_pk_columns_input"] | Variable<any, string>},ValueTypes["tournament_servers"]],
update_tournament_servers_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["tournament_servers_updates"]> | Variable<any, string>},ValueTypes["tournament_servers_mutation_response"]],
update_tournament_stages?: [{	/** append existing jsonb value of filtered columns with new jsonb value */
	_append?: ValueTypes["tournament_stages_append_input"] | undefined | null | Variable<any, string>,	/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
	_delete_at_path?: ValueTypes["tournament_stages_delete_at_path_input"] | undefined | null | Variable<any, string>,	/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
	_delete_elem?: ValueTypes["tournament_stages_delete_elem_input"] | undefined | null | Variable<any, string>,	/** delete key/value pair or string element. key/value pairs are matched based on their key value */
	_delete_key?: ValueTypes["tournament_stages_delete_key_input"] | undefined | null | Variable<any, string>,	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["tournament_stages_inc_input"] | undefined | null | Variable<any, string>,	/** prepend existing jsonb value of filtered columns with new jsonb value */
	_prepend?: ValueTypes["tournament_stages_prepend_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["tournament_stages_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["tournament_stages_bool_exp"] | Variable<any, string>},ValueTypes["tournament_stages_mutation_response"]],
update_tournament_stages_by_pk?: [{	/** append existing jsonb value of filtered columns with new jsonb value */
	_append?: ValueTypes["tournament_stages_append_input"] | undefined | null | Variable<any, string>,	/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
	_delete_at_path?: ValueTypes["tournament_stages_delete_at_path_input"] | undefined | null | Variable<any, string>,	/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
	_delete_elem?: ValueTypes["tournament_stages_delete_elem_input"] | undefined | null | Variable<any, string>,	/** delete key/value pair or string element. key/value pairs are matched based on their key value */
	_delete_key?: ValueTypes["tournament_stages_delete_key_input"] | undefined | null | Variable<any, string>,	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["tournament_stages_inc_input"] | undefined | null | Variable<any, string>,	/** prepend existing jsonb value of filtered columns with new jsonb value */
	_prepend?: ValueTypes["tournament_stages_prepend_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["tournament_stages_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["tournament_stages_pk_columns_input"] | Variable<any, string>},ValueTypes["tournament_stages"]],
update_tournament_stages_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["tournament_stages_updates"]> | Variable<any, string>},ValueTypes["tournament_stages_mutation_response"]],
update_tournament_teams?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["tournament_teams_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["tournament_teams_bool_exp"] | Variable<any, string>},ValueTypes["tournament_teams_mutation_response"]],
update_tournament_teams_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["tournament_teams_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["tournament_teams_pk_columns_input"] | Variable<any, string>},ValueTypes["tournament_teams"]],
update_tournament_teams_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["tournament_teams_updates"]> | Variable<any, string>},ValueTypes["tournament_teams_mutation_response"]],
update_tournaments?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["tournaments_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["tournaments_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["tournaments_bool_exp"] | Variable<any, string>},ValueTypes["tournaments_mutation_response"]],
update_tournaments_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["tournaments_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["tournaments_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["tournaments_pk_columns_input"] | Variable<any, string>},ValueTypes["tournaments"]],
update_tournaments_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["tournaments_updates"]> | Variable<any, string>},ValueTypes["tournaments_mutation_response"]],
update_v_match_captains?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["v_match_captains_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["v_match_captains_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["v_match_captains_bool_exp"] | Variable<any, string>},ValueTypes["v_match_captains_mutation_response"]],
update_v_match_captains_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["v_match_captains_updates"]> | Variable<any, string>},ValueTypes["v_match_captains_mutation_response"]],
		__typename?: boolean | `@${string}`
}>;
	["numeric"]:unknown;
	/** Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'. */
["numeric_comparison_exp"]: {
	_eq?: ValueTypes["numeric"] | undefined | null | Variable<any, string>,
	_gt?: ValueTypes["numeric"] | undefined | null | Variable<any, string>,
	_gte?: ValueTypes["numeric"] | undefined | null | Variable<any, string>,
	_in?: Array<ValueTypes["numeric"]> | undefined | null | Variable<any, string>,
	_is_null?: boolean | undefined | null | Variable<any, string>,
	_lt?: ValueTypes["numeric"] | undefined | null | Variable<any, string>,
	_lte?: ValueTypes["numeric"] | undefined | null | Variable<any, string>,
	_neq?: ValueTypes["numeric"] | undefined | null | Variable<any, string>,
	_nin?: Array<ValueTypes["numeric"]> | undefined | null | Variable<any, string>
};
	/** column ordering options */
["order_by"]:order_by;
	/** columns and relationships of "player_assists" */
["player_assists"]: AliasType<{
	/** An object relationship */
	attacked_player?:ValueTypes["players"],
	attacked_steam_id?:boolean | `@${string}`,
	attacked_team?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	attacker_team?:boolean | `@${string}`,
	flash?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** An object relationship */
	match?:ValueTypes["matches"],
	match_id?:boolean | `@${string}`,
	/** An object relationship */
	match_map?:ValueTypes["match_maps"],
	match_map_id?:boolean | `@${string}`,
	/** An object relationship */
	player?:ValueTypes["players"],
	round?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "player_assists" */
["player_assists_aggregate"]: AliasType<{
	aggregate?:ValueTypes["player_assists_aggregate_fields"],
	nodes?:ValueTypes["player_assists"],
		__typename?: boolean | `@${string}`
}>;
	["player_assists_aggregate_bool_exp"]: {
	bool_and?: ValueTypes["player_assists_aggregate_bool_exp_bool_and"] | undefined | null | Variable<any, string>,
	bool_or?: ValueTypes["player_assists_aggregate_bool_exp_bool_or"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["player_assists_aggregate_bool_exp_count"] | undefined | null | Variable<any, string>
};
	["player_assists_aggregate_bool_exp_bool_and"]: {
	arguments: ValueTypes["player_assists_select_column_player_assists_aggregate_bool_exp_bool_and_arguments_columns"] | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["player_assists_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Boolean_comparison_exp"] | Variable<any, string>
};
	["player_assists_aggregate_bool_exp_bool_or"]: {
	arguments: ValueTypes["player_assists_select_column_player_assists_aggregate_bool_exp_bool_or_arguments_columns"] | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["player_assists_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Boolean_comparison_exp"] | Variable<any, string>
};
	["player_assists_aggregate_bool_exp_count"]: {
	arguments?: Array<ValueTypes["player_assists_select_column"]> | undefined | null | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["player_assists_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Int_comparison_exp"] | Variable<any, string>
};
	/** aggregate fields of "player_assists" */
["player_assists_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["player_assists_avg_fields"],
count?: [{	columns?: Array<ValueTypes["player_assists_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["player_assists_max_fields"],
	min?:ValueTypes["player_assists_min_fields"],
	stddev?:ValueTypes["player_assists_stddev_fields"],
	stddev_pop?:ValueTypes["player_assists_stddev_pop_fields"],
	stddev_samp?:ValueTypes["player_assists_stddev_samp_fields"],
	sum?:ValueTypes["player_assists_sum_fields"],
	var_pop?:ValueTypes["player_assists_var_pop_fields"],
	var_samp?:ValueTypes["player_assists_var_samp_fields"],
	variance?:ValueTypes["player_assists_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "player_assists" */
["player_assists_aggregate_order_by"]: {
	avg?: ValueTypes["player_assists_avg_order_by"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["player_assists_max_order_by"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["player_assists_min_order_by"] | undefined | null | Variable<any, string>,
	stddev?: ValueTypes["player_assists_stddev_order_by"] | undefined | null | Variable<any, string>,
	stddev_pop?: ValueTypes["player_assists_stddev_pop_order_by"] | undefined | null | Variable<any, string>,
	stddev_samp?: ValueTypes["player_assists_stddev_samp_order_by"] | undefined | null | Variable<any, string>,
	sum?: ValueTypes["player_assists_sum_order_by"] | undefined | null | Variable<any, string>,
	var_pop?: ValueTypes["player_assists_var_pop_order_by"] | undefined | null | Variable<any, string>,
	var_samp?: ValueTypes["player_assists_var_samp_order_by"] | undefined | null | Variable<any, string>,
	variance?: ValueTypes["player_assists_variance_order_by"] | undefined | null | Variable<any, string>
};
	/** input type for inserting array relation for remote table "player_assists" */
["player_assists_arr_rel_insert_input"]: {
	data: Array<ValueTypes["player_assists_insert_input"]> | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["player_assists_on_conflict"] | undefined | null | Variable<any, string>
};
	/** aggregate avg on columns */
["player_assists_avg_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "player_assists" */
["player_assists_avg_order_by"]: {
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to filter rows from the table "player_assists". All fields are combined with a logical 'AND'. */
["player_assists_bool_exp"]: {
	_and?: Array<ValueTypes["player_assists_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["player_assists_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["player_assists_bool_exp"]> | undefined | null | Variable<any, string>,
	attacked_player?: ValueTypes["players_bool_exp"] | undefined | null | Variable<any, string>,
	attacked_steam_id?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>,
	attacked_team?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>,
	attacker_team?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	flash?: ValueTypes["Boolean_comparison_exp"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	match?: ValueTypes["matches_bool_exp"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	match_map?: ValueTypes["match_maps_bool_exp"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_bool_exp"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	time?: ValueTypes["timestamptz_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "player_assists" */
["player_assists_constraint"]:player_assists_constraint;
	/** input type for incrementing numeric columns in table "player_assists" */
["player_assists_inc_input"]: {
	attacked_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	round?: number | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "player_assists" */
["player_assists_insert_input"]: {
	attacked_player?: ValueTypes["players_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	attacked_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	attacked_team?: string | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	attacker_team?: string | undefined | null | Variable<any, string>,
	flash?: boolean | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match?: ValueTypes["matches_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_map?: ValueTypes["match_maps_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	round?: number | undefined | null | Variable<any, string>,
	time?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["player_assists_max_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacked_team?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	attacker_team?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "player_assists" */
["player_assists_max_order_by"]: {
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacked_team?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_team?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	time?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate min on columns */
["player_assists_min_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacked_team?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	attacker_team?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "player_assists" */
["player_assists_min_order_by"]: {
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacked_team?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_team?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	time?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** response of any mutation on the table "player_assists" */
["player_assists_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["player_assists"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "player_assists" */
["player_assists_on_conflict"]: {
	constraint: ValueTypes["player_assists_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["player_assists_update_column"]> | Variable<any, string>,
	where?: ValueTypes["player_assists_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "player_assists". */
["player_assists_order_by"]: {
	attacked_player?: ValueTypes["players_order_by"] | undefined | null | Variable<any, string>,
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacked_team?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_team?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	flash?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match?: ValueTypes["matches_order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_map?: ValueTypes["match_maps_order_by"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	time?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: player_assists */
["player_assists_pk_columns_input"]: {
	id: ValueTypes["uuid"] | Variable<any, string>
};
	/** select columns of table "player_assists" */
["player_assists_select_column"]:player_assists_select_column;
	/** select "player_assists_aggregate_bool_exp_bool_and_arguments_columns" columns of table "player_assists" */
["player_assists_select_column_player_assists_aggregate_bool_exp_bool_and_arguments_columns"]:player_assists_select_column_player_assists_aggregate_bool_exp_bool_and_arguments_columns;
	/** select "player_assists_aggregate_bool_exp_bool_or_arguments_columns" columns of table "player_assists" */
["player_assists_select_column_player_assists_aggregate_bool_exp_bool_or_arguments_columns"]:player_assists_select_column_player_assists_aggregate_bool_exp_bool_or_arguments_columns;
	/** input type for updating data in table "player_assists" */
["player_assists_set_input"]: {
	attacked_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	attacked_team?: string | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	attacker_team?: string | undefined | null | Variable<any, string>,
	flash?: boolean | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	round?: number | undefined | null | Variable<any, string>,
	time?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["player_assists_stddev_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "player_assists" */
["player_assists_stddev_order_by"]: {
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_pop on columns */
["player_assists_stddev_pop_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "player_assists" */
["player_assists_stddev_pop_order_by"]: {
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_samp on columns */
["player_assists_stddev_samp_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "player_assists" */
["player_assists_stddev_samp_order_by"]: {
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "player_assists" */
["player_assists_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["player_assists_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["player_assists_stream_cursor_value_input"]: {
	attacked_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	attacked_team?: string | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	attacker_team?: string | undefined | null | Variable<any, string>,
	flash?: boolean | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	round?: number | undefined | null | Variable<any, string>,
	time?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["player_assists_sum_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "player_assists" */
["player_assists_sum_order_by"]: {
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** update columns of table "player_assists" */
["player_assists_update_column"]:player_assists_update_column;
	["player_assists_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["player_assists_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["player_assists_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["player_assists_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["player_assists_var_pop_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "player_assists" */
["player_assists_var_pop_order_by"]: {
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate var_samp on columns */
["player_assists_var_samp_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "player_assists" */
["player_assists_var_samp_order_by"]: {
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate variance on columns */
["player_assists_variance_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "player_assists" */
["player_assists_variance_order_by"]: {
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** columns and relationships of "player_damages" */
["player_damages"]: AliasType<{
	armor?:boolean | `@${string}`,
	attacked_location?:boolean | `@${string}`,
	attacked_location_coordinates?:boolean | `@${string}`,
	/** An object relationship */
	attacked_player?:ValueTypes["players"],
	attacked_steam_id?:boolean | `@${string}`,
	attacked_team?:boolean | `@${string}`,
	attacker_location?:boolean | `@${string}`,
	attacker_location_coordinates?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	attacker_team?:boolean | `@${string}`,
	damage?:boolean | `@${string}`,
	damage_armor?:boolean | `@${string}`,
	health?:boolean | `@${string}`,
	hitgroup?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** An object relationship */
	match?:ValueTypes["matches"],
	match_id?:boolean | `@${string}`,
	/** An object relationship */
	match_map?:ValueTypes["match_maps"],
	match_map_id?:boolean | `@${string}`,
	/** An object relationship */
	player?:ValueTypes["players"],
	round?:boolean | `@${string}`,
	/** A computed field, executes function "is_team_damage" */
	team_damage?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
	with?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "player_damages" */
["player_damages_aggregate"]: AliasType<{
	aggregate?:ValueTypes["player_damages_aggregate_fields"],
	nodes?:ValueTypes["player_damages"],
		__typename?: boolean | `@${string}`
}>;
	["player_damages_aggregate_bool_exp"]: {
	count?: ValueTypes["player_damages_aggregate_bool_exp_count"] | undefined | null | Variable<any, string>
};
	["player_damages_aggregate_bool_exp_count"]: {
	arguments?: Array<ValueTypes["player_damages_select_column"]> | undefined | null | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["player_damages_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Int_comparison_exp"] | Variable<any, string>
};
	/** aggregate fields of "player_damages" */
["player_damages_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["player_damages_avg_fields"],
count?: [{	columns?: Array<ValueTypes["player_damages_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["player_damages_max_fields"],
	min?:ValueTypes["player_damages_min_fields"],
	stddev?:ValueTypes["player_damages_stddev_fields"],
	stddev_pop?:ValueTypes["player_damages_stddev_pop_fields"],
	stddev_samp?:ValueTypes["player_damages_stddev_samp_fields"],
	sum?:ValueTypes["player_damages_sum_fields"],
	var_pop?:ValueTypes["player_damages_var_pop_fields"],
	var_samp?:ValueTypes["player_damages_var_samp_fields"],
	variance?:ValueTypes["player_damages_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "player_damages" */
["player_damages_aggregate_order_by"]: {
	avg?: ValueTypes["player_damages_avg_order_by"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["player_damages_max_order_by"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["player_damages_min_order_by"] | undefined | null | Variable<any, string>,
	stddev?: ValueTypes["player_damages_stddev_order_by"] | undefined | null | Variable<any, string>,
	stddev_pop?: ValueTypes["player_damages_stddev_pop_order_by"] | undefined | null | Variable<any, string>,
	stddev_samp?: ValueTypes["player_damages_stddev_samp_order_by"] | undefined | null | Variable<any, string>,
	sum?: ValueTypes["player_damages_sum_order_by"] | undefined | null | Variable<any, string>,
	var_pop?: ValueTypes["player_damages_var_pop_order_by"] | undefined | null | Variable<any, string>,
	var_samp?: ValueTypes["player_damages_var_samp_order_by"] | undefined | null | Variable<any, string>,
	variance?: ValueTypes["player_damages_variance_order_by"] | undefined | null | Variable<any, string>
};
	/** input type for inserting array relation for remote table "player_damages" */
["player_damages_arr_rel_insert_input"]: {
	data: Array<ValueTypes["player_damages_insert_input"]> | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["player_damages_on_conflict"] | undefined | null | Variable<any, string>
};
	/** aggregate avg on columns */
["player_damages_avg_fields"]: AliasType<{
	armor?:boolean | `@${string}`,
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	damage?:boolean | `@${string}`,
	damage_armor?:boolean | `@${string}`,
	health?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "player_damages" */
["player_damages_avg_order_by"]: {
	armor?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	damage?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	damage_armor?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	health?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to filter rows from the table "player_damages". All fields are combined with a logical 'AND'. */
["player_damages_bool_exp"]: {
	_and?: Array<ValueTypes["player_damages_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["player_damages_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["player_damages_bool_exp"]> | undefined | null | Variable<any, string>,
	armor?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	attacked_location?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	attacked_location_coordinates?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	attacked_player?: ValueTypes["players_bool_exp"] | undefined | null | Variable<any, string>,
	attacked_steam_id?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>,
	attacked_team?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	attacker_location?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	attacker_location_coordinates?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>,
	attacker_team?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	damage?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	damage_armor?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	health?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	hitgroup?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	match?: ValueTypes["matches_bool_exp"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	match_map?: ValueTypes["match_maps_bool_exp"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_bool_exp"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["numeric_comparison_exp"] | undefined | null | Variable<any, string>,
	team_damage?: ValueTypes["Boolean_comparison_exp"] | undefined | null | Variable<any, string>,
	time?: ValueTypes["timestamptz_comparison_exp"] | undefined | null | Variable<any, string>,
	with?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "player_damages" */
["player_damages_constraint"]:player_damages_constraint;
	/** input type for incrementing numeric columns in table "player_damages" */
["player_damages_inc_input"]: {
	armor?: number | undefined | null | Variable<any, string>,
	attacked_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	damage?: number | undefined | null | Variable<any, string>,
	damage_armor?: number | undefined | null | Variable<any, string>,
	health?: number | undefined | null | Variable<any, string>,
	round?: ValueTypes["numeric"] | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "player_damages" */
["player_damages_insert_input"]: {
	armor?: number | undefined | null | Variable<any, string>,
	attacked_location?: string | undefined | null | Variable<any, string>,
	attacked_location_coordinates?: string | undefined | null | Variable<any, string>,
	attacked_player?: ValueTypes["players_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	attacked_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	attacked_team?: string | undefined | null | Variable<any, string>,
	attacker_location?: string | undefined | null | Variable<any, string>,
	attacker_location_coordinates?: string | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	attacker_team?: string | undefined | null | Variable<any, string>,
	damage?: number | undefined | null | Variable<any, string>,
	damage_armor?: number | undefined | null | Variable<any, string>,
	health?: number | undefined | null | Variable<any, string>,
	hitgroup?: string | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match?: ValueTypes["matches_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_map?: ValueTypes["match_maps_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["numeric"] | undefined | null | Variable<any, string>,
	time?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	with?: string | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["player_damages_max_fields"]: AliasType<{
	armor?:boolean | `@${string}`,
	attacked_location?:boolean | `@${string}`,
	attacked_location_coordinates?:boolean | `@${string}`,
	attacked_steam_id?:boolean | `@${string}`,
	attacked_team?:boolean | `@${string}`,
	attacker_location?:boolean | `@${string}`,
	attacker_location_coordinates?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	attacker_team?:boolean | `@${string}`,
	damage?:boolean | `@${string}`,
	damage_armor?:boolean | `@${string}`,
	health?:boolean | `@${string}`,
	hitgroup?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
	with?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "player_damages" */
["player_damages_max_order_by"]: {
	armor?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacked_location?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacked_location_coordinates?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacked_team?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_location?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_location_coordinates?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_team?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	damage?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	damage_armor?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	health?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	hitgroup?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	time?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	with?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate min on columns */
["player_damages_min_fields"]: AliasType<{
	armor?:boolean | `@${string}`,
	attacked_location?:boolean | `@${string}`,
	attacked_location_coordinates?:boolean | `@${string}`,
	attacked_steam_id?:boolean | `@${string}`,
	attacked_team?:boolean | `@${string}`,
	attacker_location?:boolean | `@${string}`,
	attacker_location_coordinates?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	attacker_team?:boolean | `@${string}`,
	damage?:boolean | `@${string}`,
	damage_armor?:boolean | `@${string}`,
	health?:boolean | `@${string}`,
	hitgroup?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
	with?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "player_damages" */
["player_damages_min_order_by"]: {
	armor?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacked_location?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacked_location_coordinates?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacked_team?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_location?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_location_coordinates?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_team?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	damage?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	damage_armor?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	health?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	hitgroup?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	time?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	with?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** response of any mutation on the table "player_damages" */
["player_damages_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["player_damages"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "player_damages" */
["player_damages_on_conflict"]: {
	constraint: ValueTypes["player_damages_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["player_damages_update_column"]> | Variable<any, string>,
	where?: ValueTypes["player_damages_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "player_damages". */
["player_damages_order_by"]: {
	armor?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacked_location?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacked_location_coordinates?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacked_player?: ValueTypes["players_order_by"] | undefined | null | Variable<any, string>,
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacked_team?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_location?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_location_coordinates?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_team?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	damage?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	damage_armor?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	health?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	hitgroup?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match?: ValueTypes["matches_order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_map?: ValueTypes["match_maps_order_by"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	team_damage?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	time?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	with?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: player_damages */
["player_damages_pk_columns_input"]: {
	id: ValueTypes["uuid"] | Variable<any, string>
};
	/** select columns of table "player_damages" */
["player_damages_select_column"]:player_damages_select_column;
	/** input type for updating data in table "player_damages" */
["player_damages_set_input"]: {
	armor?: number | undefined | null | Variable<any, string>,
	attacked_location?: string | undefined | null | Variable<any, string>,
	attacked_location_coordinates?: string | undefined | null | Variable<any, string>,
	attacked_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	attacked_team?: string | undefined | null | Variable<any, string>,
	attacker_location?: string | undefined | null | Variable<any, string>,
	attacker_location_coordinates?: string | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	attacker_team?: string | undefined | null | Variable<any, string>,
	damage?: number | undefined | null | Variable<any, string>,
	damage_armor?: number | undefined | null | Variable<any, string>,
	health?: number | undefined | null | Variable<any, string>,
	hitgroup?: string | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["numeric"] | undefined | null | Variable<any, string>,
	time?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	with?: string | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["player_damages_stddev_fields"]: AliasType<{
	armor?:boolean | `@${string}`,
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	damage?:boolean | `@${string}`,
	damage_armor?:boolean | `@${string}`,
	health?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "player_damages" */
["player_damages_stddev_order_by"]: {
	armor?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	damage?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	damage_armor?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	health?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_pop on columns */
["player_damages_stddev_pop_fields"]: AliasType<{
	armor?:boolean | `@${string}`,
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	damage?:boolean | `@${string}`,
	damage_armor?:boolean | `@${string}`,
	health?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "player_damages" */
["player_damages_stddev_pop_order_by"]: {
	armor?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	damage?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	damage_armor?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	health?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_samp on columns */
["player_damages_stddev_samp_fields"]: AliasType<{
	armor?:boolean | `@${string}`,
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	damage?:boolean | `@${string}`,
	damage_armor?:boolean | `@${string}`,
	health?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "player_damages" */
["player_damages_stddev_samp_order_by"]: {
	armor?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	damage?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	damage_armor?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	health?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "player_damages" */
["player_damages_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["player_damages_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["player_damages_stream_cursor_value_input"]: {
	armor?: number | undefined | null | Variable<any, string>,
	attacked_location?: string | undefined | null | Variable<any, string>,
	attacked_location_coordinates?: string | undefined | null | Variable<any, string>,
	attacked_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	attacked_team?: string | undefined | null | Variable<any, string>,
	attacker_location?: string | undefined | null | Variable<any, string>,
	attacker_location_coordinates?: string | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	attacker_team?: string | undefined | null | Variable<any, string>,
	damage?: number | undefined | null | Variable<any, string>,
	damage_armor?: number | undefined | null | Variable<any, string>,
	health?: number | undefined | null | Variable<any, string>,
	hitgroup?: string | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["numeric"] | undefined | null | Variable<any, string>,
	time?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	with?: string | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["player_damages_sum_fields"]: AliasType<{
	armor?:boolean | `@${string}`,
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	damage?:boolean | `@${string}`,
	damage_armor?:boolean | `@${string}`,
	health?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "player_damages" */
["player_damages_sum_order_by"]: {
	armor?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	damage?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	damage_armor?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	health?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** update columns of table "player_damages" */
["player_damages_update_column"]:player_damages_update_column;
	["player_damages_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["player_damages_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["player_damages_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["player_damages_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["player_damages_var_pop_fields"]: AliasType<{
	armor?:boolean | `@${string}`,
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	damage?:boolean | `@${string}`,
	damage_armor?:boolean | `@${string}`,
	health?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "player_damages" */
["player_damages_var_pop_order_by"]: {
	armor?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	damage?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	damage_armor?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	health?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate var_samp on columns */
["player_damages_var_samp_fields"]: AliasType<{
	armor?:boolean | `@${string}`,
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	damage?:boolean | `@${string}`,
	damage_armor?:boolean | `@${string}`,
	health?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "player_damages" */
["player_damages_var_samp_order_by"]: {
	armor?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	damage?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	damage_armor?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	health?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate variance on columns */
["player_damages_variance_fields"]: AliasType<{
	armor?:boolean | `@${string}`,
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	damage?:boolean | `@${string}`,
	damage_armor?:boolean | `@${string}`,
	health?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "player_damages" */
["player_damages_variance_order_by"]: {
	armor?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	damage?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	damage_armor?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	health?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** columns and relationships of "player_flashes" */
["player_flashes"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	/** An object relationship */
	blinded?:ValueTypes["players"],
	duration?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** An object relationship */
	match?:ValueTypes["matches"],
	match_id?:boolean | `@${string}`,
	/** An object relationship */
	match_map?:ValueTypes["match_maps"],
	match_map_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	team_flash?:boolean | `@${string}`,
	/** An object relationship */
	thrown_by?:ValueTypes["players"],
	time?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "player_flashes" */
["player_flashes_aggregate"]: AliasType<{
	aggregate?:ValueTypes["player_flashes_aggregate_fields"],
	nodes?:ValueTypes["player_flashes"],
		__typename?: boolean | `@${string}`
}>;
	["player_flashes_aggregate_bool_exp"]: {
	bool_and?: ValueTypes["player_flashes_aggregate_bool_exp_bool_and"] | undefined | null | Variable<any, string>,
	bool_or?: ValueTypes["player_flashes_aggregate_bool_exp_bool_or"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["player_flashes_aggregate_bool_exp_count"] | undefined | null | Variable<any, string>
};
	["player_flashes_aggregate_bool_exp_bool_and"]: {
	arguments: ValueTypes["player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_and_arguments_columns"] | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["player_flashes_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Boolean_comparison_exp"] | Variable<any, string>
};
	["player_flashes_aggregate_bool_exp_bool_or"]: {
	arguments: ValueTypes["player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_or_arguments_columns"] | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["player_flashes_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Boolean_comparison_exp"] | Variable<any, string>
};
	["player_flashes_aggregate_bool_exp_count"]: {
	arguments?: Array<ValueTypes["player_flashes_select_column"]> | undefined | null | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["player_flashes_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Int_comparison_exp"] | Variable<any, string>
};
	/** aggregate fields of "player_flashes" */
["player_flashes_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["player_flashes_avg_fields"],
count?: [{	columns?: Array<ValueTypes["player_flashes_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["player_flashes_max_fields"],
	min?:ValueTypes["player_flashes_min_fields"],
	stddev?:ValueTypes["player_flashes_stddev_fields"],
	stddev_pop?:ValueTypes["player_flashes_stddev_pop_fields"],
	stddev_samp?:ValueTypes["player_flashes_stddev_samp_fields"],
	sum?:ValueTypes["player_flashes_sum_fields"],
	var_pop?:ValueTypes["player_flashes_var_pop_fields"],
	var_samp?:ValueTypes["player_flashes_var_samp_fields"],
	variance?:ValueTypes["player_flashes_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "player_flashes" */
["player_flashes_aggregate_order_by"]: {
	avg?: ValueTypes["player_flashes_avg_order_by"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["player_flashes_max_order_by"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["player_flashes_min_order_by"] | undefined | null | Variable<any, string>,
	stddev?: ValueTypes["player_flashes_stddev_order_by"] | undefined | null | Variable<any, string>,
	stddev_pop?: ValueTypes["player_flashes_stddev_pop_order_by"] | undefined | null | Variable<any, string>,
	stddev_samp?: ValueTypes["player_flashes_stddev_samp_order_by"] | undefined | null | Variable<any, string>,
	sum?: ValueTypes["player_flashes_sum_order_by"] | undefined | null | Variable<any, string>,
	var_pop?: ValueTypes["player_flashes_var_pop_order_by"] | undefined | null | Variable<any, string>,
	var_samp?: ValueTypes["player_flashes_var_samp_order_by"] | undefined | null | Variable<any, string>,
	variance?: ValueTypes["player_flashes_variance_order_by"] | undefined | null | Variable<any, string>
};
	/** input type for inserting array relation for remote table "player_flashes" */
["player_flashes_arr_rel_insert_input"]: {
	data: Array<ValueTypes["player_flashes_insert_input"]> | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["player_flashes_on_conflict"] | undefined | null | Variable<any, string>
};
	/** aggregate avg on columns */
["player_flashes_avg_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	duration?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "player_flashes" */
["player_flashes_avg_order_by"]: {
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	duration?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to filter rows from the table "player_flashes". All fields are combined with a logical 'AND'. */
["player_flashes_bool_exp"]: {
	_and?: Array<ValueTypes["player_flashes_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["player_flashes_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["player_flashes_bool_exp"]> | undefined | null | Variable<any, string>,
	attacked_steam_id?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>,
	blinded?: ValueTypes["players_bool_exp"] | undefined | null | Variable<any, string>,
	duration?: ValueTypes["numeric_comparison_exp"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	match?: ValueTypes["matches_bool_exp"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	match_map?: ValueTypes["match_maps_bool_exp"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	team_flash?: ValueTypes["Boolean_comparison_exp"] | undefined | null | Variable<any, string>,
	thrown_by?: ValueTypes["players_bool_exp"] | undefined | null | Variable<any, string>,
	time?: ValueTypes["timestamptz_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "player_flashes" */
["player_flashes_constraint"]:player_flashes_constraint;
	/** input type for incrementing numeric columns in table "player_flashes" */
["player_flashes_inc_input"]: {
	attacked_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	duration?: ValueTypes["numeric"] | undefined | null | Variable<any, string>,
	round?: number | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "player_flashes" */
["player_flashes_insert_input"]: {
	attacked_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	blinded?: ValueTypes["players_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	duration?: ValueTypes["numeric"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match?: ValueTypes["matches_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_map?: ValueTypes["match_maps_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	round?: number | undefined | null | Variable<any, string>,
	team_flash?: boolean | undefined | null | Variable<any, string>,
	thrown_by?: ValueTypes["players_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	time?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["player_flashes_max_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	duration?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "player_flashes" */
["player_flashes_max_order_by"]: {
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	duration?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	time?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate min on columns */
["player_flashes_min_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	duration?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "player_flashes" */
["player_flashes_min_order_by"]: {
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	duration?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	time?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** response of any mutation on the table "player_flashes" */
["player_flashes_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["player_flashes"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "player_flashes" */
["player_flashes_on_conflict"]: {
	constraint: ValueTypes["player_flashes_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["player_flashes_update_column"]> | Variable<any, string>,
	where?: ValueTypes["player_flashes_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "player_flashes". */
["player_flashes_order_by"]: {
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	blinded?: ValueTypes["players_order_by"] | undefined | null | Variable<any, string>,
	duration?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match?: ValueTypes["matches_order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_map?: ValueTypes["match_maps_order_by"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	team_flash?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	thrown_by?: ValueTypes["players_order_by"] | undefined | null | Variable<any, string>,
	time?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: player_flashes */
["player_flashes_pk_columns_input"]: {
	id: ValueTypes["uuid"] | Variable<any, string>
};
	/** select columns of table "player_flashes" */
["player_flashes_select_column"]:player_flashes_select_column;
	/** select "player_flashes_aggregate_bool_exp_bool_and_arguments_columns" columns of table "player_flashes" */
["player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_and_arguments_columns"]:player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_and_arguments_columns;
	/** select "player_flashes_aggregate_bool_exp_bool_or_arguments_columns" columns of table "player_flashes" */
["player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_or_arguments_columns"]:player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_or_arguments_columns;
	/** input type for updating data in table "player_flashes" */
["player_flashes_set_input"]: {
	attacked_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	duration?: ValueTypes["numeric"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	round?: number | undefined | null | Variable<any, string>,
	team_flash?: boolean | undefined | null | Variable<any, string>,
	time?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["player_flashes_stddev_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	duration?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "player_flashes" */
["player_flashes_stddev_order_by"]: {
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	duration?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_pop on columns */
["player_flashes_stddev_pop_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	duration?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "player_flashes" */
["player_flashes_stddev_pop_order_by"]: {
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	duration?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_samp on columns */
["player_flashes_stddev_samp_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	duration?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "player_flashes" */
["player_flashes_stddev_samp_order_by"]: {
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	duration?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "player_flashes" */
["player_flashes_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["player_flashes_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["player_flashes_stream_cursor_value_input"]: {
	attacked_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	duration?: ValueTypes["numeric"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	round?: number | undefined | null | Variable<any, string>,
	team_flash?: boolean | undefined | null | Variable<any, string>,
	time?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["player_flashes_sum_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	duration?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "player_flashes" */
["player_flashes_sum_order_by"]: {
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	duration?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** update columns of table "player_flashes" */
["player_flashes_update_column"]:player_flashes_update_column;
	["player_flashes_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["player_flashes_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["player_flashes_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["player_flashes_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["player_flashes_var_pop_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	duration?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "player_flashes" */
["player_flashes_var_pop_order_by"]: {
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	duration?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate var_samp on columns */
["player_flashes_var_samp_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	duration?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "player_flashes" */
["player_flashes_var_samp_order_by"]: {
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	duration?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate variance on columns */
["player_flashes_variance_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	duration?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "player_flashes" */
["player_flashes_variance_order_by"]: {
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	duration?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** columns and relationships of "player_kills" */
["player_kills"]: AliasType<{
	assisted?:boolean | `@${string}`,
	attacked_location?:boolean | `@${string}`,
	attacked_location_coordinates?:boolean | `@${string}`,
	/** An object relationship */
	attacked_player?:ValueTypes["players"],
	attacked_steam_id?:boolean | `@${string}`,
	attacked_team?:boolean | `@${string}`,
	attacker_location?:boolean | `@${string}`,
	attacker_location_coordinates?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	attacker_team?:boolean | `@${string}`,
	blinded?:boolean | `@${string}`,
	headshot?:boolean | `@${string}`,
	hitgroup?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	in_air?:boolean | `@${string}`,
	/** An object relationship */
	match?:ValueTypes["matches"],
	match_id?:boolean | `@${string}`,
	/** An object relationship */
	match_map?:ValueTypes["match_maps"],
	match_map_id?:boolean | `@${string}`,
	no_scope?:boolean | `@${string}`,
	/** An object relationship */
	player?:ValueTypes["players"],
	round?:boolean | `@${string}`,
	thru_smoke?:boolean | `@${string}`,
	thru_wall?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
	with?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "player_kills" */
["player_kills_aggregate"]: AliasType<{
	aggregate?:ValueTypes["player_kills_aggregate_fields"],
	nodes?:ValueTypes["player_kills"],
		__typename?: boolean | `@${string}`
}>;
	["player_kills_aggregate_bool_exp"]: {
	bool_and?: ValueTypes["player_kills_aggregate_bool_exp_bool_and"] | undefined | null | Variable<any, string>,
	bool_or?: ValueTypes["player_kills_aggregate_bool_exp_bool_or"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["player_kills_aggregate_bool_exp_count"] | undefined | null | Variable<any, string>
};
	["player_kills_aggregate_bool_exp_bool_and"]: {
	arguments: ValueTypes["player_kills_select_column_player_kills_aggregate_bool_exp_bool_and_arguments_columns"] | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["player_kills_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Boolean_comparison_exp"] | Variable<any, string>
};
	["player_kills_aggregate_bool_exp_bool_or"]: {
	arguments: ValueTypes["player_kills_select_column_player_kills_aggregate_bool_exp_bool_or_arguments_columns"] | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["player_kills_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Boolean_comparison_exp"] | Variable<any, string>
};
	["player_kills_aggregate_bool_exp_count"]: {
	arguments?: Array<ValueTypes["player_kills_select_column"]> | undefined | null | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["player_kills_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Int_comparison_exp"] | Variable<any, string>
};
	/** aggregate fields of "player_kills" */
["player_kills_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["player_kills_avg_fields"],
count?: [{	columns?: Array<ValueTypes["player_kills_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["player_kills_max_fields"],
	min?:ValueTypes["player_kills_min_fields"],
	stddev?:ValueTypes["player_kills_stddev_fields"],
	stddev_pop?:ValueTypes["player_kills_stddev_pop_fields"],
	stddev_samp?:ValueTypes["player_kills_stddev_samp_fields"],
	sum?:ValueTypes["player_kills_sum_fields"],
	var_pop?:ValueTypes["player_kills_var_pop_fields"],
	var_samp?:ValueTypes["player_kills_var_samp_fields"],
	variance?:ValueTypes["player_kills_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "player_kills" */
["player_kills_aggregate_order_by"]: {
	avg?: ValueTypes["player_kills_avg_order_by"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["player_kills_max_order_by"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["player_kills_min_order_by"] | undefined | null | Variable<any, string>,
	stddev?: ValueTypes["player_kills_stddev_order_by"] | undefined | null | Variable<any, string>,
	stddev_pop?: ValueTypes["player_kills_stddev_pop_order_by"] | undefined | null | Variable<any, string>,
	stddev_samp?: ValueTypes["player_kills_stddev_samp_order_by"] | undefined | null | Variable<any, string>,
	sum?: ValueTypes["player_kills_sum_order_by"] | undefined | null | Variable<any, string>,
	var_pop?: ValueTypes["player_kills_var_pop_order_by"] | undefined | null | Variable<any, string>,
	var_samp?: ValueTypes["player_kills_var_samp_order_by"] | undefined | null | Variable<any, string>,
	variance?: ValueTypes["player_kills_variance_order_by"] | undefined | null | Variable<any, string>
};
	/** input type for inserting array relation for remote table "player_kills" */
["player_kills_arr_rel_insert_input"]: {
	data: Array<ValueTypes["player_kills_insert_input"]> | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["player_kills_on_conflict"] | undefined | null | Variable<any, string>
};
	/** aggregate avg on columns */
["player_kills_avg_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "player_kills" */
["player_kills_avg_order_by"]: {
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to filter rows from the table "player_kills". All fields are combined with a logical 'AND'. */
["player_kills_bool_exp"]: {
	_and?: Array<ValueTypes["player_kills_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["player_kills_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["player_kills_bool_exp"]> | undefined | null | Variable<any, string>,
	assisted?: ValueTypes["Boolean_comparison_exp"] | undefined | null | Variable<any, string>,
	attacked_location?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	attacked_location_coordinates?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	attacked_player?: ValueTypes["players_bool_exp"] | undefined | null | Variable<any, string>,
	attacked_steam_id?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>,
	attacked_team?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	attacker_location?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	attacker_location_coordinates?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>,
	attacker_team?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	blinded?: ValueTypes["Boolean_comparison_exp"] | undefined | null | Variable<any, string>,
	headshot?: ValueTypes["Boolean_comparison_exp"] | undefined | null | Variable<any, string>,
	hitgroup?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	in_air?: ValueTypes["Boolean_comparison_exp"] | undefined | null | Variable<any, string>,
	match?: ValueTypes["matches_bool_exp"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	match_map?: ValueTypes["match_maps_bool_exp"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	no_scope?: ValueTypes["Boolean_comparison_exp"] | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_bool_exp"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	thru_smoke?: ValueTypes["Boolean_comparison_exp"] | undefined | null | Variable<any, string>,
	thru_wall?: ValueTypes["Boolean_comparison_exp"] | undefined | null | Variable<any, string>,
	time?: ValueTypes["timestamptz_comparison_exp"] | undefined | null | Variable<any, string>,
	with?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "player_kills" */
["player_kills_constraint"]:player_kills_constraint;
	/** input type for incrementing numeric columns in table "player_kills" */
["player_kills_inc_input"]: {
	attacked_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	round?: number | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "player_kills" */
["player_kills_insert_input"]: {
	assisted?: boolean | undefined | null | Variable<any, string>,
	attacked_location?: string | undefined | null | Variable<any, string>,
	attacked_location_coordinates?: string | undefined | null | Variable<any, string>,
	attacked_player?: ValueTypes["players_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	attacked_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	attacked_team?: string | undefined | null | Variable<any, string>,
	attacker_location?: string | undefined | null | Variable<any, string>,
	attacker_location_coordinates?: string | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	attacker_team?: string | undefined | null | Variable<any, string>,
	blinded?: boolean | undefined | null | Variable<any, string>,
	headshot?: boolean | undefined | null | Variable<any, string>,
	hitgroup?: string | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	in_air?: boolean | undefined | null | Variable<any, string>,
	match?: ValueTypes["matches_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_map?: ValueTypes["match_maps_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	no_scope?: boolean | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	round?: number | undefined | null | Variable<any, string>,
	thru_smoke?: boolean | undefined | null | Variable<any, string>,
	thru_wall?: boolean | undefined | null | Variable<any, string>,
	time?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	with?: string | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["player_kills_max_fields"]: AliasType<{
	attacked_location?:boolean | `@${string}`,
	attacked_location_coordinates?:boolean | `@${string}`,
	attacked_steam_id?:boolean | `@${string}`,
	attacked_team?:boolean | `@${string}`,
	attacker_location?:boolean | `@${string}`,
	attacker_location_coordinates?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	attacker_team?:boolean | `@${string}`,
	hitgroup?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
	with?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "player_kills" */
["player_kills_max_order_by"]: {
	attacked_location?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacked_location_coordinates?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacked_team?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_location?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_location_coordinates?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_team?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	hitgroup?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	time?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	with?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate min on columns */
["player_kills_min_fields"]: AliasType<{
	attacked_location?:boolean | `@${string}`,
	attacked_location_coordinates?:boolean | `@${string}`,
	attacked_steam_id?:boolean | `@${string}`,
	attacked_team?:boolean | `@${string}`,
	attacker_location?:boolean | `@${string}`,
	attacker_location_coordinates?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	attacker_team?:boolean | `@${string}`,
	hitgroup?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
	with?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "player_kills" */
["player_kills_min_order_by"]: {
	attacked_location?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacked_location_coordinates?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacked_team?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_location?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_location_coordinates?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_team?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	hitgroup?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	time?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	with?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** response of any mutation on the table "player_kills" */
["player_kills_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["player_kills"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "player_kills" */
["player_kills_on_conflict"]: {
	constraint: ValueTypes["player_kills_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["player_kills_update_column"]> | Variable<any, string>,
	where?: ValueTypes["player_kills_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "player_kills". */
["player_kills_order_by"]: {
	assisted?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacked_location?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacked_location_coordinates?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacked_player?: ValueTypes["players_order_by"] | undefined | null | Variable<any, string>,
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacked_team?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_location?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_location_coordinates?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_team?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	blinded?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	headshot?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	hitgroup?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	in_air?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match?: ValueTypes["matches_order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_map?: ValueTypes["match_maps_order_by"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	no_scope?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	thru_smoke?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	thru_wall?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	time?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	with?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: player_kills */
["player_kills_pk_columns_input"]: {
	id: ValueTypes["uuid"] | Variable<any, string>
};
	/** select columns of table "player_kills" */
["player_kills_select_column"]:player_kills_select_column;
	/** select "player_kills_aggregate_bool_exp_bool_and_arguments_columns" columns of table "player_kills" */
["player_kills_select_column_player_kills_aggregate_bool_exp_bool_and_arguments_columns"]:player_kills_select_column_player_kills_aggregate_bool_exp_bool_and_arguments_columns;
	/** select "player_kills_aggregate_bool_exp_bool_or_arguments_columns" columns of table "player_kills" */
["player_kills_select_column_player_kills_aggregate_bool_exp_bool_or_arguments_columns"]:player_kills_select_column_player_kills_aggregate_bool_exp_bool_or_arguments_columns;
	/** input type for updating data in table "player_kills" */
["player_kills_set_input"]: {
	assisted?: boolean | undefined | null | Variable<any, string>,
	attacked_location?: string | undefined | null | Variable<any, string>,
	attacked_location_coordinates?: string | undefined | null | Variable<any, string>,
	attacked_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	attacked_team?: string | undefined | null | Variable<any, string>,
	attacker_location?: string | undefined | null | Variable<any, string>,
	attacker_location_coordinates?: string | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	attacker_team?: string | undefined | null | Variable<any, string>,
	blinded?: boolean | undefined | null | Variable<any, string>,
	headshot?: boolean | undefined | null | Variable<any, string>,
	hitgroup?: string | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	in_air?: boolean | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	no_scope?: boolean | undefined | null | Variable<any, string>,
	round?: number | undefined | null | Variable<any, string>,
	thru_smoke?: boolean | undefined | null | Variable<any, string>,
	thru_wall?: boolean | undefined | null | Variable<any, string>,
	time?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	with?: string | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["player_kills_stddev_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "player_kills" */
["player_kills_stddev_order_by"]: {
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_pop on columns */
["player_kills_stddev_pop_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "player_kills" */
["player_kills_stddev_pop_order_by"]: {
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_samp on columns */
["player_kills_stddev_samp_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "player_kills" */
["player_kills_stddev_samp_order_by"]: {
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "player_kills" */
["player_kills_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["player_kills_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["player_kills_stream_cursor_value_input"]: {
	assisted?: boolean | undefined | null | Variable<any, string>,
	attacked_location?: string | undefined | null | Variable<any, string>,
	attacked_location_coordinates?: string | undefined | null | Variable<any, string>,
	attacked_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	attacked_team?: string | undefined | null | Variable<any, string>,
	attacker_location?: string | undefined | null | Variable<any, string>,
	attacker_location_coordinates?: string | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	attacker_team?: string | undefined | null | Variable<any, string>,
	blinded?: boolean | undefined | null | Variable<any, string>,
	headshot?: boolean | undefined | null | Variable<any, string>,
	hitgroup?: string | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	in_air?: boolean | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	no_scope?: boolean | undefined | null | Variable<any, string>,
	round?: number | undefined | null | Variable<any, string>,
	thru_smoke?: boolean | undefined | null | Variable<any, string>,
	thru_wall?: boolean | undefined | null | Variable<any, string>,
	time?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	with?: string | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["player_kills_sum_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "player_kills" */
["player_kills_sum_order_by"]: {
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** update columns of table "player_kills" */
["player_kills_update_column"]:player_kills_update_column;
	["player_kills_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["player_kills_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["player_kills_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["player_kills_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["player_kills_var_pop_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "player_kills" */
["player_kills_var_pop_order_by"]: {
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate var_samp on columns */
["player_kills_var_samp_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "player_kills" */
["player_kills_var_samp_order_by"]: {
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate variance on columns */
["player_kills_variance_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "player_kills" */
["player_kills_variance_order_by"]: {
	attacked_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** columns and relationships of "player_objectives" */
["player_objectives"]: AliasType<{
	id?:boolean | `@${string}`,
	/** An object relationship */
	match?:ValueTypes["matches"],
	match_id?:boolean | `@${string}`,
	/** An object relationship */
	match_map?:ValueTypes["match_maps"],
	match_map_id?:boolean | `@${string}`,
	/** An object relationship */
	player?:ValueTypes["players"],
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
	type?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "player_objectives" */
["player_objectives_aggregate"]: AliasType<{
	aggregate?:ValueTypes["player_objectives_aggregate_fields"],
	nodes?:ValueTypes["player_objectives"],
		__typename?: boolean | `@${string}`
}>;
	["player_objectives_aggregate_bool_exp"]: {
	count?: ValueTypes["player_objectives_aggregate_bool_exp_count"] | undefined | null | Variable<any, string>
};
	["player_objectives_aggregate_bool_exp_count"]: {
	arguments?: Array<ValueTypes["player_objectives_select_column"]> | undefined | null | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["player_objectives_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Int_comparison_exp"] | Variable<any, string>
};
	/** aggregate fields of "player_objectives" */
["player_objectives_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["player_objectives_avg_fields"],
count?: [{	columns?: Array<ValueTypes["player_objectives_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["player_objectives_max_fields"],
	min?:ValueTypes["player_objectives_min_fields"],
	stddev?:ValueTypes["player_objectives_stddev_fields"],
	stddev_pop?:ValueTypes["player_objectives_stddev_pop_fields"],
	stddev_samp?:ValueTypes["player_objectives_stddev_samp_fields"],
	sum?:ValueTypes["player_objectives_sum_fields"],
	var_pop?:ValueTypes["player_objectives_var_pop_fields"],
	var_samp?:ValueTypes["player_objectives_var_samp_fields"],
	variance?:ValueTypes["player_objectives_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "player_objectives" */
["player_objectives_aggregate_order_by"]: {
	avg?: ValueTypes["player_objectives_avg_order_by"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["player_objectives_max_order_by"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["player_objectives_min_order_by"] | undefined | null | Variable<any, string>,
	stddev?: ValueTypes["player_objectives_stddev_order_by"] | undefined | null | Variable<any, string>,
	stddev_pop?: ValueTypes["player_objectives_stddev_pop_order_by"] | undefined | null | Variable<any, string>,
	stddev_samp?: ValueTypes["player_objectives_stddev_samp_order_by"] | undefined | null | Variable<any, string>,
	sum?: ValueTypes["player_objectives_sum_order_by"] | undefined | null | Variable<any, string>,
	var_pop?: ValueTypes["player_objectives_var_pop_order_by"] | undefined | null | Variable<any, string>,
	var_samp?: ValueTypes["player_objectives_var_samp_order_by"] | undefined | null | Variable<any, string>,
	variance?: ValueTypes["player_objectives_variance_order_by"] | undefined | null | Variable<any, string>
};
	/** input type for inserting array relation for remote table "player_objectives" */
["player_objectives_arr_rel_insert_input"]: {
	data: Array<ValueTypes["player_objectives_insert_input"]> | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["player_objectives_on_conflict"] | undefined | null | Variable<any, string>
};
	/** aggregate avg on columns */
["player_objectives_avg_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "player_objectives" */
["player_objectives_avg_order_by"]: {
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to filter rows from the table "player_objectives". All fields are combined with a logical 'AND'. */
["player_objectives_bool_exp"]: {
	_and?: Array<ValueTypes["player_objectives_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["player_objectives_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["player_objectives_bool_exp"]> | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	match?: ValueTypes["matches_bool_exp"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	match_map?: ValueTypes["match_maps_bool_exp"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_bool_exp"] | undefined | null | Variable<any, string>,
	player_steam_id?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	time?: ValueTypes["timestamptz_comparison_exp"] | undefined | null | Variable<any, string>,
	type?: ValueTypes["e_objective_types_enum_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "player_objectives" */
["player_objectives_constraint"]:player_objectives_constraint;
	/** input type for incrementing numeric columns in table "player_objectives" */
["player_objectives_inc_input"]: {
	player_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	round?: number | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "player_objectives" */
["player_objectives_insert_input"]: {
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match?: ValueTypes["matches_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_map?: ValueTypes["match_maps_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	player_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	round?: number | undefined | null | Variable<any, string>,
	time?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	type?: ValueTypes["e_objective_types_enum"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["player_objectives_max_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "player_objectives" */
["player_objectives_max_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	time?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate min on columns */
["player_objectives_min_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "player_objectives" */
["player_objectives_min_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	time?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** response of any mutation on the table "player_objectives" */
["player_objectives_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["player_objectives"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "player_objectives" */
["player_objectives_on_conflict"]: {
	constraint: ValueTypes["player_objectives_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["player_objectives_update_column"]> | Variable<any, string>,
	where?: ValueTypes["player_objectives_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "player_objectives". */
["player_objectives_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match?: ValueTypes["matches_order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_map?: ValueTypes["match_maps_order_by"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_order_by"] | undefined | null | Variable<any, string>,
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	time?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	type?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: player_objectives */
["player_objectives_pk_columns_input"]: {
	id: ValueTypes["uuid"] | Variable<any, string>
};
	/** select columns of table "player_objectives" */
["player_objectives_select_column"]:player_objectives_select_column;
	/** input type for updating data in table "player_objectives" */
["player_objectives_set_input"]: {
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	player_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	round?: number | undefined | null | Variable<any, string>,
	time?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	type?: ValueTypes["e_objective_types_enum"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["player_objectives_stddev_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "player_objectives" */
["player_objectives_stddev_order_by"]: {
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_pop on columns */
["player_objectives_stddev_pop_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "player_objectives" */
["player_objectives_stddev_pop_order_by"]: {
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_samp on columns */
["player_objectives_stddev_samp_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "player_objectives" */
["player_objectives_stddev_samp_order_by"]: {
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "player_objectives" */
["player_objectives_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["player_objectives_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["player_objectives_stream_cursor_value_input"]: {
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	player_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	round?: number | undefined | null | Variable<any, string>,
	time?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	type?: ValueTypes["e_objective_types_enum"] | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["player_objectives_sum_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "player_objectives" */
["player_objectives_sum_order_by"]: {
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** update columns of table "player_objectives" */
["player_objectives_update_column"]:player_objectives_update_column;
	["player_objectives_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["player_objectives_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["player_objectives_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["player_objectives_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["player_objectives_var_pop_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "player_objectives" */
["player_objectives_var_pop_order_by"]: {
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate var_samp on columns */
["player_objectives_var_samp_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "player_objectives" */
["player_objectives_var_samp_order_by"]: {
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate variance on columns */
["player_objectives_variance_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "player_objectives" */
["player_objectives_variance_order_by"]: {
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** columns and relationships of "player_unused_utility" */
["player_unused_utility"]: AliasType<{
	id?:boolean | `@${string}`,
	/** An object relationship */
	match?:ValueTypes["matches"],
	match_id?:boolean | `@${string}`,
	/** An object relationship */
	match_map?:ValueTypes["match_maps"],
	match_map_id?:boolean | `@${string}`,
	/** An object relationship */
	player?:ValueTypes["players"],
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	unused?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "player_unused_utility" */
["player_unused_utility_aggregate"]: AliasType<{
	aggregate?:ValueTypes["player_unused_utility_aggregate_fields"],
	nodes?:ValueTypes["player_unused_utility"],
		__typename?: boolean | `@${string}`
}>;
	["player_unused_utility_aggregate_bool_exp"]: {
	count?: ValueTypes["player_unused_utility_aggregate_bool_exp_count"] | undefined | null | Variable<any, string>
};
	["player_unused_utility_aggregate_bool_exp_count"]: {
	arguments?: Array<ValueTypes["player_unused_utility_select_column"]> | undefined | null | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["player_unused_utility_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Int_comparison_exp"] | Variable<any, string>
};
	/** aggregate fields of "player_unused_utility" */
["player_unused_utility_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["player_unused_utility_avg_fields"],
count?: [{	columns?: Array<ValueTypes["player_unused_utility_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["player_unused_utility_max_fields"],
	min?:ValueTypes["player_unused_utility_min_fields"],
	stddev?:ValueTypes["player_unused_utility_stddev_fields"],
	stddev_pop?:ValueTypes["player_unused_utility_stddev_pop_fields"],
	stddev_samp?:ValueTypes["player_unused_utility_stddev_samp_fields"],
	sum?:ValueTypes["player_unused_utility_sum_fields"],
	var_pop?:ValueTypes["player_unused_utility_var_pop_fields"],
	var_samp?:ValueTypes["player_unused_utility_var_samp_fields"],
	variance?:ValueTypes["player_unused_utility_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "player_unused_utility" */
["player_unused_utility_aggregate_order_by"]: {
	avg?: ValueTypes["player_unused_utility_avg_order_by"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["player_unused_utility_max_order_by"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["player_unused_utility_min_order_by"] | undefined | null | Variable<any, string>,
	stddev?: ValueTypes["player_unused_utility_stddev_order_by"] | undefined | null | Variable<any, string>,
	stddev_pop?: ValueTypes["player_unused_utility_stddev_pop_order_by"] | undefined | null | Variable<any, string>,
	stddev_samp?: ValueTypes["player_unused_utility_stddev_samp_order_by"] | undefined | null | Variable<any, string>,
	sum?: ValueTypes["player_unused_utility_sum_order_by"] | undefined | null | Variable<any, string>,
	var_pop?: ValueTypes["player_unused_utility_var_pop_order_by"] | undefined | null | Variable<any, string>,
	var_samp?: ValueTypes["player_unused_utility_var_samp_order_by"] | undefined | null | Variable<any, string>,
	variance?: ValueTypes["player_unused_utility_variance_order_by"] | undefined | null | Variable<any, string>
};
	/** input type for inserting array relation for remote table "player_unused_utility" */
["player_unused_utility_arr_rel_insert_input"]: {
	data: Array<ValueTypes["player_unused_utility_insert_input"]> | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["player_unused_utility_on_conflict"] | undefined | null | Variable<any, string>
};
	/** aggregate avg on columns */
["player_unused_utility_avg_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	unused?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "player_unused_utility" */
["player_unused_utility_avg_order_by"]: {
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	unused?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to filter rows from the table "player_unused_utility". All fields are combined with a logical 'AND'. */
["player_unused_utility_bool_exp"]: {
	_and?: Array<ValueTypes["player_unused_utility_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["player_unused_utility_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["player_unused_utility_bool_exp"]> | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	match?: ValueTypes["matches_bool_exp"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	match_map?: ValueTypes["match_maps_bool_exp"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_bool_exp"] | undefined | null | Variable<any, string>,
	player_steam_id?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	unused?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "player_unused_utility" */
["player_unused_utility_constraint"]:player_unused_utility_constraint;
	/** input type for incrementing numeric columns in table "player_unused_utility" */
["player_unused_utility_inc_input"]: {
	player_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	round?: number | undefined | null | Variable<any, string>,
	unused?: number | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "player_unused_utility" */
["player_unused_utility_insert_input"]: {
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match?: ValueTypes["matches_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_map?: ValueTypes["match_maps_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	player_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	round?: number | undefined | null | Variable<any, string>,
	unused?: number | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["player_unused_utility_max_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	unused?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "player_unused_utility" */
["player_unused_utility_max_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	unused?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate min on columns */
["player_unused_utility_min_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	unused?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "player_unused_utility" */
["player_unused_utility_min_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	unused?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** response of any mutation on the table "player_unused_utility" */
["player_unused_utility_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["player_unused_utility"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "player_unused_utility" */
["player_unused_utility_on_conflict"]: {
	constraint: ValueTypes["player_unused_utility_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["player_unused_utility_update_column"]> | Variable<any, string>,
	where?: ValueTypes["player_unused_utility_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "player_unused_utility". */
["player_unused_utility_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match?: ValueTypes["matches_order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_map?: ValueTypes["match_maps_order_by"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_order_by"] | undefined | null | Variable<any, string>,
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	unused?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: player_unused_utility */
["player_unused_utility_pk_columns_input"]: {
	id: ValueTypes["uuid"] | Variable<any, string>
};
	/** select columns of table "player_unused_utility" */
["player_unused_utility_select_column"]:player_unused_utility_select_column;
	/** input type for updating data in table "player_unused_utility" */
["player_unused_utility_set_input"]: {
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	player_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	round?: number | undefined | null | Variable<any, string>,
	unused?: number | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["player_unused_utility_stddev_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	unused?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "player_unused_utility" */
["player_unused_utility_stddev_order_by"]: {
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	unused?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_pop on columns */
["player_unused_utility_stddev_pop_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	unused?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "player_unused_utility" */
["player_unused_utility_stddev_pop_order_by"]: {
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	unused?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_samp on columns */
["player_unused_utility_stddev_samp_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	unused?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "player_unused_utility" */
["player_unused_utility_stddev_samp_order_by"]: {
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	unused?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "player_unused_utility" */
["player_unused_utility_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["player_unused_utility_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["player_unused_utility_stream_cursor_value_input"]: {
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	player_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	round?: number | undefined | null | Variable<any, string>,
	unused?: number | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["player_unused_utility_sum_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	unused?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "player_unused_utility" */
["player_unused_utility_sum_order_by"]: {
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	unused?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** update columns of table "player_unused_utility" */
["player_unused_utility_update_column"]:player_unused_utility_update_column;
	["player_unused_utility_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["player_unused_utility_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["player_unused_utility_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["player_unused_utility_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["player_unused_utility_var_pop_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	unused?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "player_unused_utility" */
["player_unused_utility_var_pop_order_by"]: {
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	unused?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate var_samp on columns */
["player_unused_utility_var_samp_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	unused?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "player_unused_utility" */
["player_unused_utility_var_samp_order_by"]: {
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	unused?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate variance on columns */
["player_unused_utility_variance_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	unused?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "player_unused_utility" */
["player_unused_utility_variance_order_by"]: {
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	unused?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** columns and relationships of "player_utility" */
["player_utility"]: AliasType<{
	attacker_location_coordinates?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** An object relationship */
	match?:ValueTypes["matches"],
	match_id?:boolean | `@${string}`,
	/** An object relationship */
	match_map?:ValueTypes["match_maps"],
	match_map_id?:boolean | `@${string}`,
	/** An object relationship */
	player?:ValueTypes["players"],
	round?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
	type?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "player_utility" */
["player_utility_aggregate"]: AliasType<{
	aggregate?:ValueTypes["player_utility_aggregate_fields"],
	nodes?:ValueTypes["player_utility"],
		__typename?: boolean | `@${string}`
}>;
	["player_utility_aggregate_bool_exp"]: {
	count?: ValueTypes["player_utility_aggregate_bool_exp_count"] | undefined | null | Variable<any, string>
};
	["player_utility_aggregate_bool_exp_count"]: {
	arguments?: Array<ValueTypes["player_utility_select_column"]> | undefined | null | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["player_utility_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Int_comparison_exp"] | Variable<any, string>
};
	/** aggregate fields of "player_utility" */
["player_utility_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["player_utility_avg_fields"],
count?: [{	columns?: Array<ValueTypes["player_utility_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["player_utility_max_fields"],
	min?:ValueTypes["player_utility_min_fields"],
	stddev?:ValueTypes["player_utility_stddev_fields"],
	stddev_pop?:ValueTypes["player_utility_stddev_pop_fields"],
	stddev_samp?:ValueTypes["player_utility_stddev_samp_fields"],
	sum?:ValueTypes["player_utility_sum_fields"],
	var_pop?:ValueTypes["player_utility_var_pop_fields"],
	var_samp?:ValueTypes["player_utility_var_samp_fields"],
	variance?:ValueTypes["player_utility_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "player_utility" */
["player_utility_aggregate_order_by"]: {
	avg?: ValueTypes["player_utility_avg_order_by"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["player_utility_max_order_by"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["player_utility_min_order_by"] | undefined | null | Variable<any, string>,
	stddev?: ValueTypes["player_utility_stddev_order_by"] | undefined | null | Variable<any, string>,
	stddev_pop?: ValueTypes["player_utility_stddev_pop_order_by"] | undefined | null | Variable<any, string>,
	stddev_samp?: ValueTypes["player_utility_stddev_samp_order_by"] | undefined | null | Variable<any, string>,
	sum?: ValueTypes["player_utility_sum_order_by"] | undefined | null | Variable<any, string>,
	var_pop?: ValueTypes["player_utility_var_pop_order_by"] | undefined | null | Variable<any, string>,
	var_samp?: ValueTypes["player_utility_var_samp_order_by"] | undefined | null | Variable<any, string>,
	variance?: ValueTypes["player_utility_variance_order_by"] | undefined | null | Variable<any, string>
};
	/** input type for inserting array relation for remote table "player_utility" */
["player_utility_arr_rel_insert_input"]: {
	data: Array<ValueTypes["player_utility_insert_input"]> | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["player_utility_on_conflict"] | undefined | null | Variable<any, string>
};
	/** aggregate avg on columns */
["player_utility_avg_fields"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "player_utility" */
["player_utility_avg_order_by"]: {
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to filter rows from the table "player_utility". All fields are combined with a logical 'AND'. */
["player_utility_bool_exp"]: {
	_and?: Array<ValueTypes["player_utility_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["player_utility_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["player_utility_bool_exp"]> | undefined | null | Variable<any, string>,
	attacker_location_coordinates?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	match?: ValueTypes["matches_bool_exp"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	match_map?: ValueTypes["match_maps_bool_exp"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_bool_exp"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	time?: ValueTypes["timestamptz_comparison_exp"] | undefined | null | Variable<any, string>,
	type?: ValueTypes["e_utility_types_enum_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "player_utility" */
["player_utility_constraint"]:player_utility_constraint;
	/** input type for incrementing numeric columns in table "player_utility" */
["player_utility_inc_input"]: {
	attacker_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	round?: number | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "player_utility" */
["player_utility_insert_input"]: {
	attacker_location_coordinates?: string | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match?: ValueTypes["matches_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_map?: ValueTypes["match_maps_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	round?: number | undefined | null | Variable<any, string>,
	time?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	type?: ValueTypes["e_utility_types_enum"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["player_utility_max_fields"]: AliasType<{
	attacker_location_coordinates?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "player_utility" */
["player_utility_max_order_by"]: {
	attacker_location_coordinates?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	time?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate min on columns */
["player_utility_min_fields"]: AliasType<{
	attacker_location_coordinates?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "player_utility" */
["player_utility_min_order_by"]: {
	attacker_location_coordinates?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	time?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** response of any mutation on the table "player_utility" */
["player_utility_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["player_utility"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "player_utility" */
["player_utility_on_conflict"]: {
	constraint: ValueTypes["player_utility_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["player_utility_update_column"]> | Variable<any, string>,
	where?: ValueTypes["player_utility_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "player_utility". */
["player_utility_order_by"]: {
	attacker_location_coordinates?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match?: ValueTypes["matches_order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_map?: ValueTypes["match_maps_order_by"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	time?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	type?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: player_utility */
["player_utility_pk_columns_input"]: {
	id: ValueTypes["uuid"] | Variable<any, string>
};
	/** select columns of table "player_utility" */
["player_utility_select_column"]:player_utility_select_column;
	/** input type for updating data in table "player_utility" */
["player_utility_set_input"]: {
	attacker_location_coordinates?: string | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	round?: number | undefined | null | Variable<any, string>,
	time?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	type?: ValueTypes["e_utility_types_enum"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["player_utility_stddev_fields"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "player_utility" */
["player_utility_stddev_order_by"]: {
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_pop on columns */
["player_utility_stddev_pop_fields"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "player_utility" */
["player_utility_stddev_pop_order_by"]: {
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_samp on columns */
["player_utility_stddev_samp_fields"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "player_utility" */
["player_utility_stddev_samp_order_by"]: {
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "player_utility" */
["player_utility_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["player_utility_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["player_utility_stream_cursor_value_input"]: {
	attacker_location_coordinates?: string | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	round?: number | undefined | null | Variable<any, string>,
	time?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	type?: ValueTypes["e_utility_types_enum"] | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["player_utility_sum_fields"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "player_utility" */
["player_utility_sum_order_by"]: {
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** update columns of table "player_utility" */
["player_utility_update_column"]:player_utility_update_column;
	["player_utility_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["player_utility_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["player_utility_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["player_utility_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["player_utility_var_pop_fields"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "player_utility" */
["player_utility_var_pop_order_by"]: {
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate var_samp on columns */
["player_utility_var_samp_fields"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "player_utility" */
["player_utility_var_samp_order_by"]: {
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate variance on columns */
["player_utility_variance_fields"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "player_utility" */
["player_utility_variance_order_by"]: {
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** columns and relationships of "players" */
["players"]: AliasType<{
assists?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_assists_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_assists_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_assists_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_assists"]],
assists_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_assists_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_assists_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_assists_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_assists_aggregate"]],
assited_by_players?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_assists_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_assists_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_assists_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_assists"]],
assited_by_players_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_assists_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_assists_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_assists_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_assists_aggregate"]],
	avatar_url?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
damage_dealt?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_damages_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_damages_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_damages_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_damages"]],
damage_dealt_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_damages_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_damages_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_damages_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_damages_aggregate"]],
damage_taken?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_damages_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_damages_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_damages_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_damages"]],
damage_taken_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_damages_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_damages_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_damages_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_damages_aggregate"]],
deaths?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_kills_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_kills_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_kills_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_kills"]],
deaths_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_kills_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_kills_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_kills_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_kills_aggregate"]],
	discord_id?:boolean | `@${string}`,
flashed_by_players?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_flashes_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_flashes_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_flashes_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_flashes"]],
flashed_by_players_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_flashes_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_flashes_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_flashes_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_flashes_aggregate"]],
flashed_players?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_flashes_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_flashes_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_flashes_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_flashes"]],
flashed_players_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_flashes_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_flashes_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_flashes_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_flashes_aggregate"]],
invited_players?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["team_invites_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["team_invites_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["team_invites_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["team_invites"]],
invited_players_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["team_invites_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["team_invites_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["team_invites_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["team_invites_aggregate"]],
kills?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_kills_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_kills_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_kills_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_kills"]],
kills_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_kills_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_kills_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_kills_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_kills_aggregate"]],
match_lineups?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_lineups_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_lineups_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_lineups_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_lineups"]],
match_lineups_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_lineups_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_lineups_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_lineups_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_lineups_aggregate"]],
matches?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["matches_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["matches_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["matches_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["matches"]],
multi_kills?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_player_multi_kills_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_player_multi_kills_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_player_multi_kills_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_player_multi_kills"]],
multi_kills_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_player_multi_kills_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_player_multi_kills_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_player_multi_kills_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_player_multi_kills_aggregate"]],
	name?:boolean | `@${string}`,
objectives?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_objectives_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_objectives_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_objectives_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_objectives"]],
objectives_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_objectives_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_objectives_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_objectives_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_objectives_aggregate"]],
opening_duels?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_player_opening_duels_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_player_opening_duels_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_player_opening_duels_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_player_opening_duels"]],
opening_duels_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_player_opening_duels_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_player_opening_duels_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_player_opening_duels_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_player_opening_duels_aggregate"]],
owned_teams?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["teams_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["teams_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["teams_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["teams"]],
owned_teams_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["teams_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["teams_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["teams_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["teams_aggregate"]],
player_lineup?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_lineup_players_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_lineup_players_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_lineup_players_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_lineup_players"]],
player_lineup_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_lineup_players_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_lineup_players_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_lineup_players_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_lineup_players_aggregate"]],
player_unused_utilities?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_unused_utility_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_unused_utility_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_unused_utility_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_unused_utility"]],
player_unused_utilities_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_unused_utility_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_unused_utility_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_unused_utility_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_unused_utility_aggregate"]],
	profile_url?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
team_invites?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["team_invites_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["team_invites_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["team_invites_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["team_invites"]],
team_invites_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["team_invites_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["team_invites_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["team_invites_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["team_invites_aggregate"]],
team_members?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["team_roster_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["team_roster_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["team_roster_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["team_roster"]],
team_members_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["team_roster_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["team_roster_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["team_roster_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["team_roster_aggregate"]],
teams?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["teams_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["teams_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["teams_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["teams"]],
tournament_organizers?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_organizers_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_organizers_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_organizers_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_organizers"]],
tournament_organizers_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_organizers_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_organizers_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_organizers_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_organizers_aggregate"]],
tournament_rosters?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_roster_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_roster_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_roster_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_roster"]],
tournament_rosters_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_roster_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_roster_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_roster_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_roster_aggregate"]],
tournaments?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournaments_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournaments_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournaments_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournaments"]],
tournaments_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournaments_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournaments_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournaments_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournaments_aggregate"]],
	updated_at?:boolean | `@${string}`,
utility_thrown?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_utility_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_utility_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_utility_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_utility"]],
utility_thrown_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_utility_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_utility_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_utility_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_utility_aggregate"]],
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "players" */
["players_aggregate"]: AliasType<{
	aggregate?:ValueTypes["players_aggregate_fields"],
	nodes?:ValueTypes["players"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "players" */
["players_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["players_avg_fields"],
count?: [{	columns?: Array<ValueTypes["players_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["players_max_fields"],
	min?:ValueTypes["players_min_fields"],
	stddev?:ValueTypes["players_stddev_fields"],
	stddev_pop?:ValueTypes["players_stddev_pop_fields"],
	stddev_samp?:ValueTypes["players_stddev_samp_fields"],
	sum?:ValueTypes["players_sum_fields"],
	var_pop?:ValueTypes["players_var_pop_fields"],
	var_samp?:ValueTypes["players_var_samp_fields"],
	variance?:ValueTypes["players_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate avg on columns */
["players_avg_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "players". All fields are combined with a logical 'AND'. */
["players_bool_exp"]: {
	_and?: Array<ValueTypes["players_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["players_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["players_bool_exp"]> | undefined | null | Variable<any, string>,
	assists?: ValueTypes["player_assists_bool_exp"] | undefined | null | Variable<any, string>,
	assists_aggregate?: ValueTypes["player_assists_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	assited_by_players?: ValueTypes["player_assists_bool_exp"] | undefined | null | Variable<any, string>,
	assited_by_players_aggregate?: ValueTypes["player_assists_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	avatar_url?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamptz_comparison_exp"] | undefined | null | Variable<any, string>,
	damage_dealt?: ValueTypes["player_damages_bool_exp"] | undefined | null | Variable<any, string>,
	damage_dealt_aggregate?: ValueTypes["player_damages_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	damage_taken?: ValueTypes["player_damages_bool_exp"] | undefined | null | Variable<any, string>,
	damage_taken_aggregate?: ValueTypes["player_damages_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	deaths?: ValueTypes["player_kills_bool_exp"] | undefined | null | Variable<any, string>,
	deaths_aggregate?: ValueTypes["player_kills_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	discord_id?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	flashed_by_players?: ValueTypes["player_flashes_bool_exp"] | undefined | null | Variable<any, string>,
	flashed_by_players_aggregate?: ValueTypes["player_flashes_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	flashed_players?: ValueTypes["player_flashes_bool_exp"] | undefined | null | Variable<any, string>,
	flashed_players_aggregate?: ValueTypes["player_flashes_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	invited_players?: ValueTypes["team_invites_bool_exp"] | undefined | null | Variable<any, string>,
	invited_players_aggregate?: ValueTypes["team_invites_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	kills?: ValueTypes["player_kills_bool_exp"] | undefined | null | Variable<any, string>,
	kills_aggregate?: ValueTypes["player_kills_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	match_lineups?: ValueTypes["match_lineups_bool_exp"] | undefined | null | Variable<any, string>,
	match_lineups_aggregate?: ValueTypes["match_lineups_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	matches?: ValueTypes["matches_bool_exp"] | undefined | null | Variable<any, string>,
	multi_kills?: ValueTypes["v_player_multi_kills_bool_exp"] | undefined | null | Variable<any, string>,
	multi_kills_aggregate?: ValueTypes["v_player_multi_kills_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	name?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	objectives?: ValueTypes["player_objectives_bool_exp"] | undefined | null | Variable<any, string>,
	objectives_aggregate?: ValueTypes["player_objectives_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	opening_duels?: ValueTypes["v_player_opening_duels_bool_exp"] | undefined | null | Variable<any, string>,
	opening_duels_aggregate?: ValueTypes["v_player_opening_duels_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	owned_teams?: ValueTypes["teams_bool_exp"] | undefined | null | Variable<any, string>,
	owned_teams_aggregate?: ValueTypes["teams_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	player_lineup?: ValueTypes["match_lineup_players_bool_exp"] | undefined | null | Variable<any, string>,
	player_lineup_aggregate?: ValueTypes["match_lineup_players_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	player_unused_utilities?: ValueTypes["player_unused_utility_bool_exp"] | undefined | null | Variable<any, string>,
	player_unused_utilities_aggregate?: ValueTypes["player_unused_utility_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	profile_url?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>,
	team_invites?: ValueTypes["team_invites_bool_exp"] | undefined | null | Variable<any, string>,
	team_invites_aggregate?: ValueTypes["team_invites_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	team_members?: ValueTypes["team_roster_bool_exp"] | undefined | null | Variable<any, string>,
	team_members_aggregate?: ValueTypes["team_roster_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	teams?: ValueTypes["teams_bool_exp"] | undefined | null | Variable<any, string>,
	tournament_organizers?: ValueTypes["tournament_organizers_bool_exp"] | undefined | null | Variable<any, string>,
	tournament_organizers_aggregate?: ValueTypes["tournament_organizers_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	tournament_rosters?: ValueTypes["tournament_roster_bool_exp"] | undefined | null | Variable<any, string>,
	tournament_rosters_aggregate?: ValueTypes["tournament_roster_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	tournaments?: ValueTypes["tournaments_bool_exp"] | undefined | null | Variable<any, string>,
	tournaments_aggregate?: ValueTypes["tournaments_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamptz_comparison_exp"] | undefined | null | Variable<any, string>,
	utility_thrown?: ValueTypes["player_utility_bool_exp"] | undefined | null | Variable<any, string>,
	utility_thrown_aggregate?: ValueTypes["player_utility_aggregate_bool_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "players" */
["players_constraint"]:players_constraint;
	/** input type for incrementing numeric columns in table "players" */
["players_inc_input"]: {
	steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "players" */
["players_insert_input"]: {
	assists?: ValueTypes["player_assists_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	assited_by_players?: ValueTypes["player_assists_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	avatar_url?: string | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	damage_dealt?: ValueTypes["player_damages_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	damage_taken?: ValueTypes["player_damages_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	deaths?: ValueTypes["player_kills_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	discord_id?: string | undefined | null | Variable<any, string>,
	flashed_by_players?: ValueTypes["player_flashes_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	flashed_players?: ValueTypes["player_flashes_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	invited_players?: ValueTypes["team_invites_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	kills?: ValueTypes["player_kills_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	match_lineups?: ValueTypes["match_lineups_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	multi_kills?: ValueTypes["v_player_multi_kills_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	name?: string | undefined | null | Variable<any, string>,
	objectives?: ValueTypes["player_objectives_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	opening_duels?: ValueTypes["v_player_opening_duels_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	owned_teams?: ValueTypes["teams_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	player_lineup?: ValueTypes["match_lineup_players_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	player_unused_utilities?: ValueTypes["player_unused_utility_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	profile_url?: string | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	team_invites?: ValueTypes["team_invites_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	team_members?: ValueTypes["team_roster_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	tournament_organizers?: ValueTypes["tournament_organizers_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	tournament_rosters?: ValueTypes["tournament_roster_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	tournaments?: ValueTypes["tournaments_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	utility_thrown?: ValueTypes["player_utility_arr_rel_insert_input"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["players_max_fields"]: AliasType<{
	avatar_url?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	discord_id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	profile_url?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["players_min_fields"]: AliasType<{
	avatar_url?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	discord_id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	profile_url?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "players" */
["players_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["players"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "players" */
["players_obj_rel_insert_input"]: {
	data: ValueTypes["players_insert_input"] | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["players_on_conflict"] | undefined | null | Variable<any, string>
};
	/** on_conflict condition type for table "players" */
["players_on_conflict"]: {
	constraint: ValueTypes["players_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["players_update_column"]> | Variable<any, string>,
	where?: ValueTypes["players_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "players". */
["players_order_by"]: {
	assists_aggregate?: ValueTypes["player_assists_aggregate_order_by"] | undefined | null | Variable<any, string>,
	assited_by_players_aggregate?: ValueTypes["player_assists_aggregate_order_by"] | undefined | null | Variable<any, string>,
	avatar_url?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	damage_dealt_aggregate?: ValueTypes["player_damages_aggregate_order_by"] | undefined | null | Variable<any, string>,
	damage_taken_aggregate?: ValueTypes["player_damages_aggregate_order_by"] | undefined | null | Variable<any, string>,
	deaths_aggregate?: ValueTypes["player_kills_aggregate_order_by"] | undefined | null | Variable<any, string>,
	discord_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	flashed_by_players_aggregate?: ValueTypes["player_flashes_aggregate_order_by"] | undefined | null | Variable<any, string>,
	flashed_players_aggregate?: ValueTypes["player_flashes_aggregate_order_by"] | undefined | null | Variable<any, string>,
	invited_players_aggregate?: ValueTypes["team_invites_aggregate_order_by"] | undefined | null | Variable<any, string>,
	kills_aggregate?: ValueTypes["player_kills_aggregate_order_by"] | undefined | null | Variable<any, string>,
	match_lineups_aggregate?: ValueTypes["match_lineups_aggregate_order_by"] | undefined | null | Variable<any, string>,
	matches_aggregate?: ValueTypes["matches_aggregate_order_by"] | undefined | null | Variable<any, string>,
	multi_kills_aggregate?: ValueTypes["v_player_multi_kills_aggregate_order_by"] | undefined | null | Variable<any, string>,
	name?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	objectives_aggregate?: ValueTypes["player_objectives_aggregate_order_by"] | undefined | null | Variable<any, string>,
	opening_duels_aggregate?: ValueTypes["v_player_opening_duels_aggregate_order_by"] | undefined | null | Variable<any, string>,
	owned_teams_aggregate?: ValueTypes["teams_aggregate_order_by"] | undefined | null | Variable<any, string>,
	player_lineup_aggregate?: ValueTypes["match_lineup_players_aggregate_order_by"] | undefined | null | Variable<any, string>,
	player_unused_utilities_aggregate?: ValueTypes["player_unused_utility_aggregate_order_by"] | undefined | null | Variable<any, string>,
	profile_url?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	team_invites_aggregate?: ValueTypes["team_invites_aggregate_order_by"] | undefined | null | Variable<any, string>,
	team_members_aggregate?: ValueTypes["team_roster_aggregate_order_by"] | undefined | null | Variable<any, string>,
	teams_aggregate?: ValueTypes["teams_aggregate_order_by"] | undefined | null | Variable<any, string>,
	tournament_organizers_aggregate?: ValueTypes["tournament_organizers_aggregate_order_by"] | undefined | null | Variable<any, string>,
	tournament_rosters_aggregate?: ValueTypes["tournament_roster_aggregate_order_by"] | undefined | null | Variable<any, string>,
	tournaments_aggregate?: ValueTypes["tournaments_aggregate_order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	utility_thrown_aggregate?: ValueTypes["player_utility_aggregate_order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: players */
["players_pk_columns_input"]: {
	steam_id: ValueTypes["bigint"] | Variable<any, string>
};
	/** select columns of table "players" */
["players_select_column"]:players_select_column;
	/** input type for updating data in table "players" */
["players_set_input"]: {
	avatar_url?: string | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	discord_id?: string | undefined | null | Variable<any, string>,
	name?: string | undefined | null | Variable<any, string>,
	profile_url?: string | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["players_stddev_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_pop on columns */
["players_stddev_pop_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_samp on columns */
["players_stddev_samp_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Streaming cursor of the table "players" */
["players_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["players_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["players_stream_cursor_value_input"]: {
	avatar_url?: string | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	discord_id?: string | undefined | null | Variable<any, string>,
	name?: string | undefined | null | Variable<any, string>,
	profile_url?: string | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["players_sum_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** update columns of table "players" */
["players_update_column"]:players_update_column;
	["players_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["players_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["players_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["players_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["players_var_pop_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate var_samp on columns */
["players_var_samp_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate variance on columns */
["players_variance_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	["query_root"]: AliasType<{
_map_pool?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["_map_pool_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["_map_pool_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["_map_pool_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["_map_pool"]],
_map_pool_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["_map_pool_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["_map_pool_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["_map_pool_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["_map_pool_aggregate"]],
_map_pool_by_pk?: [{	map_id: ValueTypes["uuid"] | Variable<any, string>,	map_pool_id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["_map_pool"]],
e_match_map_status?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["e_match_map_status_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["e_match_map_status_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_match_map_status_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_match_map_status"]],
e_match_map_status_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["e_match_map_status_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["e_match_map_status_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_match_map_status_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_match_map_status_aggregate"]],
e_match_map_status_by_pk?: [{	value: string | Variable<any, string>},ValueTypes["e_match_map_status"]],
e_match_status?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["e_match_status_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["e_match_status_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_match_status_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_match_status"]],
e_match_status_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["e_match_status_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["e_match_status_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_match_status_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_match_status_aggregate"]],
e_match_status_by_pk?: [{	value: string | Variable<any, string>},ValueTypes["e_match_status"]],
e_match_types?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["e_match_types_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["e_match_types_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_match_types_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_match_types"]],
e_match_types_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["e_match_types_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["e_match_types_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_match_types_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_match_types_aggregate"]],
e_match_types_by_pk?: [{	value: string | Variable<any, string>},ValueTypes["e_match_types"]],
e_objective_types?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["e_objective_types_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["e_objective_types_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_objective_types_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_objective_types"]],
e_objective_types_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["e_objective_types_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["e_objective_types_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_objective_types_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_objective_types_aggregate"]],
e_objective_types_by_pk?: [{	value: string | Variable<any, string>},ValueTypes["e_objective_types"]],
e_sides?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["e_sides_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["e_sides_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_sides_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_sides"]],
e_sides_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["e_sides_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["e_sides_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_sides_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_sides_aggregate"]],
e_sides_by_pk?: [{	value: string | Variable<any, string>},ValueTypes["e_sides"]],
e_team_roles?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["e_team_roles_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["e_team_roles_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_team_roles_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_team_roles"]],
e_team_roles_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["e_team_roles_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["e_team_roles_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_team_roles_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_team_roles_aggregate"]],
e_team_roles_by_pk?: [{	value: string | Variable<any, string>},ValueTypes["e_team_roles"]],
e_timeout_settings?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["e_timeout_settings_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["e_timeout_settings_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_timeout_settings_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_timeout_settings"]],
e_timeout_settings_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["e_timeout_settings_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["e_timeout_settings_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_timeout_settings_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_timeout_settings_aggregate"]],
e_timeout_settings_by_pk?: [{	value: string | Variable<any, string>},ValueTypes["e_timeout_settings"]],
e_utility_types?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["e_utility_types_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["e_utility_types_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_utility_types_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_utility_types"]],
e_utility_types_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["e_utility_types_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["e_utility_types_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_utility_types_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_utility_types_aggregate"]],
e_utility_types_by_pk?: [{	value: string | Variable<any, string>},ValueTypes["e_utility_types"]],
e_veto_pick_types?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["e_veto_pick_types_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["e_veto_pick_types_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_veto_pick_types_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_veto_pick_types"]],
e_veto_pick_types_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["e_veto_pick_types_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["e_veto_pick_types_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_veto_pick_types_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_veto_pick_types_aggregate"]],
e_veto_pick_types_by_pk?: [{	value: string | Variable<any, string>},ValueTypes["e_veto_pick_types"]],
map_pools?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["map_pools_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["map_pools_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["map_pools_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["map_pools"]],
map_pools_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["map_pools_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["map_pools_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["map_pools_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["map_pools_aggregate"]],
map_pools_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["map_pools"]],
maps?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["maps_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["maps_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["maps_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["maps"]],
maps_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["maps_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["maps_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["maps_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["maps_aggregate"]],
maps_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["maps"]],
match_lineup_players?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_lineup_players_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_lineup_players_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_lineup_players_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_lineup_players"]],
match_lineup_players_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_lineup_players_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_lineup_players_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_lineup_players_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_lineup_players_aggregate"]],
match_lineup_players_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["match_lineup_players"]],
match_lineups?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_lineups_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_lineups_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_lineups_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_lineups"]],
match_lineups_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_lineups_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_lineups_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_lineups_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_lineups_aggregate"]],
match_lineups_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["match_lineups"]],
match_map_demos?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_map_demos_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_map_demos_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_map_demos_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_map_demos"]],
match_map_demos_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_map_demos_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_map_demos_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_map_demos_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_map_demos_aggregate"]],
match_map_demos_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["match_map_demos"]],
match_map_rounds?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_map_rounds_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_map_rounds_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_map_rounds_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_map_rounds"]],
match_map_rounds_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_map_rounds_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_map_rounds_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_map_rounds_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_map_rounds_aggregate"]],
match_map_rounds_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["match_map_rounds"]],
match_maps?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_maps_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_maps_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_maps_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_maps"]],
match_maps_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_maps_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_maps_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_maps_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_maps_aggregate"]],
match_maps_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["match_maps"]],
match_veto_picks?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_veto_picks_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_veto_picks_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_veto_picks_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_veto_picks"]],
match_veto_picks_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_veto_picks_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_veto_picks_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_veto_picks_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_veto_picks_aggregate"]],
match_veto_picks_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["match_veto_picks"]],
matches?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["matches_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["matches_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["matches_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["matches"]],
matches_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["matches_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["matches_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["matches_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["matches_aggregate"]],
matches_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["matches"]],
	/** Gets Current User */
	me?:ValueTypes["MeResponse"],
player_assists?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_assists_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_assists_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_assists_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_assists"]],
player_assists_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_assists_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_assists_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_assists_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_assists_aggregate"]],
player_assists_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["player_assists"]],
player_damages?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_damages_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_damages_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_damages_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_damages"]],
player_damages_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_damages_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_damages_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_damages_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_damages_aggregate"]],
player_damages_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["player_damages"]],
player_flashes?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_flashes_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_flashes_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_flashes_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_flashes"]],
player_flashes_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_flashes_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_flashes_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_flashes_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_flashes_aggregate"]],
player_flashes_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["player_flashes"]],
player_kills?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_kills_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_kills_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_kills_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_kills"]],
player_kills_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_kills_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_kills_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_kills_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_kills_aggregate"]],
player_kills_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["player_kills"]],
player_objectives?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_objectives_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_objectives_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_objectives_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_objectives"]],
player_objectives_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_objectives_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_objectives_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_objectives_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_objectives_aggregate"]],
player_objectives_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["player_objectives"]],
player_unused_utility?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_unused_utility_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_unused_utility_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_unused_utility_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_unused_utility"]],
player_unused_utility_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_unused_utility_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_unused_utility_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_unused_utility_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_unused_utility_aggregate"]],
player_unused_utility_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["player_unused_utility"]],
player_utility?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_utility_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_utility_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_utility_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_utility"]],
player_utility_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_utility_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_utility_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_utility_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_utility_aggregate"]],
player_utility_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["player_utility"]],
players?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["players_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["players_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["players_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["players"]],
players_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["players_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["players_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["players_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["players_aggregate"]],
players_by_pk?: [{	steam_id: ValueTypes["bigint"] | Variable<any, string>},ValueTypes["players"]],
servers?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["servers_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["servers_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["servers_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["servers"]],
servers_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["servers_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["servers_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["servers_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["servers_aggregate"]],
servers_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["servers"]],
team_invites?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["team_invites_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["team_invites_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["team_invites_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["team_invites"]],
team_invites_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["team_invites_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["team_invites_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["team_invites_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["team_invites_aggregate"]],
team_invites_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["team_invites"]],
team_roster?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["team_roster_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["team_roster_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["team_roster_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["team_roster"]],
team_roster_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["team_roster_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["team_roster_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["team_roster_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["team_roster_aggregate"]],
team_roster_by_pk?: [{	player_steam_id: ValueTypes["bigint"] | Variable<any, string>,	team_id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["team_roster"]],
teams?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["teams_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["teams_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["teams_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["teams"]],
teams_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["teams_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["teams_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["teams_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["teams_aggregate"]],
teams_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["teams"]],
tournament_organizers?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_organizers_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_organizers_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_organizers_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_organizers"]],
tournament_organizers_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_organizers_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_organizers_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_organizers_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_organizers_aggregate"]],
tournament_organizers_by_pk?: [{	steam_id: ValueTypes["bigint"] | Variable<any, string>,	tournament_id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["tournament_organizers"]],
tournament_roster?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_roster_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_roster_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_roster_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_roster"]],
tournament_roster_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_roster_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_roster_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_roster_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_roster_aggregate"]],
tournament_roster_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["tournament_roster"]],
tournament_servers?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_servers_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_servers_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_servers_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_servers"]],
tournament_servers_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_servers_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_servers_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_servers_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_servers_aggregate"]],
tournament_servers_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["tournament_servers"]],
tournament_stages?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_stages_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_stages_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_stages_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_stages"]],
tournament_stages_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_stages_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_stages_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_stages_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_stages_aggregate"]],
tournament_stages_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["tournament_stages"]],
tournament_teams?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_teams_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_teams_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_teams_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_teams"]],
tournament_teams_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_teams_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_teams_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_teams_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_teams_aggregate"]],
tournament_teams_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["tournament_teams"]],
tournaments?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournaments_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournaments_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournaments_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournaments"]],
tournaments_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournaments_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournaments_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournaments_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournaments_aggregate"]],
tournaments_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["tournaments"]],
v_match_captains?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_match_captains_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_match_captains_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_match_captains_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_match_captains"]],
v_match_captains_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_match_captains_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_match_captains_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_match_captains_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_match_captains_aggregate"]],
v_player_arch_nemesis?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_player_arch_nemesis_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_player_arch_nemesis_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_player_arch_nemesis_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_player_arch_nemesis"]],
v_player_arch_nemesis_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_player_arch_nemesis_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_player_arch_nemesis_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_player_arch_nemesis_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_player_arch_nemesis_aggregate"]],
v_player_damage?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_player_damage_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_player_damage_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_player_damage_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_player_damage"]],
v_player_damage_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_player_damage_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_player_damage_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_player_damage_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_player_damage_aggregate"]],
v_player_killed_player_counts?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_player_killed_player_counts_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_player_killed_player_counts_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_player_killed_player_counts_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_player_killed_player_counts"]],
v_player_killed_player_counts_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_player_killed_player_counts_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_player_killed_player_counts_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_player_killed_player_counts_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_player_killed_player_counts_aggregate"]],
v_player_match_kills?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_player_match_kills_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_player_match_kills_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_player_match_kills_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_player_match_kills"]],
v_player_match_kills_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_player_match_kills_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_player_match_kills_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_player_match_kills_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_player_match_kills_aggregate"]],
v_player_multi_kills?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_player_multi_kills_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_player_multi_kills_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_player_multi_kills_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_player_multi_kills"]],
v_player_multi_kills_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_player_multi_kills_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_player_multi_kills_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_player_multi_kills_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_player_multi_kills_aggregate"]],
v_player_opening_duels?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_player_opening_duels_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_player_opening_duels_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_player_opening_duels_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_player_opening_duels"]],
v_player_opening_duels_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_player_opening_duels_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_player_opening_duels_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_player_opening_duels_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_player_opening_duels_aggregate"]],
v_pool_maps?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_pool_maps_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_pool_maps_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_pool_maps_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_pool_maps"]],
v_pool_maps_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_pool_maps_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_pool_maps_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_pool_maps_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_pool_maps_aggregate"]],
		__typename?: boolean | `@${string}`
}>;
	/** columns and relationships of "servers" */
["servers"]: AliasType<{
	api_password?:boolean | `@${string}`,
	/** A computed field, executes function "get_server_current_match_id" */
	current_match_id?:boolean | `@${string}`,
	enabled?:boolean | `@${string}`,
	host?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	label?:boolean | `@${string}`,
matches?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["matches_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["matches_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["matches_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["matches"]],
matches_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["matches_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["matches_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["matches_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["matches_aggregate"]],
	on_demand?:boolean | `@${string}`,
	/** An object relationship */
	owner?:ValueTypes["players"],
	player_steam_id?:boolean | `@${string}`,
	port?:boolean | `@${string}`,
	rcon_password?:boolean | `@${string}`,
tournament_servers?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_servers_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_servers_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_servers_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_servers"]],
tournament_servers_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_servers_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_servers_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_servers_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_servers_aggregate"]],
	tv_port?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "servers" */
["servers_aggregate"]: AliasType<{
	aggregate?:ValueTypes["servers_aggregate_fields"],
	nodes?:ValueTypes["servers"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "servers" */
["servers_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["servers_avg_fields"],
count?: [{	columns?: Array<ValueTypes["servers_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["servers_max_fields"],
	min?:ValueTypes["servers_min_fields"],
	stddev?:ValueTypes["servers_stddev_fields"],
	stddev_pop?:ValueTypes["servers_stddev_pop_fields"],
	stddev_samp?:ValueTypes["servers_stddev_samp_fields"],
	sum?:ValueTypes["servers_sum_fields"],
	var_pop?:ValueTypes["servers_var_pop_fields"],
	var_samp?:ValueTypes["servers_var_samp_fields"],
	variance?:ValueTypes["servers_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate avg on columns */
["servers_avg_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	port?:boolean | `@${string}`,
	tv_port?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "servers". All fields are combined with a logical 'AND'. */
["servers_bool_exp"]: {
	_and?: Array<ValueTypes["servers_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["servers_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["servers_bool_exp"]> | undefined | null | Variable<any, string>,
	api_password?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	current_match_id?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	enabled?: ValueTypes["Boolean_comparison_exp"] | undefined | null | Variable<any, string>,
	host?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	label?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	matches?: ValueTypes["matches_bool_exp"] | undefined | null | Variable<any, string>,
	matches_aggregate?: ValueTypes["matches_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	on_demand?: ValueTypes["Boolean_comparison_exp"] | undefined | null | Variable<any, string>,
	owner?: ValueTypes["players_bool_exp"] | undefined | null | Variable<any, string>,
	player_steam_id?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>,
	port?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	rcon_password?: ValueTypes["bytea_comparison_exp"] | undefined | null | Variable<any, string>,
	tournament_servers?: ValueTypes["tournament_servers_bool_exp"] | undefined | null | Variable<any, string>,
	tournament_servers_aggregate?: ValueTypes["tournament_servers_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	tv_port?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "servers" */
["servers_constraint"]:servers_constraint;
	/** input type for incrementing numeric columns in table "servers" */
["servers_inc_input"]: {
	player_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	port?: number | undefined | null | Variable<any, string>,
	tv_port?: number | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "servers" */
["servers_insert_input"]: {
	api_password?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	enabled?: boolean | undefined | null | Variable<any, string>,
	host?: string | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	label?: string | undefined | null | Variable<any, string>,
	matches?: ValueTypes["matches_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	on_demand?: boolean | undefined | null | Variable<any, string>,
	owner?: ValueTypes["players_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	player_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	port?: number | undefined | null | Variable<any, string>,
	rcon_password?: ValueTypes["bytea"] | undefined | null | Variable<any, string>,
	tournament_servers?: ValueTypes["tournament_servers_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	tv_port?: number | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["servers_max_fields"]: AliasType<{
	api_password?:boolean | `@${string}`,
	/** A computed field, executes function "get_server_current_match_id" */
	current_match_id?:boolean | `@${string}`,
	host?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	label?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	port?:boolean | `@${string}`,
	tv_port?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["servers_min_fields"]: AliasType<{
	api_password?:boolean | `@${string}`,
	/** A computed field, executes function "get_server_current_match_id" */
	current_match_id?:boolean | `@${string}`,
	host?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	label?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	port?:boolean | `@${string}`,
	tv_port?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "servers" */
["servers_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["servers"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "servers" */
["servers_obj_rel_insert_input"]: {
	data: ValueTypes["servers_insert_input"] | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["servers_on_conflict"] | undefined | null | Variable<any, string>
};
	/** on_conflict condition type for table "servers" */
["servers_on_conflict"]: {
	constraint: ValueTypes["servers_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["servers_update_column"]> | Variable<any, string>,
	where?: ValueTypes["servers_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "servers". */
["servers_order_by"]: {
	api_password?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	current_match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	enabled?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	host?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	label?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	matches_aggregate?: ValueTypes["matches_aggregate_order_by"] | undefined | null | Variable<any, string>,
	on_demand?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	owner?: ValueTypes["players_order_by"] | undefined | null | Variable<any, string>,
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	port?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	rcon_password?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	tournament_servers_aggregate?: ValueTypes["tournament_servers_aggregate_order_by"] | undefined | null | Variable<any, string>,
	tv_port?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: servers */
["servers_pk_columns_input"]: {
	id: ValueTypes["uuid"] | Variable<any, string>
};
	/** select columns of table "servers" */
["servers_select_column"]:servers_select_column;
	/** input type for updating data in table "servers" */
["servers_set_input"]: {
	api_password?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	enabled?: boolean | undefined | null | Variable<any, string>,
	host?: string | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	label?: string | undefined | null | Variable<any, string>,
	on_demand?: boolean | undefined | null | Variable<any, string>,
	player_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	port?: number | undefined | null | Variable<any, string>,
	rcon_password?: ValueTypes["bytea"] | undefined | null | Variable<any, string>,
	tv_port?: number | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["servers_stddev_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	port?:boolean | `@${string}`,
	tv_port?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_pop on columns */
["servers_stddev_pop_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	port?:boolean | `@${string}`,
	tv_port?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_samp on columns */
["servers_stddev_samp_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	port?:boolean | `@${string}`,
	tv_port?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Streaming cursor of the table "servers" */
["servers_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["servers_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["servers_stream_cursor_value_input"]: {
	api_password?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	enabled?: boolean | undefined | null | Variable<any, string>,
	host?: string | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	label?: string | undefined | null | Variable<any, string>,
	on_demand?: boolean | undefined | null | Variable<any, string>,
	player_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	port?: number | undefined | null | Variable<any, string>,
	rcon_password?: ValueTypes["bytea"] | undefined | null | Variable<any, string>,
	tv_port?: number | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["servers_sum_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	port?:boolean | `@${string}`,
	tv_port?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** update columns of table "servers" */
["servers_update_column"]:servers_update_column;
	["servers_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["servers_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["servers_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["servers_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["servers_var_pop_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	port?:boolean | `@${string}`,
	tv_port?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate var_samp on columns */
["servers_var_samp_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	port?:boolean | `@${string}`,
	tv_port?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate variance on columns */
["servers_variance_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	port?:boolean | `@${string}`,
	tv_port?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	["subscription_root"]: AliasType<{
_map_pool?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["_map_pool_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["_map_pool_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["_map_pool_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["_map_pool"]],
_map_pool_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["_map_pool_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["_map_pool_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["_map_pool_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["_map_pool_aggregate"]],
_map_pool_by_pk?: [{	map_id: ValueTypes["uuid"] | Variable<any, string>,	map_pool_id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["_map_pool"]],
_map_pool_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["_map_pool_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["_map_pool_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["_map_pool"]],
e_match_map_status?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["e_match_map_status_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["e_match_map_status_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_match_map_status_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_match_map_status"]],
e_match_map_status_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["e_match_map_status_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["e_match_map_status_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_match_map_status_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_match_map_status_aggregate"]],
e_match_map_status_by_pk?: [{	value: string | Variable<any, string>},ValueTypes["e_match_map_status"]],
e_match_map_status_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["e_match_map_status_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_match_map_status_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_match_map_status"]],
e_match_status?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["e_match_status_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["e_match_status_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_match_status_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_match_status"]],
e_match_status_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["e_match_status_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["e_match_status_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_match_status_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_match_status_aggregate"]],
e_match_status_by_pk?: [{	value: string | Variable<any, string>},ValueTypes["e_match_status"]],
e_match_status_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["e_match_status_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_match_status_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_match_status"]],
e_match_types?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["e_match_types_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["e_match_types_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_match_types_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_match_types"]],
e_match_types_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["e_match_types_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["e_match_types_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_match_types_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_match_types_aggregate"]],
e_match_types_by_pk?: [{	value: string | Variable<any, string>},ValueTypes["e_match_types"]],
e_match_types_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["e_match_types_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_match_types_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_match_types"]],
e_objective_types?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["e_objective_types_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["e_objective_types_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_objective_types_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_objective_types"]],
e_objective_types_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["e_objective_types_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["e_objective_types_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_objective_types_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_objective_types_aggregate"]],
e_objective_types_by_pk?: [{	value: string | Variable<any, string>},ValueTypes["e_objective_types"]],
e_objective_types_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["e_objective_types_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_objective_types_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_objective_types"]],
e_sides?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["e_sides_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["e_sides_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_sides_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_sides"]],
e_sides_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["e_sides_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["e_sides_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_sides_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_sides_aggregate"]],
e_sides_by_pk?: [{	value: string | Variable<any, string>},ValueTypes["e_sides"]],
e_sides_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["e_sides_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_sides_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_sides"]],
e_team_roles?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["e_team_roles_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["e_team_roles_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_team_roles_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_team_roles"]],
e_team_roles_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["e_team_roles_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["e_team_roles_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_team_roles_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_team_roles_aggregate"]],
e_team_roles_by_pk?: [{	value: string | Variable<any, string>},ValueTypes["e_team_roles"]],
e_team_roles_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["e_team_roles_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_team_roles_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_team_roles"]],
e_timeout_settings?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["e_timeout_settings_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["e_timeout_settings_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_timeout_settings_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_timeout_settings"]],
e_timeout_settings_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["e_timeout_settings_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["e_timeout_settings_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_timeout_settings_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_timeout_settings_aggregate"]],
e_timeout_settings_by_pk?: [{	value: string | Variable<any, string>},ValueTypes["e_timeout_settings"]],
e_timeout_settings_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["e_timeout_settings_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_timeout_settings_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_timeout_settings"]],
e_utility_types?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["e_utility_types_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["e_utility_types_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_utility_types_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_utility_types"]],
e_utility_types_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["e_utility_types_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["e_utility_types_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_utility_types_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_utility_types_aggregate"]],
e_utility_types_by_pk?: [{	value: string | Variable<any, string>},ValueTypes["e_utility_types"]],
e_utility_types_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["e_utility_types_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_utility_types_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_utility_types"]],
e_veto_pick_types?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["e_veto_pick_types_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["e_veto_pick_types_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_veto_pick_types_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_veto_pick_types"]],
e_veto_pick_types_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["e_veto_pick_types_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["e_veto_pick_types_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_veto_pick_types_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_veto_pick_types_aggregate"]],
e_veto_pick_types_by_pk?: [{	value: string | Variable<any, string>},ValueTypes["e_veto_pick_types"]],
e_veto_pick_types_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["e_veto_pick_types_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["e_veto_pick_types_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["e_veto_pick_types"]],
map_pools?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["map_pools_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["map_pools_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["map_pools_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["map_pools"]],
map_pools_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["map_pools_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["map_pools_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["map_pools_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["map_pools_aggregate"]],
map_pools_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["map_pools"]],
map_pools_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["map_pools_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["map_pools_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["map_pools"]],
maps?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["maps_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["maps_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["maps_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["maps"]],
maps_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["maps_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["maps_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["maps_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["maps_aggregate"]],
maps_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["maps"]],
maps_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["maps_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["maps_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["maps"]],
match_lineup_players?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_lineup_players_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_lineup_players_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_lineup_players_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_lineup_players"]],
match_lineup_players_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_lineup_players_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_lineup_players_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_lineup_players_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_lineup_players_aggregate"]],
match_lineup_players_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["match_lineup_players"]],
match_lineup_players_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["match_lineup_players_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_lineup_players_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_lineup_players"]],
match_lineups?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_lineups_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_lineups_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_lineups_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_lineups"]],
match_lineups_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_lineups_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_lineups_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_lineups_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_lineups_aggregate"]],
match_lineups_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["match_lineups"]],
match_lineups_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["match_lineups_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_lineups_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_lineups"]],
match_map_demos?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_map_demos_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_map_demos_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_map_demos_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_map_demos"]],
match_map_demos_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_map_demos_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_map_demos_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_map_demos_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_map_demos_aggregate"]],
match_map_demos_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["match_map_demos"]],
match_map_demos_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["match_map_demos_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_map_demos_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_map_demos"]],
match_map_rounds?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_map_rounds_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_map_rounds_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_map_rounds_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_map_rounds"]],
match_map_rounds_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_map_rounds_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_map_rounds_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_map_rounds_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_map_rounds_aggregate"]],
match_map_rounds_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["match_map_rounds"]],
match_map_rounds_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["match_map_rounds_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_map_rounds_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_map_rounds"]],
match_maps?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_maps_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_maps_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_maps_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_maps"]],
match_maps_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_maps_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_maps_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_maps_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_maps_aggregate"]],
match_maps_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["match_maps"]],
match_maps_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["match_maps_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_maps_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_maps"]],
match_veto_picks?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_veto_picks_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_veto_picks_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_veto_picks_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_veto_picks"]],
match_veto_picks_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_veto_picks_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_veto_picks_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_veto_picks_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_veto_picks_aggregate"]],
match_veto_picks_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["match_veto_picks"]],
match_veto_picks_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["match_veto_picks_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_veto_picks_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_veto_picks"]],
matches?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["matches_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["matches_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["matches_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["matches"]],
matches_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["matches_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["matches_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["matches_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["matches_aggregate"]],
matches_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["matches"]],
matches_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["matches_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["matches_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["matches"]],
player_assists?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_assists_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_assists_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_assists_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_assists"]],
player_assists_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_assists_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_assists_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_assists_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_assists_aggregate"]],
player_assists_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["player_assists"]],
player_assists_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["player_assists_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_assists_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_assists"]],
player_damages?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_damages_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_damages_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_damages_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_damages"]],
player_damages_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_damages_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_damages_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_damages_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_damages_aggregate"]],
player_damages_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["player_damages"]],
player_damages_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["player_damages_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_damages_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_damages"]],
player_flashes?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_flashes_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_flashes_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_flashes_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_flashes"]],
player_flashes_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_flashes_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_flashes_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_flashes_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_flashes_aggregate"]],
player_flashes_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["player_flashes"]],
player_flashes_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["player_flashes_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_flashes_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_flashes"]],
player_kills?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_kills_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_kills_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_kills_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_kills"]],
player_kills_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_kills_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_kills_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_kills_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_kills_aggregate"]],
player_kills_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["player_kills"]],
player_kills_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["player_kills_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_kills_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_kills"]],
player_objectives?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_objectives_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_objectives_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_objectives_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_objectives"]],
player_objectives_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_objectives_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_objectives_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_objectives_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_objectives_aggregate"]],
player_objectives_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["player_objectives"]],
player_objectives_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["player_objectives_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_objectives_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_objectives"]],
player_unused_utility?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_unused_utility_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_unused_utility_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_unused_utility_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_unused_utility"]],
player_unused_utility_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_unused_utility_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_unused_utility_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_unused_utility_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_unused_utility_aggregate"]],
player_unused_utility_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["player_unused_utility"]],
player_unused_utility_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["player_unused_utility_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_unused_utility_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_unused_utility"]],
player_utility?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_utility_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_utility_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_utility_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_utility"]],
player_utility_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["player_utility_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["player_utility_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_utility_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_utility_aggregate"]],
player_utility_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["player_utility"]],
player_utility_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["player_utility_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["player_utility_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["player_utility"]],
players?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["players_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["players_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["players_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["players"]],
players_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["players_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["players_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["players_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["players_aggregate"]],
players_by_pk?: [{	steam_id: ValueTypes["bigint"] | Variable<any, string>},ValueTypes["players"]],
players_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["players_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["players_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["players"]],
servers?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["servers_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["servers_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["servers_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["servers"]],
servers_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["servers_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["servers_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["servers_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["servers_aggregate"]],
servers_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["servers"]],
servers_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["servers_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["servers_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["servers"]],
team_invites?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["team_invites_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["team_invites_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["team_invites_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["team_invites"]],
team_invites_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["team_invites_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["team_invites_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["team_invites_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["team_invites_aggregate"]],
team_invites_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["team_invites"]],
team_invites_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["team_invites_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["team_invites_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["team_invites"]],
team_roster?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["team_roster_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["team_roster_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["team_roster_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["team_roster"]],
team_roster_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["team_roster_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["team_roster_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["team_roster_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["team_roster_aggregate"]],
team_roster_by_pk?: [{	player_steam_id: ValueTypes["bigint"] | Variable<any, string>,	team_id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["team_roster"]],
team_roster_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["team_roster_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["team_roster_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["team_roster"]],
teams?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["teams_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["teams_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["teams_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["teams"]],
teams_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["teams_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["teams_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["teams_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["teams_aggregate"]],
teams_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["teams"]],
teams_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["teams_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["teams_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["teams"]],
tournament_organizers?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_organizers_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_organizers_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_organizers_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_organizers"]],
tournament_organizers_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_organizers_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_organizers_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_organizers_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_organizers_aggregate"]],
tournament_organizers_by_pk?: [{	steam_id: ValueTypes["bigint"] | Variable<any, string>,	tournament_id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["tournament_organizers"]],
tournament_organizers_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["tournament_organizers_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_organizers_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_organizers"]],
tournament_roster?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_roster_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_roster_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_roster_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_roster"]],
tournament_roster_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_roster_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_roster_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_roster_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_roster_aggregate"]],
tournament_roster_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["tournament_roster"]],
tournament_roster_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["tournament_roster_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_roster_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_roster"]],
tournament_servers?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_servers_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_servers_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_servers_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_servers"]],
tournament_servers_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_servers_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_servers_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_servers_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_servers_aggregate"]],
tournament_servers_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["tournament_servers"]],
tournament_servers_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["tournament_servers_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_servers_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_servers"]],
tournament_stages?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_stages_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_stages_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_stages_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_stages"]],
tournament_stages_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_stages_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_stages_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_stages_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_stages_aggregate"]],
tournament_stages_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["tournament_stages"]],
tournament_stages_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["tournament_stages_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_stages_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_stages"]],
tournament_teams?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_teams_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_teams_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_teams_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_teams"]],
tournament_teams_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_teams_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_teams_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_teams_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_teams_aggregate"]],
tournament_teams_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["tournament_teams"]],
tournament_teams_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["tournament_teams_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_teams_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_teams"]],
tournaments?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournaments_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournaments_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournaments_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournaments"]],
tournaments_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournaments_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournaments_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournaments_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournaments_aggregate"]],
tournaments_by_pk?: [{	id: ValueTypes["uuid"] | Variable<any, string>},ValueTypes["tournaments"]],
tournaments_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["tournaments_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournaments_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournaments"]],
v_match_captains?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_match_captains_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_match_captains_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_match_captains_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_match_captains"]],
v_match_captains_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_match_captains_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_match_captains_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_match_captains_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_match_captains_aggregate"]],
v_match_captains_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["v_match_captains_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_match_captains_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_match_captains"]],
v_player_arch_nemesis?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_player_arch_nemesis_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_player_arch_nemesis_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_player_arch_nemesis_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_player_arch_nemesis"]],
v_player_arch_nemesis_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_player_arch_nemesis_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_player_arch_nemesis_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_player_arch_nemesis_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_player_arch_nemesis_aggregate"]],
v_player_arch_nemesis_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["v_player_arch_nemesis_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_player_arch_nemesis_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_player_arch_nemesis"]],
v_player_damage?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_player_damage_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_player_damage_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_player_damage_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_player_damage"]],
v_player_damage_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_player_damage_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_player_damage_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_player_damage_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_player_damage_aggregate"]],
v_player_damage_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["v_player_damage_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_player_damage_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_player_damage"]],
v_player_killed_player_counts?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_player_killed_player_counts_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_player_killed_player_counts_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_player_killed_player_counts_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_player_killed_player_counts"]],
v_player_killed_player_counts_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_player_killed_player_counts_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_player_killed_player_counts_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_player_killed_player_counts_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_player_killed_player_counts_aggregate"]],
v_player_killed_player_counts_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["v_player_killed_player_counts_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_player_killed_player_counts_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_player_killed_player_counts"]],
v_player_match_kills?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_player_match_kills_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_player_match_kills_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_player_match_kills_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_player_match_kills"]],
v_player_match_kills_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_player_match_kills_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_player_match_kills_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_player_match_kills_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_player_match_kills_aggregate"]],
v_player_match_kills_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["v_player_match_kills_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_player_match_kills_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_player_match_kills"]],
v_player_multi_kills?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_player_multi_kills_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_player_multi_kills_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_player_multi_kills_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_player_multi_kills"]],
v_player_multi_kills_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_player_multi_kills_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_player_multi_kills_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_player_multi_kills_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_player_multi_kills_aggregate"]],
v_player_multi_kills_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["v_player_multi_kills_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_player_multi_kills_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_player_multi_kills"]],
v_player_opening_duels?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_player_opening_duels_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_player_opening_duels_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_player_opening_duels_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_player_opening_duels"]],
v_player_opening_duels_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_player_opening_duels_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_player_opening_duels_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_player_opening_duels_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_player_opening_duels_aggregate"]],
v_player_opening_duels_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["v_player_opening_duels_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_player_opening_duels_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_player_opening_duels"]],
v_pool_maps?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_pool_maps_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_pool_maps_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_pool_maps_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_pool_maps"]],
v_pool_maps_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["v_pool_maps_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["v_pool_maps_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_pool_maps_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_pool_maps_aggregate"]],
v_pool_maps_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["v_pool_maps_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["v_pool_maps_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["v_pool_maps"]],
		__typename?: boolean | `@${string}`
}>;
	/** columns and relationships of "team_invites" */
["team_invites"]: AliasType<{
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** An object relationship */
	invited_by?:ValueTypes["players"],
	invited_by_player_steam_id?:boolean | `@${string}`,
	/** An object relationship */
	player?:ValueTypes["players"],
	steam_id?:boolean | `@${string}`,
	/** An object relationship */
	team?:ValueTypes["teams"],
	team_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "team_invites" */
["team_invites_aggregate"]: AliasType<{
	aggregate?:ValueTypes["team_invites_aggregate_fields"],
	nodes?:ValueTypes["team_invites"],
		__typename?: boolean | `@${string}`
}>;
	["team_invites_aggregate_bool_exp"]: {
	count?: ValueTypes["team_invites_aggregate_bool_exp_count"] | undefined | null | Variable<any, string>
};
	["team_invites_aggregate_bool_exp_count"]: {
	arguments?: Array<ValueTypes["team_invites_select_column"]> | undefined | null | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["team_invites_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Int_comparison_exp"] | Variable<any, string>
};
	/** aggregate fields of "team_invites" */
["team_invites_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["team_invites_avg_fields"],
count?: [{	columns?: Array<ValueTypes["team_invites_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["team_invites_max_fields"],
	min?:ValueTypes["team_invites_min_fields"],
	stddev?:ValueTypes["team_invites_stddev_fields"],
	stddev_pop?:ValueTypes["team_invites_stddev_pop_fields"],
	stddev_samp?:ValueTypes["team_invites_stddev_samp_fields"],
	sum?:ValueTypes["team_invites_sum_fields"],
	var_pop?:ValueTypes["team_invites_var_pop_fields"],
	var_samp?:ValueTypes["team_invites_var_samp_fields"],
	variance?:ValueTypes["team_invites_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "team_invites" */
["team_invites_aggregate_order_by"]: {
	avg?: ValueTypes["team_invites_avg_order_by"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["team_invites_max_order_by"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["team_invites_min_order_by"] | undefined | null | Variable<any, string>,
	stddev?: ValueTypes["team_invites_stddev_order_by"] | undefined | null | Variable<any, string>,
	stddev_pop?: ValueTypes["team_invites_stddev_pop_order_by"] | undefined | null | Variable<any, string>,
	stddev_samp?: ValueTypes["team_invites_stddev_samp_order_by"] | undefined | null | Variable<any, string>,
	sum?: ValueTypes["team_invites_sum_order_by"] | undefined | null | Variable<any, string>,
	var_pop?: ValueTypes["team_invites_var_pop_order_by"] | undefined | null | Variable<any, string>,
	var_samp?: ValueTypes["team_invites_var_samp_order_by"] | undefined | null | Variable<any, string>,
	variance?: ValueTypes["team_invites_variance_order_by"] | undefined | null | Variable<any, string>
};
	/** input type for inserting array relation for remote table "team_invites" */
["team_invites_arr_rel_insert_input"]: {
	data: Array<ValueTypes["team_invites_insert_input"]> | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["team_invites_on_conflict"] | undefined | null | Variable<any, string>
};
	/** aggregate avg on columns */
["team_invites_avg_fields"]: AliasType<{
	invited_by_player_steam_id?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "team_invites" */
["team_invites_avg_order_by"]: {
	invited_by_player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to filter rows from the table "team_invites". All fields are combined with a logical 'AND'. */
["team_invites_bool_exp"]: {
	_and?: Array<ValueTypes["team_invites_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["team_invites_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["team_invites_bool_exp"]> | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamptz_comparison_exp"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	invited_by?: ValueTypes["players_bool_exp"] | undefined | null | Variable<any, string>,
	invited_by_player_steam_id?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_bool_exp"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>,
	team?: ValueTypes["teams_bool_exp"] | undefined | null | Variable<any, string>,
	team_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "team_invites" */
["team_invites_constraint"]:team_invites_constraint;
	/** input type for incrementing numeric columns in table "team_invites" */
["team_invites_inc_input"]: {
	invited_by_player_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "team_invites" */
["team_invites_insert_input"]: {
	created_at?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	invited_by?: ValueTypes["players_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	invited_by_player_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	team?: ValueTypes["teams_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	team_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["team_invites_max_fields"]: AliasType<{
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	invited_by_player_steam_id?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
	team_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "team_invites" */
["team_invites_max_order_by"]: {
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	invited_by_player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	team_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate min on columns */
["team_invites_min_fields"]: AliasType<{
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	invited_by_player_steam_id?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
	team_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "team_invites" */
["team_invites_min_order_by"]: {
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	invited_by_player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	team_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** response of any mutation on the table "team_invites" */
["team_invites_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["team_invites"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "team_invites" */
["team_invites_on_conflict"]: {
	constraint: ValueTypes["team_invites_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["team_invites_update_column"]> | Variable<any, string>,
	where?: ValueTypes["team_invites_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "team_invites". */
["team_invites_order_by"]: {
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	invited_by?: ValueTypes["players_order_by"] | undefined | null | Variable<any, string>,
	invited_by_player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_order_by"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	team?: ValueTypes["teams_order_by"] | undefined | null | Variable<any, string>,
	team_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: team_invites */
["team_invites_pk_columns_input"]: {
	id: ValueTypes["uuid"] | Variable<any, string>
};
	/** select columns of table "team_invites" */
["team_invites_select_column"]:team_invites_select_column;
	/** input type for updating data in table "team_invites" */
["team_invites_set_input"]: {
	created_at?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	invited_by_player_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	team_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["team_invites_stddev_fields"]: AliasType<{
	invited_by_player_steam_id?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "team_invites" */
["team_invites_stddev_order_by"]: {
	invited_by_player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_pop on columns */
["team_invites_stddev_pop_fields"]: AliasType<{
	invited_by_player_steam_id?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "team_invites" */
["team_invites_stddev_pop_order_by"]: {
	invited_by_player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_samp on columns */
["team_invites_stddev_samp_fields"]: AliasType<{
	invited_by_player_steam_id?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "team_invites" */
["team_invites_stddev_samp_order_by"]: {
	invited_by_player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "team_invites" */
["team_invites_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["team_invites_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["team_invites_stream_cursor_value_input"]: {
	created_at?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	invited_by_player_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	team_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["team_invites_sum_fields"]: AliasType<{
	invited_by_player_steam_id?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "team_invites" */
["team_invites_sum_order_by"]: {
	invited_by_player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** update columns of table "team_invites" */
["team_invites_update_column"]:team_invites_update_column;
	["team_invites_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["team_invites_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["team_invites_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["team_invites_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["team_invites_var_pop_fields"]: AliasType<{
	invited_by_player_steam_id?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "team_invites" */
["team_invites_var_pop_order_by"]: {
	invited_by_player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate var_samp on columns */
["team_invites_var_samp_fields"]: AliasType<{
	invited_by_player_steam_id?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "team_invites" */
["team_invites_var_samp_order_by"]: {
	invited_by_player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate variance on columns */
["team_invites_variance_fields"]: AliasType<{
	invited_by_player_steam_id?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "team_invites" */
["team_invites_variance_order_by"]: {
	invited_by_player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** columns and relationships of "team_roster" */
["team_roster"]: AliasType<{
	/** An object relationship */
	player?:ValueTypes["players"],
	player_steam_id?:boolean | `@${string}`,
	role?:boolean | `@${string}`,
	/** An object relationship */
	team?:ValueTypes["teams"],
	team_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "team_roster" */
["team_roster_aggregate"]: AliasType<{
	aggregate?:ValueTypes["team_roster_aggregate_fields"],
	nodes?:ValueTypes["team_roster"],
		__typename?: boolean | `@${string}`
}>;
	["team_roster_aggregate_bool_exp"]: {
	count?: ValueTypes["team_roster_aggregate_bool_exp_count"] | undefined | null | Variable<any, string>
};
	["team_roster_aggregate_bool_exp_count"]: {
	arguments?: Array<ValueTypes["team_roster_select_column"]> | undefined | null | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["team_roster_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Int_comparison_exp"] | Variable<any, string>
};
	/** aggregate fields of "team_roster" */
["team_roster_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["team_roster_avg_fields"],
count?: [{	columns?: Array<ValueTypes["team_roster_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["team_roster_max_fields"],
	min?:ValueTypes["team_roster_min_fields"],
	stddev?:ValueTypes["team_roster_stddev_fields"],
	stddev_pop?:ValueTypes["team_roster_stddev_pop_fields"],
	stddev_samp?:ValueTypes["team_roster_stddev_samp_fields"],
	sum?:ValueTypes["team_roster_sum_fields"],
	var_pop?:ValueTypes["team_roster_var_pop_fields"],
	var_samp?:ValueTypes["team_roster_var_samp_fields"],
	variance?:ValueTypes["team_roster_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "team_roster" */
["team_roster_aggregate_order_by"]: {
	avg?: ValueTypes["team_roster_avg_order_by"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["team_roster_max_order_by"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["team_roster_min_order_by"] | undefined | null | Variable<any, string>,
	stddev?: ValueTypes["team_roster_stddev_order_by"] | undefined | null | Variable<any, string>,
	stddev_pop?: ValueTypes["team_roster_stddev_pop_order_by"] | undefined | null | Variable<any, string>,
	stddev_samp?: ValueTypes["team_roster_stddev_samp_order_by"] | undefined | null | Variable<any, string>,
	sum?: ValueTypes["team_roster_sum_order_by"] | undefined | null | Variable<any, string>,
	var_pop?: ValueTypes["team_roster_var_pop_order_by"] | undefined | null | Variable<any, string>,
	var_samp?: ValueTypes["team_roster_var_samp_order_by"] | undefined | null | Variable<any, string>,
	variance?: ValueTypes["team_roster_variance_order_by"] | undefined | null | Variable<any, string>
};
	/** input type for inserting array relation for remote table "team_roster" */
["team_roster_arr_rel_insert_input"]: {
	data: Array<ValueTypes["team_roster_insert_input"]> | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["team_roster_on_conflict"] | undefined | null | Variable<any, string>
};
	/** aggregate avg on columns */
["team_roster_avg_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "team_roster" */
["team_roster_avg_order_by"]: {
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to filter rows from the table "team_roster". All fields are combined with a logical 'AND'. */
["team_roster_bool_exp"]: {
	_and?: Array<ValueTypes["team_roster_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["team_roster_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["team_roster_bool_exp"]> | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_bool_exp"] | undefined | null | Variable<any, string>,
	player_steam_id?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>,
	role?: ValueTypes["e_team_roles_enum_comparison_exp"] | undefined | null | Variable<any, string>,
	team?: ValueTypes["teams_bool_exp"] | undefined | null | Variable<any, string>,
	team_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "team_roster" */
["team_roster_constraint"]:team_roster_constraint;
	/** input type for incrementing numeric columns in table "team_roster" */
["team_roster_inc_input"]: {
	player_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "team_roster" */
["team_roster_insert_input"]: {
	player?: ValueTypes["players_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	player_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	role?: ValueTypes["e_team_roles_enum"] | undefined | null | Variable<any, string>,
	team?: ValueTypes["teams_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	team_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["team_roster_max_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	team_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "team_roster" */
["team_roster_max_order_by"]: {
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	team_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate min on columns */
["team_roster_min_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	team_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "team_roster" */
["team_roster_min_order_by"]: {
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	team_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** response of any mutation on the table "team_roster" */
["team_roster_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["team_roster"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "team_roster" */
["team_roster_on_conflict"]: {
	constraint: ValueTypes["team_roster_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["team_roster_update_column"]> | Variable<any, string>,
	where?: ValueTypes["team_roster_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "team_roster". */
["team_roster_order_by"]: {
	player?: ValueTypes["players_order_by"] | undefined | null | Variable<any, string>,
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	role?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	team?: ValueTypes["teams_order_by"] | undefined | null | Variable<any, string>,
	team_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: team_roster */
["team_roster_pk_columns_input"]: {
	player_steam_id: ValueTypes["bigint"] | Variable<any, string>,
	team_id: ValueTypes["uuid"] | Variable<any, string>
};
	/** select columns of table "team_roster" */
["team_roster_select_column"]:team_roster_select_column;
	/** input type for updating data in table "team_roster" */
["team_roster_set_input"]: {
	player_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	role?: ValueTypes["e_team_roles_enum"] | undefined | null | Variable<any, string>,
	team_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["team_roster_stddev_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "team_roster" */
["team_roster_stddev_order_by"]: {
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_pop on columns */
["team_roster_stddev_pop_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "team_roster" */
["team_roster_stddev_pop_order_by"]: {
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_samp on columns */
["team_roster_stddev_samp_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "team_roster" */
["team_roster_stddev_samp_order_by"]: {
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "team_roster" */
["team_roster_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["team_roster_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["team_roster_stream_cursor_value_input"]: {
	player_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	role?: ValueTypes["e_team_roles_enum"] | undefined | null | Variable<any, string>,
	team_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["team_roster_sum_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "team_roster" */
["team_roster_sum_order_by"]: {
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** update columns of table "team_roster" */
["team_roster_update_column"]:team_roster_update_column;
	["team_roster_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["team_roster_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["team_roster_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["team_roster_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["team_roster_var_pop_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "team_roster" */
["team_roster_var_pop_order_by"]: {
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate var_samp on columns */
["team_roster_var_samp_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "team_roster" */
["team_roster_var_samp_order_by"]: {
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate variance on columns */
["team_roster_variance_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "team_roster" */
["team_roster_variance_order_by"]: {
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** columns and relationships of "teams" */
["teams"]: AliasType<{
	id?:boolean | `@${string}`,
invites?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["team_invites_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["team_invites_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["team_invites_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["team_invites"]],
invites_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["team_invites_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["team_invites_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["team_invites_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["team_invites_aggregate"]],
match_lineups?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_lineups_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_lineups_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_lineups_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_lineups"]],
match_lineups_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["match_lineups_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["match_lineups_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["match_lineups_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["match_lineups_aggregate"]],
matches?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["matches_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["matches_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["matches_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["matches"]],
	name?:boolean | `@${string}`,
	/** An object relationship */
	owner?:ValueTypes["players"],
	owner_steam_id?:boolean | `@${string}`,
roster?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["team_roster_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["team_roster_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["team_roster_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["team_roster"]],
roster_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["team_roster_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["team_roster_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["team_roster_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["team_roster_aggregate"]],
	short_name?:boolean | `@${string}`,
tournament_rosters?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_roster_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_roster_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_roster_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_roster"]],
tournament_rosters_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_roster_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_roster_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_roster_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_roster_aggregate"]],
tournament_teams?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_teams_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_teams_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_teams_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_teams"]],
tournament_teams_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_teams_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_teams_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_teams_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_teams_aggregate"]],
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "teams" */
["teams_aggregate"]: AliasType<{
	aggregate?:ValueTypes["teams_aggregate_fields"],
	nodes?:ValueTypes["teams"],
		__typename?: boolean | `@${string}`
}>;
	["teams_aggregate_bool_exp"]: {
	count?: ValueTypes["teams_aggregate_bool_exp_count"] | undefined | null | Variable<any, string>
};
	["teams_aggregate_bool_exp_count"]: {
	arguments?: Array<ValueTypes["teams_select_column"]> | undefined | null | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["teams_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Int_comparison_exp"] | Variable<any, string>
};
	/** aggregate fields of "teams" */
["teams_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["teams_avg_fields"],
count?: [{	columns?: Array<ValueTypes["teams_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["teams_max_fields"],
	min?:ValueTypes["teams_min_fields"],
	stddev?:ValueTypes["teams_stddev_fields"],
	stddev_pop?:ValueTypes["teams_stddev_pop_fields"],
	stddev_samp?:ValueTypes["teams_stddev_samp_fields"],
	sum?:ValueTypes["teams_sum_fields"],
	var_pop?:ValueTypes["teams_var_pop_fields"],
	var_samp?:ValueTypes["teams_var_samp_fields"],
	variance?:ValueTypes["teams_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "teams" */
["teams_aggregate_order_by"]: {
	avg?: ValueTypes["teams_avg_order_by"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["teams_max_order_by"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["teams_min_order_by"] | undefined | null | Variable<any, string>,
	stddev?: ValueTypes["teams_stddev_order_by"] | undefined | null | Variable<any, string>,
	stddev_pop?: ValueTypes["teams_stddev_pop_order_by"] | undefined | null | Variable<any, string>,
	stddev_samp?: ValueTypes["teams_stddev_samp_order_by"] | undefined | null | Variable<any, string>,
	sum?: ValueTypes["teams_sum_order_by"] | undefined | null | Variable<any, string>,
	var_pop?: ValueTypes["teams_var_pop_order_by"] | undefined | null | Variable<any, string>,
	var_samp?: ValueTypes["teams_var_samp_order_by"] | undefined | null | Variable<any, string>,
	variance?: ValueTypes["teams_variance_order_by"] | undefined | null | Variable<any, string>
};
	/** input type for inserting array relation for remote table "teams" */
["teams_arr_rel_insert_input"]: {
	data: Array<ValueTypes["teams_insert_input"]> | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["teams_on_conflict"] | undefined | null | Variable<any, string>
};
	/** aggregate avg on columns */
["teams_avg_fields"]: AliasType<{
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "teams" */
["teams_avg_order_by"]: {
	owner_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to filter rows from the table "teams". All fields are combined with a logical 'AND'. */
["teams_bool_exp"]: {
	_and?: Array<ValueTypes["teams_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["teams_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["teams_bool_exp"]> | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	invites?: ValueTypes["team_invites_bool_exp"] | undefined | null | Variable<any, string>,
	invites_aggregate?: ValueTypes["team_invites_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	match_lineups?: ValueTypes["match_lineups_bool_exp"] | undefined | null | Variable<any, string>,
	match_lineups_aggregate?: ValueTypes["match_lineups_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	matches?: ValueTypes["matches_bool_exp"] | undefined | null | Variable<any, string>,
	name?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	owner?: ValueTypes["players_bool_exp"] | undefined | null | Variable<any, string>,
	owner_steam_id?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>,
	roster?: ValueTypes["team_roster_bool_exp"] | undefined | null | Variable<any, string>,
	roster_aggregate?: ValueTypes["team_roster_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	short_name?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	tournament_rosters?: ValueTypes["tournament_roster_bool_exp"] | undefined | null | Variable<any, string>,
	tournament_rosters_aggregate?: ValueTypes["tournament_roster_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	tournament_teams?: ValueTypes["tournament_teams_bool_exp"] | undefined | null | Variable<any, string>,
	tournament_teams_aggregate?: ValueTypes["tournament_teams_aggregate_bool_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "teams" */
["teams_constraint"]:teams_constraint;
	/** input type for incrementing numeric columns in table "teams" */
["teams_inc_input"]: {
	owner_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "teams" */
["teams_insert_input"]: {
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	invites?: ValueTypes["team_invites_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	match_lineups?: ValueTypes["match_lineups_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	name?: string | undefined | null | Variable<any, string>,
	owner?: ValueTypes["players_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	owner_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	roster?: ValueTypes["team_roster_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	short_name?: string | undefined | null | Variable<any, string>,
	tournament_rosters?: ValueTypes["tournament_roster_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	tournament_teams?: ValueTypes["tournament_teams_arr_rel_insert_input"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["teams_max_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	owner_steam_id?:boolean | `@${string}`,
	short_name?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "teams" */
["teams_max_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	name?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	owner_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	short_name?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate min on columns */
["teams_min_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	owner_steam_id?:boolean | `@${string}`,
	short_name?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "teams" */
["teams_min_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	name?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	owner_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	short_name?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** response of any mutation on the table "teams" */
["teams_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["teams"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "teams" */
["teams_obj_rel_insert_input"]: {
	data: ValueTypes["teams_insert_input"] | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["teams_on_conflict"] | undefined | null | Variable<any, string>
};
	/** on_conflict condition type for table "teams" */
["teams_on_conflict"]: {
	constraint: ValueTypes["teams_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["teams_update_column"]> | Variable<any, string>,
	where?: ValueTypes["teams_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "teams". */
["teams_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	invites_aggregate?: ValueTypes["team_invites_aggregate_order_by"] | undefined | null | Variable<any, string>,
	match_lineups_aggregate?: ValueTypes["match_lineups_aggregate_order_by"] | undefined | null | Variable<any, string>,
	matches_aggregate?: ValueTypes["matches_aggregate_order_by"] | undefined | null | Variable<any, string>,
	name?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	owner?: ValueTypes["players_order_by"] | undefined | null | Variable<any, string>,
	owner_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	roster_aggregate?: ValueTypes["team_roster_aggregate_order_by"] | undefined | null | Variable<any, string>,
	short_name?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	tournament_rosters_aggregate?: ValueTypes["tournament_roster_aggregate_order_by"] | undefined | null | Variable<any, string>,
	tournament_teams_aggregate?: ValueTypes["tournament_teams_aggregate_order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: teams */
["teams_pk_columns_input"]: {
	id: ValueTypes["uuid"] | Variable<any, string>
};
	/** select columns of table "teams" */
["teams_select_column"]:teams_select_column;
	/** input type for updating data in table "teams" */
["teams_set_input"]: {
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	name?: string | undefined | null | Variable<any, string>,
	owner_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	short_name?: string | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["teams_stddev_fields"]: AliasType<{
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "teams" */
["teams_stddev_order_by"]: {
	owner_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_pop on columns */
["teams_stddev_pop_fields"]: AliasType<{
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "teams" */
["teams_stddev_pop_order_by"]: {
	owner_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_samp on columns */
["teams_stddev_samp_fields"]: AliasType<{
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "teams" */
["teams_stddev_samp_order_by"]: {
	owner_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "teams" */
["teams_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["teams_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["teams_stream_cursor_value_input"]: {
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	name?: string | undefined | null | Variable<any, string>,
	owner_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	short_name?: string | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["teams_sum_fields"]: AliasType<{
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "teams" */
["teams_sum_order_by"]: {
	owner_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** update columns of table "teams" */
["teams_update_column"]:teams_update_column;
	["teams_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["teams_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["teams_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["teams_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["teams_var_pop_fields"]: AliasType<{
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "teams" */
["teams_var_pop_order_by"]: {
	owner_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate var_samp on columns */
["teams_var_samp_fields"]: AliasType<{
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "teams" */
["teams_var_samp_order_by"]: {
	owner_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate variance on columns */
["teams_variance_fields"]: AliasType<{
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "teams" */
["teams_variance_order_by"]: {
	owner_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	["timestamptz"]:unknown;
	/** Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'. */
["timestamptz_comparison_exp"]: {
	_eq?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	_gt?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	_gte?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	_in?: Array<ValueTypes["timestamptz"]> | undefined | null | Variable<any, string>,
	_is_null?: boolean | undefined | null | Variable<any, string>,
	_lt?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	_lte?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	_neq?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	_nin?: Array<ValueTypes["timestamptz"]> | undefined | null | Variable<any, string>
};
	/** columns and relationships of "tournament_organizers" */
["tournament_organizers"]: AliasType<{
	/** An object relationship */
	organizer?:ValueTypes["players"],
	role?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
	/** An object relationship */
	tournament?:ValueTypes["tournaments"],
	tournament_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "tournament_organizers" */
["tournament_organizers_aggregate"]: AliasType<{
	aggregate?:ValueTypes["tournament_organizers_aggregate_fields"],
	nodes?:ValueTypes["tournament_organizers"],
		__typename?: boolean | `@${string}`
}>;
	["tournament_organizers_aggregate_bool_exp"]: {
	count?: ValueTypes["tournament_organizers_aggregate_bool_exp_count"] | undefined | null | Variable<any, string>
};
	["tournament_organizers_aggregate_bool_exp_count"]: {
	arguments?: Array<ValueTypes["tournament_organizers_select_column"]> | undefined | null | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["tournament_organizers_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Int_comparison_exp"] | Variable<any, string>
};
	/** aggregate fields of "tournament_organizers" */
["tournament_organizers_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["tournament_organizers_avg_fields"],
count?: [{	columns?: Array<ValueTypes["tournament_organizers_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["tournament_organizers_max_fields"],
	min?:ValueTypes["tournament_organizers_min_fields"],
	stddev?:ValueTypes["tournament_organizers_stddev_fields"],
	stddev_pop?:ValueTypes["tournament_organizers_stddev_pop_fields"],
	stddev_samp?:ValueTypes["tournament_organizers_stddev_samp_fields"],
	sum?:ValueTypes["tournament_organizers_sum_fields"],
	var_pop?:ValueTypes["tournament_organizers_var_pop_fields"],
	var_samp?:ValueTypes["tournament_organizers_var_samp_fields"],
	variance?:ValueTypes["tournament_organizers_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "tournament_organizers" */
["tournament_organizers_aggregate_order_by"]: {
	avg?: ValueTypes["tournament_organizers_avg_order_by"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["tournament_organizers_max_order_by"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["tournament_organizers_min_order_by"] | undefined | null | Variable<any, string>,
	stddev?: ValueTypes["tournament_organizers_stddev_order_by"] | undefined | null | Variable<any, string>,
	stddev_pop?: ValueTypes["tournament_organizers_stddev_pop_order_by"] | undefined | null | Variable<any, string>,
	stddev_samp?: ValueTypes["tournament_organizers_stddev_samp_order_by"] | undefined | null | Variable<any, string>,
	sum?: ValueTypes["tournament_organizers_sum_order_by"] | undefined | null | Variable<any, string>,
	var_pop?: ValueTypes["tournament_organizers_var_pop_order_by"] | undefined | null | Variable<any, string>,
	var_samp?: ValueTypes["tournament_organizers_var_samp_order_by"] | undefined | null | Variable<any, string>,
	variance?: ValueTypes["tournament_organizers_variance_order_by"] | undefined | null | Variable<any, string>
};
	/** input type for inserting array relation for remote table "tournament_organizers" */
["tournament_organizers_arr_rel_insert_input"]: {
	data: Array<ValueTypes["tournament_organizers_insert_input"]> | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["tournament_organizers_on_conflict"] | undefined | null | Variable<any, string>
};
	/** aggregate avg on columns */
["tournament_organizers_avg_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "tournament_organizers" */
["tournament_organizers_avg_order_by"]: {
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to filter rows from the table "tournament_organizers". All fields are combined with a logical 'AND'. */
["tournament_organizers_bool_exp"]: {
	_and?: Array<ValueTypes["tournament_organizers_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["tournament_organizers_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["tournament_organizers_bool_exp"]> | undefined | null | Variable<any, string>,
	organizer?: ValueTypes["players_bool_exp"] | undefined | null | Variable<any, string>,
	role?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>,
	tournament?: ValueTypes["tournaments_bool_exp"] | undefined | null | Variable<any, string>,
	tournament_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "tournament_organizers" */
["tournament_organizers_constraint"]:tournament_organizers_constraint;
	/** input type for incrementing numeric columns in table "tournament_organizers" */
["tournament_organizers_inc_input"]: {
	steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "tournament_organizers" */
["tournament_organizers_insert_input"]: {
	organizer?: ValueTypes["players_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	role?: string | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	tournament?: ValueTypes["tournaments_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	tournament_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["tournament_organizers_max_fields"]: AliasType<{
	role?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
	tournament_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "tournament_organizers" */
["tournament_organizers_max_order_by"]: {
	role?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	tournament_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate min on columns */
["tournament_organizers_min_fields"]: AliasType<{
	role?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
	tournament_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "tournament_organizers" */
["tournament_organizers_min_order_by"]: {
	role?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	tournament_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** response of any mutation on the table "tournament_organizers" */
["tournament_organizers_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["tournament_organizers"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "tournament_organizers" */
["tournament_organizers_on_conflict"]: {
	constraint: ValueTypes["tournament_organizers_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["tournament_organizers_update_column"]> | Variable<any, string>,
	where?: ValueTypes["tournament_organizers_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "tournament_organizers". */
["tournament_organizers_order_by"]: {
	organizer?: ValueTypes["players_order_by"] | undefined | null | Variable<any, string>,
	role?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	tournament?: ValueTypes["tournaments_order_by"] | undefined | null | Variable<any, string>,
	tournament_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: tournament_organizers */
["tournament_organizers_pk_columns_input"]: {
	steam_id: ValueTypes["bigint"] | Variable<any, string>,
	tournament_id: ValueTypes["uuid"] | Variable<any, string>
};
	/** select columns of table "tournament_organizers" */
["tournament_organizers_select_column"]:tournament_organizers_select_column;
	/** input type for updating data in table "tournament_organizers" */
["tournament_organizers_set_input"]: {
	role?: string | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	tournament_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["tournament_organizers_stddev_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "tournament_organizers" */
["tournament_organizers_stddev_order_by"]: {
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_pop on columns */
["tournament_organizers_stddev_pop_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "tournament_organizers" */
["tournament_organizers_stddev_pop_order_by"]: {
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_samp on columns */
["tournament_organizers_stddev_samp_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "tournament_organizers" */
["tournament_organizers_stddev_samp_order_by"]: {
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "tournament_organizers" */
["tournament_organizers_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["tournament_organizers_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["tournament_organizers_stream_cursor_value_input"]: {
	role?: string | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	tournament_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["tournament_organizers_sum_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "tournament_organizers" */
["tournament_organizers_sum_order_by"]: {
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** update columns of table "tournament_organizers" */
["tournament_organizers_update_column"]:tournament_organizers_update_column;
	["tournament_organizers_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["tournament_organizers_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["tournament_organizers_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["tournament_organizers_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["tournament_organizers_var_pop_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "tournament_organizers" */
["tournament_organizers_var_pop_order_by"]: {
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate var_samp on columns */
["tournament_organizers_var_samp_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "tournament_organizers" */
["tournament_organizers_var_samp_order_by"]: {
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate variance on columns */
["tournament_organizers_variance_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "tournament_organizers" */
["tournament_organizers_variance_order_by"]: {
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** columns and relationships of "tournament_roster" */
["tournament_roster"]: AliasType<{
	id?:boolean | `@${string}`,
	/** An object relationship */
	player?:ValueTypes["players"],
	player_steam_id?:boolean | `@${string}`,
	/** An object relationship */
	team?:ValueTypes["teams"],
	team_id?:boolean | `@${string}`,
	/** An object relationship */
	tournament?:ValueTypes["tournaments"],
	tournament_id?:boolean | `@${string}`,
	type?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "tournament_roster" */
["tournament_roster_aggregate"]: AliasType<{
	aggregate?:ValueTypes["tournament_roster_aggregate_fields"],
	nodes?:ValueTypes["tournament_roster"],
		__typename?: boolean | `@${string}`
}>;
	["tournament_roster_aggregate_bool_exp"]: {
	count?: ValueTypes["tournament_roster_aggregate_bool_exp_count"] | undefined | null | Variable<any, string>
};
	["tournament_roster_aggregate_bool_exp_count"]: {
	arguments?: Array<ValueTypes["tournament_roster_select_column"]> | undefined | null | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["tournament_roster_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Int_comparison_exp"] | Variable<any, string>
};
	/** aggregate fields of "tournament_roster" */
["tournament_roster_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["tournament_roster_avg_fields"],
count?: [{	columns?: Array<ValueTypes["tournament_roster_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["tournament_roster_max_fields"],
	min?:ValueTypes["tournament_roster_min_fields"],
	stddev?:ValueTypes["tournament_roster_stddev_fields"],
	stddev_pop?:ValueTypes["tournament_roster_stddev_pop_fields"],
	stddev_samp?:ValueTypes["tournament_roster_stddev_samp_fields"],
	sum?:ValueTypes["tournament_roster_sum_fields"],
	var_pop?:ValueTypes["tournament_roster_var_pop_fields"],
	var_samp?:ValueTypes["tournament_roster_var_samp_fields"],
	variance?:ValueTypes["tournament_roster_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "tournament_roster" */
["tournament_roster_aggregate_order_by"]: {
	avg?: ValueTypes["tournament_roster_avg_order_by"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["tournament_roster_max_order_by"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["tournament_roster_min_order_by"] | undefined | null | Variable<any, string>,
	stddev?: ValueTypes["tournament_roster_stddev_order_by"] | undefined | null | Variable<any, string>,
	stddev_pop?: ValueTypes["tournament_roster_stddev_pop_order_by"] | undefined | null | Variable<any, string>,
	stddev_samp?: ValueTypes["tournament_roster_stddev_samp_order_by"] | undefined | null | Variable<any, string>,
	sum?: ValueTypes["tournament_roster_sum_order_by"] | undefined | null | Variable<any, string>,
	var_pop?: ValueTypes["tournament_roster_var_pop_order_by"] | undefined | null | Variable<any, string>,
	var_samp?: ValueTypes["tournament_roster_var_samp_order_by"] | undefined | null | Variable<any, string>,
	variance?: ValueTypes["tournament_roster_variance_order_by"] | undefined | null | Variable<any, string>
};
	/** input type for inserting array relation for remote table "tournament_roster" */
["tournament_roster_arr_rel_insert_input"]: {
	data: Array<ValueTypes["tournament_roster_insert_input"]> | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["tournament_roster_on_conflict"] | undefined | null | Variable<any, string>
};
	/** aggregate avg on columns */
["tournament_roster_avg_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "tournament_roster" */
["tournament_roster_avg_order_by"]: {
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to filter rows from the table "tournament_roster". All fields are combined with a logical 'AND'. */
["tournament_roster_bool_exp"]: {
	_and?: Array<ValueTypes["tournament_roster_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["tournament_roster_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["tournament_roster_bool_exp"]> | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_bool_exp"] | undefined | null | Variable<any, string>,
	player_steam_id?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>,
	team?: ValueTypes["teams_bool_exp"] | undefined | null | Variable<any, string>,
	team_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	tournament?: ValueTypes["tournaments_bool_exp"] | undefined | null | Variable<any, string>,
	tournament_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	type?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "tournament_roster" */
["tournament_roster_constraint"]:tournament_roster_constraint;
	/** input type for incrementing numeric columns in table "tournament_roster" */
["tournament_roster_inc_input"]: {
	player_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "tournament_roster" */
["tournament_roster_insert_input"]: {
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	player_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	team?: ValueTypes["teams_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	team_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	tournament?: ValueTypes["tournaments_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	tournament_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	type?: string | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["tournament_roster_max_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	team_id?:boolean | `@${string}`,
	tournament_id?:boolean | `@${string}`,
	type?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "tournament_roster" */
["tournament_roster_max_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	team_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	tournament_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	type?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate min on columns */
["tournament_roster_min_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	team_id?:boolean | `@${string}`,
	tournament_id?:boolean | `@${string}`,
	type?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "tournament_roster" */
["tournament_roster_min_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	team_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	tournament_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	type?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** response of any mutation on the table "tournament_roster" */
["tournament_roster_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["tournament_roster"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "tournament_roster" */
["tournament_roster_on_conflict"]: {
	constraint: ValueTypes["tournament_roster_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["tournament_roster_update_column"]> | Variable<any, string>,
	where?: ValueTypes["tournament_roster_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "tournament_roster". */
["tournament_roster_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_order_by"] | undefined | null | Variable<any, string>,
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	team?: ValueTypes["teams_order_by"] | undefined | null | Variable<any, string>,
	team_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	tournament?: ValueTypes["tournaments_order_by"] | undefined | null | Variable<any, string>,
	tournament_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	type?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: tournament_roster */
["tournament_roster_pk_columns_input"]: {
	id: ValueTypes["uuid"] | Variable<any, string>
};
	/** select columns of table "tournament_roster" */
["tournament_roster_select_column"]:tournament_roster_select_column;
	/** input type for updating data in table "tournament_roster" */
["tournament_roster_set_input"]: {
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	player_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	team_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	tournament_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	type?: string | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["tournament_roster_stddev_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "tournament_roster" */
["tournament_roster_stddev_order_by"]: {
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_pop on columns */
["tournament_roster_stddev_pop_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "tournament_roster" */
["tournament_roster_stddev_pop_order_by"]: {
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_samp on columns */
["tournament_roster_stddev_samp_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "tournament_roster" */
["tournament_roster_stddev_samp_order_by"]: {
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "tournament_roster" */
["tournament_roster_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["tournament_roster_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["tournament_roster_stream_cursor_value_input"]: {
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	player_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	team_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	tournament_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	type?: string | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["tournament_roster_sum_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "tournament_roster" */
["tournament_roster_sum_order_by"]: {
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** update columns of table "tournament_roster" */
["tournament_roster_update_column"]:tournament_roster_update_column;
	["tournament_roster_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["tournament_roster_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["tournament_roster_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["tournament_roster_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["tournament_roster_var_pop_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "tournament_roster" */
["tournament_roster_var_pop_order_by"]: {
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate var_samp on columns */
["tournament_roster_var_samp_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "tournament_roster" */
["tournament_roster_var_samp_order_by"]: {
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate variance on columns */
["tournament_roster_variance_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "tournament_roster" */
["tournament_roster_variance_order_by"]: {
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** columns and relationships of "tournament_servers" */
["tournament_servers"]: AliasType<{
	id?:boolean | `@${string}`,
	/** An object relationship */
	server?:ValueTypes["servers"],
	server_id?:boolean | `@${string}`,
	/** An object relationship */
	tournament?:ValueTypes["tournaments"],
	tournament_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "tournament_servers" */
["tournament_servers_aggregate"]: AliasType<{
	aggregate?:ValueTypes["tournament_servers_aggregate_fields"],
	nodes?:ValueTypes["tournament_servers"],
		__typename?: boolean | `@${string}`
}>;
	["tournament_servers_aggregate_bool_exp"]: {
	count?: ValueTypes["tournament_servers_aggregate_bool_exp_count"] | undefined | null | Variable<any, string>
};
	["tournament_servers_aggregate_bool_exp_count"]: {
	arguments?: Array<ValueTypes["tournament_servers_select_column"]> | undefined | null | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["tournament_servers_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Int_comparison_exp"] | Variable<any, string>
};
	/** aggregate fields of "tournament_servers" */
["tournament_servers_aggregate_fields"]: AliasType<{
count?: [{	columns?: Array<ValueTypes["tournament_servers_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["tournament_servers_max_fields"],
	min?:ValueTypes["tournament_servers_min_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "tournament_servers" */
["tournament_servers_aggregate_order_by"]: {
	count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["tournament_servers_max_order_by"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["tournament_servers_min_order_by"] | undefined | null | Variable<any, string>
};
	/** input type for inserting array relation for remote table "tournament_servers" */
["tournament_servers_arr_rel_insert_input"]: {
	data: Array<ValueTypes["tournament_servers_insert_input"]> | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["tournament_servers_on_conflict"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to filter rows from the table "tournament_servers". All fields are combined with a logical 'AND'. */
["tournament_servers_bool_exp"]: {
	_and?: Array<ValueTypes["tournament_servers_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["tournament_servers_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["tournament_servers_bool_exp"]> | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	server?: ValueTypes["servers_bool_exp"] | undefined | null | Variable<any, string>,
	server_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	tournament?: ValueTypes["tournaments_bool_exp"] | undefined | null | Variable<any, string>,
	tournament_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "tournament_servers" */
["tournament_servers_constraint"]:tournament_servers_constraint;
	/** input type for inserting data into table "tournament_servers" */
["tournament_servers_insert_input"]: {
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	server?: ValueTypes["servers_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	server_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	tournament?: ValueTypes["tournaments_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	tournament_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["tournament_servers_max_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	server_id?:boolean | `@${string}`,
	tournament_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "tournament_servers" */
["tournament_servers_max_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	server_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	tournament_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate min on columns */
["tournament_servers_min_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	server_id?:boolean | `@${string}`,
	tournament_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "tournament_servers" */
["tournament_servers_min_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	server_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	tournament_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** response of any mutation on the table "tournament_servers" */
["tournament_servers_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["tournament_servers"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "tournament_servers" */
["tournament_servers_on_conflict"]: {
	constraint: ValueTypes["tournament_servers_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["tournament_servers_update_column"]> | Variable<any, string>,
	where?: ValueTypes["tournament_servers_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "tournament_servers". */
["tournament_servers_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	server?: ValueTypes["servers_order_by"] | undefined | null | Variable<any, string>,
	server_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	tournament?: ValueTypes["tournaments_order_by"] | undefined | null | Variable<any, string>,
	tournament_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: tournament_servers */
["tournament_servers_pk_columns_input"]: {
	id: ValueTypes["uuid"] | Variable<any, string>
};
	/** select columns of table "tournament_servers" */
["tournament_servers_select_column"]:tournament_servers_select_column;
	/** input type for updating data in table "tournament_servers" */
["tournament_servers_set_input"]: {
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	server_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	tournament_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "tournament_servers" */
["tournament_servers_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["tournament_servers_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["tournament_servers_stream_cursor_value_input"]: {
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	server_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	tournament_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>
};
	/** update columns of table "tournament_servers" */
["tournament_servers_update_column"]:tournament_servers_update_column;
	["tournament_servers_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["tournament_servers_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["tournament_servers_bool_exp"] | Variable<any, string>
};
	/** columns and relationships of "tournament_stages" */
["tournament_stages"]: AliasType<{
	id?:boolean | `@${string}`,
	order?:boolean | `@${string}`,
settings?: [{	/** JSON select path */
	path?: string | undefined | null | Variable<any, string>},boolean | `@${string}`],
	/** An object relationship */
	tournament?:ValueTypes["tournaments"],
	tournament_id?:boolean | `@${string}`,
	type?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "tournament_stages" */
["tournament_stages_aggregate"]: AliasType<{
	aggregate?:ValueTypes["tournament_stages_aggregate_fields"],
	nodes?:ValueTypes["tournament_stages"],
		__typename?: boolean | `@${string}`
}>;
	["tournament_stages_aggregate_bool_exp"]: {
	count?: ValueTypes["tournament_stages_aggregate_bool_exp_count"] | undefined | null | Variable<any, string>
};
	["tournament_stages_aggregate_bool_exp_count"]: {
	arguments?: Array<ValueTypes["tournament_stages_select_column"]> | undefined | null | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["tournament_stages_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Int_comparison_exp"] | Variable<any, string>
};
	/** aggregate fields of "tournament_stages" */
["tournament_stages_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["tournament_stages_avg_fields"],
count?: [{	columns?: Array<ValueTypes["tournament_stages_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["tournament_stages_max_fields"],
	min?:ValueTypes["tournament_stages_min_fields"],
	stddev?:ValueTypes["tournament_stages_stddev_fields"],
	stddev_pop?:ValueTypes["tournament_stages_stddev_pop_fields"],
	stddev_samp?:ValueTypes["tournament_stages_stddev_samp_fields"],
	sum?:ValueTypes["tournament_stages_sum_fields"],
	var_pop?:ValueTypes["tournament_stages_var_pop_fields"],
	var_samp?:ValueTypes["tournament_stages_var_samp_fields"],
	variance?:ValueTypes["tournament_stages_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "tournament_stages" */
["tournament_stages_aggregate_order_by"]: {
	avg?: ValueTypes["tournament_stages_avg_order_by"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["tournament_stages_max_order_by"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["tournament_stages_min_order_by"] | undefined | null | Variable<any, string>,
	stddev?: ValueTypes["tournament_stages_stddev_order_by"] | undefined | null | Variable<any, string>,
	stddev_pop?: ValueTypes["tournament_stages_stddev_pop_order_by"] | undefined | null | Variable<any, string>,
	stddev_samp?: ValueTypes["tournament_stages_stddev_samp_order_by"] | undefined | null | Variable<any, string>,
	sum?: ValueTypes["tournament_stages_sum_order_by"] | undefined | null | Variable<any, string>,
	var_pop?: ValueTypes["tournament_stages_var_pop_order_by"] | undefined | null | Variable<any, string>,
	var_samp?: ValueTypes["tournament_stages_var_samp_order_by"] | undefined | null | Variable<any, string>,
	variance?: ValueTypes["tournament_stages_variance_order_by"] | undefined | null | Variable<any, string>
};
	/** append existing jsonb value of filtered columns with new jsonb value */
["tournament_stages_append_input"]: {
	settings?: ValueTypes["jsonb"] | undefined | null | Variable<any, string>
};
	/** input type for inserting array relation for remote table "tournament_stages" */
["tournament_stages_arr_rel_insert_input"]: {
	data: Array<ValueTypes["tournament_stages_insert_input"]> | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["tournament_stages_on_conflict"] | undefined | null | Variable<any, string>
};
	/** aggregate avg on columns */
["tournament_stages_avg_fields"]: AliasType<{
	order?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "tournament_stages" */
["tournament_stages_avg_order_by"]: {
	order?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to filter rows from the table "tournament_stages". All fields are combined with a logical 'AND'. */
["tournament_stages_bool_exp"]: {
	_and?: Array<ValueTypes["tournament_stages_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["tournament_stages_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["tournament_stages_bool_exp"]> | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	order?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	settings?: ValueTypes["jsonb_comparison_exp"] | undefined | null | Variable<any, string>,
	tournament?: ValueTypes["tournaments_bool_exp"] | undefined | null | Variable<any, string>,
	tournament_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	type?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "tournament_stages" */
["tournament_stages_constraint"]:tournament_stages_constraint;
	/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
["tournament_stages_delete_at_path_input"]: {
	settings?: Array<string> | undefined | null | Variable<any, string>
};
	/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
["tournament_stages_delete_elem_input"]: {
	settings?: number | undefined | null | Variable<any, string>
};
	/** delete key/value pair or string element. key/value pairs are matched based on their key value */
["tournament_stages_delete_key_input"]: {
	settings?: string | undefined | null | Variable<any, string>
};
	/** input type for incrementing numeric columns in table "tournament_stages" */
["tournament_stages_inc_input"]: {
	order?: number | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "tournament_stages" */
["tournament_stages_insert_input"]: {
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	order?: number | undefined | null | Variable<any, string>,
	settings?: ValueTypes["jsonb"] | undefined | null | Variable<any, string>,
	tournament?: ValueTypes["tournaments_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	tournament_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	type?: string | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["tournament_stages_max_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	order?:boolean | `@${string}`,
	tournament_id?:boolean | `@${string}`,
	type?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "tournament_stages" */
["tournament_stages_max_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	order?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	tournament_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	type?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate min on columns */
["tournament_stages_min_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	order?:boolean | `@${string}`,
	tournament_id?:boolean | `@${string}`,
	type?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "tournament_stages" */
["tournament_stages_min_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	order?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	tournament_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	type?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** response of any mutation on the table "tournament_stages" */
["tournament_stages_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["tournament_stages"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "tournament_stages" */
["tournament_stages_on_conflict"]: {
	constraint: ValueTypes["tournament_stages_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["tournament_stages_update_column"]> | Variable<any, string>,
	where?: ValueTypes["tournament_stages_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "tournament_stages". */
["tournament_stages_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	order?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	settings?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	tournament?: ValueTypes["tournaments_order_by"] | undefined | null | Variable<any, string>,
	tournament_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	type?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: tournament_stages */
["tournament_stages_pk_columns_input"]: {
	id: ValueTypes["uuid"] | Variable<any, string>
};
	/** prepend existing jsonb value of filtered columns with new jsonb value */
["tournament_stages_prepend_input"]: {
	settings?: ValueTypes["jsonb"] | undefined | null | Variable<any, string>
};
	/** select columns of table "tournament_stages" */
["tournament_stages_select_column"]:tournament_stages_select_column;
	/** input type for updating data in table "tournament_stages" */
["tournament_stages_set_input"]: {
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	order?: number | undefined | null | Variable<any, string>,
	settings?: ValueTypes["jsonb"] | undefined | null | Variable<any, string>,
	tournament_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	type?: string | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["tournament_stages_stddev_fields"]: AliasType<{
	order?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "tournament_stages" */
["tournament_stages_stddev_order_by"]: {
	order?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_pop on columns */
["tournament_stages_stddev_pop_fields"]: AliasType<{
	order?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "tournament_stages" */
["tournament_stages_stddev_pop_order_by"]: {
	order?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_samp on columns */
["tournament_stages_stddev_samp_fields"]: AliasType<{
	order?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "tournament_stages" */
["tournament_stages_stddev_samp_order_by"]: {
	order?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "tournament_stages" */
["tournament_stages_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["tournament_stages_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["tournament_stages_stream_cursor_value_input"]: {
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	order?: number | undefined | null | Variable<any, string>,
	settings?: ValueTypes["jsonb"] | undefined | null | Variable<any, string>,
	tournament_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	type?: string | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["tournament_stages_sum_fields"]: AliasType<{
	order?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "tournament_stages" */
["tournament_stages_sum_order_by"]: {
	order?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** update columns of table "tournament_stages" */
["tournament_stages_update_column"]:tournament_stages_update_column;
	["tournament_stages_updates"]: {
	/** append existing jsonb value of filtered columns with new jsonb value */
	_append?: ValueTypes["tournament_stages_append_input"] | undefined | null | Variable<any, string>,
	/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
	_delete_at_path?: ValueTypes["tournament_stages_delete_at_path_input"] | undefined | null | Variable<any, string>,
	/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
	_delete_elem?: ValueTypes["tournament_stages_delete_elem_input"] | undefined | null | Variable<any, string>,
	/** delete key/value pair or string element. key/value pairs are matched based on their key value */
	_delete_key?: ValueTypes["tournament_stages_delete_key_input"] | undefined | null | Variable<any, string>,
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["tournament_stages_inc_input"] | undefined | null | Variable<any, string>,
	/** prepend existing jsonb value of filtered columns with new jsonb value */
	_prepend?: ValueTypes["tournament_stages_prepend_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["tournament_stages_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["tournament_stages_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["tournament_stages_var_pop_fields"]: AliasType<{
	order?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "tournament_stages" */
["tournament_stages_var_pop_order_by"]: {
	order?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate var_samp on columns */
["tournament_stages_var_samp_fields"]: AliasType<{
	order?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "tournament_stages" */
["tournament_stages_var_samp_order_by"]: {
	order?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate variance on columns */
["tournament_stages_variance_fields"]: AliasType<{
	order?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "tournament_stages" */
["tournament_stages_variance_order_by"]: {
	order?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** columns and relationships of "tournament_teams" */
["tournament_teams"]: AliasType<{
	id?:boolean | `@${string}`,
	/** An object relationship */
	team?:ValueTypes["teams"],
	team_id?:boolean | `@${string}`,
	/** An object relationship */
	tournament?:ValueTypes["tournaments"],
	tournament_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "tournament_teams" */
["tournament_teams_aggregate"]: AliasType<{
	aggregate?:ValueTypes["tournament_teams_aggregate_fields"],
	nodes?:ValueTypes["tournament_teams"],
		__typename?: boolean | `@${string}`
}>;
	["tournament_teams_aggregate_bool_exp"]: {
	count?: ValueTypes["tournament_teams_aggregate_bool_exp_count"] | undefined | null | Variable<any, string>
};
	["tournament_teams_aggregate_bool_exp_count"]: {
	arguments?: Array<ValueTypes["tournament_teams_select_column"]> | undefined | null | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["tournament_teams_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Int_comparison_exp"] | Variable<any, string>
};
	/** aggregate fields of "tournament_teams" */
["tournament_teams_aggregate_fields"]: AliasType<{
count?: [{	columns?: Array<ValueTypes["tournament_teams_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["tournament_teams_max_fields"],
	min?:ValueTypes["tournament_teams_min_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "tournament_teams" */
["tournament_teams_aggregate_order_by"]: {
	count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["tournament_teams_max_order_by"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["tournament_teams_min_order_by"] | undefined | null | Variable<any, string>
};
	/** input type for inserting array relation for remote table "tournament_teams" */
["tournament_teams_arr_rel_insert_input"]: {
	data: Array<ValueTypes["tournament_teams_insert_input"]> | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["tournament_teams_on_conflict"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to filter rows from the table "tournament_teams". All fields are combined with a logical 'AND'. */
["tournament_teams_bool_exp"]: {
	_and?: Array<ValueTypes["tournament_teams_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["tournament_teams_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["tournament_teams_bool_exp"]> | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	team?: ValueTypes["teams_bool_exp"] | undefined | null | Variable<any, string>,
	team_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	tournament?: ValueTypes["tournaments_bool_exp"] | undefined | null | Variable<any, string>,
	tournament_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "tournament_teams" */
["tournament_teams_constraint"]:tournament_teams_constraint;
	/** input type for inserting data into table "tournament_teams" */
["tournament_teams_insert_input"]: {
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	team?: ValueTypes["teams_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	team_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	tournament?: ValueTypes["tournaments_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	tournament_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["tournament_teams_max_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	team_id?:boolean | `@${string}`,
	tournament_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "tournament_teams" */
["tournament_teams_max_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	team_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	tournament_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate min on columns */
["tournament_teams_min_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	team_id?:boolean | `@${string}`,
	tournament_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "tournament_teams" */
["tournament_teams_min_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	team_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	tournament_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** response of any mutation on the table "tournament_teams" */
["tournament_teams_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["tournament_teams"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "tournament_teams" */
["tournament_teams_on_conflict"]: {
	constraint: ValueTypes["tournament_teams_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["tournament_teams_update_column"]> | Variable<any, string>,
	where?: ValueTypes["tournament_teams_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "tournament_teams". */
["tournament_teams_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	team?: ValueTypes["teams_order_by"] | undefined | null | Variable<any, string>,
	team_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	tournament?: ValueTypes["tournaments_order_by"] | undefined | null | Variable<any, string>,
	tournament_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: tournament_teams */
["tournament_teams_pk_columns_input"]: {
	id: ValueTypes["uuid"] | Variable<any, string>
};
	/** select columns of table "tournament_teams" */
["tournament_teams_select_column"]:tournament_teams_select_column;
	/** input type for updating data in table "tournament_teams" */
["tournament_teams_set_input"]: {
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	team_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	tournament_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "tournament_teams" */
["tournament_teams_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["tournament_teams_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["tournament_teams_stream_cursor_value_input"]: {
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	team_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	tournament_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>
};
	/** update columns of table "tournament_teams" */
["tournament_teams_update_column"]:tournament_teams_update_column;
	["tournament_teams_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["tournament_teams_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["tournament_teams_bool_exp"] | Variable<any, string>
};
	/** columns and relationships of "tournaments" */
["tournaments"]: AliasType<{
	/** An object relationship */
	admin?:ValueTypes["players"],
	description?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	organizer_steam_id?:boolean | `@${string}`,
organizers?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_organizers_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_organizers_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_organizers_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_organizers"]],
organizers_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_organizers_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_organizers_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_organizers_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_organizers_aggregate"]],
rosters?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_roster_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_roster_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_roster_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_roster"]],
rosters_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_roster_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_roster_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_roster_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_roster_aggregate"]],
servers?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_servers_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_servers_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_servers_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_servers"]],
servers_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_servers_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_servers_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_servers_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_servers_aggregate"]],
stages?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_stages_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_stages_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_stages_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_stages"]],
stages_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_stages_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_stages_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_stages_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_stages_aggregate"]],
	start?:boolean | `@${string}`,
	status?:boolean | `@${string}`,
teams?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_teams_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_teams_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_teams_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_teams"]],
teams_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["tournament_teams_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["tournament_teams_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["tournament_teams_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["tournament_teams_aggregate"]],
	type?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "tournaments" */
["tournaments_aggregate"]: AliasType<{
	aggregate?:ValueTypes["tournaments_aggregate_fields"],
	nodes?:ValueTypes["tournaments"],
		__typename?: boolean | `@${string}`
}>;
	["tournaments_aggregate_bool_exp"]: {
	count?: ValueTypes["tournaments_aggregate_bool_exp_count"] | undefined | null | Variable<any, string>
};
	["tournaments_aggregate_bool_exp_count"]: {
	arguments?: Array<ValueTypes["tournaments_select_column"]> | undefined | null | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["tournaments_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Int_comparison_exp"] | Variable<any, string>
};
	/** aggregate fields of "tournaments" */
["tournaments_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["tournaments_avg_fields"],
count?: [{	columns?: Array<ValueTypes["tournaments_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["tournaments_max_fields"],
	min?:ValueTypes["tournaments_min_fields"],
	stddev?:ValueTypes["tournaments_stddev_fields"],
	stddev_pop?:ValueTypes["tournaments_stddev_pop_fields"],
	stddev_samp?:ValueTypes["tournaments_stddev_samp_fields"],
	sum?:ValueTypes["tournaments_sum_fields"],
	var_pop?:ValueTypes["tournaments_var_pop_fields"],
	var_samp?:ValueTypes["tournaments_var_samp_fields"],
	variance?:ValueTypes["tournaments_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "tournaments" */
["tournaments_aggregate_order_by"]: {
	avg?: ValueTypes["tournaments_avg_order_by"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["tournaments_max_order_by"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["tournaments_min_order_by"] | undefined | null | Variable<any, string>,
	stddev?: ValueTypes["tournaments_stddev_order_by"] | undefined | null | Variable<any, string>,
	stddev_pop?: ValueTypes["tournaments_stddev_pop_order_by"] | undefined | null | Variable<any, string>,
	stddev_samp?: ValueTypes["tournaments_stddev_samp_order_by"] | undefined | null | Variable<any, string>,
	sum?: ValueTypes["tournaments_sum_order_by"] | undefined | null | Variable<any, string>,
	var_pop?: ValueTypes["tournaments_var_pop_order_by"] | undefined | null | Variable<any, string>,
	var_samp?: ValueTypes["tournaments_var_samp_order_by"] | undefined | null | Variable<any, string>,
	variance?: ValueTypes["tournaments_variance_order_by"] | undefined | null | Variable<any, string>
};
	/** input type for inserting array relation for remote table "tournaments" */
["tournaments_arr_rel_insert_input"]: {
	data: Array<ValueTypes["tournaments_insert_input"]> | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["tournaments_on_conflict"] | undefined | null | Variable<any, string>
};
	/** aggregate avg on columns */
["tournaments_avg_fields"]: AliasType<{
	organizer_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "tournaments" */
["tournaments_avg_order_by"]: {
	organizer_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to filter rows from the table "tournaments". All fields are combined with a logical 'AND'. */
["tournaments_bool_exp"]: {
	_and?: Array<ValueTypes["tournaments_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["tournaments_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["tournaments_bool_exp"]> | undefined | null | Variable<any, string>,
	admin?: ValueTypes["players_bool_exp"] | undefined | null | Variable<any, string>,
	description?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	name?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	organizer_steam_id?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>,
	organizers?: ValueTypes["tournament_organizers_bool_exp"] | undefined | null | Variable<any, string>,
	organizers_aggregate?: ValueTypes["tournament_organizers_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	rosters?: ValueTypes["tournament_roster_bool_exp"] | undefined | null | Variable<any, string>,
	rosters_aggregate?: ValueTypes["tournament_roster_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	servers?: ValueTypes["tournament_servers_bool_exp"] | undefined | null | Variable<any, string>,
	servers_aggregate?: ValueTypes["tournament_servers_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	stages?: ValueTypes["tournament_stages_bool_exp"] | undefined | null | Variable<any, string>,
	stages_aggregate?: ValueTypes["tournament_stages_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	start?: ValueTypes["timestamptz_comparison_exp"] | undefined | null | Variable<any, string>,
	status?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	teams?: ValueTypes["tournament_teams_bool_exp"] | undefined | null | Variable<any, string>,
	teams_aggregate?: ValueTypes["tournament_teams_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	type?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "tournaments" */
["tournaments_constraint"]:tournaments_constraint;
	/** input type for incrementing numeric columns in table "tournaments" */
["tournaments_inc_input"]: {
	organizer_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "tournaments" */
["tournaments_insert_input"]: {
	admin?: ValueTypes["players_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	description?: string | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	name?: string | undefined | null | Variable<any, string>,
	organizer_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	organizers?: ValueTypes["tournament_organizers_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	rosters?: ValueTypes["tournament_roster_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	servers?: ValueTypes["tournament_servers_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	stages?: ValueTypes["tournament_stages_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	start?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	status?: string | undefined | null | Variable<any, string>,
	teams?: ValueTypes["tournament_teams_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	type?: string | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["tournaments_max_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	organizer_steam_id?:boolean | `@${string}`,
	start?:boolean | `@${string}`,
	status?:boolean | `@${string}`,
	type?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "tournaments" */
["tournaments_max_order_by"]: {
	description?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	name?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	organizer_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	start?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	status?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	type?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate min on columns */
["tournaments_min_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	organizer_steam_id?:boolean | `@${string}`,
	start?:boolean | `@${string}`,
	status?:boolean | `@${string}`,
	type?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "tournaments" */
["tournaments_min_order_by"]: {
	description?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	name?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	organizer_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	start?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	status?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	type?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** response of any mutation on the table "tournaments" */
["tournaments_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["tournaments"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "tournaments" */
["tournaments_obj_rel_insert_input"]: {
	data: ValueTypes["tournaments_insert_input"] | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["tournaments_on_conflict"] | undefined | null | Variable<any, string>
};
	/** on_conflict condition type for table "tournaments" */
["tournaments_on_conflict"]: {
	constraint: ValueTypes["tournaments_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["tournaments_update_column"]> | Variable<any, string>,
	where?: ValueTypes["tournaments_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "tournaments". */
["tournaments_order_by"]: {
	admin?: ValueTypes["players_order_by"] | undefined | null | Variable<any, string>,
	description?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	name?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	organizer_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	organizers_aggregate?: ValueTypes["tournament_organizers_aggregate_order_by"] | undefined | null | Variable<any, string>,
	rosters_aggregate?: ValueTypes["tournament_roster_aggregate_order_by"] | undefined | null | Variable<any, string>,
	servers_aggregate?: ValueTypes["tournament_servers_aggregate_order_by"] | undefined | null | Variable<any, string>,
	stages_aggregate?: ValueTypes["tournament_stages_aggregate_order_by"] | undefined | null | Variable<any, string>,
	start?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	status?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	teams_aggregate?: ValueTypes["tournament_teams_aggregate_order_by"] | undefined | null | Variable<any, string>,
	type?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: tournaments */
["tournaments_pk_columns_input"]: {
	id: ValueTypes["uuid"] | Variable<any, string>
};
	/** select columns of table "tournaments" */
["tournaments_select_column"]:tournaments_select_column;
	/** input type for updating data in table "tournaments" */
["tournaments_set_input"]: {
	description?: string | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	name?: string | undefined | null | Variable<any, string>,
	organizer_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	start?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	status?: string | undefined | null | Variable<any, string>,
	type?: string | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["tournaments_stddev_fields"]: AliasType<{
	organizer_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "tournaments" */
["tournaments_stddev_order_by"]: {
	organizer_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_pop on columns */
["tournaments_stddev_pop_fields"]: AliasType<{
	organizer_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "tournaments" */
["tournaments_stddev_pop_order_by"]: {
	organizer_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_samp on columns */
["tournaments_stddev_samp_fields"]: AliasType<{
	organizer_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "tournaments" */
["tournaments_stddev_samp_order_by"]: {
	organizer_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "tournaments" */
["tournaments_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["tournaments_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["tournaments_stream_cursor_value_input"]: {
	description?: string | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	name?: string | undefined | null | Variable<any, string>,
	organizer_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	start?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	status?: string | undefined | null | Variable<any, string>,
	type?: string | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["tournaments_sum_fields"]: AliasType<{
	organizer_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "tournaments" */
["tournaments_sum_order_by"]: {
	organizer_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** update columns of table "tournaments" */
["tournaments_update_column"]:tournaments_update_column;
	["tournaments_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["tournaments_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["tournaments_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["tournaments_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["tournaments_var_pop_fields"]: AliasType<{
	organizer_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "tournaments" */
["tournaments_var_pop_order_by"]: {
	organizer_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate var_samp on columns */
["tournaments_var_samp_fields"]: AliasType<{
	organizer_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "tournaments" */
["tournaments_var_samp_order_by"]: {
	organizer_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate variance on columns */
["tournaments_variance_fields"]: AliasType<{
	organizer_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "tournaments" */
["tournaments_variance_order_by"]: {
	organizer_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	["uuid"]:unknown;
	/** Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'. */
["uuid_comparison_exp"]: {
	_eq?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	_gt?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	_gte?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	_in?: Array<ValueTypes["uuid"]> | undefined | null | Variable<any, string>,
	_is_null?: boolean | undefined | null | Variable<any, string>,
	_lt?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	_lte?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	_neq?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	_nin?: Array<ValueTypes["uuid"]> | undefined | null | Variable<any, string>
};
	/** columns and relationships of "v_match_captains" */
["v_match_captains"]: AliasType<{
	captain?:boolean | `@${string}`,
	discord_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** An object relationship */
	lineup?:ValueTypes["match_lineups"],
	match_lineup_id?:boolean | `@${string}`,
	placeholder_name?:boolean | `@${string}`,
	/** An object relationship */
	player?:ValueTypes["players"],
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "v_match_captains" */
["v_match_captains_aggregate"]: AliasType<{
	aggregate?:ValueTypes["v_match_captains_aggregate_fields"],
	nodes?:ValueTypes["v_match_captains"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "v_match_captains" */
["v_match_captains_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["v_match_captains_avg_fields"],
count?: [{	columns?: Array<ValueTypes["v_match_captains_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["v_match_captains_max_fields"],
	min?:ValueTypes["v_match_captains_min_fields"],
	stddev?:ValueTypes["v_match_captains_stddev_fields"],
	stddev_pop?:ValueTypes["v_match_captains_stddev_pop_fields"],
	stddev_samp?:ValueTypes["v_match_captains_stddev_samp_fields"],
	sum?:ValueTypes["v_match_captains_sum_fields"],
	var_pop?:ValueTypes["v_match_captains_var_pop_fields"],
	var_samp?:ValueTypes["v_match_captains_var_samp_fields"],
	variance?:ValueTypes["v_match_captains_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate avg on columns */
["v_match_captains_avg_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "v_match_captains". All fields are combined with a logical 'AND'. */
["v_match_captains_bool_exp"]: {
	_and?: Array<ValueTypes["v_match_captains_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["v_match_captains_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["v_match_captains_bool_exp"]> | undefined | null | Variable<any, string>,
	captain?: ValueTypes["Boolean_comparison_exp"] | undefined | null | Variable<any, string>,
	discord_id?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	lineup?: ValueTypes["match_lineups_bool_exp"] | undefined | null | Variable<any, string>,
	match_lineup_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	placeholder_name?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_bool_exp"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** input type for incrementing numeric columns in table "v_match_captains" */
["v_match_captains_inc_input"]: {
	steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "v_match_captains" */
["v_match_captains_insert_input"]: {
	captain?: boolean | undefined | null | Variable<any, string>,
	discord_id?: string | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	lineup?: ValueTypes["match_lineups_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	match_lineup_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	placeholder_name?: string | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["v_match_captains_max_fields"]: AliasType<{
	discord_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_lineup_id?:boolean | `@${string}`,
	placeholder_name?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["v_match_captains_min_fields"]: AliasType<{
	discord_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_lineup_id?:boolean | `@${string}`,
	placeholder_name?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "v_match_captains" */
["v_match_captains_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["v_match_captains"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "v_match_captains" */
["v_match_captains_obj_rel_insert_input"]: {
	data: ValueTypes["v_match_captains_insert_input"] | Variable<any, string>
};
	/** Ordering options when selecting data from "v_match_captains". */
["v_match_captains_order_by"]: {
	captain?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	discord_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	lineup?: ValueTypes["match_lineups_order_by"] | undefined | null | Variable<any, string>,
	match_lineup_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	placeholder_name?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_order_by"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** select columns of table "v_match_captains" */
["v_match_captains_select_column"]:v_match_captains_select_column;
	/** input type for updating data in table "v_match_captains" */
["v_match_captains_set_input"]: {
	captain?: boolean | undefined | null | Variable<any, string>,
	discord_id?: string | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_lineup_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	placeholder_name?: string | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["v_match_captains_stddev_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_pop on columns */
["v_match_captains_stddev_pop_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_samp on columns */
["v_match_captains_stddev_samp_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Streaming cursor of the table "v_match_captains" */
["v_match_captains_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["v_match_captains_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["v_match_captains_stream_cursor_value_input"]: {
	captain?: boolean | undefined | null | Variable<any, string>,
	discord_id?: string | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_lineup_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	placeholder_name?: string | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["v_match_captains_sum_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	["v_match_captains_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["v_match_captains_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["v_match_captains_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["v_match_captains_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["v_match_captains_var_pop_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate var_samp on columns */
["v_match_captains_var_samp_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate variance on columns */
["v_match_captains_variance_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** columns and relationships of "v_player_arch_nemesis" */
["v_player_arch_nemesis"]: AliasType<{
	attacker_id?:boolean | `@${string}`,
	kill_count?:boolean | `@${string}`,
	/** An object relationship */
	nemsis?:ValueTypes["players"],
	/** An object relationship */
	player?:ValueTypes["players"],
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "v_player_arch_nemesis" */
["v_player_arch_nemesis_aggregate"]: AliasType<{
	aggregate?:ValueTypes["v_player_arch_nemesis_aggregate_fields"],
	nodes?:ValueTypes["v_player_arch_nemesis"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "v_player_arch_nemesis" */
["v_player_arch_nemesis_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["v_player_arch_nemesis_avg_fields"],
count?: [{	columns?: Array<ValueTypes["v_player_arch_nemesis_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["v_player_arch_nemesis_max_fields"],
	min?:ValueTypes["v_player_arch_nemesis_min_fields"],
	stddev?:ValueTypes["v_player_arch_nemesis_stddev_fields"],
	stddev_pop?:ValueTypes["v_player_arch_nemesis_stddev_pop_fields"],
	stddev_samp?:ValueTypes["v_player_arch_nemesis_stddev_samp_fields"],
	sum?:ValueTypes["v_player_arch_nemesis_sum_fields"],
	var_pop?:ValueTypes["v_player_arch_nemesis_var_pop_fields"],
	var_samp?:ValueTypes["v_player_arch_nemesis_var_samp_fields"],
	variance?:ValueTypes["v_player_arch_nemesis_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate avg on columns */
["v_player_arch_nemesis_avg_fields"]: AliasType<{
	attacker_id?:boolean | `@${string}`,
	kill_count?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "v_player_arch_nemesis". All fields are combined with a logical 'AND'. */
["v_player_arch_nemesis_bool_exp"]: {
	_and?: Array<ValueTypes["v_player_arch_nemesis_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["v_player_arch_nemesis_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["v_player_arch_nemesis_bool_exp"]> | undefined | null | Variable<any, string>,
	attacker_id?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>,
	kill_count?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>,
	nemsis?: ValueTypes["players_bool_exp"] | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_bool_exp"] | undefined | null | Variable<any, string>,
	victim_id?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["v_player_arch_nemesis_max_fields"]: AliasType<{
	attacker_id?:boolean | `@${string}`,
	kill_count?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["v_player_arch_nemesis_min_fields"]: AliasType<{
	attacker_id?:boolean | `@${string}`,
	kill_count?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options when selecting data from "v_player_arch_nemesis". */
["v_player_arch_nemesis_order_by"]: {
	attacker_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	kill_count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	nemsis?: ValueTypes["players_order_by"] | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_order_by"] | undefined | null | Variable<any, string>,
	victim_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** select columns of table "v_player_arch_nemesis" */
["v_player_arch_nemesis_select_column"]:v_player_arch_nemesis_select_column;
	/** aggregate stddev on columns */
["v_player_arch_nemesis_stddev_fields"]: AliasType<{
	attacker_id?:boolean | `@${string}`,
	kill_count?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_pop on columns */
["v_player_arch_nemesis_stddev_pop_fields"]: AliasType<{
	attacker_id?:boolean | `@${string}`,
	kill_count?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_samp on columns */
["v_player_arch_nemesis_stddev_samp_fields"]: AliasType<{
	attacker_id?:boolean | `@${string}`,
	kill_count?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Streaming cursor of the table "v_player_arch_nemesis" */
["v_player_arch_nemesis_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["v_player_arch_nemesis_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["v_player_arch_nemesis_stream_cursor_value_input"]: {
	attacker_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	kill_count?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	victim_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["v_player_arch_nemesis_sum_fields"]: AliasType<{
	attacker_id?:boolean | `@${string}`,
	kill_count?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate var_pop on columns */
["v_player_arch_nemesis_var_pop_fields"]: AliasType<{
	attacker_id?:boolean | `@${string}`,
	kill_count?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate var_samp on columns */
["v_player_arch_nemesis_var_samp_fields"]: AliasType<{
	attacker_id?:boolean | `@${string}`,
	kill_count?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate variance on columns */
["v_player_arch_nemesis_variance_fields"]: AliasType<{
	attacker_id?:boolean | `@${string}`,
	kill_count?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** columns and relationships of "v_player_damage" */
["v_player_damage"]: AliasType<{
	avg_damage_per_round?:boolean | `@${string}`,
	/** An object relationship */
	player?:ValueTypes["players"],
	player_steam_id?:boolean | `@${string}`,
	total_damage?:boolean | `@${string}`,
	total_rounds?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "v_player_damage" */
["v_player_damage_aggregate"]: AliasType<{
	aggregate?:ValueTypes["v_player_damage_aggregate_fields"],
	nodes?:ValueTypes["v_player_damage"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "v_player_damage" */
["v_player_damage_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["v_player_damage_avg_fields"],
count?: [{	columns?: Array<ValueTypes["v_player_damage_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["v_player_damage_max_fields"],
	min?:ValueTypes["v_player_damage_min_fields"],
	stddev?:ValueTypes["v_player_damage_stddev_fields"],
	stddev_pop?:ValueTypes["v_player_damage_stddev_pop_fields"],
	stddev_samp?:ValueTypes["v_player_damage_stddev_samp_fields"],
	sum?:ValueTypes["v_player_damage_sum_fields"],
	var_pop?:ValueTypes["v_player_damage_var_pop_fields"],
	var_samp?:ValueTypes["v_player_damage_var_samp_fields"],
	variance?:ValueTypes["v_player_damage_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate avg on columns */
["v_player_damage_avg_fields"]: AliasType<{
	avg_damage_per_round?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_damage?:boolean | `@${string}`,
	total_rounds?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "v_player_damage". All fields are combined with a logical 'AND'. */
["v_player_damage_bool_exp"]: {
	_and?: Array<ValueTypes["v_player_damage_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["v_player_damage_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["v_player_damage_bool_exp"]> | undefined | null | Variable<any, string>,
	avg_damage_per_round?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_bool_exp"] | undefined | null | Variable<any, string>,
	player_steam_id?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>,
	total_damage?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>,
	total_rounds?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["v_player_damage_max_fields"]: AliasType<{
	avg_damage_per_round?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_damage?:boolean | `@${string}`,
	total_rounds?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["v_player_damage_min_fields"]: AliasType<{
	avg_damage_per_round?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_damage?:boolean | `@${string}`,
	total_rounds?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options when selecting data from "v_player_damage". */
["v_player_damage_order_by"]: {
	avg_damage_per_round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_order_by"] | undefined | null | Variable<any, string>,
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	total_damage?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	total_rounds?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** select columns of table "v_player_damage" */
["v_player_damage_select_column"]:v_player_damage_select_column;
	/** aggregate stddev on columns */
["v_player_damage_stddev_fields"]: AliasType<{
	avg_damage_per_round?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_damage?:boolean | `@${string}`,
	total_rounds?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_pop on columns */
["v_player_damage_stddev_pop_fields"]: AliasType<{
	avg_damage_per_round?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_damage?:boolean | `@${string}`,
	total_rounds?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_samp on columns */
["v_player_damage_stddev_samp_fields"]: AliasType<{
	avg_damage_per_round?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_damage?:boolean | `@${string}`,
	total_rounds?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Streaming cursor of the table "v_player_damage" */
["v_player_damage_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["v_player_damage_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["v_player_damage_stream_cursor_value_input"]: {
	avg_damage_per_round?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	player_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	total_damage?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	total_rounds?: ValueTypes["bigint"] | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["v_player_damage_sum_fields"]: AliasType<{
	avg_damage_per_round?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_damage?:boolean | `@${string}`,
	total_rounds?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate var_pop on columns */
["v_player_damage_var_pop_fields"]: AliasType<{
	avg_damage_per_round?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_damage?:boolean | `@${string}`,
	total_rounds?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate var_samp on columns */
["v_player_damage_var_samp_fields"]: AliasType<{
	avg_damage_per_round?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_damage?:boolean | `@${string}`,
	total_rounds?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate variance on columns */
["v_player_damage_variance_fields"]: AliasType<{
	avg_damage_per_round?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_damage?:boolean | `@${string}`,
	total_rounds?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** columns and relationships of "v_player_killed_player_counts" */
["v_player_killed_player_counts"]: AliasType<{
	kill_count?:boolean | `@${string}`,
	player_id?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "v_player_killed_player_counts" */
["v_player_killed_player_counts_aggregate"]: AliasType<{
	aggregate?:ValueTypes["v_player_killed_player_counts_aggregate_fields"],
	nodes?:ValueTypes["v_player_killed_player_counts"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "v_player_killed_player_counts" */
["v_player_killed_player_counts_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["v_player_killed_player_counts_avg_fields"],
count?: [{	columns?: Array<ValueTypes["v_player_killed_player_counts_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["v_player_killed_player_counts_max_fields"],
	min?:ValueTypes["v_player_killed_player_counts_min_fields"],
	stddev?:ValueTypes["v_player_killed_player_counts_stddev_fields"],
	stddev_pop?:ValueTypes["v_player_killed_player_counts_stddev_pop_fields"],
	stddev_samp?:ValueTypes["v_player_killed_player_counts_stddev_samp_fields"],
	sum?:ValueTypes["v_player_killed_player_counts_sum_fields"],
	var_pop?:ValueTypes["v_player_killed_player_counts_var_pop_fields"],
	var_samp?:ValueTypes["v_player_killed_player_counts_var_samp_fields"],
	variance?:ValueTypes["v_player_killed_player_counts_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate avg on columns */
["v_player_killed_player_counts_avg_fields"]: AliasType<{
	kill_count?:boolean | `@${string}`,
	player_id?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "v_player_killed_player_counts". All fields are combined with a logical 'AND'. */
["v_player_killed_player_counts_bool_exp"]: {
	_and?: Array<ValueTypes["v_player_killed_player_counts_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["v_player_killed_player_counts_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["v_player_killed_player_counts_bool_exp"]> | undefined | null | Variable<any, string>,
	kill_count?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>,
	player_id?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>,
	victim_id?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["v_player_killed_player_counts_max_fields"]: AliasType<{
	kill_count?:boolean | `@${string}`,
	player_id?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["v_player_killed_player_counts_min_fields"]: AliasType<{
	kill_count?:boolean | `@${string}`,
	player_id?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options when selecting data from "v_player_killed_player_counts". */
["v_player_killed_player_counts_order_by"]: {
	kill_count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	player_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	victim_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** select columns of table "v_player_killed_player_counts" */
["v_player_killed_player_counts_select_column"]:v_player_killed_player_counts_select_column;
	/** aggregate stddev on columns */
["v_player_killed_player_counts_stddev_fields"]: AliasType<{
	kill_count?:boolean | `@${string}`,
	player_id?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_pop on columns */
["v_player_killed_player_counts_stddev_pop_fields"]: AliasType<{
	kill_count?:boolean | `@${string}`,
	player_id?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_samp on columns */
["v_player_killed_player_counts_stddev_samp_fields"]: AliasType<{
	kill_count?:boolean | `@${string}`,
	player_id?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Streaming cursor of the table "v_player_killed_player_counts" */
["v_player_killed_player_counts_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["v_player_killed_player_counts_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["v_player_killed_player_counts_stream_cursor_value_input"]: {
	kill_count?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	player_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	victim_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["v_player_killed_player_counts_sum_fields"]: AliasType<{
	kill_count?:boolean | `@${string}`,
	player_id?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate var_pop on columns */
["v_player_killed_player_counts_var_pop_fields"]: AliasType<{
	kill_count?:boolean | `@${string}`,
	player_id?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate var_samp on columns */
["v_player_killed_player_counts_var_samp_fields"]: AliasType<{
	kill_count?:boolean | `@${string}`,
	player_id?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate variance on columns */
["v_player_killed_player_counts_variance_fields"]: AliasType<{
	kill_count?:boolean | `@${string}`,
	player_id?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** columns and relationships of "v_player_match_kills" */
["v_player_match_kills"]: AliasType<{
	avg_kills_per_game?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	/** An object relationship */
	player?:ValueTypes["players"],
	player_steam_id?:boolean | `@${string}`,
	total_matches?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "v_player_match_kills" */
["v_player_match_kills_aggregate"]: AliasType<{
	aggregate?:ValueTypes["v_player_match_kills_aggregate_fields"],
	nodes?:ValueTypes["v_player_match_kills"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "v_player_match_kills" */
["v_player_match_kills_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["v_player_match_kills_avg_fields"],
count?: [{	columns?: Array<ValueTypes["v_player_match_kills_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["v_player_match_kills_max_fields"],
	min?:ValueTypes["v_player_match_kills_min_fields"],
	stddev?:ValueTypes["v_player_match_kills_stddev_fields"],
	stddev_pop?:ValueTypes["v_player_match_kills_stddev_pop_fields"],
	stddev_samp?:ValueTypes["v_player_match_kills_stddev_samp_fields"],
	sum?:ValueTypes["v_player_match_kills_sum_fields"],
	var_pop?:ValueTypes["v_player_match_kills_var_pop_fields"],
	var_samp?:ValueTypes["v_player_match_kills_var_samp_fields"],
	variance?:ValueTypes["v_player_match_kills_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate avg on columns */
["v_player_match_kills_avg_fields"]: AliasType<{
	avg_kills_per_game?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_matches?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "v_player_match_kills". All fields are combined with a logical 'AND'. */
["v_player_match_kills_bool_exp"]: {
	_and?: Array<ValueTypes["v_player_match_kills_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["v_player_match_kills_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["v_player_match_kills_bool_exp"]> | undefined | null | Variable<any, string>,
	avg_kills_per_game?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>,
	kills?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_bool_exp"] | undefined | null | Variable<any, string>,
	player_steam_id?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>,
	total_matches?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["v_player_match_kills_max_fields"]: AliasType<{
	avg_kills_per_game?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_matches?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["v_player_match_kills_min_fields"]: AliasType<{
	avg_kills_per_game?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_matches?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options when selecting data from "v_player_match_kills". */
["v_player_match_kills_order_by"]: {
	avg_kills_per_game?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	kills?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	player?: ValueTypes["players_order_by"] | undefined | null | Variable<any, string>,
	player_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	total_matches?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** select columns of table "v_player_match_kills" */
["v_player_match_kills_select_column"]:v_player_match_kills_select_column;
	/** aggregate stddev on columns */
["v_player_match_kills_stddev_fields"]: AliasType<{
	avg_kills_per_game?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_matches?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_pop on columns */
["v_player_match_kills_stddev_pop_fields"]: AliasType<{
	avg_kills_per_game?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_matches?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_samp on columns */
["v_player_match_kills_stddev_samp_fields"]: AliasType<{
	avg_kills_per_game?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_matches?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Streaming cursor of the table "v_player_match_kills" */
["v_player_match_kills_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["v_player_match_kills_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["v_player_match_kills_stream_cursor_value_input"]: {
	avg_kills_per_game?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	kills?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	player_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	total_matches?: ValueTypes["bigint"] | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["v_player_match_kills_sum_fields"]: AliasType<{
	avg_kills_per_game?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_matches?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate var_pop on columns */
["v_player_match_kills_var_pop_fields"]: AliasType<{
	avg_kills_per_game?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_matches?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate var_samp on columns */
["v_player_match_kills_var_samp_fields"]: AliasType<{
	avg_kills_per_game?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_matches?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate variance on columns */
["v_player_match_kills_variance_fields"]: AliasType<{
	avg_kills_per_game?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_matches?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** columns and relationships of "v_player_multi_kills" */
["v_player_multi_kills"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "v_player_multi_kills" */
["v_player_multi_kills_aggregate"]: AliasType<{
	aggregate?:ValueTypes["v_player_multi_kills_aggregate_fields"],
	nodes?:ValueTypes["v_player_multi_kills"],
		__typename?: boolean | `@${string}`
}>;
	["v_player_multi_kills_aggregate_bool_exp"]: {
	count?: ValueTypes["v_player_multi_kills_aggregate_bool_exp_count"] | undefined | null | Variable<any, string>
};
	["v_player_multi_kills_aggregate_bool_exp_count"]: {
	arguments?: Array<ValueTypes["v_player_multi_kills_select_column"]> | undefined | null | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["v_player_multi_kills_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Int_comparison_exp"] | Variable<any, string>
};
	/** aggregate fields of "v_player_multi_kills" */
["v_player_multi_kills_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["v_player_multi_kills_avg_fields"],
count?: [{	columns?: Array<ValueTypes["v_player_multi_kills_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["v_player_multi_kills_max_fields"],
	min?:ValueTypes["v_player_multi_kills_min_fields"],
	stddev?:ValueTypes["v_player_multi_kills_stddev_fields"],
	stddev_pop?:ValueTypes["v_player_multi_kills_stddev_pop_fields"],
	stddev_samp?:ValueTypes["v_player_multi_kills_stddev_samp_fields"],
	sum?:ValueTypes["v_player_multi_kills_sum_fields"],
	var_pop?:ValueTypes["v_player_multi_kills_var_pop_fields"],
	var_samp?:ValueTypes["v_player_multi_kills_var_samp_fields"],
	variance?:ValueTypes["v_player_multi_kills_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "v_player_multi_kills" */
["v_player_multi_kills_aggregate_order_by"]: {
	avg?: ValueTypes["v_player_multi_kills_avg_order_by"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["v_player_multi_kills_max_order_by"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["v_player_multi_kills_min_order_by"] | undefined | null | Variable<any, string>,
	stddev?: ValueTypes["v_player_multi_kills_stddev_order_by"] | undefined | null | Variable<any, string>,
	stddev_pop?: ValueTypes["v_player_multi_kills_stddev_pop_order_by"] | undefined | null | Variable<any, string>,
	stddev_samp?: ValueTypes["v_player_multi_kills_stddev_samp_order_by"] | undefined | null | Variable<any, string>,
	sum?: ValueTypes["v_player_multi_kills_sum_order_by"] | undefined | null | Variable<any, string>,
	var_pop?: ValueTypes["v_player_multi_kills_var_pop_order_by"] | undefined | null | Variable<any, string>,
	var_samp?: ValueTypes["v_player_multi_kills_var_samp_order_by"] | undefined | null | Variable<any, string>,
	variance?: ValueTypes["v_player_multi_kills_variance_order_by"] | undefined | null | Variable<any, string>
};
	/** input type for inserting array relation for remote table "v_player_multi_kills" */
["v_player_multi_kills_arr_rel_insert_input"]: {
	data: Array<ValueTypes["v_player_multi_kills_insert_input"]> | Variable<any, string>
};
	/** aggregate avg on columns */
["v_player_multi_kills_avg_fields"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_avg_order_by"]: {
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	kills?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to filter rows from the table "v_player_multi_kills". All fields are combined with a logical 'AND'. */
["v_player_multi_kills_bool_exp"]: {
	_and?: Array<ValueTypes["v_player_multi_kills_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["v_player_multi_kills_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["v_player_multi_kills_bool_exp"]> | undefined | null | Variable<any, string>,
	attacker_steam_id?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>,
	kills?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "v_player_multi_kills" */
["v_player_multi_kills_insert_input"]: {
	attacker_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	kills?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	round?: number | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["v_player_multi_kills_max_fields"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_max_order_by"]: {
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	kills?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate min on columns */
["v_player_multi_kills_min_fields"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_min_order_by"]: {
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	kills?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "v_player_multi_kills". */
["v_player_multi_kills_order_by"]: {
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	kills?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** select columns of table "v_player_multi_kills" */
["v_player_multi_kills_select_column"]:v_player_multi_kills_select_column;
	/** aggregate stddev on columns */
["v_player_multi_kills_stddev_fields"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_stddev_order_by"]: {
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	kills?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_pop on columns */
["v_player_multi_kills_stddev_pop_fields"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_stddev_pop_order_by"]: {
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	kills?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_samp on columns */
["v_player_multi_kills_stddev_samp_fields"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_stddev_samp_order_by"]: {
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	kills?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "v_player_multi_kills" */
["v_player_multi_kills_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["v_player_multi_kills_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["v_player_multi_kills_stream_cursor_value_input"]: {
	attacker_steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	kills?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	round?: number | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["v_player_multi_kills_sum_fields"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_sum_order_by"]: {
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	kills?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate var_pop on columns */
["v_player_multi_kills_var_pop_fields"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_var_pop_order_by"]: {
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	kills?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate var_samp on columns */
["v_player_multi_kills_var_samp_fields"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_var_samp_order_by"]: {
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	kills?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate variance on columns */
["v_player_multi_kills_variance_fields"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_variance_order_by"]: {
	attacker_steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	kills?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	round?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** columns and relationships of "v_player_opening_duels" */
["v_player_opening_duels"]: AliasType<{
	attempts?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
	successes?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "v_player_opening_duels" */
["v_player_opening_duels_aggregate"]: AliasType<{
	aggregate?:ValueTypes["v_player_opening_duels_aggregate_fields"],
	nodes?:ValueTypes["v_player_opening_duels"],
		__typename?: boolean | `@${string}`
}>;
	["v_player_opening_duels_aggregate_bool_exp"]: {
	count?: ValueTypes["v_player_opening_duels_aggregate_bool_exp_count"] | undefined | null | Variable<any, string>
};
	["v_player_opening_duels_aggregate_bool_exp_count"]: {
	arguments?: Array<ValueTypes["v_player_opening_duels_select_column"]> | undefined | null | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["v_player_opening_duels_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Int_comparison_exp"] | Variable<any, string>
};
	/** aggregate fields of "v_player_opening_duels" */
["v_player_opening_duels_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["v_player_opening_duels_avg_fields"],
count?: [{	columns?: Array<ValueTypes["v_player_opening_duels_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["v_player_opening_duels_max_fields"],
	min?:ValueTypes["v_player_opening_duels_min_fields"],
	stddev?:ValueTypes["v_player_opening_duels_stddev_fields"],
	stddev_pop?:ValueTypes["v_player_opening_duels_stddev_pop_fields"],
	stddev_samp?:ValueTypes["v_player_opening_duels_stddev_samp_fields"],
	sum?:ValueTypes["v_player_opening_duels_sum_fields"],
	var_pop?:ValueTypes["v_player_opening_duels_var_pop_fields"],
	var_samp?:ValueTypes["v_player_opening_duels_var_samp_fields"],
	variance?:ValueTypes["v_player_opening_duels_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "v_player_opening_duels" */
["v_player_opening_duels_aggregate_order_by"]: {
	avg?: ValueTypes["v_player_opening_duels_avg_order_by"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["v_player_opening_duels_max_order_by"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["v_player_opening_duels_min_order_by"] | undefined | null | Variable<any, string>,
	stddev?: ValueTypes["v_player_opening_duels_stddev_order_by"] | undefined | null | Variable<any, string>,
	stddev_pop?: ValueTypes["v_player_opening_duels_stddev_pop_order_by"] | undefined | null | Variable<any, string>,
	stddev_samp?: ValueTypes["v_player_opening_duels_stddev_samp_order_by"] | undefined | null | Variable<any, string>,
	sum?: ValueTypes["v_player_opening_duels_sum_order_by"] | undefined | null | Variable<any, string>,
	var_pop?: ValueTypes["v_player_opening_duels_var_pop_order_by"] | undefined | null | Variable<any, string>,
	var_samp?: ValueTypes["v_player_opening_duels_var_samp_order_by"] | undefined | null | Variable<any, string>,
	variance?: ValueTypes["v_player_opening_duels_variance_order_by"] | undefined | null | Variable<any, string>
};
	/** input type for inserting array relation for remote table "v_player_opening_duels" */
["v_player_opening_duels_arr_rel_insert_input"]: {
	data: Array<ValueTypes["v_player_opening_duels_insert_input"]> | Variable<any, string>
};
	/** aggregate avg on columns */
["v_player_opening_duels_avg_fields"]: AliasType<{
	attempts?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
	successes?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_avg_order_by"]: {
	attempts?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	successes?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to filter rows from the table "v_player_opening_duels". All fields are combined with a logical 'AND'. */
["v_player_opening_duels_bool_exp"]: {
	_and?: Array<ValueTypes["v_player_opening_duels_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["v_player_opening_duels_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["v_player_opening_duels_bool_exp"]> | undefined | null | Variable<any, string>,
	attempts?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>,
	successes?: ValueTypes["bigint_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "v_player_opening_duels" */
["v_player_opening_duels_insert_input"]: {
	attempts?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	successes?: ValueTypes["bigint"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["v_player_opening_duels_max_fields"]: AliasType<{
	attempts?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
	successes?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_max_order_by"]: {
	attempts?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	successes?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate min on columns */
["v_player_opening_duels_min_fields"]: AliasType<{
	attempts?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
	successes?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_min_order_by"]: {
	attempts?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	successes?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "v_player_opening_duels". */
["v_player_opening_duels_order_by"]: {
	attempts?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	successes?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** select columns of table "v_player_opening_duels" */
["v_player_opening_duels_select_column"]:v_player_opening_duels_select_column;
	/** aggregate stddev on columns */
["v_player_opening_duels_stddev_fields"]: AliasType<{
	attempts?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
	successes?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_stddev_order_by"]: {
	attempts?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	successes?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_pop on columns */
["v_player_opening_duels_stddev_pop_fields"]: AliasType<{
	attempts?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
	successes?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_stddev_pop_order_by"]: {
	attempts?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	successes?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_samp on columns */
["v_player_opening_duels_stddev_samp_fields"]: AliasType<{
	attempts?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
	successes?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_stddev_samp_order_by"]: {
	attempts?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	successes?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "v_player_opening_duels" */
["v_player_opening_duels_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["v_player_opening_duels_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["v_player_opening_duels_stream_cursor_value_input"]: {
	attempts?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	match_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	match_map_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["bigint"] | undefined | null | Variable<any, string>,
	successes?: ValueTypes["bigint"] | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["v_player_opening_duels_sum_fields"]: AliasType<{
	attempts?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
	successes?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_sum_order_by"]: {
	attempts?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	successes?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate var_pop on columns */
["v_player_opening_duels_var_pop_fields"]: AliasType<{
	attempts?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
	successes?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_var_pop_order_by"]: {
	attempts?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	successes?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate var_samp on columns */
["v_player_opening_duels_var_samp_fields"]: AliasType<{
	attempts?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
	successes?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_var_samp_order_by"]: {
	attempts?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	successes?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate variance on columns */
["v_player_opening_duels_variance_fields"]: AliasType<{
	attempts?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
	successes?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_variance_order_by"]: {
	attempts?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	steam_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	successes?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** columns and relationships of "v_pool_maps" */
["v_pool_maps"]: AliasType<{
	active_pool?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** An object relationship */
	map_pool?:ValueTypes["map_pools"],
	map_pool_id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	type?:boolean | `@${string}`,
	workshop_map_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "v_pool_maps" */
["v_pool_maps_aggregate"]: AliasType<{
	aggregate?:ValueTypes["v_pool_maps_aggregate_fields"],
	nodes?:ValueTypes["v_pool_maps"],
		__typename?: boolean | `@${string}`
}>;
	["v_pool_maps_aggregate_bool_exp"]: {
	bool_and?: ValueTypes["v_pool_maps_aggregate_bool_exp_bool_and"] | undefined | null | Variable<any, string>,
	bool_or?: ValueTypes["v_pool_maps_aggregate_bool_exp_bool_or"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["v_pool_maps_aggregate_bool_exp_count"] | undefined | null | Variable<any, string>
};
	["v_pool_maps_aggregate_bool_exp_bool_and"]: {
	arguments: ValueTypes["v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_and_arguments_columns"] | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["v_pool_maps_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Boolean_comparison_exp"] | Variable<any, string>
};
	["v_pool_maps_aggregate_bool_exp_bool_or"]: {
	arguments: ValueTypes["v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_or_arguments_columns"] | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["v_pool_maps_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Boolean_comparison_exp"] | Variable<any, string>
};
	["v_pool_maps_aggregate_bool_exp_count"]: {
	arguments?: Array<ValueTypes["v_pool_maps_select_column"]> | undefined | null | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["v_pool_maps_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Int_comparison_exp"] | Variable<any, string>
};
	/** aggregate fields of "v_pool_maps" */
["v_pool_maps_aggregate_fields"]: AliasType<{
count?: [{	columns?: Array<ValueTypes["v_pool_maps_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["v_pool_maps_max_fields"],
	min?:ValueTypes["v_pool_maps_min_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "v_pool_maps" */
["v_pool_maps_aggregate_order_by"]: {
	count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["v_pool_maps_max_order_by"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["v_pool_maps_min_order_by"] | undefined | null | Variable<any, string>
};
	/** input type for inserting array relation for remote table "v_pool_maps" */
["v_pool_maps_arr_rel_insert_input"]: {
	data: Array<ValueTypes["v_pool_maps_insert_input"]> | Variable<any, string>
};
	/** Boolean expression to filter rows from the table "v_pool_maps". All fields are combined with a logical 'AND'. */
["v_pool_maps_bool_exp"]: {
	_and?: Array<ValueTypes["v_pool_maps_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["v_pool_maps_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["v_pool_maps_bool_exp"]> | undefined | null | Variable<any, string>,
	active_pool?: ValueTypes["Boolean_comparison_exp"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	map_pool?: ValueTypes["map_pools_bool_exp"] | undefined | null | Variable<any, string>,
	map_pool_id?: ValueTypes["uuid_comparison_exp"] | undefined | null | Variable<any, string>,
	name?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	type?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	workshop_map_id?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "v_pool_maps" */
["v_pool_maps_insert_input"]: {
	active_pool?: boolean | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	map_pool?: ValueTypes["map_pools_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	map_pool_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	name?: string | undefined | null | Variable<any, string>,
	type?: string | undefined | null | Variable<any, string>,
	workshop_map_id?: string | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["v_pool_maps_max_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	map_pool_id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	type?:boolean | `@${string}`,
	workshop_map_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "v_pool_maps" */
["v_pool_maps_max_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	map_pool_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	name?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	type?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	workshop_map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate min on columns */
["v_pool_maps_min_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	map_pool_id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	type?:boolean | `@${string}`,
	workshop_map_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "v_pool_maps" */
["v_pool_maps_min_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	map_pool_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	name?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	type?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	workshop_map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** response of any mutation on the table "v_pool_maps" */
["v_pool_maps_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["v_pool_maps"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options when selecting data from "v_pool_maps". */
["v_pool_maps_order_by"]: {
	active_pool?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	map_pool?: ValueTypes["map_pools_order_by"] | undefined | null | Variable<any, string>,
	map_pool_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	name?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	type?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	workshop_map_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** select columns of table "v_pool_maps" */
["v_pool_maps_select_column"]:v_pool_maps_select_column;
	/** select "v_pool_maps_aggregate_bool_exp_bool_and_arguments_columns" columns of table "v_pool_maps" */
["v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_and_arguments_columns"]:v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_and_arguments_columns;
	/** select "v_pool_maps_aggregate_bool_exp_bool_or_arguments_columns" columns of table "v_pool_maps" */
["v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_or_arguments_columns"]:v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_or_arguments_columns;
	/** Streaming cursor of the table "v_pool_maps" */
["v_pool_maps_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["v_pool_maps_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["v_pool_maps_stream_cursor_value_input"]: {
	active_pool?: boolean | undefined | null | Variable<any, string>,
	id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	map_pool_id?: ValueTypes["uuid"] | undefined | null | Variable<any, string>,
	name?: string | undefined | null | Variable<any, string>,
	type?: string | undefined | null | Variable<any, string>,
	workshop_map_id?: string | undefined | null | Variable<any, string>
}
  }

export type ResolverInputTypes = {
    ["schema"]: AliasType<{
	query?:ResolverInputTypes["query_root"],
	mutation?:ResolverInputTypes["mutation_root"],
	subscription?:ResolverInputTypes["subscription_root"],
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'. */
["Boolean_comparison_exp"]: {
	_eq?: boolean | undefined | null,
	_gt?: boolean | undefined | null,
	_gte?: boolean | undefined | null,
	_in?: Array<boolean> | undefined | null,
	_is_null?: boolean | undefined | null,
	_lt?: boolean | undefined | null,
	_lte?: boolean | undefined | null,
	_neq?: boolean | undefined | null,
	_nin?: Array<boolean> | undefined | null
};
	/** Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'. */
["Int_comparison_exp"]: {
	_eq?: number | undefined | null,
	_gt?: number | undefined | null,
	_gte?: number | undefined | null,
	_in?: Array<number> | undefined | null,
	_is_null?: boolean | undefined | null,
	_lt?: number | undefined | null,
	_lte?: number | undefined | null,
	_neq?: number | undefined | null,
	_nin?: Array<number> | undefined | null
};
	["MeResponse"]: AliasType<{
	avatar_url?:boolean | `@${string}`,
	discord_id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	player?:ResolverInputTypes["players"],
	profile_url?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'. */
["String_comparison_exp"]: {
	_eq?: string | undefined | null,
	_gt?: string | undefined | null,
	_gte?: string | undefined | null,
	/** does the column match the given case-insensitive pattern */
	_ilike?: string | undefined | null,
	_in?: Array<string> | undefined | null,
	/** does the column match the given POSIX regular expression, case insensitive */
	_iregex?: string | undefined | null,
	_is_null?: boolean | undefined | null,
	/** does the column match the given pattern */
	_like?: string | undefined | null,
	_lt?: string | undefined | null,
	_lte?: string | undefined | null,
	_neq?: string | undefined | null,
	/** does the column NOT match the given case-insensitive pattern */
	_nilike?: string | undefined | null,
	_nin?: Array<string> | undefined | null,
	/** does the column NOT match the given POSIX regular expression, case insensitive */
	_niregex?: string | undefined | null,
	/** does the column NOT match the given pattern */
	_nlike?: string | undefined | null,
	/** does the column NOT match the given POSIX regular expression, case sensitive */
	_nregex?: string | undefined | null,
	/** does the column NOT match the given SQL regular expression */
	_nsimilar?: string | undefined | null,
	/** does the column match the given POSIX regular expression, case sensitive */
	_regex?: string | undefined | null,
	/** does the column match the given SQL regular expression */
	_similar?: string | undefined | null
};
	["SuccessOutput"]: AliasType<{
	success?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** columns and relationships of "_map_pool" */
["_map_pool"]: AliasType<{
	map_id?:boolean | `@${string}`,
	map_pool_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "_map_pool" */
["_map_pool_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["_map_pool_aggregate_fields"],
	nodes?:ResolverInputTypes["_map_pool"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "_map_pool" */
["_map_pool_aggregate_fields"]: AliasType<{
count?: [{	columns?: Array<ResolverInputTypes["_map_pool_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["_map_pool_max_fields"],
	min?:ResolverInputTypes["_map_pool_min_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "_map_pool". All fields are combined with a logical 'AND'. */
["_map_pool_bool_exp"]: {
	_and?: Array<ResolverInputTypes["_map_pool_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["_map_pool_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["_map_pool_bool_exp"]> | undefined | null,
	map_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	map_pool_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "_map_pool" */
["_map_pool_constraint"]:_map_pool_constraint;
	/** input type for inserting data into table "_map_pool" */
["_map_pool_insert_input"]: {
	map_id?: ResolverInputTypes["uuid"] | undefined | null,
	map_pool_id?: ResolverInputTypes["uuid"] | undefined | null
};
	/** aggregate max on columns */
["_map_pool_max_fields"]: AliasType<{
	map_id?:boolean | `@${string}`,
	map_pool_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["_map_pool_min_fields"]: AliasType<{
	map_id?:boolean | `@${string}`,
	map_pool_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "_map_pool" */
["_map_pool_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["_map_pool"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "_map_pool" */
["_map_pool_on_conflict"]: {
	constraint: ResolverInputTypes["_map_pool_constraint"],
	update_columns: Array<ResolverInputTypes["_map_pool_update_column"]>,
	where?: ResolverInputTypes["_map_pool_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "_map_pool". */
["_map_pool_order_by"]: {
	map_id?: ResolverInputTypes["order_by"] | undefined | null,
	map_pool_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: _map_pool */
["_map_pool_pk_columns_input"]: {
	map_id: ResolverInputTypes["uuid"],
	map_pool_id: ResolverInputTypes["uuid"]
};
	/** select columns of table "_map_pool" */
["_map_pool_select_column"]:_map_pool_select_column;
	/** input type for updating data in table "_map_pool" */
["_map_pool_set_input"]: {
	map_id?: ResolverInputTypes["uuid"] | undefined | null,
	map_pool_id?: ResolverInputTypes["uuid"] | undefined | null
};
	/** Streaming cursor of the table "_map_pool" */
["_map_pool_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["_map_pool_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["_map_pool_stream_cursor_value_input"]: {
	map_id?: ResolverInputTypes["uuid"] | undefined | null,
	map_pool_id?: ResolverInputTypes["uuid"] | undefined | null
};
	/** update columns of table "_map_pool" */
["_map_pool_update_column"]:_map_pool_update_column;
	["_map_pool_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["_map_pool_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["_map_pool_bool_exp"]
};
	["bigint"]:unknown;
	/** Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'. */
["bigint_comparison_exp"]: {
	_eq?: ResolverInputTypes["bigint"] | undefined | null,
	_gt?: ResolverInputTypes["bigint"] | undefined | null,
	_gte?: ResolverInputTypes["bigint"] | undefined | null,
	_in?: Array<ResolverInputTypes["bigint"]> | undefined | null,
	_is_null?: boolean | undefined | null,
	_lt?: ResolverInputTypes["bigint"] | undefined | null,
	_lte?: ResolverInputTypes["bigint"] | undefined | null,
	_neq?: ResolverInputTypes["bigint"] | undefined | null,
	_nin?: Array<ResolverInputTypes["bigint"]> | undefined | null
};
	["bytea"]:unknown;
	/** Boolean expression to compare columns of type "bytea". All fields are combined with logical 'AND'. */
["bytea_comparison_exp"]: {
	_eq?: ResolverInputTypes["bytea"] | undefined | null,
	_gt?: ResolverInputTypes["bytea"] | undefined | null,
	_gte?: ResolverInputTypes["bytea"] | undefined | null,
	_in?: Array<ResolverInputTypes["bytea"]> | undefined | null,
	_is_null?: boolean | undefined | null,
	_lt?: ResolverInputTypes["bytea"] | undefined | null,
	_lte?: ResolverInputTypes["bytea"] | undefined | null,
	_neq?: ResolverInputTypes["bytea"] | undefined | null,
	_nin?: Array<ResolverInputTypes["bytea"]> | undefined | null
};
	/** ordering argument of a cursor */
["cursor_ordering"]:cursor_ordering;
	["date"]:unknown;
	/** Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'. */
["date_comparison_exp"]: {
	_eq?: ResolverInputTypes["date"] | undefined | null,
	_gt?: ResolverInputTypes["date"] | undefined | null,
	_gte?: ResolverInputTypes["date"] | undefined | null,
	_in?: Array<ResolverInputTypes["date"]> | undefined | null,
	_is_null?: boolean | undefined | null,
	_lt?: ResolverInputTypes["date"] | undefined | null,
	_lte?: ResolverInputTypes["date"] | undefined | null,
	_neq?: ResolverInputTypes["date"] | undefined | null,
	_nin?: Array<ResolverInputTypes["date"]> | undefined | null
};
	/** columns and relationships of "e_match_map_status" */
["e_match_map_status"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "e_match_map_status" */
["e_match_map_status_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["e_match_map_status_aggregate_fields"],
	nodes?:ResolverInputTypes["e_match_map_status"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "e_match_map_status" */
["e_match_map_status_aggregate_fields"]: AliasType<{
count?: [{	columns?: Array<ResolverInputTypes["e_match_map_status_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["e_match_map_status_max_fields"],
	min?:ResolverInputTypes["e_match_map_status_min_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "e_match_map_status". All fields are combined with a logical 'AND'. */
["e_match_map_status_bool_exp"]: {
	_and?: Array<ResolverInputTypes["e_match_map_status_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["e_match_map_status_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["e_match_map_status_bool_exp"]> | undefined | null,
	description?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	value?: ResolverInputTypes["String_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "e_match_map_status" */
["e_match_map_status_constraint"]:e_match_map_status_constraint;
	["e_match_map_status_enum"]:e_match_map_status_enum;
	/** Boolean expression to compare columns of type "e_match_map_status_enum". All fields are combined with logical 'AND'. */
["e_match_map_status_enum_comparison_exp"]: {
	_eq?: ResolverInputTypes["e_match_map_status_enum"] | undefined | null,
	_in?: Array<ResolverInputTypes["e_match_map_status_enum"]> | undefined | null,
	_is_null?: boolean | undefined | null,
	_neq?: ResolverInputTypes["e_match_map_status_enum"] | undefined | null,
	_nin?: Array<ResolverInputTypes["e_match_map_status_enum"]> | undefined | null
};
	/** input type for inserting data into table "e_match_map_status" */
["e_match_map_status_insert_input"]: {
	description?: string | undefined | null,
	value?: string | undefined | null
};
	/** aggregate max on columns */
["e_match_map_status_max_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["e_match_map_status_min_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "e_match_map_status" */
["e_match_map_status_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["e_match_map_status"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "e_match_map_status" */
["e_match_map_status_obj_rel_insert_input"]: {
	data: ResolverInputTypes["e_match_map_status_insert_input"],
	/** upsert condition */
	on_conflict?: ResolverInputTypes["e_match_map_status_on_conflict"] | undefined | null
};
	/** on_conflict condition type for table "e_match_map_status" */
["e_match_map_status_on_conflict"]: {
	constraint: ResolverInputTypes["e_match_map_status_constraint"],
	update_columns: Array<ResolverInputTypes["e_match_map_status_update_column"]>,
	where?: ResolverInputTypes["e_match_map_status_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "e_match_map_status". */
["e_match_map_status_order_by"]: {
	description?: ResolverInputTypes["order_by"] | undefined | null,
	value?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: e_match_map_status */
["e_match_map_status_pk_columns_input"]: {
	value: string
};
	/** select columns of table "e_match_map_status" */
["e_match_map_status_select_column"]:e_match_map_status_select_column;
	/** input type for updating data in table "e_match_map_status" */
["e_match_map_status_set_input"]: {
	description?: string | undefined | null,
	value?: string | undefined | null
};
	/** Streaming cursor of the table "e_match_map_status" */
["e_match_map_status_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["e_match_map_status_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["e_match_map_status_stream_cursor_value_input"]: {
	description?: string | undefined | null,
	value?: string | undefined | null
};
	/** update columns of table "e_match_map_status" */
["e_match_map_status_update_column"]:e_match_map_status_update_column;
	["e_match_map_status_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["e_match_map_status_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["e_match_map_status_bool_exp"]
};
	/** columns and relationships of "e_match_status" */
["e_match_status"]: AliasType<{
	description?:boolean | `@${string}`,
matches?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["matches_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["matches_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["matches_bool_exp"] | undefined | null},ResolverInputTypes["matches"]],
matches_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["matches_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["matches_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["matches_bool_exp"] | undefined | null},ResolverInputTypes["matches_aggregate"]],
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "e_match_status" */
["e_match_status_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["e_match_status_aggregate_fields"],
	nodes?:ResolverInputTypes["e_match_status"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "e_match_status" */
["e_match_status_aggregate_fields"]: AliasType<{
count?: [{	columns?: Array<ResolverInputTypes["e_match_status_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["e_match_status_max_fields"],
	min?:ResolverInputTypes["e_match_status_min_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "e_match_status". All fields are combined with a logical 'AND'. */
["e_match_status_bool_exp"]: {
	_and?: Array<ResolverInputTypes["e_match_status_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["e_match_status_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["e_match_status_bool_exp"]> | undefined | null,
	description?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	matches?: ResolverInputTypes["matches_bool_exp"] | undefined | null,
	matches_aggregate?: ResolverInputTypes["matches_aggregate_bool_exp"] | undefined | null,
	value?: ResolverInputTypes["String_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "e_match_status" */
["e_match_status_constraint"]:e_match_status_constraint;
	["e_match_status_enum"]:e_match_status_enum;
	/** Boolean expression to compare columns of type "e_match_status_enum". All fields are combined with logical 'AND'. */
["e_match_status_enum_comparison_exp"]: {
	_eq?: ResolverInputTypes["e_match_status_enum"] | undefined | null,
	_in?: Array<ResolverInputTypes["e_match_status_enum"]> | undefined | null,
	_is_null?: boolean | undefined | null,
	_neq?: ResolverInputTypes["e_match_status_enum"] | undefined | null,
	_nin?: Array<ResolverInputTypes["e_match_status_enum"]> | undefined | null
};
	/** input type for inserting data into table "e_match_status" */
["e_match_status_insert_input"]: {
	description?: string | undefined | null,
	matches?: ResolverInputTypes["matches_arr_rel_insert_input"] | undefined | null,
	value?: string | undefined | null
};
	/** aggregate max on columns */
["e_match_status_max_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["e_match_status_min_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "e_match_status" */
["e_match_status_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["e_match_status"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "e_match_status" */
["e_match_status_obj_rel_insert_input"]: {
	data: ResolverInputTypes["e_match_status_insert_input"],
	/** upsert condition */
	on_conflict?: ResolverInputTypes["e_match_status_on_conflict"] | undefined | null
};
	/** on_conflict condition type for table "e_match_status" */
["e_match_status_on_conflict"]: {
	constraint: ResolverInputTypes["e_match_status_constraint"],
	update_columns: Array<ResolverInputTypes["e_match_status_update_column"]>,
	where?: ResolverInputTypes["e_match_status_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "e_match_status". */
["e_match_status_order_by"]: {
	description?: ResolverInputTypes["order_by"] | undefined | null,
	matches_aggregate?: ResolverInputTypes["matches_aggregate_order_by"] | undefined | null,
	value?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: e_match_status */
["e_match_status_pk_columns_input"]: {
	value: string
};
	/** select columns of table "e_match_status" */
["e_match_status_select_column"]:e_match_status_select_column;
	/** input type for updating data in table "e_match_status" */
["e_match_status_set_input"]: {
	description?: string | undefined | null,
	value?: string | undefined | null
};
	/** Streaming cursor of the table "e_match_status" */
["e_match_status_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["e_match_status_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["e_match_status_stream_cursor_value_input"]: {
	description?: string | undefined | null,
	value?: string | undefined | null
};
	/** update columns of table "e_match_status" */
["e_match_status_update_column"]:e_match_status_update_column;
	["e_match_status_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["e_match_status_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["e_match_status_bool_exp"]
};
	/** columns and relationships of "e_match_types" */
["e_match_types"]: AliasType<{
	description?:boolean | `@${string}`,
maps?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["maps_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["maps_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["maps_bool_exp"] | undefined | null},ResolverInputTypes["maps"]],
maps_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["maps_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["maps_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["maps_bool_exp"] | undefined | null},ResolverInputTypes["maps_aggregate"]],
matches?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["matches_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["matches_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["matches_bool_exp"] | undefined | null},ResolverInputTypes["matches"]],
matches_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["matches_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["matches_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["matches_bool_exp"] | undefined | null},ResolverInputTypes["matches_aggregate"]],
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "e_match_types" */
["e_match_types_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["e_match_types_aggregate_fields"],
	nodes?:ResolverInputTypes["e_match_types"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "e_match_types" */
["e_match_types_aggregate_fields"]: AliasType<{
count?: [{	columns?: Array<ResolverInputTypes["e_match_types_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["e_match_types_max_fields"],
	min?:ResolverInputTypes["e_match_types_min_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "e_match_types". All fields are combined with a logical 'AND'. */
["e_match_types_bool_exp"]: {
	_and?: Array<ResolverInputTypes["e_match_types_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["e_match_types_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["e_match_types_bool_exp"]> | undefined | null,
	description?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	maps?: ResolverInputTypes["maps_bool_exp"] | undefined | null,
	maps_aggregate?: ResolverInputTypes["maps_aggregate_bool_exp"] | undefined | null,
	matches?: ResolverInputTypes["matches_bool_exp"] | undefined | null,
	matches_aggregate?: ResolverInputTypes["matches_aggregate_bool_exp"] | undefined | null,
	value?: ResolverInputTypes["String_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "e_match_types" */
["e_match_types_constraint"]:e_match_types_constraint;
	["e_match_types_enum"]:e_match_types_enum;
	/** Boolean expression to compare columns of type "e_match_types_enum". All fields are combined with logical 'AND'. */
["e_match_types_enum_comparison_exp"]: {
	_eq?: ResolverInputTypes["e_match_types_enum"] | undefined | null,
	_in?: Array<ResolverInputTypes["e_match_types_enum"]> | undefined | null,
	_is_null?: boolean | undefined | null,
	_neq?: ResolverInputTypes["e_match_types_enum"] | undefined | null,
	_nin?: Array<ResolverInputTypes["e_match_types_enum"]> | undefined | null
};
	/** input type for inserting data into table "e_match_types" */
["e_match_types_insert_input"]: {
	description?: string | undefined | null,
	maps?: ResolverInputTypes["maps_arr_rel_insert_input"] | undefined | null,
	matches?: ResolverInputTypes["matches_arr_rel_insert_input"] | undefined | null,
	value?: string | undefined | null
};
	/** aggregate max on columns */
["e_match_types_max_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["e_match_types_min_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "e_match_types" */
["e_match_types_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["e_match_types"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "e_match_types" */
["e_match_types_obj_rel_insert_input"]: {
	data: ResolverInputTypes["e_match_types_insert_input"],
	/** upsert condition */
	on_conflict?: ResolverInputTypes["e_match_types_on_conflict"] | undefined | null
};
	/** on_conflict condition type for table "e_match_types" */
["e_match_types_on_conflict"]: {
	constraint: ResolverInputTypes["e_match_types_constraint"],
	update_columns: Array<ResolverInputTypes["e_match_types_update_column"]>,
	where?: ResolverInputTypes["e_match_types_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "e_match_types". */
["e_match_types_order_by"]: {
	description?: ResolverInputTypes["order_by"] | undefined | null,
	maps_aggregate?: ResolverInputTypes["maps_aggregate_order_by"] | undefined | null,
	matches_aggregate?: ResolverInputTypes["matches_aggregate_order_by"] | undefined | null,
	value?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: e_match_types */
["e_match_types_pk_columns_input"]: {
	value: string
};
	/** select columns of table "e_match_types" */
["e_match_types_select_column"]:e_match_types_select_column;
	/** input type for updating data in table "e_match_types" */
["e_match_types_set_input"]: {
	description?: string | undefined | null,
	value?: string | undefined | null
};
	/** Streaming cursor of the table "e_match_types" */
["e_match_types_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["e_match_types_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["e_match_types_stream_cursor_value_input"]: {
	description?: string | undefined | null,
	value?: string | undefined | null
};
	/** update columns of table "e_match_types" */
["e_match_types_update_column"]:e_match_types_update_column;
	["e_match_types_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["e_match_types_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["e_match_types_bool_exp"]
};
	/** columns and relationships of "e_objective_types" */
["e_objective_types"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "e_objective_types" */
["e_objective_types_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["e_objective_types_aggregate_fields"],
	nodes?:ResolverInputTypes["e_objective_types"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "e_objective_types" */
["e_objective_types_aggregate_fields"]: AliasType<{
count?: [{	columns?: Array<ResolverInputTypes["e_objective_types_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["e_objective_types_max_fields"],
	min?:ResolverInputTypes["e_objective_types_min_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "e_objective_types". All fields are combined with a logical 'AND'. */
["e_objective_types_bool_exp"]: {
	_and?: Array<ResolverInputTypes["e_objective_types_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["e_objective_types_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["e_objective_types_bool_exp"]> | undefined | null,
	description?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	value?: ResolverInputTypes["String_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "e_objective_types" */
["e_objective_types_constraint"]:e_objective_types_constraint;
	["e_objective_types_enum"]:e_objective_types_enum;
	/** Boolean expression to compare columns of type "e_objective_types_enum". All fields are combined with logical 'AND'. */
["e_objective_types_enum_comparison_exp"]: {
	_eq?: ResolverInputTypes["e_objective_types_enum"] | undefined | null,
	_in?: Array<ResolverInputTypes["e_objective_types_enum"]> | undefined | null,
	_is_null?: boolean | undefined | null,
	_neq?: ResolverInputTypes["e_objective_types_enum"] | undefined | null,
	_nin?: Array<ResolverInputTypes["e_objective_types_enum"]> | undefined | null
};
	/** input type for inserting data into table "e_objective_types" */
["e_objective_types_insert_input"]: {
	description?: string | undefined | null,
	value?: string | undefined | null
};
	/** aggregate max on columns */
["e_objective_types_max_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["e_objective_types_min_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "e_objective_types" */
["e_objective_types_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["e_objective_types"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "e_objective_types" */
["e_objective_types_on_conflict"]: {
	constraint: ResolverInputTypes["e_objective_types_constraint"],
	update_columns: Array<ResolverInputTypes["e_objective_types_update_column"]>,
	where?: ResolverInputTypes["e_objective_types_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "e_objective_types". */
["e_objective_types_order_by"]: {
	description?: ResolverInputTypes["order_by"] | undefined | null,
	value?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: e_objective_types */
["e_objective_types_pk_columns_input"]: {
	value: string
};
	/** select columns of table "e_objective_types" */
["e_objective_types_select_column"]:e_objective_types_select_column;
	/** input type for updating data in table "e_objective_types" */
["e_objective_types_set_input"]: {
	description?: string | undefined | null,
	value?: string | undefined | null
};
	/** Streaming cursor of the table "e_objective_types" */
["e_objective_types_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["e_objective_types_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["e_objective_types_stream_cursor_value_input"]: {
	description?: string | undefined | null,
	value?: string | undefined | null
};
	/** update columns of table "e_objective_types" */
["e_objective_types_update_column"]:e_objective_types_update_column;
	["e_objective_types_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["e_objective_types_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["e_objective_types_bool_exp"]
};
	/** columns and relationships of "e_sides" */
["e_sides"]: AliasType<{
	description?:boolean | `@${string}`,
match_map_lineup_1?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_maps_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_maps_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_maps_bool_exp"] | undefined | null},ResolverInputTypes["match_maps"]],
match_map_lineup_1_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_maps_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_maps_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_maps_bool_exp"] | undefined | null},ResolverInputTypes["match_maps_aggregate"]],
match_map_lineup_2?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_maps_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_maps_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_maps_bool_exp"] | undefined | null},ResolverInputTypes["match_maps"]],
match_map_lineup_2_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_maps_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_maps_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_maps_bool_exp"] | undefined | null},ResolverInputTypes["match_maps_aggregate"]],
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "e_sides" */
["e_sides_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["e_sides_aggregate_fields"],
	nodes?:ResolverInputTypes["e_sides"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "e_sides" */
["e_sides_aggregate_fields"]: AliasType<{
count?: [{	columns?: Array<ResolverInputTypes["e_sides_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["e_sides_max_fields"],
	min?:ResolverInputTypes["e_sides_min_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "e_sides". All fields are combined with a logical 'AND'. */
["e_sides_bool_exp"]: {
	_and?: Array<ResolverInputTypes["e_sides_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["e_sides_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["e_sides_bool_exp"]> | undefined | null,
	description?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	match_map_lineup_1?: ResolverInputTypes["match_maps_bool_exp"] | undefined | null,
	match_map_lineup_1_aggregate?: ResolverInputTypes["match_maps_aggregate_bool_exp"] | undefined | null,
	match_map_lineup_2?: ResolverInputTypes["match_maps_bool_exp"] | undefined | null,
	match_map_lineup_2_aggregate?: ResolverInputTypes["match_maps_aggregate_bool_exp"] | undefined | null,
	value?: ResolverInputTypes["String_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "e_sides" */
["e_sides_constraint"]:e_sides_constraint;
	["e_sides_enum"]:e_sides_enum;
	/** Boolean expression to compare columns of type "e_sides_enum". All fields are combined with logical 'AND'. */
["e_sides_enum_comparison_exp"]: {
	_eq?: ResolverInputTypes["e_sides_enum"] | undefined | null,
	_in?: Array<ResolverInputTypes["e_sides_enum"]> | undefined | null,
	_is_null?: boolean | undefined | null,
	_neq?: ResolverInputTypes["e_sides_enum"] | undefined | null,
	_nin?: Array<ResolverInputTypes["e_sides_enum"]> | undefined | null
};
	/** input type for inserting data into table "e_sides" */
["e_sides_insert_input"]: {
	description?: string | undefined | null,
	match_map_lineup_1?: ResolverInputTypes["match_maps_arr_rel_insert_input"] | undefined | null,
	match_map_lineup_2?: ResolverInputTypes["match_maps_arr_rel_insert_input"] | undefined | null,
	value?: string | undefined | null
};
	/** aggregate max on columns */
["e_sides_max_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["e_sides_min_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "e_sides" */
["e_sides_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["e_sides"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "e_sides" */
["e_sides_on_conflict"]: {
	constraint: ResolverInputTypes["e_sides_constraint"],
	update_columns: Array<ResolverInputTypes["e_sides_update_column"]>,
	where?: ResolverInputTypes["e_sides_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "e_sides". */
["e_sides_order_by"]: {
	description?: ResolverInputTypes["order_by"] | undefined | null,
	match_map_lineup_1_aggregate?: ResolverInputTypes["match_maps_aggregate_order_by"] | undefined | null,
	match_map_lineup_2_aggregate?: ResolverInputTypes["match_maps_aggregate_order_by"] | undefined | null,
	value?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: e_sides */
["e_sides_pk_columns_input"]: {
	value: string
};
	/** select columns of table "e_sides" */
["e_sides_select_column"]:e_sides_select_column;
	/** input type for updating data in table "e_sides" */
["e_sides_set_input"]: {
	description?: string | undefined | null,
	value?: string | undefined | null
};
	/** Streaming cursor of the table "e_sides" */
["e_sides_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["e_sides_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["e_sides_stream_cursor_value_input"]: {
	description?: string | undefined | null,
	value?: string | undefined | null
};
	/** update columns of table "e_sides" */
["e_sides_update_column"]:e_sides_update_column;
	["e_sides_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["e_sides_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["e_sides_bool_exp"]
};
	/** columns and relationships of "e_team_roles" */
["e_team_roles"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "e_team_roles" */
["e_team_roles_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["e_team_roles_aggregate_fields"],
	nodes?:ResolverInputTypes["e_team_roles"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "e_team_roles" */
["e_team_roles_aggregate_fields"]: AliasType<{
count?: [{	columns?: Array<ResolverInputTypes["e_team_roles_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["e_team_roles_max_fields"],
	min?:ResolverInputTypes["e_team_roles_min_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "e_team_roles". All fields are combined with a logical 'AND'. */
["e_team_roles_bool_exp"]: {
	_and?: Array<ResolverInputTypes["e_team_roles_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["e_team_roles_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["e_team_roles_bool_exp"]> | undefined | null,
	description?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	value?: ResolverInputTypes["String_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "e_team_roles" */
["e_team_roles_constraint"]:e_team_roles_constraint;
	["e_team_roles_enum"]:e_team_roles_enum;
	/** Boolean expression to compare columns of type "e_team_roles_enum". All fields are combined with logical 'AND'. */
["e_team_roles_enum_comparison_exp"]: {
	_eq?: ResolverInputTypes["e_team_roles_enum"] | undefined | null,
	_in?: Array<ResolverInputTypes["e_team_roles_enum"]> | undefined | null,
	_is_null?: boolean | undefined | null,
	_neq?: ResolverInputTypes["e_team_roles_enum"] | undefined | null,
	_nin?: Array<ResolverInputTypes["e_team_roles_enum"]> | undefined | null
};
	/** input type for inserting data into table "e_team_roles" */
["e_team_roles_insert_input"]: {
	description?: string | undefined | null,
	value?: string | undefined | null
};
	/** aggregate max on columns */
["e_team_roles_max_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["e_team_roles_min_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "e_team_roles" */
["e_team_roles_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["e_team_roles"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "e_team_roles" */
["e_team_roles_on_conflict"]: {
	constraint: ResolverInputTypes["e_team_roles_constraint"],
	update_columns: Array<ResolverInputTypes["e_team_roles_update_column"]>,
	where?: ResolverInputTypes["e_team_roles_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "e_team_roles". */
["e_team_roles_order_by"]: {
	description?: ResolverInputTypes["order_by"] | undefined | null,
	value?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: e_team_roles */
["e_team_roles_pk_columns_input"]: {
	value: string
};
	/** select columns of table "e_team_roles" */
["e_team_roles_select_column"]:e_team_roles_select_column;
	/** input type for updating data in table "e_team_roles" */
["e_team_roles_set_input"]: {
	description?: string | undefined | null,
	value?: string | undefined | null
};
	/** Streaming cursor of the table "e_team_roles" */
["e_team_roles_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["e_team_roles_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["e_team_roles_stream_cursor_value_input"]: {
	description?: string | undefined | null,
	value?: string | undefined | null
};
	/** update columns of table "e_team_roles" */
["e_team_roles_update_column"]:e_team_roles_update_column;
	["e_team_roles_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["e_team_roles_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["e_team_roles_bool_exp"]
};
	/** columns and relationships of "e_timeout_settings" */
["e_timeout_settings"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "e_timeout_settings" */
["e_timeout_settings_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["e_timeout_settings_aggregate_fields"],
	nodes?:ResolverInputTypes["e_timeout_settings"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "e_timeout_settings" */
["e_timeout_settings_aggregate_fields"]: AliasType<{
count?: [{	columns?: Array<ResolverInputTypes["e_timeout_settings_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["e_timeout_settings_max_fields"],
	min?:ResolverInputTypes["e_timeout_settings_min_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "e_timeout_settings". All fields are combined with a logical 'AND'. */
["e_timeout_settings_bool_exp"]: {
	_and?: Array<ResolverInputTypes["e_timeout_settings_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["e_timeout_settings_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["e_timeout_settings_bool_exp"]> | undefined | null,
	description?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	value?: ResolverInputTypes["String_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "e_timeout_settings" */
["e_timeout_settings_constraint"]:e_timeout_settings_constraint;
	["e_timeout_settings_enum"]:e_timeout_settings_enum;
	/** Boolean expression to compare columns of type "e_timeout_settings_enum". All fields are combined with logical 'AND'. */
["e_timeout_settings_enum_comparison_exp"]: {
	_eq?: ResolverInputTypes["e_timeout_settings_enum"] | undefined | null,
	_in?: Array<ResolverInputTypes["e_timeout_settings_enum"]> | undefined | null,
	_is_null?: boolean | undefined | null,
	_neq?: ResolverInputTypes["e_timeout_settings_enum"] | undefined | null,
	_nin?: Array<ResolverInputTypes["e_timeout_settings_enum"]> | undefined | null
};
	/** input type for inserting data into table "e_timeout_settings" */
["e_timeout_settings_insert_input"]: {
	description?: string | undefined | null,
	value?: string | undefined | null
};
	/** aggregate max on columns */
["e_timeout_settings_max_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["e_timeout_settings_min_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "e_timeout_settings" */
["e_timeout_settings_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["e_timeout_settings"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "e_timeout_settings" */
["e_timeout_settings_on_conflict"]: {
	constraint: ResolverInputTypes["e_timeout_settings_constraint"],
	update_columns: Array<ResolverInputTypes["e_timeout_settings_update_column"]>,
	where?: ResolverInputTypes["e_timeout_settings_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "e_timeout_settings". */
["e_timeout_settings_order_by"]: {
	description?: ResolverInputTypes["order_by"] | undefined | null,
	value?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: e_timeout_settings */
["e_timeout_settings_pk_columns_input"]: {
	value: string
};
	/** select columns of table "e_timeout_settings" */
["e_timeout_settings_select_column"]:e_timeout_settings_select_column;
	/** input type for updating data in table "e_timeout_settings" */
["e_timeout_settings_set_input"]: {
	description?: string | undefined | null,
	value?: string | undefined | null
};
	/** Streaming cursor of the table "e_timeout_settings" */
["e_timeout_settings_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["e_timeout_settings_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["e_timeout_settings_stream_cursor_value_input"]: {
	description?: string | undefined | null,
	value?: string | undefined | null
};
	/** update columns of table "e_timeout_settings" */
["e_timeout_settings_update_column"]:e_timeout_settings_update_column;
	["e_timeout_settings_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["e_timeout_settings_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["e_timeout_settings_bool_exp"]
};
	/** columns and relationships of "e_utility_types" */
["e_utility_types"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "e_utility_types" */
["e_utility_types_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["e_utility_types_aggregate_fields"],
	nodes?:ResolverInputTypes["e_utility_types"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "e_utility_types" */
["e_utility_types_aggregate_fields"]: AliasType<{
count?: [{	columns?: Array<ResolverInputTypes["e_utility_types_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["e_utility_types_max_fields"],
	min?:ResolverInputTypes["e_utility_types_min_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "e_utility_types". All fields are combined with a logical 'AND'. */
["e_utility_types_bool_exp"]: {
	_and?: Array<ResolverInputTypes["e_utility_types_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["e_utility_types_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["e_utility_types_bool_exp"]> | undefined | null,
	description?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	value?: ResolverInputTypes["String_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "e_utility_types" */
["e_utility_types_constraint"]:e_utility_types_constraint;
	["e_utility_types_enum"]:e_utility_types_enum;
	/** Boolean expression to compare columns of type "e_utility_types_enum". All fields are combined with logical 'AND'. */
["e_utility_types_enum_comparison_exp"]: {
	_eq?: ResolverInputTypes["e_utility_types_enum"] | undefined | null,
	_in?: Array<ResolverInputTypes["e_utility_types_enum"]> | undefined | null,
	_is_null?: boolean | undefined | null,
	_neq?: ResolverInputTypes["e_utility_types_enum"] | undefined | null,
	_nin?: Array<ResolverInputTypes["e_utility_types_enum"]> | undefined | null
};
	/** input type for inserting data into table "e_utility_types" */
["e_utility_types_insert_input"]: {
	description?: string | undefined | null,
	value?: string | undefined | null
};
	/** aggregate max on columns */
["e_utility_types_max_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["e_utility_types_min_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "e_utility_types" */
["e_utility_types_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["e_utility_types"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "e_utility_types" */
["e_utility_types_on_conflict"]: {
	constraint: ResolverInputTypes["e_utility_types_constraint"],
	update_columns: Array<ResolverInputTypes["e_utility_types_update_column"]>,
	where?: ResolverInputTypes["e_utility_types_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "e_utility_types". */
["e_utility_types_order_by"]: {
	description?: ResolverInputTypes["order_by"] | undefined | null,
	value?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: e_utility_types */
["e_utility_types_pk_columns_input"]: {
	value: string
};
	/** select columns of table "e_utility_types" */
["e_utility_types_select_column"]:e_utility_types_select_column;
	/** input type for updating data in table "e_utility_types" */
["e_utility_types_set_input"]: {
	description?: string | undefined | null,
	value?: string | undefined | null
};
	/** Streaming cursor of the table "e_utility_types" */
["e_utility_types_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["e_utility_types_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["e_utility_types_stream_cursor_value_input"]: {
	description?: string | undefined | null,
	value?: string | undefined | null
};
	/** update columns of table "e_utility_types" */
["e_utility_types_update_column"]:e_utility_types_update_column;
	["e_utility_types_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["e_utility_types_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["e_utility_types_bool_exp"]
};
	/** columns and relationships of "e_veto_pick_types" */
["e_veto_pick_types"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "e_veto_pick_types" */
["e_veto_pick_types_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["e_veto_pick_types_aggregate_fields"],
	nodes?:ResolverInputTypes["e_veto_pick_types"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "e_veto_pick_types" */
["e_veto_pick_types_aggregate_fields"]: AliasType<{
count?: [{	columns?: Array<ResolverInputTypes["e_veto_pick_types_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["e_veto_pick_types_max_fields"],
	min?:ResolverInputTypes["e_veto_pick_types_min_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "e_veto_pick_types". All fields are combined with a logical 'AND'. */
["e_veto_pick_types_bool_exp"]: {
	_and?: Array<ResolverInputTypes["e_veto_pick_types_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["e_veto_pick_types_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["e_veto_pick_types_bool_exp"]> | undefined | null,
	description?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	value?: ResolverInputTypes["String_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "e_veto_pick_types" */
["e_veto_pick_types_constraint"]:e_veto_pick_types_constraint;
	["e_veto_pick_types_enum"]:e_veto_pick_types_enum;
	/** Boolean expression to compare columns of type "e_veto_pick_types_enum". All fields are combined with logical 'AND'. */
["e_veto_pick_types_enum_comparison_exp"]: {
	_eq?: ResolverInputTypes["e_veto_pick_types_enum"] | undefined | null,
	_in?: Array<ResolverInputTypes["e_veto_pick_types_enum"]> | undefined | null,
	_is_null?: boolean | undefined | null,
	_neq?: ResolverInputTypes["e_veto_pick_types_enum"] | undefined | null,
	_nin?: Array<ResolverInputTypes["e_veto_pick_types_enum"]> | undefined | null
};
	/** input type for inserting data into table "e_veto_pick_types" */
["e_veto_pick_types_insert_input"]: {
	description?: string | undefined | null,
	value?: string | undefined | null
};
	/** aggregate max on columns */
["e_veto_pick_types_max_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["e_veto_pick_types_min_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "e_veto_pick_types" */
["e_veto_pick_types_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["e_veto_pick_types"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "e_veto_pick_types" */
["e_veto_pick_types_on_conflict"]: {
	constraint: ResolverInputTypes["e_veto_pick_types_constraint"],
	update_columns: Array<ResolverInputTypes["e_veto_pick_types_update_column"]>,
	where?: ResolverInputTypes["e_veto_pick_types_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "e_veto_pick_types". */
["e_veto_pick_types_order_by"]: {
	description?: ResolverInputTypes["order_by"] | undefined | null,
	value?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: e_veto_pick_types */
["e_veto_pick_types_pk_columns_input"]: {
	value: string
};
	/** select columns of table "e_veto_pick_types" */
["e_veto_pick_types_select_column"]:e_veto_pick_types_select_column;
	/** input type for updating data in table "e_veto_pick_types" */
["e_veto_pick_types_set_input"]: {
	description?: string | undefined | null,
	value?: string | undefined | null
};
	/** Streaming cursor of the table "e_veto_pick_types" */
["e_veto_pick_types_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["e_veto_pick_types_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["e_veto_pick_types_stream_cursor_value_input"]: {
	description?: string | undefined | null,
	value?: string | undefined | null
};
	/** update columns of table "e_veto_pick_types" */
["e_veto_pick_types_update_column"]:e_veto_pick_types_update_column;
	["e_veto_pick_types_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["e_veto_pick_types_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["e_veto_pick_types_bool_exp"]
};
	["jsonb"]:unknown;
	["jsonb_cast_exp"]: {
	String?: ResolverInputTypes["String_comparison_exp"] | undefined | null
};
	/** Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'. */
["jsonb_comparison_exp"]: {
	_cast?: ResolverInputTypes["jsonb_cast_exp"] | undefined | null,
	/** is the column contained in the given json value */
	_contained_in?: ResolverInputTypes["jsonb"] | undefined | null,
	/** does the column contain the given json value at the top level */
	_contains?: ResolverInputTypes["jsonb"] | undefined | null,
	_eq?: ResolverInputTypes["jsonb"] | undefined | null,
	_gt?: ResolverInputTypes["jsonb"] | undefined | null,
	_gte?: ResolverInputTypes["jsonb"] | undefined | null,
	/** does the string exist as a top-level key in the column */
	_has_key?: string | undefined | null,
	/** do all of these strings exist as top-level keys in the column */
	_has_keys_all?: Array<string> | undefined | null,
	/** do any of these strings exist as top-level keys in the column */
	_has_keys_any?: Array<string> | undefined | null,
	_in?: Array<ResolverInputTypes["jsonb"]> | undefined | null,
	_is_null?: boolean | undefined | null,
	_lt?: ResolverInputTypes["jsonb"] | undefined | null,
	_lte?: ResolverInputTypes["jsonb"] | undefined | null,
	_neq?: ResolverInputTypes["jsonb"] | undefined | null,
	_nin?: Array<ResolverInputTypes["jsonb"]> | undefined | null
};
	/** columns and relationships of "map_pools" */
["map_pools"]: AliasType<{
	enabled?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	label?:boolean | `@${string}`,
maps?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_pool_maps_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_pool_maps_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_pool_maps_bool_exp"] | undefined | null},ResolverInputTypes["v_pool_maps"]],
maps_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_pool_maps_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_pool_maps_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_pool_maps_bool_exp"] | undefined | null},ResolverInputTypes["v_pool_maps_aggregate"]],
matches?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["matches_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["matches_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["matches_bool_exp"] | undefined | null},ResolverInputTypes["matches"]],
matches_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["matches_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["matches_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["matches_bool_exp"] | undefined | null},ResolverInputTypes["matches_aggregate"]],
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "map_pools" */
["map_pools_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["map_pools_aggregate_fields"],
	nodes?:ResolverInputTypes["map_pools"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "map_pools" */
["map_pools_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["map_pools_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["map_pools_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["map_pools_max_fields"],
	min?:ResolverInputTypes["map_pools_min_fields"],
	stddev?:ResolverInputTypes["map_pools_stddev_fields"],
	stddev_pop?:ResolverInputTypes["map_pools_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["map_pools_stddev_samp_fields"],
	sum?:ResolverInputTypes["map_pools_sum_fields"],
	var_pop?:ResolverInputTypes["map_pools_var_pop_fields"],
	var_samp?:ResolverInputTypes["map_pools_var_samp_fields"],
	variance?:ResolverInputTypes["map_pools_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate avg on columns */
["map_pools_avg_fields"]: AliasType<{
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "map_pools". All fields are combined with a logical 'AND'. */
["map_pools_bool_exp"]: {
	_and?: Array<ResolverInputTypes["map_pools_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["map_pools_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["map_pools_bool_exp"]> | undefined | null,
	enabled?: ResolverInputTypes["Boolean_comparison_exp"] | undefined | null,
	id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	label?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	maps?: ResolverInputTypes["v_pool_maps_bool_exp"] | undefined | null,
	maps_aggregate?: ResolverInputTypes["v_pool_maps_aggregate_bool_exp"] | undefined | null,
	matches?: ResolverInputTypes["matches_bool_exp"] | undefined | null,
	matches_aggregate?: ResolverInputTypes["matches_aggregate_bool_exp"] | undefined | null,
	owner_steam_id?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "map_pools" */
["map_pools_constraint"]:map_pools_constraint;
	/** input type for incrementing numeric columns in table "map_pools" */
["map_pools_inc_input"]: {
	owner_steam_id?: ResolverInputTypes["bigint"] | undefined | null
};
	/** input type for inserting data into table "map_pools" */
["map_pools_insert_input"]: {
	enabled?: boolean | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	label?: string | undefined | null,
	maps?: ResolverInputTypes["v_pool_maps_arr_rel_insert_input"] | undefined | null,
	matches?: ResolverInputTypes["matches_arr_rel_insert_input"] | undefined | null,
	owner_steam_id?: ResolverInputTypes["bigint"] | undefined | null
};
	/** aggregate max on columns */
["map_pools_max_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	label?:boolean | `@${string}`,
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["map_pools_min_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	label?:boolean | `@${string}`,
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "map_pools" */
["map_pools_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["map_pools"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "map_pools" */
["map_pools_obj_rel_insert_input"]: {
	data: ResolverInputTypes["map_pools_insert_input"],
	/** upsert condition */
	on_conflict?: ResolverInputTypes["map_pools_on_conflict"] | undefined | null
};
	/** on_conflict condition type for table "map_pools" */
["map_pools_on_conflict"]: {
	constraint: ResolverInputTypes["map_pools_constraint"],
	update_columns: Array<ResolverInputTypes["map_pools_update_column"]>,
	where?: ResolverInputTypes["map_pools_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "map_pools". */
["map_pools_order_by"]: {
	enabled?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	label?: ResolverInputTypes["order_by"] | undefined | null,
	maps_aggregate?: ResolverInputTypes["v_pool_maps_aggregate_order_by"] | undefined | null,
	matches_aggregate?: ResolverInputTypes["matches_aggregate_order_by"] | undefined | null,
	owner_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: map_pools */
["map_pools_pk_columns_input"]: {
	id: ResolverInputTypes["uuid"]
};
	/** select columns of table "map_pools" */
["map_pools_select_column"]:map_pools_select_column;
	/** input type for updating data in table "map_pools" */
["map_pools_set_input"]: {
	enabled?: boolean | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	label?: string | undefined | null,
	owner_steam_id?: ResolverInputTypes["bigint"] | undefined | null
};
	/** aggregate stddev on columns */
["map_pools_stddev_fields"]: AliasType<{
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_pop on columns */
["map_pools_stddev_pop_fields"]: AliasType<{
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_samp on columns */
["map_pools_stddev_samp_fields"]: AliasType<{
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Streaming cursor of the table "map_pools" */
["map_pools_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["map_pools_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["map_pools_stream_cursor_value_input"]: {
	enabled?: boolean | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	label?: string | undefined | null,
	owner_steam_id?: ResolverInputTypes["bigint"] | undefined | null
};
	/** aggregate sum on columns */
["map_pools_sum_fields"]: AliasType<{
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** update columns of table "map_pools" */
["map_pools_update_column"]:map_pools_update_column;
	["map_pools_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["map_pools_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["map_pools_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["map_pools_bool_exp"]
};
	/** aggregate var_pop on columns */
["map_pools_var_pop_fields"]: AliasType<{
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate var_samp on columns */
["map_pools_var_samp_fields"]: AliasType<{
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate variance on columns */
["map_pools_variance_fields"]: AliasType<{
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** columns and relationships of "maps" */
["maps"]: AliasType<{
	active_pool?:boolean | `@${string}`,
	/** An object relationship */
	e_match_type?:ResolverInputTypes["e_match_types"],
	id?:boolean | `@${string}`,
match_maps?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_maps_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_maps_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_maps_bool_exp"] | undefined | null},ResolverInputTypes["match_maps"]],
match_maps_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_maps_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_maps_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_maps_bool_exp"] | undefined | null},ResolverInputTypes["match_maps_aggregate"]],
match_veto_picks?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_veto_picks_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_veto_picks_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_veto_picks_bool_exp"] | undefined | null},ResolverInputTypes["match_veto_picks"]],
match_veto_picks_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_veto_picks_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_veto_picks_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_veto_picks_bool_exp"] | undefined | null},ResolverInputTypes["match_veto_picks_aggregate"]],
	name?:boolean | `@${string}`,
	type?:boolean | `@${string}`,
	workshop_map_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "maps" */
["maps_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["maps_aggregate_fields"],
	nodes?:ResolverInputTypes["maps"],
		__typename?: boolean | `@${string}`
}>;
	["maps_aggregate_bool_exp"]: {
	bool_and?: ResolverInputTypes["maps_aggregate_bool_exp_bool_and"] | undefined | null,
	bool_or?: ResolverInputTypes["maps_aggregate_bool_exp_bool_or"] | undefined | null,
	count?: ResolverInputTypes["maps_aggregate_bool_exp_count"] | undefined | null
};
	["maps_aggregate_bool_exp_bool_and"]: {
	arguments: ResolverInputTypes["maps_select_column_maps_aggregate_bool_exp_bool_and_arguments_columns"],
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["maps_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Boolean_comparison_exp"]
};
	["maps_aggregate_bool_exp_bool_or"]: {
	arguments: ResolverInputTypes["maps_select_column_maps_aggregate_bool_exp_bool_or_arguments_columns"],
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["maps_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Boolean_comparison_exp"]
};
	["maps_aggregate_bool_exp_count"]: {
	arguments?: Array<ResolverInputTypes["maps_select_column"]> | undefined | null,
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["maps_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Int_comparison_exp"]
};
	/** aggregate fields of "maps" */
["maps_aggregate_fields"]: AliasType<{
count?: [{	columns?: Array<ResolverInputTypes["maps_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["maps_max_fields"],
	min?:ResolverInputTypes["maps_min_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "maps" */
["maps_aggregate_order_by"]: {
	count?: ResolverInputTypes["order_by"] | undefined | null,
	max?: ResolverInputTypes["maps_max_order_by"] | undefined | null,
	min?: ResolverInputTypes["maps_min_order_by"] | undefined | null
};
	/** input type for inserting array relation for remote table "maps" */
["maps_arr_rel_insert_input"]: {
	data: Array<ResolverInputTypes["maps_insert_input"]>,
	/** upsert condition */
	on_conflict?: ResolverInputTypes["maps_on_conflict"] | undefined | null
};
	/** Boolean expression to filter rows from the table "maps". All fields are combined with a logical 'AND'. */
["maps_bool_exp"]: {
	_and?: Array<ResolverInputTypes["maps_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["maps_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["maps_bool_exp"]> | undefined | null,
	active_pool?: ResolverInputTypes["Boolean_comparison_exp"] | undefined | null,
	e_match_type?: ResolverInputTypes["e_match_types_bool_exp"] | undefined | null,
	id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	match_maps?: ResolverInputTypes["match_maps_bool_exp"] | undefined | null,
	match_maps_aggregate?: ResolverInputTypes["match_maps_aggregate_bool_exp"] | undefined | null,
	match_veto_picks?: ResolverInputTypes["match_veto_picks_bool_exp"] | undefined | null,
	match_veto_picks_aggregate?: ResolverInputTypes["match_veto_picks_aggregate_bool_exp"] | undefined | null,
	name?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	type?: ResolverInputTypes["e_match_types_enum_comparison_exp"] | undefined | null,
	workshop_map_id?: ResolverInputTypes["String_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "maps" */
["maps_constraint"]:maps_constraint;
	/** input type for inserting data into table "maps" */
["maps_insert_input"]: {
	active_pool?: boolean | undefined | null,
	e_match_type?: ResolverInputTypes["e_match_types_obj_rel_insert_input"] | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	match_maps?: ResolverInputTypes["match_maps_arr_rel_insert_input"] | undefined | null,
	match_veto_picks?: ResolverInputTypes["match_veto_picks_arr_rel_insert_input"] | undefined | null,
	name?: string | undefined | null,
	type?: ResolverInputTypes["e_match_types_enum"] | undefined | null,
	workshop_map_id?: string | undefined | null
};
	/** aggregate max on columns */
["maps_max_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	workshop_map_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "maps" */
["maps_max_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	name?: ResolverInputTypes["order_by"] | undefined | null,
	workshop_map_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate min on columns */
["maps_min_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	workshop_map_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "maps" */
["maps_min_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	name?: ResolverInputTypes["order_by"] | undefined | null,
	workshop_map_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** response of any mutation on the table "maps" */
["maps_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["maps"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "maps" */
["maps_obj_rel_insert_input"]: {
	data: ResolverInputTypes["maps_insert_input"],
	/** upsert condition */
	on_conflict?: ResolverInputTypes["maps_on_conflict"] | undefined | null
};
	/** on_conflict condition type for table "maps" */
["maps_on_conflict"]: {
	constraint: ResolverInputTypes["maps_constraint"],
	update_columns: Array<ResolverInputTypes["maps_update_column"]>,
	where?: ResolverInputTypes["maps_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "maps". */
["maps_order_by"]: {
	active_pool?: ResolverInputTypes["order_by"] | undefined | null,
	e_match_type?: ResolverInputTypes["e_match_types_order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	match_maps_aggregate?: ResolverInputTypes["match_maps_aggregate_order_by"] | undefined | null,
	match_veto_picks_aggregate?: ResolverInputTypes["match_veto_picks_aggregate_order_by"] | undefined | null,
	name?: ResolverInputTypes["order_by"] | undefined | null,
	type?: ResolverInputTypes["order_by"] | undefined | null,
	workshop_map_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: maps */
["maps_pk_columns_input"]: {
	id: ResolverInputTypes["uuid"]
};
	/** select columns of table "maps" */
["maps_select_column"]:maps_select_column;
	/** select "maps_aggregate_bool_exp_bool_and_arguments_columns" columns of table "maps" */
["maps_select_column_maps_aggregate_bool_exp_bool_and_arguments_columns"]:maps_select_column_maps_aggregate_bool_exp_bool_and_arguments_columns;
	/** select "maps_aggregate_bool_exp_bool_or_arguments_columns" columns of table "maps" */
["maps_select_column_maps_aggregate_bool_exp_bool_or_arguments_columns"]:maps_select_column_maps_aggregate_bool_exp_bool_or_arguments_columns;
	/** input type for updating data in table "maps" */
["maps_set_input"]: {
	active_pool?: boolean | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	name?: string | undefined | null,
	type?: ResolverInputTypes["e_match_types_enum"] | undefined | null,
	workshop_map_id?: string | undefined | null
};
	/** Streaming cursor of the table "maps" */
["maps_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["maps_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["maps_stream_cursor_value_input"]: {
	active_pool?: boolean | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	name?: string | undefined | null,
	type?: ResolverInputTypes["e_match_types_enum"] | undefined | null,
	workshop_map_id?: string | undefined | null
};
	/** update columns of table "maps" */
["maps_update_column"]:maps_update_column;
	["maps_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["maps_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["maps_bool_exp"]
};
	/** relational table for assigning a players to a match and lineup */
["match_lineup_players"]: AliasType<{
	captain?:boolean | `@${string}`,
	discord_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** An object relationship */
	lineup?:ResolverInputTypes["match_lineups"],
	match_lineup_id?:boolean | `@${string}`,
	placeholder_name?:boolean | `@${string}`,
	/** An object relationship */
	player?:ResolverInputTypes["players"],
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "match_lineup_players" */
["match_lineup_players_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["match_lineup_players_aggregate_fields"],
	nodes?:ResolverInputTypes["match_lineup_players"],
		__typename?: boolean | `@${string}`
}>;
	["match_lineup_players_aggregate_bool_exp"]: {
	bool_and?: ResolverInputTypes["match_lineup_players_aggregate_bool_exp_bool_and"] | undefined | null,
	bool_or?: ResolverInputTypes["match_lineup_players_aggregate_bool_exp_bool_or"] | undefined | null,
	count?: ResolverInputTypes["match_lineup_players_aggregate_bool_exp_count"] | undefined | null
};
	["match_lineup_players_aggregate_bool_exp_bool_and"]: {
	arguments: ResolverInputTypes["match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_and_arguments_columns"],
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["match_lineup_players_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Boolean_comparison_exp"]
};
	["match_lineup_players_aggregate_bool_exp_bool_or"]: {
	arguments: ResolverInputTypes["match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_or_arguments_columns"],
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["match_lineup_players_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Boolean_comparison_exp"]
};
	["match_lineup_players_aggregate_bool_exp_count"]: {
	arguments?: Array<ResolverInputTypes["match_lineup_players_select_column"]> | undefined | null,
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["match_lineup_players_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Int_comparison_exp"]
};
	/** aggregate fields of "match_lineup_players" */
["match_lineup_players_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["match_lineup_players_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["match_lineup_players_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["match_lineup_players_max_fields"],
	min?:ResolverInputTypes["match_lineup_players_min_fields"],
	stddev?:ResolverInputTypes["match_lineup_players_stddev_fields"],
	stddev_pop?:ResolverInputTypes["match_lineup_players_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["match_lineup_players_stddev_samp_fields"],
	sum?:ResolverInputTypes["match_lineup_players_sum_fields"],
	var_pop?:ResolverInputTypes["match_lineup_players_var_pop_fields"],
	var_samp?:ResolverInputTypes["match_lineup_players_var_samp_fields"],
	variance?:ResolverInputTypes["match_lineup_players_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "match_lineup_players" */
["match_lineup_players_aggregate_order_by"]: {
	avg?: ResolverInputTypes["match_lineup_players_avg_order_by"] | undefined | null,
	count?: ResolverInputTypes["order_by"] | undefined | null,
	max?: ResolverInputTypes["match_lineup_players_max_order_by"] | undefined | null,
	min?: ResolverInputTypes["match_lineup_players_min_order_by"] | undefined | null,
	stddev?: ResolverInputTypes["match_lineup_players_stddev_order_by"] | undefined | null,
	stddev_pop?: ResolverInputTypes["match_lineup_players_stddev_pop_order_by"] | undefined | null,
	stddev_samp?: ResolverInputTypes["match_lineup_players_stddev_samp_order_by"] | undefined | null,
	sum?: ResolverInputTypes["match_lineup_players_sum_order_by"] | undefined | null,
	var_pop?: ResolverInputTypes["match_lineup_players_var_pop_order_by"] | undefined | null,
	var_samp?: ResolverInputTypes["match_lineup_players_var_samp_order_by"] | undefined | null,
	variance?: ResolverInputTypes["match_lineup_players_variance_order_by"] | undefined | null
};
	/** input type for inserting array relation for remote table "match_lineup_players" */
["match_lineup_players_arr_rel_insert_input"]: {
	data: Array<ResolverInputTypes["match_lineup_players_insert_input"]>,
	/** upsert condition */
	on_conflict?: ResolverInputTypes["match_lineup_players_on_conflict"] | undefined | null
};
	/** aggregate avg on columns */
["match_lineup_players_avg_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "match_lineup_players" */
["match_lineup_players_avg_order_by"]: {
	steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Boolean expression to filter rows from the table "match_lineup_players". All fields are combined with a logical 'AND'. */
["match_lineup_players_bool_exp"]: {
	_and?: Array<ResolverInputTypes["match_lineup_players_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["match_lineup_players_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["match_lineup_players_bool_exp"]> | undefined | null,
	captain?: ResolverInputTypes["Boolean_comparison_exp"] | undefined | null,
	discord_id?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	lineup?: ResolverInputTypes["match_lineups_bool_exp"] | undefined | null,
	match_lineup_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	placeholder_name?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	player?: ResolverInputTypes["players_bool_exp"] | undefined | null,
	steam_id?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "match_lineup_players" */
["match_lineup_players_constraint"]:match_lineup_players_constraint;
	/** input type for incrementing numeric columns in table "match_lineup_players" */
["match_lineup_players_inc_input"]: {
	steam_id?: ResolverInputTypes["bigint"] | undefined | null
};
	/** input type for inserting data into table "match_lineup_players" */
["match_lineup_players_insert_input"]: {
	captain?: boolean | undefined | null,
	discord_id?: string | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	lineup?: ResolverInputTypes["match_lineups_obj_rel_insert_input"] | undefined | null,
	match_lineup_id?: ResolverInputTypes["uuid"] | undefined | null,
	placeholder_name?: string | undefined | null,
	player?: ResolverInputTypes["players_obj_rel_insert_input"] | undefined | null,
	steam_id?: ResolverInputTypes["bigint"] | undefined | null
};
	/** aggregate max on columns */
["match_lineup_players_max_fields"]: AliasType<{
	discord_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_lineup_id?:boolean | `@${string}`,
	placeholder_name?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "match_lineup_players" */
["match_lineup_players_max_order_by"]: {
	discord_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	match_lineup_id?: ResolverInputTypes["order_by"] | undefined | null,
	placeholder_name?: ResolverInputTypes["order_by"] | undefined | null,
	steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate min on columns */
["match_lineup_players_min_fields"]: AliasType<{
	discord_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_lineup_id?:boolean | `@${string}`,
	placeholder_name?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "match_lineup_players" */
["match_lineup_players_min_order_by"]: {
	discord_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	match_lineup_id?: ResolverInputTypes["order_by"] | undefined | null,
	placeholder_name?: ResolverInputTypes["order_by"] | undefined | null,
	steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** response of any mutation on the table "match_lineup_players" */
["match_lineup_players_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["match_lineup_players"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "match_lineup_players" */
["match_lineup_players_on_conflict"]: {
	constraint: ResolverInputTypes["match_lineup_players_constraint"],
	update_columns: Array<ResolverInputTypes["match_lineup_players_update_column"]>,
	where?: ResolverInputTypes["match_lineup_players_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "match_lineup_players". */
["match_lineup_players_order_by"]: {
	captain?: ResolverInputTypes["order_by"] | undefined | null,
	discord_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	lineup?: ResolverInputTypes["match_lineups_order_by"] | undefined | null,
	match_lineup_id?: ResolverInputTypes["order_by"] | undefined | null,
	placeholder_name?: ResolverInputTypes["order_by"] | undefined | null,
	player?: ResolverInputTypes["players_order_by"] | undefined | null,
	steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: match_lineup_players */
["match_lineup_players_pk_columns_input"]: {
	id: ResolverInputTypes["uuid"]
};
	/** select columns of table "match_lineup_players" */
["match_lineup_players_select_column"]:match_lineup_players_select_column;
	/** select "match_lineup_players_aggregate_bool_exp_bool_and_arguments_columns" columns of table "match_lineup_players" */
["match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_and_arguments_columns"]:match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_and_arguments_columns;
	/** select "match_lineup_players_aggregate_bool_exp_bool_or_arguments_columns" columns of table "match_lineup_players" */
["match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_or_arguments_columns"]:match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_or_arguments_columns;
	/** input type for updating data in table "match_lineup_players" */
["match_lineup_players_set_input"]: {
	captain?: boolean | undefined | null,
	discord_id?: string | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	match_lineup_id?: ResolverInputTypes["uuid"] | undefined | null,
	placeholder_name?: string | undefined | null,
	steam_id?: ResolverInputTypes["bigint"] | undefined | null
};
	/** aggregate stddev on columns */
["match_lineup_players_stddev_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "match_lineup_players" */
["match_lineup_players_stddev_order_by"]: {
	steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_pop on columns */
["match_lineup_players_stddev_pop_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "match_lineup_players" */
["match_lineup_players_stddev_pop_order_by"]: {
	steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_samp on columns */
["match_lineup_players_stddev_samp_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "match_lineup_players" */
["match_lineup_players_stddev_samp_order_by"]: {
	steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Streaming cursor of the table "match_lineup_players" */
["match_lineup_players_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["match_lineup_players_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["match_lineup_players_stream_cursor_value_input"]: {
	captain?: boolean | undefined | null,
	discord_id?: string | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	match_lineup_id?: ResolverInputTypes["uuid"] | undefined | null,
	placeholder_name?: string | undefined | null,
	steam_id?: ResolverInputTypes["bigint"] | undefined | null
};
	/** aggregate sum on columns */
["match_lineup_players_sum_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "match_lineup_players" */
["match_lineup_players_sum_order_by"]: {
	steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** update columns of table "match_lineup_players" */
["match_lineup_players_update_column"]:match_lineup_players_update_column;
	["match_lineup_players_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["match_lineup_players_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["match_lineup_players_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["match_lineup_players_bool_exp"]
};
	/** aggregate var_pop on columns */
["match_lineup_players_var_pop_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "match_lineup_players" */
["match_lineup_players_var_pop_order_by"]: {
	steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate var_samp on columns */
["match_lineup_players_var_samp_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "match_lineup_players" */
["match_lineup_players_var_samp_order_by"]: {
	steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate variance on columns */
["match_lineup_players_variance_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "match_lineup_players" */
["match_lineup_players_variance_order_by"]: {
	steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** relational table for assigning a team to a match and lineup */
["match_lineups"]: AliasType<{
	/** An object relationship */
	captain?:ResolverInputTypes["v_match_captains"],
	/** An object relationship */
	coach?:ResolverInputTypes["players"],
	coach_steam_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
lineup_players?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_lineup_players_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_lineup_players_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_lineup_players_bool_exp"] | undefined | null},ResolverInputTypes["match_lineup_players"]],
lineup_players_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_lineup_players_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_lineup_players_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_lineup_players_bool_exp"] | undefined | null},ResolverInputTypes["match_lineup_players_aggregate"]],
	/** An object relationship */
	match?:ResolverInputTypes["matches"],
	match_id?:boolean | `@${string}`,
match_veto_picks?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_veto_picks_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_veto_picks_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_veto_picks_bool_exp"] | undefined | null},ResolverInputTypes["match_veto_picks"]],
match_veto_picks_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_veto_picks_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_veto_picks_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_veto_picks_bool_exp"] | undefined | null},ResolverInputTypes["match_veto_picks_aggregate"]],
	/** A computed field, executes function "get_team_name" */
	name?:boolean | `@${string}`,
	/** An object relationship */
	player?:ResolverInputTypes["players"],
	/** An object relationship */
	team?:ResolverInputTypes["teams"],
	team_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "match_lineups" */
["match_lineups_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["match_lineups_aggregate_fields"],
	nodes?:ResolverInputTypes["match_lineups"],
		__typename?: boolean | `@${string}`
}>;
	["match_lineups_aggregate_bool_exp"]: {
	count?: ResolverInputTypes["match_lineups_aggregate_bool_exp_count"] | undefined | null
};
	["match_lineups_aggregate_bool_exp_count"]: {
	arguments?: Array<ResolverInputTypes["match_lineups_select_column"]> | undefined | null,
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["match_lineups_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Int_comparison_exp"]
};
	/** aggregate fields of "match_lineups" */
["match_lineups_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["match_lineups_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["match_lineups_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["match_lineups_max_fields"],
	min?:ResolverInputTypes["match_lineups_min_fields"],
	stddev?:ResolverInputTypes["match_lineups_stddev_fields"],
	stddev_pop?:ResolverInputTypes["match_lineups_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["match_lineups_stddev_samp_fields"],
	sum?:ResolverInputTypes["match_lineups_sum_fields"],
	var_pop?:ResolverInputTypes["match_lineups_var_pop_fields"],
	var_samp?:ResolverInputTypes["match_lineups_var_samp_fields"],
	variance?:ResolverInputTypes["match_lineups_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "match_lineups" */
["match_lineups_aggregate_order_by"]: {
	avg?: ResolverInputTypes["match_lineups_avg_order_by"] | undefined | null,
	count?: ResolverInputTypes["order_by"] | undefined | null,
	max?: ResolverInputTypes["match_lineups_max_order_by"] | undefined | null,
	min?: ResolverInputTypes["match_lineups_min_order_by"] | undefined | null,
	stddev?: ResolverInputTypes["match_lineups_stddev_order_by"] | undefined | null,
	stddev_pop?: ResolverInputTypes["match_lineups_stddev_pop_order_by"] | undefined | null,
	stddev_samp?: ResolverInputTypes["match_lineups_stddev_samp_order_by"] | undefined | null,
	sum?: ResolverInputTypes["match_lineups_sum_order_by"] | undefined | null,
	var_pop?: ResolverInputTypes["match_lineups_var_pop_order_by"] | undefined | null,
	var_samp?: ResolverInputTypes["match_lineups_var_samp_order_by"] | undefined | null,
	variance?: ResolverInputTypes["match_lineups_variance_order_by"] | undefined | null
};
	/** input type for inserting array relation for remote table "match_lineups" */
["match_lineups_arr_rel_insert_input"]: {
	data: Array<ResolverInputTypes["match_lineups_insert_input"]>,
	/** upsert condition */
	on_conflict?: ResolverInputTypes["match_lineups_on_conflict"] | undefined | null
};
	/** aggregate avg on columns */
["match_lineups_avg_fields"]: AliasType<{
	coach_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "match_lineups" */
["match_lineups_avg_order_by"]: {
	coach_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Boolean expression to filter rows from the table "match_lineups". All fields are combined with a logical 'AND'. */
["match_lineups_bool_exp"]: {
	_and?: Array<ResolverInputTypes["match_lineups_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["match_lineups_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["match_lineups_bool_exp"]> | undefined | null,
	captain?: ResolverInputTypes["v_match_captains_bool_exp"] | undefined | null,
	coach?: ResolverInputTypes["players_bool_exp"] | undefined | null,
	coach_steam_id?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null,
	id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	lineup_players?: ResolverInputTypes["match_lineup_players_bool_exp"] | undefined | null,
	lineup_players_aggregate?: ResolverInputTypes["match_lineup_players_aggregate_bool_exp"] | undefined | null,
	match?: ResolverInputTypes["matches_bool_exp"] | undefined | null,
	match_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	match_veto_picks?: ResolverInputTypes["match_veto_picks_bool_exp"] | undefined | null,
	match_veto_picks_aggregate?: ResolverInputTypes["match_veto_picks_aggregate_bool_exp"] | undefined | null,
	name?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	player?: ResolverInputTypes["players_bool_exp"] | undefined | null,
	team?: ResolverInputTypes["teams_bool_exp"] | undefined | null,
	team_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "match_lineups" */
["match_lineups_constraint"]:match_lineups_constraint;
	/** input type for incrementing numeric columns in table "match_lineups" */
["match_lineups_inc_input"]: {
	coach_steam_id?: ResolverInputTypes["bigint"] | undefined | null
};
	/** input type for inserting data into table "match_lineups" */
["match_lineups_insert_input"]: {
	captain?: ResolverInputTypes["v_match_captains_obj_rel_insert_input"] | undefined | null,
	coach?: ResolverInputTypes["players_obj_rel_insert_input"] | undefined | null,
	coach_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	lineup_players?: ResolverInputTypes["match_lineup_players_arr_rel_insert_input"] | undefined | null,
	match?: ResolverInputTypes["matches_obj_rel_insert_input"] | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	match_veto_picks?: ResolverInputTypes["match_veto_picks_arr_rel_insert_input"] | undefined | null,
	player?: ResolverInputTypes["players_obj_rel_insert_input"] | undefined | null,
	team?: ResolverInputTypes["teams_obj_rel_insert_input"] | undefined | null,
	team_id?: ResolverInputTypes["uuid"] | undefined | null
};
	/** aggregate max on columns */
["match_lineups_max_fields"]: AliasType<{
	coach_steam_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	/** A computed field, executes function "get_team_name" */
	name?:boolean | `@${string}`,
	team_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "match_lineups" */
["match_lineups_max_order_by"]: {
	coach_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	team_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate min on columns */
["match_lineups_min_fields"]: AliasType<{
	coach_steam_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	/** A computed field, executes function "get_team_name" */
	name?:boolean | `@${string}`,
	team_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "match_lineups" */
["match_lineups_min_order_by"]: {
	coach_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	team_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** response of any mutation on the table "match_lineups" */
["match_lineups_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["match_lineups"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "match_lineups" */
["match_lineups_obj_rel_insert_input"]: {
	data: ResolverInputTypes["match_lineups_insert_input"],
	/** upsert condition */
	on_conflict?: ResolverInputTypes["match_lineups_on_conflict"] | undefined | null
};
	/** on_conflict condition type for table "match_lineups" */
["match_lineups_on_conflict"]: {
	constraint: ResolverInputTypes["match_lineups_constraint"],
	update_columns: Array<ResolverInputTypes["match_lineups_update_column"]>,
	where?: ResolverInputTypes["match_lineups_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "match_lineups". */
["match_lineups_order_by"]: {
	captain?: ResolverInputTypes["v_match_captains_order_by"] | undefined | null,
	coach?: ResolverInputTypes["players_order_by"] | undefined | null,
	coach_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_players_aggregate?: ResolverInputTypes["match_lineup_players_aggregate_order_by"] | undefined | null,
	match?: ResolverInputTypes["matches_order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	match_veto_picks_aggregate?: ResolverInputTypes["match_veto_picks_aggregate_order_by"] | undefined | null,
	name?: ResolverInputTypes["order_by"] | undefined | null,
	player?: ResolverInputTypes["players_order_by"] | undefined | null,
	team?: ResolverInputTypes["teams_order_by"] | undefined | null,
	team_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: match_lineups */
["match_lineups_pk_columns_input"]: {
	id: ResolverInputTypes["uuid"]
};
	/** select columns of table "match_lineups" */
["match_lineups_select_column"]:match_lineups_select_column;
	/** input type for updating data in table "match_lineups" */
["match_lineups_set_input"]: {
	coach_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	team_id?: ResolverInputTypes["uuid"] | undefined | null
};
	/** aggregate stddev on columns */
["match_lineups_stddev_fields"]: AliasType<{
	coach_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "match_lineups" */
["match_lineups_stddev_order_by"]: {
	coach_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_pop on columns */
["match_lineups_stddev_pop_fields"]: AliasType<{
	coach_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "match_lineups" */
["match_lineups_stddev_pop_order_by"]: {
	coach_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_samp on columns */
["match_lineups_stddev_samp_fields"]: AliasType<{
	coach_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "match_lineups" */
["match_lineups_stddev_samp_order_by"]: {
	coach_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Streaming cursor of the table "match_lineups" */
["match_lineups_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["match_lineups_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["match_lineups_stream_cursor_value_input"]: {
	coach_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	team_id?: ResolverInputTypes["uuid"] | undefined | null
};
	/** aggregate sum on columns */
["match_lineups_sum_fields"]: AliasType<{
	coach_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "match_lineups" */
["match_lineups_sum_order_by"]: {
	coach_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** update columns of table "match_lineups" */
["match_lineups_update_column"]:match_lineups_update_column;
	["match_lineups_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["match_lineups_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["match_lineups_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["match_lineups_bool_exp"]
};
	/** aggregate var_pop on columns */
["match_lineups_var_pop_fields"]: AliasType<{
	coach_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "match_lineups" */
["match_lineups_var_pop_order_by"]: {
	coach_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate var_samp on columns */
["match_lineups_var_samp_fields"]: AliasType<{
	coach_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "match_lineups" */
["match_lineups_var_samp_order_by"]: {
	coach_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate variance on columns */
["match_lineups_variance_fields"]: AliasType<{
	coach_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "match_lineups" */
["match_lineups_variance_order_by"]: {
	coach_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** columns and relationships of "match_map_demos" */
["match_map_demos"]: AliasType<{
	file?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	size?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "match_map_demos" */
["match_map_demos_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["match_map_demos_aggregate_fields"],
	nodes?:ResolverInputTypes["match_map_demos"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "match_map_demos" */
["match_map_demos_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["match_map_demos_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["match_map_demos_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["match_map_demos_max_fields"],
	min?:ResolverInputTypes["match_map_demos_min_fields"],
	stddev?:ResolverInputTypes["match_map_demos_stddev_fields"],
	stddev_pop?:ResolverInputTypes["match_map_demos_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["match_map_demos_stddev_samp_fields"],
	sum?:ResolverInputTypes["match_map_demos_sum_fields"],
	var_pop?:ResolverInputTypes["match_map_demos_var_pop_fields"],
	var_samp?:ResolverInputTypes["match_map_demos_var_samp_fields"],
	variance?:ResolverInputTypes["match_map_demos_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate avg on columns */
["match_map_demos_avg_fields"]: AliasType<{
	size?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "match_map_demos". All fields are combined with a logical 'AND'. */
["match_map_demos_bool_exp"]: {
	_and?: Array<ResolverInputTypes["match_map_demos_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["match_map_demos_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["match_map_demos_bool_exp"]> | undefined | null,
	file?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	match_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	size?: ResolverInputTypes["Int_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "match_map_demos" */
["match_map_demos_constraint"]:match_map_demos_constraint;
	/** input type for incrementing numeric columns in table "match_map_demos" */
["match_map_demos_inc_input"]: {
	size?: number | undefined | null
};
	/** input type for inserting data into table "match_map_demos" */
["match_map_demos_insert_input"]: {
	file?: string | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid"] | undefined | null,
	size?: number | undefined | null
};
	/** aggregate max on columns */
["match_map_demos_max_fields"]: AliasType<{
	file?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	size?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["match_map_demos_min_fields"]: AliasType<{
	file?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	size?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "match_map_demos" */
["match_map_demos_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["match_map_demos"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "match_map_demos" */
["match_map_demos_on_conflict"]: {
	constraint: ResolverInputTypes["match_map_demos_constraint"],
	update_columns: Array<ResolverInputTypes["match_map_demos_update_column"]>,
	where?: ResolverInputTypes["match_map_demos_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "match_map_demos". */
["match_map_demos_order_by"]: {
	file?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	match_map_id?: ResolverInputTypes["order_by"] | undefined | null,
	size?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: match_map_demos */
["match_map_demos_pk_columns_input"]: {
	id: ResolverInputTypes["uuid"]
};
	/** select columns of table "match_map_demos" */
["match_map_demos_select_column"]:match_map_demos_select_column;
	/** input type for updating data in table "match_map_demos" */
["match_map_demos_set_input"]: {
	file?: string | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid"] | undefined | null,
	size?: number | undefined | null
};
	/** aggregate stddev on columns */
["match_map_demos_stddev_fields"]: AliasType<{
	size?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_pop on columns */
["match_map_demos_stddev_pop_fields"]: AliasType<{
	size?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_samp on columns */
["match_map_demos_stddev_samp_fields"]: AliasType<{
	size?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Streaming cursor of the table "match_map_demos" */
["match_map_demos_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["match_map_demos_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["match_map_demos_stream_cursor_value_input"]: {
	file?: string | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid"] | undefined | null,
	size?: number | undefined | null
};
	/** aggregate sum on columns */
["match_map_demos_sum_fields"]: AliasType<{
	size?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** update columns of table "match_map_demos" */
["match_map_demos_update_column"]:match_map_demos_update_column;
	["match_map_demos_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["match_map_demos_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["match_map_demos_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["match_map_demos_bool_exp"]
};
	/** aggregate var_pop on columns */
["match_map_demos_var_pop_fields"]: AliasType<{
	size?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate var_samp on columns */
["match_map_demos_var_samp_fields"]: AliasType<{
	size?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate variance on columns */
["match_map_demos_variance_fields"]: AliasType<{
	size?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** columns and relationships of "match_map_rounds" */
["match_map_rounds"]: AliasType<{
	backup_file?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
kills?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_kills_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_kills_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_kills_bool_exp"] | undefined | null},ResolverInputTypes["player_kills"]],
kills_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_kills_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_kills_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_kills_bool_exp"] | undefined | null},ResolverInputTypes["player_kills_aggregate"]],
	lineup_1_money?:boolean | `@${string}`,
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	lineup_2_money?:boolean | `@${string}`,
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	/** An object relationship */
	match_map?:ResolverInputTypes["match_maps"],
	match_map_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "match_map_rounds" */
["match_map_rounds_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["match_map_rounds_aggregate_fields"],
	nodes?:ResolverInputTypes["match_map_rounds"],
		__typename?: boolean | `@${string}`
}>;
	["match_map_rounds_aggregate_bool_exp"]: {
	count?: ResolverInputTypes["match_map_rounds_aggregate_bool_exp_count"] | undefined | null
};
	["match_map_rounds_aggregate_bool_exp_count"]: {
	arguments?: Array<ResolverInputTypes["match_map_rounds_select_column"]> | undefined | null,
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["match_map_rounds_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Int_comparison_exp"]
};
	/** aggregate fields of "match_map_rounds" */
["match_map_rounds_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["match_map_rounds_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["match_map_rounds_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["match_map_rounds_max_fields"],
	min?:ResolverInputTypes["match_map_rounds_min_fields"],
	stddev?:ResolverInputTypes["match_map_rounds_stddev_fields"],
	stddev_pop?:ResolverInputTypes["match_map_rounds_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["match_map_rounds_stddev_samp_fields"],
	sum?:ResolverInputTypes["match_map_rounds_sum_fields"],
	var_pop?:ResolverInputTypes["match_map_rounds_var_pop_fields"],
	var_samp?:ResolverInputTypes["match_map_rounds_var_samp_fields"],
	variance?:ResolverInputTypes["match_map_rounds_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "match_map_rounds" */
["match_map_rounds_aggregate_order_by"]: {
	avg?: ResolverInputTypes["match_map_rounds_avg_order_by"] | undefined | null,
	count?: ResolverInputTypes["order_by"] | undefined | null,
	max?: ResolverInputTypes["match_map_rounds_max_order_by"] | undefined | null,
	min?: ResolverInputTypes["match_map_rounds_min_order_by"] | undefined | null,
	stddev?: ResolverInputTypes["match_map_rounds_stddev_order_by"] | undefined | null,
	stddev_pop?: ResolverInputTypes["match_map_rounds_stddev_pop_order_by"] | undefined | null,
	stddev_samp?: ResolverInputTypes["match_map_rounds_stddev_samp_order_by"] | undefined | null,
	sum?: ResolverInputTypes["match_map_rounds_sum_order_by"] | undefined | null,
	var_pop?: ResolverInputTypes["match_map_rounds_var_pop_order_by"] | undefined | null,
	var_samp?: ResolverInputTypes["match_map_rounds_var_samp_order_by"] | undefined | null,
	variance?: ResolverInputTypes["match_map_rounds_variance_order_by"] | undefined | null
};
	/** input type for inserting array relation for remote table "match_map_rounds" */
["match_map_rounds_arr_rel_insert_input"]: {
	data: Array<ResolverInputTypes["match_map_rounds_insert_input"]>,
	/** upsert condition */
	on_conflict?: ResolverInputTypes["match_map_rounds_on_conflict"] | undefined | null
};
	/** aggregate avg on columns */
["match_map_rounds_avg_fields"]: AliasType<{
	lineup_1_money?:boolean | `@${string}`,
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	lineup_2_money?:boolean | `@${string}`,
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "match_map_rounds" */
["match_map_rounds_avg_order_by"]: {
	lineup_1_money?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_1_score?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_1_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_money?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_score?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Boolean expression to filter rows from the table "match_map_rounds". All fields are combined with a logical 'AND'. */
["match_map_rounds_bool_exp"]: {
	_and?: Array<ResolverInputTypes["match_map_rounds_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["match_map_rounds_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["match_map_rounds_bool_exp"]> | undefined | null,
	backup_file?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	kills?: ResolverInputTypes["player_kills_bool_exp"] | undefined | null,
	kills_aggregate?: ResolverInputTypes["player_kills_aggregate_bool_exp"] | undefined | null,
	lineup_1_money?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	lineup_1_score?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	lineup_1_timeouts_available?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	lineup_2_money?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	lineup_2_score?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	lineup_2_timeouts_available?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	match_map?: ResolverInputTypes["match_maps_bool_exp"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	round?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	time?: ResolverInputTypes["timestamptz_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "match_map_rounds" */
["match_map_rounds_constraint"]:match_map_rounds_constraint;
	/** input type for incrementing numeric columns in table "match_map_rounds" */
["match_map_rounds_inc_input"]: {
	lineup_1_money?: number | undefined | null,
	lineup_1_score?: number | undefined | null,
	lineup_1_timeouts_available?: number | undefined | null,
	lineup_2_money?: number | undefined | null,
	lineup_2_score?: number | undefined | null,
	lineup_2_timeouts_available?: number | undefined | null,
	round?: number | undefined | null
};
	/** input type for inserting data into table "match_map_rounds" */
["match_map_rounds_insert_input"]: {
	backup_file?: string | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	kills?: ResolverInputTypes["player_kills_arr_rel_insert_input"] | undefined | null,
	lineup_1_money?: number | undefined | null,
	lineup_1_score?: number | undefined | null,
	lineup_1_timeouts_available?: number | undefined | null,
	lineup_2_money?: number | undefined | null,
	lineup_2_score?: number | undefined | null,
	lineup_2_timeouts_available?: number | undefined | null,
	match_map?: ResolverInputTypes["match_maps_obj_rel_insert_input"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid"] | undefined | null,
	round?: number | undefined | null,
	time?: ResolverInputTypes["timestamptz"] | undefined | null
};
	/** aggregate max on columns */
["match_map_rounds_max_fields"]: AliasType<{
	backup_file?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	lineup_1_money?:boolean | `@${string}`,
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	lineup_2_money?:boolean | `@${string}`,
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "match_map_rounds" */
["match_map_rounds_max_order_by"]: {
	backup_file?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_1_money?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_1_score?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_1_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_money?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_score?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	match_map_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null,
	time?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate min on columns */
["match_map_rounds_min_fields"]: AliasType<{
	backup_file?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	lineup_1_money?:boolean | `@${string}`,
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	lineup_2_money?:boolean | `@${string}`,
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "match_map_rounds" */
["match_map_rounds_min_order_by"]: {
	backup_file?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_1_money?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_1_score?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_1_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_money?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_score?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	match_map_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null,
	time?: ResolverInputTypes["order_by"] | undefined | null
};
	/** response of any mutation on the table "match_map_rounds" */
["match_map_rounds_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["match_map_rounds"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "match_map_rounds" */
["match_map_rounds_on_conflict"]: {
	constraint: ResolverInputTypes["match_map_rounds_constraint"],
	update_columns: Array<ResolverInputTypes["match_map_rounds_update_column"]>,
	where?: ResolverInputTypes["match_map_rounds_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "match_map_rounds". */
["match_map_rounds_order_by"]: {
	backup_file?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	kills_aggregate?: ResolverInputTypes["player_kills_aggregate_order_by"] | undefined | null,
	lineup_1_money?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_1_score?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_1_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_money?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_score?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	match_map?: ResolverInputTypes["match_maps_order_by"] | undefined | null,
	match_map_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null,
	time?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: match_map_rounds */
["match_map_rounds_pk_columns_input"]: {
	id: ResolverInputTypes["uuid"]
};
	/** select columns of table "match_map_rounds" */
["match_map_rounds_select_column"]:match_map_rounds_select_column;
	/** input type for updating data in table "match_map_rounds" */
["match_map_rounds_set_input"]: {
	backup_file?: string | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	lineup_1_money?: number | undefined | null,
	lineup_1_score?: number | undefined | null,
	lineup_1_timeouts_available?: number | undefined | null,
	lineup_2_money?: number | undefined | null,
	lineup_2_score?: number | undefined | null,
	lineup_2_timeouts_available?: number | undefined | null,
	match_map_id?: ResolverInputTypes["uuid"] | undefined | null,
	round?: number | undefined | null,
	time?: ResolverInputTypes["timestamptz"] | undefined | null
};
	/** aggregate stddev on columns */
["match_map_rounds_stddev_fields"]: AliasType<{
	lineup_1_money?:boolean | `@${string}`,
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	lineup_2_money?:boolean | `@${string}`,
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "match_map_rounds" */
["match_map_rounds_stddev_order_by"]: {
	lineup_1_money?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_1_score?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_1_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_money?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_score?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_pop on columns */
["match_map_rounds_stddev_pop_fields"]: AliasType<{
	lineup_1_money?:boolean | `@${string}`,
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	lineup_2_money?:boolean | `@${string}`,
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "match_map_rounds" */
["match_map_rounds_stddev_pop_order_by"]: {
	lineup_1_money?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_1_score?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_1_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_money?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_score?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_samp on columns */
["match_map_rounds_stddev_samp_fields"]: AliasType<{
	lineup_1_money?:boolean | `@${string}`,
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	lineup_2_money?:boolean | `@${string}`,
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "match_map_rounds" */
["match_map_rounds_stddev_samp_order_by"]: {
	lineup_1_money?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_1_score?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_1_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_money?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_score?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Streaming cursor of the table "match_map_rounds" */
["match_map_rounds_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["match_map_rounds_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["match_map_rounds_stream_cursor_value_input"]: {
	backup_file?: string | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	lineup_1_money?: number | undefined | null,
	lineup_1_score?: number | undefined | null,
	lineup_1_timeouts_available?: number | undefined | null,
	lineup_2_money?: number | undefined | null,
	lineup_2_score?: number | undefined | null,
	lineup_2_timeouts_available?: number | undefined | null,
	match_map_id?: ResolverInputTypes["uuid"] | undefined | null,
	round?: number | undefined | null,
	time?: ResolverInputTypes["timestamptz"] | undefined | null
};
	/** aggregate sum on columns */
["match_map_rounds_sum_fields"]: AliasType<{
	lineup_1_money?:boolean | `@${string}`,
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	lineup_2_money?:boolean | `@${string}`,
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "match_map_rounds" */
["match_map_rounds_sum_order_by"]: {
	lineup_1_money?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_1_score?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_1_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_money?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_score?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** update columns of table "match_map_rounds" */
["match_map_rounds_update_column"]:match_map_rounds_update_column;
	["match_map_rounds_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["match_map_rounds_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["match_map_rounds_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["match_map_rounds_bool_exp"]
};
	/** aggregate var_pop on columns */
["match_map_rounds_var_pop_fields"]: AliasType<{
	lineup_1_money?:boolean | `@${string}`,
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	lineup_2_money?:boolean | `@${string}`,
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "match_map_rounds" */
["match_map_rounds_var_pop_order_by"]: {
	lineup_1_money?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_1_score?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_1_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_money?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_score?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate var_samp on columns */
["match_map_rounds_var_samp_fields"]: AliasType<{
	lineup_1_money?:boolean | `@${string}`,
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	lineup_2_money?:boolean | `@${string}`,
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "match_map_rounds" */
["match_map_rounds_var_samp_order_by"]: {
	lineup_1_money?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_1_score?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_1_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_money?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_score?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate variance on columns */
["match_map_rounds_variance_fields"]: AliasType<{
	lineup_1_money?:boolean | `@${string}`,
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	lineup_2_money?:boolean | `@${string}`,
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "match_map_rounds" */
["match_map_rounds_variance_order_by"]: {
	lineup_1_money?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_1_score?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_1_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_money?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_score?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** columns and relationships of "match_maps" */
["match_maps"]: AliasType<{
	created_at?:boolean | `@${string}`,
	/** An object relationship */
	e_match_map_status?:ResolverInputTypes["e_match_map_status"],
flashes?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_flashes_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_flashes_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_flashes_bool_exp"] | undefined | null},ResolverInputTypes["player_flashes"]],
flashes_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_flashes_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_flashes_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_flashes_bool_exp"] | undefined | null},ResolverInputTypes["player_flashes_aggregate"]],
	id?:boolean | `@${string}`,
	/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_side?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_side?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	/** An object relationship */
	map?:ResolverInputTypes["maps"],
	map_id?:boolean | `@${string}`,
	/** An object relationship */
	match?:ResolverInputTypes["matches"],
	match_id?:boolean | `@${string}`,
objectives?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_objectives_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_objectives_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_objectives_bool_exp"] | undefined | null},ResolverInputTypes["player_objectives"]],
objectives_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_objectives_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_objectives_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_objectives_bool_exp"] | undefined | null},ResolverInputTypes["player_objectives_aggregate"]],
	order?:boolean | `@${string}`,
player_assists?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_assists_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_assists_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_assists_bool_exp"] | undefined | null},ResolverInputTypes["player_assists"]],
player_assists_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_assists_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_assists_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_assists_bool_exp"] | undefined | null},ResolverInputTypes["player_assists_aggregate"]],
player_damages?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_damages_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_damages_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_damages_bool_exp"] | undefined | null},ResolverInputTypes["player_damages"]],
player_damages_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_damages_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_damages_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_damages_bool_exp"] | undefined | null},ResolverInputTypes["player_damages_aggregate"]],
player_kills?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_kills_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_kills_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_kills_bool_exp"] | undefined | null},ResolverInputTypes["player_kills"]],
player_kills_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_kills_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_kills_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_kills_bool_exp"] | undefined | null},ResolverInputTypes["player_kills_aggregate"]],
player_unused_utilities?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_unused_utility_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_unused_utility_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_unused_utility_bool_exp"] | undefined | null},ResolverInputTypes["player_unused_utility"]],
player_unused_utilities_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_unused_utility_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_unused_utility_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_unused_utility_bool_exp"] | undefined | null},ResolverInputTypes["player_unused_utility_aggregate"]],
rounds?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_map_rounds_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_map_rounds_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_map_rounds_bool_exp"] | undefined | null},ResolverInputTypes["match_map_rounds"]],
rounds_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_map_rounds_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_map_rounds_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_map_rounds_bool_exp"] | undefined | null},ResolverInputTypes["match_map_rounds_aggregate"]],
	status?:boolean | `@${string}`,
utility?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_utility_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_utility_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_utility_bool_exp"] | undefined | null},ResolverInputTypes["player_utility"]],
utility_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_utility_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_utility_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_utility_bool_exp"] | undefined | null},ResolverInputTypes["player_utility_aggregate"]],
vetos?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_veto_picks_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_veto_picks_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_veto_picks_bool_exp"] | undefined | null},ResolverInputTypes["match_veto_picks"]],
vetos_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_veto_picks_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_veto_picks_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_veto_picks_bool_exp"] | undefined | null},ResolverInputTypes["match_veto_picks_aggregate"]],
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "match_maps" */
["match_maps_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["match_maps_aggregate_fields"],
	nodes?:ResolverInputTypes["match_maps"],
		__typename?: boolean | `@${string}`
}>;
	["match_maps_aggregate_bool_exp"]: {
	count?: ResolverInputTypes["match_maps_aggregate_bool_exp_count"] | undefined | null
};
	["match_maps_aggregate_bool_exp_count"]: {
	arguments?: Array<ResolverInputTypes["match_maps_select_column"]> | undefined | null,
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["match_maps_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Int_comparison_exp"]
};
	/** aggregate fields of "match_maps" */
["match_maps_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["match_maps_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["match_maps_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["match_maps_max_fields"],
	min?:ResolverInputTypes["match_maps_min_fields"],
	stddev?:ResolverInputTypes["match_maps_stddev_fields"],
	stddev_pop?:ResolverInputTypes["match_maps_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["match_maps_stddev_samp_fields"],
	sum?:ResolverInputTypes["match_maps_sum_fields"],
	var_pop?:ResolverInputTypes["match_maps_var_pop_fields"],
	var_samp?:ResolverInputTypes["match_maps_var_samp_fields"],
	variance?:ResolverInputTypes["match_maps_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "match_maps" */
["match_maps_aggregate_order_by"]: {
	avg?: ResolverInputTypes["match_maps_avg_order_by"] | undefined | null,
	count?: ResolverInputTypes["order_by"] | undefined | null,
	max?: ResolverInputTypes["match_maps_max_order_by"] | undefined | null,
	min?: ResolverInputTypes["match_maps_min_order_by"] | undefined | null,
	stddev?: ResolverInputTypes["match_maps_stddev_order_by"] | undefined | null,
	stddev_pop?: ResolverInputTypes["match_maps_stddev_pop_order_by"] | undefined | null,
	stddev_samp?: ResolverInputTypes["match_maps_stddev_samp_order_by"] | undefined | null,
	sum?: ResolverInputTypes["match_maps_sum_order_by"] | undefined | null,
	var_pop?: ResolverInputTypes["match_maps_var_pop_order_by"] | undefined | null,
	var_samp?: ResolverInputTypes["match_maps_var_samp_order_by"] | undefined | null,
	variance?: ResolverInputTypes["match_maps_variance_order_by"] | undefined | null
};
	/** input type for inserting array relation for remote table "match_maps" */
["match_maps_arr_rel_insert_input"]: {
	data: Array<ResolverInputTypes["match_maps_insert_input"]>,
	/** upsert condition */
	on_conflict?: ResolverInputTypes["match_maps_on_conflict"] | undefined | null
};
	/** aggregate avg on columns */
["match_maps_avg_fields"]: AliasType<{
	/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	order?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "match_maps" */
["match_maps_avg_order_by"]: {
	lineup_1_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	order?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Boolean expression to filter rows from the table "match_maps". All fields are combined with a logical 'AND'. */
["match_maps_bool_exp"]: {
	_and?: Array<ResolverInputTypes["match_maps_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["match_maps_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["match_maps_bool_exp"]> | undefined | null,
	created_at?: ResolverInputTypes["timestamptz_comparison_exp"] | undefined | null,
	e_match_map_status?: ResolverInputTypes["e_match_map_status_bool_exp"] | undefined | null,
	flashes?: ResolverInputTypes["player_flashes_bool_exp"] | undefined | null,
	flashes_aggregate?: ResolverInputTypes["player_flashes_aggregate_bool_exp"] | undefined | null,
	id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	lineup_1_score?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	lineup_1_side?: ResolverInputTypes["e_sides_enum_comparison_exp"] | undefined | null,
	lineup_1_timeouts_available?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	lineup_2_score?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	lineup_2_side?: ResolverInputTypes["e_sides_enum_comparison_exp"] | undefined | null,
	lineup_2_timeouts_available?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	map?: ResolverInputTypes["maps_bool_exp"] | undefined | null,
	map_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	match?: ResolverInputTypes["matches_bool_exp"] | undefined | null,
	match_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	objectives?: ResolverInputTypes["player_objectives_bool_exp"] | undefined | null,
	objectives_aggregate?: ResolverInputTypes["player_objectives_aggregate_bool_exp"] | undefined | null,
	order?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	player_assists?: ResolverInputTypes["player_assists_bool_exp"] | undefined | null,
	player_assists_aggregate?: ResolverInputTypes["player_assists_aggregate_bool_exp"] | undefined | null,
	player_damages?: ResolverInputTypes["player_damages_bool_exp"] | undefined | null,
	player_damages_aggregate?: ResolverInputTypes["player_damages_aggregate_bool_exp"] | undefined | null,
	player_kills?: ResolverInputTypes["player_kills_bool_exp"] | undefined | null,
	player_kills_aggregate?: ResolverInputTypes["player_kills_aggregate_bool_exp"] | undefined | null,
	player_unused_utilities?: ResolverInputTypes["player_unused_utility_bool_exp"] | undefined | null,
	player_unused_utilities_aggregate?: ResolverInputTypes["player_unused_utility_aggregate_bool_exp"] | undefined | null,
	rounds?: ResolverInputTypes["match_map_rounds_bool_exp"] | undefined | null,
	rounds_aggregate?: ResolverInputTypes["match_map_rounds_aggregate_bool_exp"] | undefined | null,
	status?: ResolverInputTypes["e_match_map_status_enum_comparison_exp"] | undefined | null,
	utility?: ResolverInputTypes["player_utility_bool_exp"] | undefined | null,
	utility_aggregate?: ResolverInputTypes["player_utility_aggregate_bool_exp"] | undefined | null,
	vetos?: ResolverInputTypes["match_veto_picks_bool_exp"] | undefined | null,
	vetos_aggregate?: ResolverInputTypes["match_veto_picks_aggregate_bool_exp"] | undefined | null
};
	/** unique or primary key constraints on table "match_maps" */
["match_maps_constraint"]:match_maps_constraint;
	/** input type for incrementing numeric columns in table "match_maps" */
["match_maps_inc_input"]: {
	lineup_1_timeouts_available?: number | undefined | null,
	lineup_2_timeouts_available?: number | undefined | null,
	order?: number | undefined | null
};
	/** input type for inserting data into table "match_maps" */
["match_maps_insert_input"]: {
	created_at?: ResolverInputTypes["timestamptz"] | undefined | null,
	e_match_map_status?: ResolverInputTypes["e_match_map_status_obj_rel_insert_input"] | undefined | null,
	flashes?: ResolverInputTypes["player_flashes_arr_rel_insert_input"] | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	lineup_1_side?: ResolverInputTypes["e_sides_enum"] | undefined | null,
	lineup_1_timeouts_available?: number | undefined | null,
	lineup_2_side?: ResolverInputTypes["e_sides_enum"] | undefined | null,
	lineup_2_timeouts_available?: number | undefined | null,
	map?: ResolverInputTypes["maps_obj_rel_insert_input"] | undefined | null,
	map_id?: ResolverInputTypes["uuid"] | undefined | null,
	match?: ResolverInputTypes["matches_obj_rel_insert_input"] | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	objectives?: ResolverInputTypes["player_objectives_arr_rel_insert_input"] | undefined | null,
	order?: number | undefined | null,
	player_assists?: ResolverInputTypes["player_assists_arr_rel_insert_input"] | undefined | null,
	player_damages?: ResolverInputTypes["player_damages_arr_rel_insert_input"] | undefined | null,
	player_kills?: ResolverInputTypes["player_kills_arr_rel_insert_input"] | undefined | null,
	player_unused_utilities?: ResolverInputTypes["player_unused_utility_arr_rel_insert_input"] | undefined | null,
	rounds?: ResolverInputTypes["match_map_rounds_arr_rel_insert_input"] | undefined | null,
	status?: ResolverInputTypes["e_match_map_status_enum"] | undefined | null,
	utility?: ResolverInputTypes["player_utility_arr_rel_insert_input"] | undefined | null,
	vetos?: ResolverInputTypes["match_veto_picks_arr_rel_insert_input"] | undefined | null
};
	/** aggregate max on columns */
["match_maps_max_fields"]: AliasType<{
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	map_id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	order?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "match_maps" */
["match_maps_max_order_by"]: {
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_1_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	map_id?: ResolverInputTypes["order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	order?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate min on columns */
["match_maps_min_fields"]: AliasType<{
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	map_id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	order?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "match_maps" */
["match_maps_min_order_by"]: {
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_1_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	map_id?: ResolverInputTypes["order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	order?: ResolverInputTypes["order_by"] | undefined | null
};
	/** response of any mutation on the table "match_maps" */
["match_maps_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["match_maps"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "match_maps" */
["match_maps_obj_rel_insert_input"]: {
	data: ResolverInputTypes["match_maps_insert_input"],
	/** upsert condition */
	on_conflict?: ResolverInputTypes["match_maps_on_conflict"] | undefined | null
};
	/** on_conflict condition type for table "match_maps" */
["match_maps_on_conflict"]: {
	constraint: ResolverInputTypes["match_maps_constraint"],
	update_columns: Array<ResolverInputTypes["match_maps_update_column"]>,
	where?: ResolverInputTypes["match_maps_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "match_maps". */
["match_maps_order_by"]: {
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	e_match_map_status?: ResolverInputTypes["e_match_map_status_order_by"] | undefined | null,
	flashes_aggregate?: ResolverInputTypes["player_flashes_aggregate_order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_1_score?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_1_side?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_1_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_score?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_side?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	map?: ResolverInputTypes["maps_order_by"] | undefined | null,
	map_id?: ResolverInputTypes["order_by"] | undefined | null,
	match?: ResolverInputTypes["matches_order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	objectives_aggregate?: ResolverInputTypes["player_objectives_aggregate_order_by"] | undefined | null,
	order?: ResolverInputTypes["order_by"] | undefined | null,
	player_assists_aggregate?: ResolverInputTypes["player_assists_aggregate_order_by"] | undefined | null,
	player_damages_aggregate?: ResolverInputTypes["player_damages_aggregate_order_by"] | undefined | null,
	player_kills_aggregate?: ResolverInputTypes["player_kills_aggregate_order_by"] | undefined | null,
	player_unused_utilities_aggregate?: ResolverInputTypes["player_unused_utility_aggregate_order_by"] | undefined | null,
	rounds_aggregate?: ResolverInputTypes["match_map_rounds_aggregate_order_by"] | undefined | null,
	status?: ResolverInputTypes["order_by"] | undefined | null,
	utility_aggregate?: ResolverInputTypes["player_utility_aggregate_order_by"] | undefined | null,
	vetos_aggregate?: ResolverInputTypes["match_veto_picks_aggregate_order_by"] | undefined | null
};
	/** primary key columns input for table: match_maps */
["match_maps_pk_columns_input"]: {
	id: ResolverInputTypes["uuid"]
};
	/** select columns of table "match_maps" */
["match_maps_select_column"]:match_maps_select_column;
	/** input type for updating data in table "match_maps" */
["match_maps_set_input"]: {
	created_at?: ResolverInputTypes["timestamptz"] | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	lineup_1_side?: ResolverInputTypes["e_sides_enum"] | undefined | null,
	lineup_1_timeouts_available?: number | undefined | null,
	lineup_2_side?: ResolverInputTypes["e_sides_enum"] | undefined | null,
	lineup_2_timeouts_available?: number | undefined | null,
	map_id?: ResolverInputTypes["uuid"] | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	order?: number | undefined | null,
	status?: ResolverInputTypes["e_match_map_status_enum"] | undefined | null
};
	/** aggregate stddev on columns */
["match_maps_stddev_fields"]: AliasType<{
	/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	order?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "match_maps" */
["match_maps_stddev_order_by"]: {
	lineup_1_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	order?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_pop on columns */
["match_maps_stddev_pop_fields"]: AliasType<{
	/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	order?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "match_maps" */
["match_maps_stddev_pop_order_by"]: {
	lineup_1_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	order?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_samp on columns */
["match_maps_stddev_samp_fields"]: AliasType<{
	/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	order?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "match_maps" */
["match_maps_stddev_samp_order_by"]: {
	lineup_1_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	order?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Streaming cursor of the table "match_maps" */
["match_maps_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["match_maps_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["match_maps_stream_cursor_value_input"]: {
	created_at?: ResolverInputTypes["timestamptz"] | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	lineup_1_side?: ResolverInputTypes["e_sides_enum"] | undefined | null,
	lineup_1_timeouts_available?: number | undefined | null,
	lineup_2_side?: ResolverInputTypes["e_sides_enum"] | undefined | null,
	lineup_2_timeouts_available?: number | undefined | null,
	map_id?: ResolverInputTypes["uuid"] | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	order?: number | undefined | null,
	status?: ResolverInputTypes["e_match_map_status_enum"] | undefined | null
};
	/** aggregate sum on columns */
["match_maps_sum_fields"]: AliasType<{
	/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	order?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "match_maps" */
["match_maps_sum_order_by"]: {
	lineup_1_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	order?: ResolverInputTypes["order_by"] | undefined | null
};
	/** update columns of table "match_maps" */
["match_maps_update_column"]:match_maps_update_column;
	["match_maps_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["match_maps_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["match_maps_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["match_maps_bool_exp"]
};
	/** aggregate var_pop on columns */
["match_maps_var_pop_fields"]: AliasType<{
	/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	order?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "match_maps" */
["match_maps_var_pop_order_by"]: {
	lineup_1_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	order?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate var_samp on columns */
["match_maps_var_samp_fields"]: AliasType<{
	/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	order?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "match_maps" */
["match_maps_var_samp_order_by"]: {
	lineup_1_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	order?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate variance on columns */
["match_maps_variance_fields"]: AliasType<{
	/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?:boolean | `@${string}`,
	lineup_1_timeouts_available?:boolean | `@${string}`,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?:boolean | `@${string}`,
	lineup_2_timeouts_available?:boolean | `@${string}`,
	order?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "match_maps" */
["match_maps_variance_order_by"]: {
	lineup_1_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_timeouts_available?: ResolverInputTypes["order_by"] | undefined | null,
	order?: ResolverInputTypes["order_by"] | undefined | null
};
	/** columns and relationships of "match_veto_picks" */
["match_veto_picks"]: AliasType<{
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** An object relationship */
	map?:ResolverInputTypes["maps"],
	map_id?:boolean | `@${string}`,
	/** An object relationship */
	match?:ResolverInputTypes["matches"],
	match_id?:boolean | `@${string}`,
	/** An object relationship */
	match_lineup?:ResolverInputTypes["match_lineups"],
	match_lineup_id?:boolean | `@${string}`,
	side?:boolean | `@${string}`,
	type?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "match_veto_picks" */
["match_veto_picks_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["match_veto_picks_aggregate_fields"],
	nodes?:ResolverInputTypes["match_veto_picks"],
		__typename?: boolean | `@${string}`
}>;
	["match_veto_picks_aggregate_bool_exp"]: {
	count?: ResolverInputTypes["match_veto_picks_aggregate_bool_exp_count"] | undefined | null
};
	["match_veto_picks_aggregate_bool_exp_count"]: {
	arguments?: Array<ResolverInputTypes["match_veto_picks_select_column"]> | undefined | null,
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["match_veto_picks_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Int_comparison_exp"]
};
	/** aggregate fields of "match_veto_picks" */
["match_veto_picks_aggregate_fields"]: AliasType<{
count?: [{	columns?: Array<ResolverInputTypes["match_veto_picks_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["match_veto_picks_max_fields"],
	min?:ResolverInputTypes["match_veto_picks_min_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "match_veto_picks" */
["match_veto_picks_aggregate_order_by"]: {
	count?: ResolverInputTypes["order_by"] | undefined | null,
	max?: ResolverInputTypes["match_veto_picks_max_order_by"] | undefined | null,
	min?: ResolverInputTypes["match_veto_picks_min_order_by"] | undefined | null
};
	/** input type for inserting array relation for remote table "match_veto_picks" */
["match_veto_picks_arr_rel_insert_input"]: {
	data: Array<ResolverInputTypes["match_veto_picks_insert_input"]>,
	/** upsert condition */
	on_conflict?: ResolverInputTypes["match_veto_picks_on_conflict"] | undefined | null
};
	/** Boolean expression to filter rows from the table "match_veto_picks". All fields are combined with a logical 'AND'. */
["match_veto_picks_bool_exp"]: {
	_and?: Array<ResolverInputTypes["match_veto_picks_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["match_veto_picks_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["match_veto_picks_bool_exp"]> | undefined | null,
	created_at?: ResolverInputTypes["timestamptz_comparison_exp"] | undefined | null,
	id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	map?: ResolverInputTypes["maps_bool_exp"] | undefined | null,
	map_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	match?: ResolverInputTypes["matches_bool_exp"] | undefined | null,
	match_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	match_lineup?: ResolverInputTypes["match_lineups_bool_exp"] | undefined | null,
	match_lineup_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	side?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	type?: ResolverInputTypes["e_veto_pick_types_enum_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "match_veto_picks" */
["match_veto_picks_constraint"]:match_veto_picks_constraint;
	/** input type for inserting data into table "match_veto_picks" */
["match_veto_picks_insert_input"]: {
	created_at?: ResolverInputTypes["timestamptz"] | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	map?: ResolverInputTypes["maps_obj_rel_insert_input"] | undefined | null,
	map_id?: ResolverInputTypes["uuid"] | undefined | null,
	match?: ResolverInputTypes["matches_obj_rel_insert_input"] | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	match_lineup?: ResolverInputTypes["match_lineups_obj_rel_insert_input"] | undefined | null,
	match_lineup_id?: ResolverInputTypes["uuid"] | undefined | null,
	side?: string | undefined | null,
	type?: ResolverInputTypes["e_veto_pick_types_enum"] | undefined | null
};
	/** aggregate max on columns */
["match_veto_picks_max_fields"]: AliasType<{
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	map_id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_lineup_id?:boolean | `@${string}`,
	side?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "match_veto_picks" */
["match_veto_picks_max_order_by"]: {
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	map_id?: ResolverInputTypes["order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	match_lineup_id?: ResolverInputTypes["order_by"] | undefined | null,
	side?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate min on columns */
["match_veto_picks_min_fields"]: AliasType<{
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	map_id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_lineup_id?:boolean | `@${string}`,
	side?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "match_veto_picks" */
["match_veto_picks_min_order_by"]: {
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	map_id?: ResolverInputTypes["order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	match_lineup_id?: ResolverInputTypes["order_by"] | undefined | null,
	side?: ResolverInputTypes["order_by"] | undefined | null
};
	/** response of any mutation on the table "match_veto_picks" */
["match_veto_picks_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["match_veto_picks"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "match_veto_picks" */
["match_veto_picks_on_conflict"]: {
	constraint: ResolverInputTypes["match_veto_picks_constraint"],
	update_columns: Array<ResolverInputTypes["match_veto_picks_update_column"]>,
	where?: ResolverInputTypes["match_veto_picks_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "match_veto_picks". */
["match_veto_picks_order_by"]: {
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	map?: ResolverInputTypes["maps_order_by"] | undefined | null,
	map_id?: ResolverInputTypes["order_by"] | undefined | null,
	match?: ResolverInputTypes["matches_order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	match_lineup?: ResolverInputTypes["match_lineups_order_by"] | undefined | null,
	match_lineup_id?: ResolverInputTypes["order_by"] | undefined | null,
	side?: ResolverInputTypes["order_by"] | undefined | null,
	type?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: match_veto_picks */
["match_veto_picks_pk_columns_input"]: {
	id: ResolverInputTypes["uuid"]
};
	/** select columns of table "match_veto_picks" */
["match_veto_picks_select_column"]:match_veto_picks_select_column;
	/** input type for updating data in table "match_veto_picks" */
["match_veto_picks_set_input"]: {
	created_at?: ResolverInputTypes["timestamptz"] | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	map_id?: ResolverInputTypes["uuid"] | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	match_lineup_id?: ResolverInputTypes["uuid"] | undefined | null,
	side?: string | undefined | null,
	type?: ResolverInputTypes["e_veto_pick_types_enum"] | undefined | null
};
	/** Streaming cursor of the table "match_veto_picks" */
["match_veto_picks_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["match_veto_picks_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["match_veto_picks_stream_cursor_value_input"]: {
	created_at?: ResolverInputTypes["timestamptz"] | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	map_id?: ResolverInputTypes["uuid"] | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	match_lineup_id?: ResolverInputTypes["uuid"] | undefined | null,
	side?: string | undefined | null,
	type?: ResolverInputTypes["e_veto_pick_types_enum"] | undefined | null
};
	/** update columns of table "match_veto_picks" */
["match_veto_picks_update_column"]:match_veto_picks_update_column;
	["match_veto_picks_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["match_veto_picks_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["match_veto_picks_bool_exp"]
};
	/** columns and relationships of "matches" */
["matches"]: AliasType<{
	best_of?:boolean | `@${string}`,
	coaches?:boolean | `@${string}`,
	/** A computed field, executes function "get_match_connection_link" */
	connection_link?:boolean | `@${string}`,
	/** A computed field, executes function "get_match_connection_string" */
	connection_string?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	/** A computed field, executes function "get_current_match_map" */
	current_match_map_id?:boolean | `@${string}`,
	/** An object relationship */
	e_match_status?:ResolverInputTypes["e_match_status"],
	/** An object relationship */
	e_match_type?:ResolverInputTypes["e_match_types"],
	id?:boolean | `@${string}`,
	/** A computed field, executes function "is_match_server_available" */
	is_match_server_available?:boolean | `@${string}`,
	knife_round?:boolean | `@${string}`,
	label?:boolean | `@${string}`,
	/** A computed field, executes function "get_match_lineup_1_id" */
	lineup_1_id?:boolean | `@${string}`,
	/** A computed field, executes function "get_match_lineup_2_id" */
	lineup_2_id?:boolean | `@${string}`,
lineups?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_lineups_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_lineups_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_lineups_bool_exp"] | undefined | null},ResolverInputTypes["match_lineups"]],
lineups_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_lineups_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_lineups_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_lineups_bool_exp"] | undefined | null},ResolverInputTypes["match_lineups_aggregate"]],
	/** An object relationship */
	map_pool?:ResolverInputTypes["map_pools"],
	map_veto?:boolean | `@${string}`,
match_maps?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_maps_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_maps_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_maps_bool_exp"] | undefined | null},ResolverInputTypes["match_maps"]],
match_maps_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_maps_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_maps_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_maps_bool_exp"] | undefined | null},ResolverInputTypes["match_maps_aggregate"]],
	match_pool_id?:boolean | `@${string}`,
	mr?:boolean | `@${string}`,
	number_of_substitutes?:boolean | `@${string}`,
	/** An object relationship */
	organizer?:ResolverInputTypes["players"],
	organizer_steam_id?:boolean | `@${string}`,
	overtime?:boolean | `@${string}`,
	password?:boolean | `@${string}`,
player_assists?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_assists_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_assists_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_assists_bool_exp"] | undefined | null},ResolverInputTypes["player_assists"]],
player_assists_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_assists_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_assists_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_assists_bool_exp"] | undefined | null},ResolverInputTypes["player_assists_aggregate"]],
player_damages?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_damages_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_damages_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_damages_bool_exp"] | undefined | null},ResolverInputTypes["player_damages"]],
player_damages_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_damages_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_damages_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_damages_bool_exp"] | undefined | null},ResolverInputTypes["player_damages_aggregate"]],
player_flashes?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_flashes_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_flashes_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_flashes_bool_exp"] | undefined | null},ResolverInputTypes["player_flashes"]],
player_flashes_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_flashes_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_flashes_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_flashes_bool_exp"] | undefined | null},ResolverInputTypes["player_flashes_aggregate"]],
player_kills?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_kills_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_kills_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_kills_bool_exp"] | undefined | null},ResolverInputTypes["player_kills"]],
player_kills_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_kills_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_kills_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_kills_bool_exp"] | undefined | null},ResolverInputTypes["player_kills_aggregate"]],
player_objectives?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_objectives_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_objectives_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_objectives_bool_exp"] | undefined | null},ResolverInputTypes["player_objectives"]],
player_objectives_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_objectives_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_objectives_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_objectives_bool_exp"] | undefined | null},ResolverInputTypes["player_objectives_aggregate"]],
player_unused_utilities?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_unused_utility_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_unused_utility_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_unused_utility_bool_exp"] | undefined | null},ResolverInputTypes["player_unused_utility"]],
player_unused_utilities_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_unused_utility_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_unused_utility_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_unused_utility_bool_exp"] | undefined | null},ResolverInputTypes["player_unused_utility_aggregate"]],
player_utility?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_utility_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_utility_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_utility_bool_exp"] | undefined | null},ResolverInputTypes["player_utility"]],
player_utility_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_utility_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_utility_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_utility_bool_exp"] | undefined | null},ResolverInputTypes["player_utility_aggregate"]],
	scheduled_at?:boolean | `@${string}`,
	/** An object relationship */
	server?:ResolverInputTypes["servers"],
	server_id?:boolean | `@${string}`,
	status?:boolean | `@${string}`,
teams?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["teams_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["teams_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["teams_bool_exp"] | undefined | null},ResolverInputTypes["teams"]],
	tech_timeout_setting?:boolean | `@${string}`,
	timeout_setting?:boolean | `@${string}`,
	/** A computed field, executes function "get_match_tv_connection_link" */
	tv_connection_link?:boolean | `@${string}`,
	/** A computed field, executes function "get_match_tv_connection_string" */
	tv_connection_string?:boolean | `@${string}`,
	type?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
	/** A computed field, executes function "get_veto_picking_lineup_id" */
	veto_picking_lineup_id?:boolean | `@${string}`,
veto_picks?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_veto_picks_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_veto_picks_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_veto_picks_bool_exp"] | undefined | null},ResolverInputTypes["match_veto_picks"]],
veto_picks_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_veto_picks_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_veto_picks_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_veto_picks_bool_exp"] | undefined | null},ResolverInputTypes["match_veto_picks_aggregate"]],
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "matches" */
["matches_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["matches_aggregate_fields"],
	nodes?:ResolverInputTypes["matches"],
		__typename?: boolean | `@${string}`
}>;
	["matches_aggregate_bool_exp"]: {
	bool_and?: ResolverInputTypes["matches_aggregate_bool_exp_bool_and"] | undefined | null,
	bool_or?: ResolverInputTypes["matches_aggregate_bool_exp_bool_or"] | undefined | null,
	count?: ResolverInputTypes["matches_aggregate_bool_exp_count"] | undefined | null
};
	["matches_aggregate_bool_exp_bool_and"]: {
	arguments: ResolverInputTypes["matches_select_column_matches_aggregate_bool_exp_bool_and_arguments_columns"],
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["matches_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Boolean_comparison_exp"]
};
	["matches_aggregate_bool_exp_bool_or"]: {
	arguments: ResolverInputTypes["matches_select_column_matches_aggregate_bool_exp_bool_or_arguments_columns"],
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["matches_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Boolean_comparison_exp"]
};
	["matches_aggregate_bool_exp_count"]: {
	arguments?: Array<ResolverInputTypes["matches_select_column"]> | undefined | null,
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["matches_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Int_comparison_exp"]
};
	/** aggregate fields of "matches" */
["matches_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["matches_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["matches_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["matches_max_fields"],
	min?:ResolverInputTypes["matches_min_fields"],
	stddev?:ResolverInputTypes["matches_stddev_fields"],
	stddev_pop?:ResolverInputTypes["matches_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["matches_stddev_samp_fields"],
	sum?:ResolverInputTypes["matches_sum_fields"],
	var_pop?:ResolverInputTypes["matches_var_pop_fields"],
	var_samp?:ResolverInputTypes["matches_var_samp_fields"],
	variance?:ResolverInputTypes["matches_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "matches" */
["matches_aggregate_order_by"]: {
	avg?: ResolverInputTypes["matches_avg_order_by"] | undefined | null,
	count?: ResolverInputTypes["order_by"] | undefined | null,
	max?: ResolverInputTypes["matches_max_order_by"] | undefined | null,
	min?: ResolverInputTypes["matches_min_order_by"] | undefined | null,
	stddev?: ResolverInputTypes["matches_stddev_order_by"] | undefined | null,
	stddev_pop?: ResolverInputTypes["matches_stddev_pop_order_by"] | undefined | null,
	stddev_samp?: ResolverInputTypes["matches_stddev_samp_order_by"] | undefined | null,
	sum?: ResolverInputTypes["matches_sum_order_by"] | undefined | null,
	var_pop?: ResolverInputTypes["matches_var_pop_order_by"] | undefined | null,
	var_samp?: ResolverInputTypes["matches_var_samp_order_by"] | undefined | null,
	variance?: ResolverInputTypes["matches_variance_order_by"] | undefined | null
};
	/** input type for inserting array relation for remote table "matches" */
["matches_arr_rel_insert_input"]: {
	data: Array<ResolverInputTypes["matches_insert_input"]>,
	/** upsert condition */
	on_conflict?: ResolverInputTypes["matches_on_conflict"] | undefined | null
};
	/** aggregate avg on columns */
["matches_avg_fields"]: AliasType<{
	best_of?:boolean | `@${string}`,
	mr?:boolean | `@${string}`,
	number_of_substitutes?:boolean | `@${string}`,
	organizer_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "matches" */
["matches_avg_order_by"]: {
	best_of?: ResolverInputTypes["order_by"] | undefined | null,
	mr?: ResolverInputTypes["order_by"] | undefined | null,
	number_of_substitutes?: ResolverInputTypes["order_by"] | undefined | null,
	organizer_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Boolean expression to filter rows from the table "matches". All fields are combined with a logical 'AND'. */
["matches_bool_exp"]: {
	_and?: Array<ResolverInputTypes["matches_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["matches_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["matches_bool_exp"]> | undefined | null,
	best_of?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	coaches?: ResolverInputTypes["Boolean_comparison_exp"] | undefined | null,
	connection_link?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	connection_string?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	created_at?: ResolverInputTypes["timestamptz_comparison_exp"] | undefined | null,
	current_match_map_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	e_match_status?: ResolverInputTypes["e_match_status_bool_exp"] | undefined | null,
	e_match_type?: ResolverInputTypes["e_match_types_bool_exp"] | undefined | null,
	id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	is_match_server_available?: ResolverInputTypes["Boolean_comparison_exp"] | undefined | null,
	knife_round?: ResolverInputTypes["Boolean_comparison_exp"] | undefined | null,
	label?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	lineup_1_id?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	lineup_2_id?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	lineups?: ResolverInputTypes["match_lineups_bool_exp"] | undefined | null,
	lineups_aggregate?: ResolverInputTypes["match_lineups_aggregate_bool_exp"] | undefined | null,
	map_pool?: ResolverInputTypes["map_pools_bool_exp"] | undefined | null,
	map_veto?: ResolverInputTypes["Boolean_comparison_exp"] | undefined | null,
	match_maps?: ResolverInputTypes["match_maps_bool_exp"] | undefined | null,
	match_maps_aggregate?: ResolverInputTypes["match_maps_aggregate_bool_exp"] | undefined | null,
	match_pool_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	mr?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	number_of_substitutes?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	organizer?: ResolverInputTypes["players_bool_exp"] | undefined | null,
	organizer_steam_id?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null,
	overtime?: ResolverInputTypes["Boolean_comparison_exp"] | undefined | null,
	password?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	player_assists?: ResolverInputTypes["player_assists_bool_exp"] | undefined | null,
	player_assists_aggregate?: ResolverInputTypes["player_assists_aggregate_bool_exp"] | undefined | null,
	player_damages?: ResolverInputTypes["player_damages_bool_exp"] | undefined | null,
	player_damages_aggregate?: ResolverInputTypes["player_damages_aggregate_bool_exp"] | undefined | null,
	player_flashes?: ResolverInputTypes["player_flashes_bool_exp"] | undefined | null,
	player_flashes_aggregate?: ResolverInputTypes["player_flashes_aggregate_bool_exp"] | undefined | null,
	player_kills?: ResolverInputTypes["player_kills_bool_exp"] | undefined | null,
	player_kills_aggregate?: ResolverInputTypes["player_kills_aggregate_bool_exp"] | undefined | null,
	player_objectives?: ResolverInputTypes["player_objectives_bool_exp"] | undefined | null,
	player_objectives_aggregate?: ResolverInputTypes["player_objectives_aggregate_bool_exp"] | undefined | null,
	player_unused_utilities?: ResolverInputTypes["player_unused_utility_bool_exp"] | undefined | null,
	player_unused_utilities_aggregate?: ResolverInputTypes["player_unused_utility_aggregate_bool_exp"] | undefined | null,
	player_utility?: ResolverInputTypes["player_utility_bool_exp"] | undefined | null,
	player_utility_aggregate?: ResolverInputTypes["player_utility_aggregate_bool_exp"] | undefined | null,
	scheduled_at?: ResolverInputTypes["date_comparison_exp"] | undefined | null,
	server?: ResolverInputTypes["servers_bool_exp"] | undefined | null,
	server_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	status?: ResolverInputTypes["e_match_status_enum_comparison_exp"] | undefined | null,
	teams?: ResolverInputTypes["teams_bool_exp"] | undefined | null,
	tech_timeout_setting?: ResolverInputTypes["e_timeout_settings_enum_comparison_exp"] | undefined | null,
	timeout_setting?: ResolverInputTypes["e_timeout_settings_enum_comparison_exp"] | undefined | null,
	tv_connection_link?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	tv_connection_string?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	type?: ResolverInputTypes["e_match_types_enum_comparison_exp"] | undefined | null,
	updated_at?: ResolverInputTypes["timestamptz_comparison_exp"] | undefined | null,
	veto_picking_lineup_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	veto_picks?: ResolverInputTypes["match_veto_picks_bool_exp"] | undefined | null,
	veto_picks_aggregate?: ResolverInputTypes["match_veto_picks_aggregate_bool_exp"] | undefined | null
};
	/** unique or primary key constraints on table "matches" */
["matches_constraint"]:matches_constraint;
	/** input type for incrementing numeric columns in table "matches" */
["matches_inc_input"]: {
	best_of?: number | undefined | null,
	mr?: number | undefined | null,
	number_of_substitutes?: number | undefined | null,
	organizer_steam_id?: ResolverInputTypes["bigint"] | undefined | null
};
	/** input type for inserting data into table "matches" */
["matches_insert_input"]: {
	best_of?: number | undefined | null,
	coaches?: boolean | undefined | null,
	created_at?: ResolverInputTypes["timestamptz"] | undefined | null,
	e_match_status?: ResolverInputTypes["e_match_status_obj_rel_insert_input"] | undefined | null,
	e_match_type?: ResolverInputTypes["e_match_types_obj_rel_insert_input"] | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	knife_round?: boolean | undefined | null,
	label?: string | undefined | null,
	lineups?: ResolverInputTypes["match_lineups_arr_rel_insert_input"] | undefined | null,
	map_pool?: ResolverInputTypes["map_pools_obj_rel_insert_input"] | undefined | null,
	map_veto?: boolean | undefined | null,
	match_maps?: ResolverInputTypes["match_maps_arr_rel_insert_input"] | undefined | null,
	match_pool_id?: ResolverInputTypes["uuid"] | undefined | null,
	mr?: number | undefined | null,
	number_of_substitutes?: number | undefined | null,
	organizer?: ResolverInputTypes["players_obj_rel_insert_input"] | undefined | null,
	organizer_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	overtime?: boolean | undefined | null,
	password?: string | undefined | null,
	player_assists?: ResolverInputTypes["player_assists_arr_rel_insert_input"] | undefined | null,
	player_damages?: ResolverInputTypes["player_damages_arr_rel_insert_input"] | undefined | null,
	player_flashes?: ResolverInputTypes["player_flashes_arr_rel_insert_input"] | undefined | null,
	player_kills?: ResolverInputTypes["player_kills_arr_rel_insert_input"] | undefined | null,
	player_objectives?: ResolverInputTypes["player_objectives_arr_rel_insert_input"] | undefined | null,
	player_unused_utilities?: ResolverInputTypes["player_unused_utility_arr_rel_insert_input"] | undefined | null,
	player_utility?: ResolverInputTypes["player_utility_arr_rel_insert_input"] | undefined | null,
	scheduled_at?: ResolverInputTypes["date"] | undefined | null,
	server?: ResolverInputTypes["servers_obj_rel_insert_input"] | undefined | null,
	server_id?: ResolverInputTypes["uuid"] | undefined | null,
	status?: ResolverInputTypes["e_match_status_enum"] | undefined | null,
	tech_timeout_setting?: ResolverInputTypes["e_timeout_settings_enum"] | undefined | null,
	timeout_setting?: ResolverInputTypes["e_timeout_settings_enum"] | undefined | null,
	type?: ResolverInputTypes["e_match_types_enum"] | undefined | null,
	updated_at?: ResolverInputTypes["timestamptz"] | undefined | null,
	veto_picks?: ResolverInputTypes["match_veto_picks_arr_rel_insert_input"] | undefined | null
};
	/** aggregate max on columns */
["matches_max_fields"]: AliasType<{
	best_of?:boolean | `@${string}`,
	/** A computed field, executes function "get_match_connection_link" */
	connection_link?:boolean | `@${string}`,
	/** A computed field, executes function "get_match_connection_string" */
	connection_string?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	/** A computed field, executes function "get_current_match_map" */
	current_match_map_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	label?:boolean | `@${string}`,
	/** A computed field, executes function "get_match_lineup_1_id" */
	lineup_1_id?:boolean | `@${string}`,
	/** A computed field, executes function "get_match_lineup_2_id" */
	lineup_2_id?:boolean | `@${string}`,
	match_pool_id?:boolean | `@${string}`,
	mr?:boolean | `@${string}`,
	number_of_substitutes?:boolean | `@${string}`,
	organizer_steam_id?:boolean | `@${string}`,
	password?:boolean | `@${string}`,
	scheduled_at?:boolean | `@${string}`,
	server_id?:boolean | `@${string}`,
	/** A computed field, executes function "get_match_tv_connection_link" */
	tv_connection_link?:boolean | `@${string}`,
	/** A computed field, executes function "get_match_tv_connection_string" */
	tv_connection_string?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
	/** A computed field, executes function "get_veto_picking_lineup_id" */
	veto_picking_lineup_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "matches" */
["matches_max_order_by"]: {
	best_of?: ResolverInputTypes["order_by"] | undefined | null,
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	label?: ResolverInputTypes["order_by"] | undefined | null,
	match_pool_id?: ResolverInputTypes["order_by"] | undefined | null,
	mr?: ResolverInputTypes["order_by"] | undefined | null,
	number_of_substitutes?: ResolverInputTypes["order_by"] | undefined | null,
	organizer_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	password?: ResolverInputTypes["order_by"] | undefined | null,
	scheduled_at?: ResolverInputTypes["order_by"] | undefined | null,
	server_id?: ResolverInputTypes["order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate min on columns */
["matches_min_fields"]: AliasType<{
	best_of?:boolean | `@${string}`,
	/** A computed field, executes function "get_match_connection_link" */
	connection_link?:boolean | `@${string}`,
	/** A computed field, executes function "get_match_connection_string" */
	connection_string?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	/** A computed field, executes function "get_current_match_map" */
	current_match_map_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	label?:boolean | `@${string}`,
	/** A computed field, executes function "get_match_lineup_1_id" */
	lineup_1_id?:boolean | `@${string}`,
	/** A computed field, executes function "get_match_lineup_2_id" */
	lineup_2_id?:boolean | `@${string}`,
	match_pool_id?:boolean | `@${string}`,
	mr?:boolean | `@${string}`,
	number_of_substitutes?:boolean | `@${string}`,
	organizer_steam_id?:boolean | `@${string}`,
	password?:boolean | `@${string}`,
	scheduled_at?:boolean | `@${string}`,
	server_id?:boolean | `@${string}`,
	/** A computed field, executes function "get_match_tv_connection_link" */
	tv_connection_link?:boolean | `@${string}`,
	/** A computed field, executes function "get_match_tv_connection_string" */
	tv_connection_string?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
	/** A computed field, executes function "get_veto_picking_lineup_id" */
	veto_picking_lineup_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "matches" */
["matches_min_order_by"]: {
	best_of?: ResolverInputTypes["order_by"] | undefined | null,
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	label?: ResolverInputTypes["order_by"] | undefined | null,
	match_pool_id?: ResolverInputTypes["order_by"] | undefined | null,
	mr?: ResolverInputTypes["order_by"] | undefined | null,
	number_of_substitutes?: ResolverInputTypes["order_by"] | undefined | null,
	organizer_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	password?: ResolverInputTypes["order_by"] | undefined | null,
	scheduled_at?: ResolverInputTypes["order_by"] | undefined | null,
	server_id?: ResolverInputTypes["order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null
};
	/** response of any mutation on the table "matches" */
["matches_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["matches"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "matches" */
["matches_obj_rel_insert_input"]: {
	data: ResolverInputTypes["matches_insert_input"],
	/** upsert condition */
	on_conflict?: ResolverInputTypes["matches_on_conflict"] | undefined | null
};
	/** on_conflict condition type for table "matches" */
["matches_on_conflict"]: {
	constraint: ResolverInputTypes["matches_constraint"],
	update_columns: Array<ResolverInputTypes["matches_update_column"]>,
	where?: ResolverInputTypes["matches_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "matches". */
["matches_order_by"]: {
	best_of?: ResolverInputTypes["order_by"] | undefined | null,
	coaches?: ResolverInputTypes["order_by"] | undefined | null,
	connection_link?: ResolverInputTypes["order_by"] | undefined | null,
	connection_string?: ResolverInputTypes["order_by"] | undefined | null,
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	current_match_map_id?: ResolverInputTypes["order_by"] | undefined | null,
	e_match_status?: ResolverInputTypes["e_match_status_order_by"] | undefined | null,
	e_match_type?: ResolverInputTypes["e_match_types_order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	is_match_server_available?: ResolverInputTypes["order_by"] | undefined | null,
	knife_round?: ResolverInputTypes["order_by"] | undefined | null,
	label?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_1_id?: ResolverInputTypes["order_by"] | undefined | null,
	lineup_2_id?: ResolverInputTypes["order_by"] | undefined | null,
	lineups_aggregate?: ResolverInputTypes["match_lineups_aggregate_order_by"] | undefined | null,
	map_pool?: ResolverInputTypes["map_pools_order_by"] | undefined | null,
	map_veto?: ResolverInputTypes["order_by"] | undefined | null,
	match_maps_aggregate?: ResolverInputTypes["match_maps_aggregate_order_by"] | undefined | null,
	match_pool_id?: ResolverInputTypes["order_by"] | undefined | null,
	mr?: ResolverInputTypes["order_by"] | undefined | null,
	number_of_substitutes?: ResolverInputTypes["order_by"] | undefined | null,
	organizer?: ResolverInputTypes["players_order_by"] | undefined | null,
	organizer_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	overtime?: ResolverInputTypes["order_by"] | undefined | null,
	password?: ResolverInputTypes["order_by"] | undefined | null,
	player_assists_aggregate?: ResolverInputTypes["player_assists_aggregate_order_by"] | undefined | null,
	player_damages_aggregate?: ResolverInputTypes["player_damages_aggregate_order_by"] | undefined | null,
	player_flashes_aggregate?: ResolverInputTypes["player_flashes_aggregate_order_by"] | undefined | null,
	player_kills_aggregate?: ResolverInputTypes["player_kills_aggregate_order_by"] | undefined | null,
	player_objectives_aggregate?: ResolverInputTypes["player_objectives_aggregate_order_by"] | undefined | null,
	player_unused_utilities_aggregate?: ResolverInputTypes["player_unused_utility_aggregate_order_by"] | undefined | null,
	player_utility_aggregate?: ResolverInputTypes["player_utility_aggregate_order_by"] | undefined | null,
	scheduled_at?: ResolverInputTypes["order_by"] | undefined | null,
	server?: ResolverInputTypes["servers_order_by"] | undefined | null,
	server_id?: ResolverInputTypes["order_by"] | undefined | null,
	status?: ResolverInputTypes["order_by"] | undefined | null,
	teams_aggregate?: ResolverInputTypes["teams_aggregate_order_by"] | undefined | null,
	tech_timeout_setting?: ResolverInputTypes["order_by"] | undefined | null,
	timeout_setting?: ResolverInputTypes["order_by"] | undefined | null,
	tv_connection_link?: ResolverInputTypes["order_by"] | undefined | null,
	tv_connection_string?: ResolverInputTypes["order_by"] | undefined | null,
	type?: ResolverInputTypes["order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null,
	veto_picking_lineup_id?: ResolverInputTypes["order_by"] | undefined | null,
	veto_picks_aggregate?: ResolverInputTypes["match_veto_picks_aggregate_order_by"] | undefined | null
};
	/** primary key columns input for table: matches */
["matches_pk_columns_input"]: {
	id: ResolverInputTypes["uuid"]
};
	/** select columns of table "matches" */
["matches_select_column"]:matches_select_column;
	/** select "matches_aggregate_bool_exp_bool_and_arguments_columns" columns of table "matches" */
["matches_select_column_matches_aggregate_bool_exp_bool_and_arguments_columns"]:matches_select_column_matches_aggregate_bool_exp_bool_and_arguments_columns;
	/** select "matches_aggregate_bool_exp_bool_or_arguments_columns" columns of table "matches" */
["matches_select_column_matches_aggregate_bool_exp_bool_or_arguments_columns"]:matches_select_column_matches_aggregate_bool_exp_bool_or_arguments_columns;
	/** input type for updating data in table "matches" */
["matches_set_input"]: {
	best_of?: number | undefined | null,
	coaches?: boolean | undefined | null,
	created_at?: ResolverInputTypes["timestamptz"] | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	knife_round?: boolean | undefined | null,
	label?: string | undefined | null,
	map_veto?: boolean | undefined | null,
	match_pool_id?: ResolverInputTypes["uuid"] | undefined | null,
	mr?: number | undefined | null,
	number_of_substitutes?: number | undefined | null,
	organizer_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	overtime?: boolean | undefined | null,
	password?: string | undefined | null,
	scheduled_at?: ResolverInputTypes["date"] | undefined | null,
	server_id?: ResolverInputTypes["uuid"] | undefined | null,
	status?: ResolverInputTypes["e_match_status_enum"] | undefined | null,
	tech_timeout_setting?: ResolverInputTypes["e_timeout_settings_enum"] | undefined | null,
	timeout_setting?: ResolverInputTypes["e_timeout_settings_enum"] | undefined | null,
	type?: ResolverInputTypes["e_match_types_enum"] | undefined | null,
	updated_at?: ResolverInputTypes["timestamptz"] | undefined | null
};
	/** aggregate stddev on columns */
["matches_stddev_fields"]: AliasType<{
	best_of?:boolean | `@${string}`,
	mr?:boolean | `@${string}`,
	number_of_substitutes?:boolean | `@${string}`,
	organizer_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "matches" */
["matches_stddev_order_by"]: {
	best_of?: ResolverInputTypes["order_by"] | undefined | null,
	mr?: ResolverInputTypes["order_by"] | undefined | null,
	number_of_substitutes?: ResolverInputTypes["order_by"] | undefined | null,
	organizer_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_pop on columns */
["matches_stddev_pop_fields"]: AliasType<{
	best_of?:boolean | `@${string}`,
	mr?:boolean | `@${string}`,
	number_of_substitutes?:boolean | `@${string}`,
	organizer_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "matches" */
["matches_stddev_pop_order_by"]: {
	best_of?: ResolverInputTypes["order_by"] | undefined | null,
	mr?: ResolverInputTypes["order_by"] | undefined | null,
	number_of_substitutes?: ResolverInputTypes["order_by"] | undefined | null,
	organizer_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_samp on columns */
["matches_stddev_samp_fields"]: AliasType<{
	best_of?:boolean | `@${string}`,
	mr?:boolean | `@${string}`,
	number_of_substitutes?:boolean | `@${string}`,
	organizer_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "matches" */
["matches_stddev_samp_order_by"]: {
	best_of?: ResolverInputTypes["order_by"] | undefined | null,
	mr?: ResolverInputTypes["order_by"] | undefined | null,
	number_of_substitutes?: ResolverInputTypes["order_by"] | undefined | null,
	organizer_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Streaming cursor of the table "matches" */
["matches_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["matches_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["matches_stream_cursor_value_input"]: {
	best_of?: number | undefined | null,
	coaches?: boolean | undefined | null,
	created_at?: ResolverInputTypes["timestamptz"] | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	knife_round?: boolean | undefined | null,
	label?: string | undefined | null,
	map_veto?: boolean | undefined | null,
	match_pool_id?: ResolverInputTypes["uuid"] | undefined | null,
	mr?: number | undefined | null,
	number_of_substitutes?: number | undefined | null,
	organizer_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	overtime?: boolean | undefined | null,
	password?: string | undefined | null,
	scheduled_at?: ResolverInputTypes["date"] | undefined | null,
	server_id?: ResolverInputTypes["uuid"] | undefined | null,
	status?: ResolverInputTypes["e_match_status_enum"] | undefined | null,
	tech_timeout_setting?: ResolverInputTypes["e_timeout_settings_enum"] | undefined | null,
	timeout_setting?: ResolverInputTypes["e_timeout_settings_enum"] | undefined | null,
	type?: ResolverInputTypes["e_match_types_enum"] | undefined | null,
	updated_at?: ResolverInputTypes["timestamptz"] | undefined | null
};
	/** aggregate sum on columns */
["matches_sum_fields"]: AliasType<{
	best_of?:boolean | `@${string}`,
	mr?:boolean | `@${string}`,
	number_of_substitutes?:boolean | `@${string}`,
	organizer_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "matches" */
["matches_sum_order_by"]: {
	best_of?: ResolverInputTypes["order_by"] | undefined | null,
	mr?: ResolverInputTypes["order_by"] | undefined | null,
	number_of_substitutes?: ResolverInputTypes["order_by"] | undefined | null,
	organizer_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** update columns of table "matches" */
["matches_update_column"]:matches_update_column;
	["matches_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["matches_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["matches_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["matches_bool_exp"]
};
	/** aggregate var_pop on columns */
["matches_var_pop_fields"]: AliasType<{
	best_of?:boolean | `@${string}`,
	mr?:boolean | `@${string}`,
	number_of_substitutes?:boolean | `@${string}`,
	organizer_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "matches" */
["matches_var_pop_order_by"]: {
	best_of?: ResolverInputTypes["order_by"] | undefined | null,
	mr?: ResolverInputTypes["order_by"] | undefined | null,
	number_of_substitutes?: ResolverInputTypes["order_by"] | undefined | null,
	organizer_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate var_samp on columns */
["matches_var_samp_fields"]: AliasType<{
	best_of?:boolean | `@${string}`,
	mr?:boolean | `@${string}`,
	number_of_substitutes?:boolean | `@${string}`,
	organizer_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "matches" */
["matches_var_samp_order_by"]: {
	best_of?: ResolverInputTypes["order_by"] | undefined | null,
	mr?: ResolverInputTypes["order_by"] | undefined | null,
	number_of_substitutes?: ResolverInputTypes["order_by"] | undefined | null,
	organizer_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate variance on columns */
["matches_variance_fields"]: AliasType<{
	best_of?:boolean | `@${string}`,
	mr?:boolean | `@${string}`,
	number_of_substitutes?:boolean | `@${string}`,
	organizer_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "matches" */
["matches_variance_order_by"]: {
	best_of?: ResolverInputTypes["order_by"] | undefined | null,
	mr?: ResolverInputTypes["order_by"] | undefined | null,
	number_of_substitutes?: ResolverInputTypes["order_by"] | undefined | null,
	organizer_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** mutation root */
["mutation_root"]: AliasType<{
acceptTeamInvite?: [{	invite_id: ResolverInputTypes["uuid"]},ResolverInputTypes["SuccessOutput"]],
cancelMatch?: [{	match_id: ResolverInputTypes["uuid"]},ResolverInputTypes["SuccessOutput"]],
delete__map_pool?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["_map_pool_bool_exp"]},ResolverInputTypes["_map_pool_mutation_response"]],
delete__map_pool_by_pk?: [{	map_id: ResolverInputTypes["uuid"],	map_pool_id: ResolverInputTypes["uuid"]},ResolverInputTypes["_map_pool"]],
delete_e_match_map_status?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["e_match_map_status_bool_exp"]},ResolverInputTypes["e_match_map_status_mutation_response"]],
delete_e_match_map_status_by_pk?: [{	value: string},ResolverInputTypes["e_match_map_status"]],
delete_e_match_status?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["e_match_status_bool_exp"]},ResolverInputTypes["e_match_status_mutation_response"]],
delete_e_match_status_by_pk?: [{	value: string},ResolverInputTypes["e_match_status"]],
delete_e_match_types?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["e_match_types_bool_exp"]},ResolverInputTypes["e_match_types_mutation_response"]],
delete_e_match_types_by_pk?: [{	value: string},ResolverInputTypes["e_match_types"]],
delete_e_objective_types?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["e_objective_types_bool_exp"]},ResolverInputTypes["e_objective_types_mutation_response"]],
delete_e_objective_types_by_pk?: [{	value: string},ResolverInputTypes["e_objective_types"]],
delete_e_sides?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["e_sides_bool_exp"]},ResolverInputTypes["e_sides_mutation_response"]],
delete_e_sides_by_pk?: [{	value: string},ResolverInputTypes["e_sides"]],
delete_e_team_roles?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["e_team_roles_bool_exp"]},ResolverInputTypes["e_team_roles_mutation_response"]],
delete_e_team_roles_by_pk?: [{	value: string},ResolverInputTypes["e_team_roles"]],
delete_e_timeout_settings?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["e_timeout_settings_bool_exp"]},ResolverInputTypes["e_timeout_settings_mutation_response"]],
delete_e_timeout_settings_by_pk?: [{	value: string},ResolverInputTypes["e_timeout_settings"]],
delete_e_utility_types?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["e_utility_types_bool_exp"]},ResolverInputTypes["e_utility_types_mutation_response"]],
delete_e_utility_types_by_pk?: [{	value: string},ResolverInputTypes["e_utility_types"]],
delete_e_veto_pick_types?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["e_veto_pick_types_bool_exp"]},ResolverInputTypes["e_veto_pick_types_mutation_response"]],
delete_e_veto_pick_types_by_pk?: [{	value: string},ResolverInputTypes["e_veto_pick_types"]],
delete_map_pools?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["map_pools_bool_exp"]},ResolverInputTypes["map_pools_mutation_response"]],
delete_map_pools_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["map_pools"]],
delete_maps?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["maps_bool_exp"]},ResolverInputTypes["maps_mutation_response"]],
delete_maps_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["maps"]],
delete_match_lineup_players?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["match_lineup_players_bool_exp"]},ResolverInputTypes["match_lineup_players_mutation_response"]],
delete_match_lineup_players_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["match_lineup_players"]],
delete_match_lineups?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["match_lineups_bool_exp"]},ResolverInputTypes["match_lineups_mutation_response"]],
delete_match_lineups_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["match_lineups"]],
delete_match_map_demos?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["match_map_demos_bool_exp"]},ResolverInputTypes["match_map_demos_mutation_response"]],
delete_match_map_demos_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["match_map_demos"]],
delete_match_map_rounds?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["match_map_rounds_bool_exp"]},ResolverInputTypes["match_map_rounds_mutation_response"]],
delete_match_map_rounds_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["match_map_rounds"]],
delete_match_maps?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["match_maps_bool_exp"]},ResolverInputTypes["match_maps_mutation_response"]],
delete_match_maps_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["match_maps"]],
delete_match_veto_picks?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["match_veto_picks_bool_exp"]},ResolverInputTypes["match_veto_picks_mutation_response"]],
delete_match_veto_picks_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["match_veto_picks"]],
delete_matches?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["matches_bool_exp"]},ResolverInputTypes["matches_mutation_response"]],
delete_matches_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["matches"]],
delete_player_assists?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["player_assists_bool_exp"]},ResolverInputTypes["player_assists_mutation_response"]],
delete_player_assists_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["player_assists"]],
delete_player_damages?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["player_damages_bool_exp"]},ResolverInputTypes["player_damages_mutation_response"]],
delete_player_damages_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["player_damages"]],
delete_player_flashes?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["player_flashes_bool_exp"]},ResolverInputTypes["player_flashes_mutation_response"]],
delete_player_flashes_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["player_flashes"]],
delete_player_kills?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["player_kills_bool_exp"]},ResolverInputTypes["player_kills_mutation_response"]],
delete_player_kills_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["player_kills"]],
delete_player_objectives?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["player_objectives_bool_exp"]},ResolverInputTypes["player_objectives_mutation_response"]],
delete_player_objectives_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["player_objectives"]],
delete_player_unused_utility?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["player_unused_utility_bool_exp"]},ResolverInputTypes["player_unused_utility_mutation_response"]],
delete_player_unused_utility_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["player_unused_utility"]],
delete_player_utility?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["player_utility_bool_exp"]},ResolverInputTypes["player_utility_mutation_response"]],
delete_player_utility_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["player_utility"]],
delete_players?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["players_bool_exp"]},ResolverInputTypes["players_mutation_response"]],
delete_players_by_pk?: [{	steam_id: ResolverInputTypes["bigint"]},ResolverInputTypes["players"]],
delete_servers?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["servers_bool_exp"]},ResolverInputTypes["servers_mutation_response"]],
delete_servers_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["servers"]],
delete_team_invites?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["team_invites_bool_exp"]},ResolverInputTypes["team_invites_mutation_response"]],
delete_team_invites_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["team_invites"]],
delete_team_roster?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["team_roster_bool_exp"]},ResolverInputTypes["team_roster_mutation_response"]],
delete_team_roster_by_pk?: [{	player_steam_id: ResolverInputTypes["bigint"],	team_id: ResolverInputTypes["uuid"]},ResolverInputTypes["team_roster"]],
delete_teams?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["teams_bool_exp"]},ResolverInputTypes["teams_mutation_response"]],
delete_teams_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["teams"]],
delete_tournament_organizers?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["tournament_organizers_bool_exp"]},ResolverInputTypes["tournament_organizers_mutation_response"]],
delete_tournament_organizers_by_pk?: [{	steam_id: ResolverInputTypes["bigint"],	tournament_id: ResolverInputTypes["uuid"]},ResolverInputTypes["tournament_organizers"]],
delete_tournament_roster?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["tournament_roster_bool_exp"]},ResolverInputTypes["tournament_roster_mutation_response"]],
delete_tournament_roster_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["tournament_roster"]],
delete_tournament_servers?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["tournament_servers_bool_exp"]},ResolverInputTypes["tournament_servers_mutation_response"]],
delete_tournament_servers_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["tournament_servers"]],
delete_tournament_stages?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["tournament_stages_bool_exp"]},ResolverInputTypes["tournament_stages_mutation_response"]],
delete_tournament_stages_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["tournament_stages"]],
delete_tournament_teams?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["tournament_teams_bool_exp"]},ResolverInputTypes["tournament_teams_mutation_response"]],
delete_tournament_teams_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["tournament_teams"]],
delete_tournaments?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["tournaments_bool_exp"]},ResolverInputTypes["tournaments_mutation_response"]],
delete_tournaments_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["tournaments"]],
delete_v_match_captains?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["v_match_captains_bool_exp"]},ResolverInputTypes["v_match_captains_mutation_response"]],
delete_v_pool_maps?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["v_pool_maps_bool_exp"]},ResolverInputTypes["v_pool_maps_mutation_response"]],
insert__map_pool?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["_map_pool_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["_map_pool_on_conflict"] | undefined | null},ResolverInputTypes["_map_pool_mutation_response"]],
insert__map_pool_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["_map_pool_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["_map_pool_on_conflict"] | undefined | null},ResolverInputTypes["_map_pool"]],
insert_e_match_map_status?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["e_match_map_status_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["e_match_map_status_on_conflict"] | undefined | null},ResolverInputTypes["e_match_map_status_mutation_response"]],
insert_e_match_map_status_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["e_match_map_status_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["e_match_map_status_on_conflict"] | undefined | null},ResolverInputTypes["e_match_map_status"]],
insert_e_match_status?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["e_match_status_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["e_match_status_on_conflict"] | undefined | null},ResolverInputTypes["e_match_status_mutation_response"]],
insert_e_match_status_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["e_match_status_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["e_match_status_on_conflict"] | undefined | null},ResolverInputTypes["e_match_status"]],
insert_e_match_types?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["e_match_types_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["e_match_types_on_conflict"] | undefined | null},ResolverInputTypes["e_match_types_mutation_response"]],
insert_e_match_types_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["e_match_types_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["e_match_types_on_conflict"] | undefined | null},ResolverInputTypes["e_match_types"]],
insert_e_objective_types?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["e_objective_types_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["e_objective_types_on_conflict"] | undefined | null},ResolverInputTypes["e_objective_types_mutation_response"]],
insert_e_objective_types_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["e_objective_types_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["e_objective_types_on_conflict"] | undefined | null},ResolverInputTypes["e_objective_types"]],
insert_e_sides?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["e_sides_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["e_sides_on_conflict"] | undefined | null},ResolverInputTypes["e_sides_mutation_response"]],
insert_e_sides_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["e_sides_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["e_sides_on_conflict"] | undefined | null},ResolverInputTypes["e_sides"]],
insert_e_team_roles?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["e_team_roles_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["e_team_roles_on_conflict"] | undefined | null},ResolverInputTypes["e_team_roles_mutation_response"]],
insert_e_team_roles_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["e_team_roles_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["e_team_roles_on_conflict"] | undefined | null},ResolverInputTypes["e_team_roles"]],
insert_e_timeout_settings?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["e_timeout_settings_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["e_timeout_settings_on_conflict"] | undefined | null},ResolverInputTypes["e_timeout_settings_mutation_response"]],
insert_e_timeout_settings_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["e_timeout_settings_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["e_timeout_settings_on_conflict"] | undefined | null},ResolverInputTypes["e_timeout_settings"]],
insert_e_utility_types?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["e_utility_types_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["e_utility_types_on_conflict"] | undefined | null},ResolverInputTypes["e_utility_types_mutation_response"]],
insert_e_utility_types_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["e_utility_types_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["e_utility_types_on_conflict"] | undefined | null},ResolverInputTypes["e_utility_types"]],
insert_e_veto_pick_types?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["e_veto_pick_types_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["e_veto_pick_types_on_conflict"] | undefined | null},ResolverInputTypes["e_veto_pick_types_mutation_response"]],
insert_e_veto_pick_types_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["e_veto_pick_types_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["e_veto_pick_types_on_conflict"] | undefined | null},ResolverInputTypes["e_veto_pick_types"]],
insert_map_pools?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["map_pools_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["map_pools_on_conflict"] | undefined | null},ResolverInputTypes["map_pools_mutation_response"]],
insert_map_pools_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["map_pools_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["map_pools_on_conflict"] | undefined | null},ResolverInputTypes["map_pools"]],
insert_maps?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["maps_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["maps_on_conflict"] | undefined | null},ResolverInputTypes["maps_mutation_response"]],
insert_maps_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["maps_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["maps_on_conflict"] | undefined | null},ResolverInputTypes["maps"]],
insert_match_lineup_players?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["match_lineup_players_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["match_lineup_players_on_conflict"] | undefined | null},ResolverInputTypes["match_lineup_players_mutation_response"]],
insert_match_lineup_players_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["match_lineup_players_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["match_lineup_players_on_conflict"] | undefined | null},ResolverInputTypes["match_lineup_players"]],
insert_match_lineups?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["match_lineups_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["match_lineups_on_conflict"] | undefined | null},ResolverInputTypes["match_lineups_mutation_response"]],
insert_match_lineups_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["match_lineups_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["match_lineups_on_conflict"] | undefined | null},ResolverInputTypes["match_lineups"]],
insert_match_map_demos?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["match_map_demos_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["match_map_demos_on_conflict"] | undefined | null},ResolverInputTypes["match_map_demos_mutation_response"]],
insert_match_map_demos_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["match_map_demos_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["match_map_demos_on_conflict"] | undefined | null},ResolverInputTypes["match_map_demos"]],
insert_match_map_rounds?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["match_map_rounds_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["match_map_rounds_on_conflict"] | undefined | null},ResolverInputTypes["match_map_rounds_mutation_response"]],
insert_match_map_rounds_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["match_map_rounds_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["match_map_rounds_on_conflict"] | undefined | null},ResolverInputTypes["match_map_rounds"]],
insert_match_maps?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["match_maps_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["match_maps_on_conflict"] | undefined | null},ResolverInputTypes["match_maps_mutation_response"]],
insert_match_maps_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["match_maps_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["match_maps_on_conflict"] | undefined | null},ResolverInputTypes["match_maps"]],
insert_match_veto_picks?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["match_veto_picks_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["match_veto_picks_on_conflict"] | undefined | null},ResolverInputTypes["match_veto_picks_mutation_response"]],
insert_match_veto_picks_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["match_veto_picks_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["match_veto_picks_on_conflict"] | undefined | null},ResolverInputTypes["match_veto_picks"]],
insert_matches?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["matches_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["matches_on_conflict"] | undefined | null},ResolverInputTypes["matches_mutation_response"]],
insert_matches_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["matches_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["matches_on_conflict"] | undefined | null},ResolverInputTypes["matches"]],
insert_player_assists?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["player_assists_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["player_assists_on_conflict"] | undefined | null},ResolverInputTypes["player_assists_mutation_response"]],
insert_player_assists_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["player_assists_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["player_assists_on_conflict"] | undefined | null},ResolverInputTypes["player_assists"]],
insert_player_damages?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["player_damages_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["player_damages_on_conflict"] | undefined | null},ResolverInputTypes["player_damages_mutation_response"]],
insert_player_damages_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["player_damages_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["player_damages_on_conflict"] | undefined | null},ResolverInputTypes["player_damages"]],
insert_player_flashes?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["player_flashes_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["player_flashes_on_conflict"] | undefined | null},ResolverInputTypes["player_flashes_mutation_response"]],
insert_player_flashes_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["player_flashes_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["player_flashes_on_conflict"] | undefined | null},ResolverInputTypes["player_flashes"]],
insert_player_kills?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["player_kills_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["player_kills_on_conflict"] | undefined | null},ResolverInputTypes["player_kills_mutation_response"]],
insert_player_kills_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["player_kills_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["player_kills_on_conflict"] | undefined | null},ResolverInputTypes["player_kills"]],
insert_player_objectives?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["player_objectives_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["player_objectives_on_conflict"] | undefined | null},ResolverInputTypes["player_objectives_mutation_response"]],
insert_player_objectives_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["player_objectives_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["player_objectives_on_conflict"] | undefined | null},ResolverInputTypes["player_objectives"]],
insert_player_unused_utility?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["player_unused_utility_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["player_unused_utility_on_conflict"] | undefined | null},ResolverInputTypes["player_unused_utility_mutation_response"]],
insert_player_unused_utility_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["player_unused_utility_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["player_unused_utility_on_conflict"] | undefined | null},ResolverInputTypes["player_unused_utility"]],
insert_player_utility?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["player_utility_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["player_utility_on_conflict"] | undefined | null},ResolverInputTypes["player_utility_mutation_response"]],
insert_player_utility_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["player_utility_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["player_utility_on_conflict"] | undefined | null},ResolverInputTypes["player_utility"]],
insert_players?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["players_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["players_on_conflict"] | undefined | null},ResolverInputTypes["players_mutation_response"]],
insert_players_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["players_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["players_on_conflict"] | undefined | null},ResolverInputTypes["players"]],
insert_servers?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["servers_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["servers_on_conflict"] | undefined | null},ResolverInputTypes["servers_mutation_response"]],
insert_servers_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["servers_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["servers_on_conflict"] | undefined | null},ResolverInputTypes["servers"]],
insert_team_invites?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["team_invites_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["team_invites_on_conflict"] | undefined | null},ResolverInputTypes["team_invites_mutation_response"]],
insert_team_invites_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["team_invites_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["team_invites_on_conflict"] | undefined | null},ResolverInputTypes["team_invites"]],
insert_team_roster?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["team_roster_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["team_roster_on_conflict"] | undefined | null},ResolverInputTypes["team_roster_mutation_response"]],
insert_team_roster_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["team_roster_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["team_roster_on_conflict"] | undefined | null},ResolverInputTypes["team_roster"]],
insert_teams?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["teams_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["teams_on_conflict"] | undefined | null},ResolverInputTypes["teams_mutation_response"]],
insert_teams_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["teams_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["teams_on_conflict"] | undefined | null},ResolverInputTypes["teams"]],
insert_tournament_organizers?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["tournament_organizers_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["tournament_organizers_on_conflict"] | undefined | null},ResolverInputTypes["tournament_organizers_mutation_response"]],
insert_tournament_organizers_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["tournament_organizers_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["tournament_organizers_on_conflict"] | undefined | null},ResolverInputTypes["tournament_organizers"]],
insert_tournament_roster?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["tournament_roster_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["tournament_roster_on_conflict"] | undefined | null},ResolverInputTypes["tournament_roster_mutation_response"]],
insert_tournament_roster_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["tournament_roster_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["tournament_roster_on_conflict"] | undefined | null},ResolverInputTypes["tournament_roster"]],
insert_tournament_servers?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["tournament_servers_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["tournament_servers_on_conflict"] | undefined | null},ResolverInputTypes["tournament_servers_mutation_response"]],
insert_tournament_servers_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["tournament_servers_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["tournament_servers_on_conflict"] | undefined | null},ResolverInputTypes["tournament_servers"]],
insert_tournament_stages?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["tournament_stages_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["tournament_stages_on_conflict"] | undefined | null},ResolverInputTypes["tournament_stages_mutation_response"]],
insert_tournament_stages_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["tournament_stages_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["tournament_stages_on_conflict"] | undefined | null},ResolverInputTypes["tournament_stages"]],
insert_tournament_teams?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["tournament_teams_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["tournament_teams_on_conflict"] | undefined | null},ResolverInputTypes["tournament_teams_mutation_response"]],
insert_tournament_teams_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["tournament_teams_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["tournament_teams_on_conflict"] | undefined | null},ResolverInputTypes["tournament_teams"]],
insert_tournaments?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["tournaments_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["tournaments_on_conflict"] | undefined | null},ResolverInputTypes["tournaments_mutation_response"]],
insert_tournaments_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["tournaments_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["tournaments_on_conflict"] | undefined | null},ResolverInputTypes["tournaments"]],
insert_v_match_captains?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["v_match_captains_insert_input"]>},ResolverInputTypes["v_match_captains_mutation_response"]],
insert_v_match_captains_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["v_match_captains_insert_input"]},ResolverInputTypes["v_match_captains"]],
insert_v_pool_maps?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["v_pool_maps_insert_input"]>},ResolverInputTypes["v_pool_maps_mutation_response"]],
insert_v_pool_maps_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["v_pool_maps_insert_input"]},ResolverInputTypes["v_pool_maps"]],
scheduleMatch?: [{	match_id: ResolverInputTypes["uuid"],	time?: ResolverInputTypes["timestamptz"] | undefined | null},ResolverInputTypes["SuccessOutput"]],
startMatch?: [{	match_id: ResolverInputTypes["uuid"],	server_id?: ResolverInputTypes["uuid"] | undefined | null},ResolverInputTypes["SuccessOutput"]],
update__map_pool?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["_map_pool_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["_map_pool_bool_exp"]},ResolverInputTypes["_map_pool_mutation_response"]],
update__map_pool_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["_map_pool_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["_map_pool_pk_columns_input"]},ResolverInputTypes["_map_pool"]],
update__map_pool_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["_map_pool_updates"]>},ResolverInputTypes["_map_pool_mutation_response"]],
update_e_match_map_status?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["e_match_map_status_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["e_match_map_status_bool_exp"]},ResolverInputTypes["e_match_map_status_mutation_response"]],
update_e_match_map_status_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["e_match_map_status_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["e_match_map_status_pk_columns_input"]},ResolverInputTypes["e_match_map_status"]],
update_e_match_map_status_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["e_match_map_status_updates"]>},ResolverInputTypes["e_match_map_status_mutation_response"]],
update_e_match_status?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["e_match_status_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["e_match_status_bool_exp"]},ResolverInputTypes["e_match_status_mutation_response"]],
update_e_match_status_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["e_match_status_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["e_match_status_pk_columns_input"]},ResolverInputTypes["e_match_status"]],
update_e_match_status_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["e_match_status_updates"]>},ResolverInputTypes["e_match_status_mutation_response"]],
update_e_match_types?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["e_match_types_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["e_match_types_bool_exp"]},ResolverInputTypes["e_match_types_mutation_response"]],
update_e_match_types_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["e_match_types_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["e_match_types_pk_columns_input"]},ResolverInputTypes["e_match_types"]],
update_e_match_types_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["e_match_types_updates"]>},ResolverInputTypes["e_match_types_mutation_response"]],
update_e_objective_types?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["e_objective_types_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["e_objective_types_bool_exp"]},ResolverInputTypes["e_objective_types_mutation_response"]],
update_e_objective_types_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["e_objective_types_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["e_objective_types_pk_columns_input"]},ResolverInputTypes["e_objective_types"]],
update_e_objective_types_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["e_objective_types_updates"]>},ResolverInputTypes["e_objective_types_mutation_response"]],
update_e_sides?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["e_sides_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["e_sides_bool_exp"]},ResolverInputTypes["e_sides_mutation_response"]],
update_e_sides_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["e_sides_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["e_sides_pk_columns_input"]},ResolverInputTypes["e_sides"]],
update_e_sides_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["e_sides_updates"]>},ResolverInputTypes["e_sides_mutation_response"]],
update_e_team_roles?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["e_team_roles_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["e_team_roles_bool_exp"]},ResolverInputTypes["e_team_roles_mutation_response"]],
update_e_team_roles_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["e_team_roles_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["e_team_roles_pk_columns_input"]},ResolverInputTypes["e_team_roles"]],
update_e_team_roles_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["e_team_roles_updates"]>},ResolverInputTypes["e_team_roles_mutation_response"]],
update_e_timeout_settings?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["e_timeout_settings_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["e_timeout_settings_bool_exp"]},ResolverInputTypes["e_timeout_settings_mutation_response"]],
update_e_timeout_settings_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["e_timeout_settings_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["e_timeout_settings_pk_columns_input"]},ResolverInputTypes["e_timeout_settings"]],
update_e_timeout_settings_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["e_timeout_settings_updates"]>},ResolverInputTypes["e_timeout_settings_mutation_response"]],
update_e_utility_types?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["e_utility_types_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["e_utility_types_bool_exp"]},ResolverInputTypes["e_utility_types_mutation_response"]],
update_e_utility_types_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["e_utility_types_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["e_utility_types_pk_columns_input"]},ResolverInputTypes["e_utility_types"]],
update_e_utility_types_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["e_utility_types_updates"]>},ResolverInputTypes["e_utility_types_mutation_response"]],
update_e_veto_pick_types?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["e_veto_pick_types_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["e_veto_pick_types_bool_exp"]},ResolverInputTypes["e_veto_pick_types_mutation_response"]],
update_e_veto_pick_types_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["e_veto_pick_types_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["e_veto_pick_types_pk_columns_input"]},ResolverInputTypes["e_veto_pick_types"]],
update_e_veto_pick_types_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["e_veto_pick_types_updates"]>},ResolverInputTypes["e_veto_pick_types_mutation_response"]],
update_map_pools?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["map_pools_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["map_pools_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["map_pools_bool_exp"]},ResolverInputTypes["map_pools_mutation_response"]],
update_map_pools_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["map_pools_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["map_pools_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["map_pools_pk_columns_input"]},ResolverInputTypes["map_pools"]],
update_map_pools_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["map_pools_updates"]>},ResolverInputTypes["map_pools_mutation_response"]],
update_maps?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["maps_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["maps_bool_exp"]},ResolverInputTypes["maps_mutation_response"]],
update_maps_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["maps_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["maps_pk_columns_input"]},ResolverInputTypes["maps"]],
update_maps_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["maps_updates"]>},ResolverInputTypes["maps_mutation_response"]],
update_match_lineup_players?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["match_lineup_players_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["match_lineup_players_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["match_lineup_players_bool_exp"]},ResolverInputTypes["match_lineup_players_mutation_response"]],
update_match_lineup_players_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["match_lineup_players_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["match_lineup_players_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["match_lineup_players_pk_columns_input"]},ResolverInputTypes["match_lineup_players"]],
update_match_lineup_players_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["match_lineup_players_updates"]>},ResolverInputTypes["match_lineup_players_mutation_response"]],
update_match_lineups?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["match_lineups_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["match_lineups_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["match_lineups_bool_exp"]},ResolverInputTypes["match_lineups_mutation_response"]],
update_match_lineups_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["match_lineups_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["match_lineups_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["match_lineups_pk_columns_input"]},ResolverInputTypes["match_lineups"]],
update_match_lineups_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["match_lineups_updates"]>},ResolverInputTypes["match_lineups_mutation_response"]],
update_match_map_demos?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["match_map_demos_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["match_map_demos_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["match_map_demos_bool_exp"]},ResolverInputTypes["match_map_demos_mutation_response"]],
update_match_map_demos_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["match_map_demos_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["match_map_demos_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["match_map_demos_pk_columns_input"]},ResolverInputTypes["match_map_demos"]],
update_match_map_demos_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["match_map_demos_updates"]>},ResolverInputTypes["match_map_demos_mutation_response"]],
update_match_map_rounds?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["match_map_rounds_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["match_map_rounds_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["match_map_rounds_bool_exp"]},ResolverInputTypes["match_map_rounds_mutation_response"]],
update_match_map_rounds_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["match_map_rounds_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["match_map_rounds_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["match_map_rounds_pk_columns_input"]},ResolverInputTypes["match_map_rounds"]],
update_match_map_rounds_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["match_map_rounds_updates"]>},ResolverInputTypes["match_map_rounds_mutation_response"]],
update_match_maps?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["match_maps_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["match_maps_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["match_maps_bool_exp"]},ResolverInputTypes["match_maps_mutation_response"]],
update_match_maps_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["match_maps_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["match_maps_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["match_maps_pk_columns_input"]},ResolverInputTypes["match_maps"]],
update_match_maps_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["match_maps_updates"]>},ResolverInputTypes["match_maps_mutation_response"]],
update_match_veto_picks?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["match_veto_picks_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["match_veto_picks_bool_exp"]},ResolverInputTypes["match_veto_picks_mutation_response"]],
update_match_veto_picks_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["match_veto_picks_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["match_veto_picks_pk_columns_input"]},ResolverInputTypes["match_veto_picks"]],
update_match_veto_picks_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["match_veto_picks_updates"]>},ResolverInputTypes["match_veto_picks_mutation_response"]],
update_matches?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["matches_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["matches_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["matches_bool_exp"]},ResolverInputTypes["matches_mutation_response"]],
update_matches_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["matches_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["matches_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["matches_pk_columns_input"]},ResolverInputTypes["matches"]],
update_matches_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["matches_updates"]>},ResolverInputTypes["matches_mutation_response"]],
update_player_assists?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["player_assists_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["player_assists_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["player_assists_bool_exp"]},ResolverInputTypes["player_assists_mutation_response"]],
update_player_assists_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["player_assists_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["player_assists_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["player_assists_pk_columns_input"]},ResolverInputTypes["player_assists"]],
update_player_assists_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["player_assists_updates"]>},ResolverInputTypes["player_assists_mutation_response"]],
update_player_damages?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["player_damages_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["player_damages_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["player_damages_bool_exp"]},ResolverInputTypes["player_damages_mutation_response"]],
update_player_damages_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["player_damages_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["player_damages_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["player_damages_pk_columns_input"]},ResolverInputTypes["player_damages"]],
update_player_damages_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["player_damages_updates"]>},ResolverInputTypes["player_damages_mutation_response"]],
update_player_flashes?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["player_flashes_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["player_flashes_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["player_flashes_bool_exp"]},ResolverInputTypes["player_flashes_mutation_response"]],
update_player_flashes_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["player_flashes_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["player_flashes_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["player_flashes_pk_columns_input"]},ResolverInputTypes["player_flashes"]],
update_player_flashes_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["player_flashes_updates"]>},ResolverInputTypes["player_flashes_mutation_response"]],
update_player_kills?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["player_kills_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["player_kills_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["player_kills_bool_exp"]},ResolverInputTypes["player_kills_mutation_response"]],
update_player_kills_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["player_kills_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["player_kills_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["player_kills_pk_columns_input"]},ResolverInputTypes["player_kills"]],
update_player_kills_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["player_kills_updates"]>},ResolverInputTypes["player_kills_mutation_response"]],
update_player_objectives?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["player_objectives_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["player_objectives_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["player_objectives_bool_exp"]},ResolverInputTypes["player_objectives_mutation_response"]],
update_player_objectives_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["player_objectives_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["player_objectives_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["player_objectives_pk_columns_input"]},ResolverInputTypes["player_objectives"]],
update_player_objectives_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["player_objectives_updates"]>},ResolverInputTypes["player_objectives_mutation_response"]],
update_player_unused_utility?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["player_unused_utility_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["player_unused_utility_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["player_unused_utility_bool_exp"]},ResolverInputTypes["player_unused_utility_mutation_response"]],
update_player_unused_utility_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["player_unused_utility_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["player_unused_utility_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["player_unused_utility_pk_columns_input"]},ResolverInputTypes["player_unused_utility"]],
update_player_unused_utility_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["player_unused_utility_updates"]>},ResolverInputTypes["player_unused_utility_mutation_response"]],
update_player_utility?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["player_utility_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["player_utility_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["player_utility_bool_exp"]},ResolverInputTypes["player_utility_mutation_response"]],
update_player_utility_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["player_utility_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["player_utility_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["player_utility_pk_columns_input"]},ResolverInputTypes["player_utility"]],
update_player_utility_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["player_utility_updates"]>},ResolverInputTypes["player_utility_mutation_response"]],
update_players?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["players_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["players_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["players_bool_exp"]},ResolverInputTypes["players_mutation_response"]],
update_players_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["players_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["players_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["players_pk_columns_input"]},ResolverInputTypes["players"]],
update_players_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["players_updates"]>},ResolverInputTypes["players_mutation_response"]],
update_servers?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["servers_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["servers_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["servers_bool_exp"]},ResolverInputTypes["servers_mutation_response"]],
update_servers_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["servers_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["servers_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["servers_pk_columns_input"]},ResolverInputTypes["servers"]],
update_servers_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["servers_updates"]>},ResolverInputTypes["servers_mutation_response"]],
update_team_invites?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["team_invites_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["team_invites_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["team_invites_bool_exp"]},ResolverInputTypes["team_invites_mutation_response"]],
update_team_invites_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["team_invites_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["team_invites_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["team_invites_pk_columns_input"]},ResolverInputTypes["team_invites"]],
update_team_invites_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["team_invites_updates"]>},ResolverInputTypes["team_invites_mutation_response"]],
update_team_roster?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["team_roster_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["team_roster_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["team_roster_bool_exp"]},ResolverInputTypes["team_roster_mutation_response"]],
update_team_roster_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["team_roster_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["team_roster_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["team_roster_pk_columns_input"]},ResolverInputTypes["team_roster"]],
update_team_roster_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["team_roster_updates"]>},ResolverInputTypes["team_roster_mutation_response"]],
update_teams?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["teams_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["teams_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["teams_bool_exp"]},ResolverInputTypes["teams_mutation_response"]],
update_teams_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["teams_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["teams_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["teams_pk_columns_input"]},ResolverInputTypes["teams"]],
update_teams_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["teams_updates"]>},ResolverInputTypes["teams_mutation_response"]],
update_tournament_organizers?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["tournament_organizers_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["tournament_organizers_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["tournament_organizers_bool_exp"]},ResolverInputTypes["tournament_organizers_mutation_response"]],
update_tournament_organizers_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["tournament_organizers_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["tournament_organizers_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["tournament_organizers_pk_columns_input"]},ResolverInputTypes["tournament_organizers"]],
update_tournament_organizers_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["tournament_organizers_updates"]>},ResolverInputTypes["tournament_organizers_mutation_response"]],
update_tournament_roster?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["tournament_roster_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["tournament_roster_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["tournament_roster_bool_exp"]},ResolverInputTypes["tournament_roster_mutation_response"]],
update_tournament_roster_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["tournament_roster_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["tournament_roster_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["tournament_roster_pk_columns_input"]},ResolverInputTypes["tournament_roster"]],
update_tournament_roster_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["tournament_roster_updates"]>},ResolverInputTypes["tournament_roster_mutation_response"]],
update_tournament_servers?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["tournament_servers_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["tournament_servers_bool_exp"]},ResolverInputTypes["tournament_servers_mutation_response"]],
update_tournament_servers_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["tournament_servers_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["tournament_servers_pk_columns_input"]},ResolverInputTypes["tournament_servers"]],
update_tournament_servers_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["tournament_servers_updates"]>},ResolverInputTypes["tournament_servers_mutation_response"]],
update_tournament_stages?: [{	/** append existing jsonb value of filtered columns with new jsonb value */
	_append?: ResolverInputTypes["tournament_stages_append_input"] | undefined | null,	/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
	_delete_at_path?: ResolverInputTypes["tournament_stages_delete_at_path_input"] | undefined | null,	/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
	_delete_elem?: ResolverInputTypes["tournament_stages_delete_elem_input"] | undefined | null,	/** delete key/value pair or string element. key/value pairs are matched based on their key value */
	_delete_key?: ResolverInputTypes["tournament_stages_delete_key_input"] | undefined | null,	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["tournament_stages_inc_input"] | undefined | null,	/** prepend existing jsonb value of filtered columns with new jsonb value */
	_prepend?: ResolverInputTypes["tournament_stages_prepend_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["tournament_stages_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["tournament_stages_bool_exp"]},ResolverInputTypes["tournament_stages_mutation_response"]],
update_tournament_stages_by_pk?: [{	/** append existing jsonb value of filtered columns with new jsonb value */
	_append?: ResolverInputTypes["tournament_stages_append_input"] | undefined | null,	/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
	_delete_at_path?: ResolverInputTypes["tournament_stages_delete_at_path_input"] | undefined | null,	/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
	_delete_elem?: ResolverInputTypes["tournament_stages_delete_elem_input"] | undefined | null,	/** delete key/value pair or string element. key/value pairs are matched based on their key value */
	_delete_key?: ResolverInputTypes["tournament_stages_delete_key_input"] | undefined | null,	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["tournament_stages_inc_input"] | undefined | null,	/** prepend existing jsonb value of filtered columns with new jsonb value */
	_prepend?: ResolverInputTypes["tournament_stages_prepend_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["tournament_stages_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["tournament_stages_pk_columns_input"]},ResolverInputTypes["tournament_stages"]],
update_tournament_stages_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["tournament_stages_updates"]>},ResolverInputTypes["tournament_stages_mutation_response"]],
update_tournament_teams?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["tournament_teams_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["tournament_teams_bool_exp"]},ResolverInputTypes["tournament_teams_mutation_response"]],
update_tournament_teams_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["tournament_teams_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["tournament_teams_pk_columns_input"]},ResolverInputTypes["tournament_teams"]],
update_tournament_teams_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["tournament_teams_updates"]>},ResolverInputTypes["tournament_teams_mutation_response"]],
update_tournaments?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["tournaments_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["tournaments_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["tournaments_bool_exp"]},ResolverInputTypes["tournaments_mutation_response"]],
update_tournaments_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["tournaments_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["tournaments_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["tournaments_pk_columns_input"]},ResolverInputTypes["tournaments"]],
update_tournaments_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["tournaments_updates"]>},ResolverInputTypes["tournaments_mutation_response"]],
update_v_match_captains?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["v_match_captains_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["v_match_captains_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["v_match_captains_bool_exp"]},ResolverInputTypes["v_match_captains_mutation_response"]],
update_v_match_captains_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["v_match_captains_updates"]>},ResolverInputTypes["v_match_captains_mutation_response"]],
		__typename?: boolean | `@${string}`
}>;
	["numeric"]:unknown;
	/** Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'. */
["numeric_comparison_exp"]: {
	_eq?: ResolverInputTypes["numeric"] | undefined | null,
	_gt?: ResolverInputTypes["numeric"] | undefined | null,
	_gte?: ResolverInputTypes["numeric"] | undefined | null,
	_in?: Array<ResolverInputTypes["numeric"]> | undefined | null,
	_is_null?: boolean | undefined | null,
	_lt?: ResolverInputTypes["numeric"] | undefined | null,
	_lte?: ResolverInputTypes["numeric"] | undefined | null,
	_neq?: ResolverInputTypes["numeric"] | undefined | null,
	_nin?: Array<ResolverInputTypes["numeric"]> | undefined | null
};
	/** column ordering options */
["order_by"]:order_by;
	/** columns and relationships of "player_assists" */
["player_assists"]: AliasType<{
	/** An object relationship */
	attacked_player?:ResolverInputTypes["players"],
	attacked_steam_id?:boolean | `@${string}`,
	attacked_team?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	attacker_team?:boolean | `@${string}`,
	flash?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** An object relationship */
	match?:ResolverInputTypes["matches"],
	match_id?:boolean | `@${string}`,
	/** An object relationship */
	match_map?:ResolverInputTypes["match_maps"],
	match_map_id?:boolean | `@${string}`,
	/** An object relationship */
	player?:ResolverInputTypes["players"],
	round?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "player_assists" */
["player_assists_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["player_assists_aggregate_fields"],
	nodes?:ResolverInputTypes["player_assists"],
		__typename?: boolean | `@${string}`
}>;
	["player_assists_aggregate_bool_exp"]: {
	bool_and?: ResolverInputTypes["player_assists_aggregate_bool_exp_bool_and"] | undefined | null,
	bool_or?: ResolverInputTypes["player_assists_aggregate_bool_exp_bool_or"] | undefined | null,
	count?: ResolverInputTypes["player_assists_aggregate_bool_exp_count"] | undefined | null
};
	["player_assists_aggregate_bool_exp_bool_and"]: {
	arguments: ResolverInputTypes["player_assists_select_column_player_assists_aggregate_bool_exp_bool_and_arguments_columns"],
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["player_assists_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Boolean_comparison_exp"]
};
	["player_assists_aggregate_bool_exp_bool_or"]: {
	arguments: ResolverInputTypes["player_assists_select_column_player_assists_aggregate_bool_exp_bool_or_arguments_columns"],
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["player_assists_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Boolean_comparison_exp"]
};
	["player_assists_aggregate_bool_exp_count"]: {
	arguments?: Array<ResolverInputTypes["player_assists_select_column"]> | undefined | null,
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["player_assists_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Int_comparison_exp"]
};
	/** aggregate fields of "player_assists" */
["player_assists_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["player_assists_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["player_assists_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["player_assists_max_fields"],
	min?:ResolverInputTypes["player_assists_min_fields"],
	stddev?:ResolverInputTypes["player_assists_stddev_fields"],
	stddev_pop?:ResolverInputTypes["player_assists_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["player_assists_stddev_samp_fields"],
	sum?:ResolverInputTypes["player_assists_sum_fields"],
	var_pop?:ResolverInputTypes["player_assists_var_pop_fields"],
	var_samp?:ResolverInputTypes["player_assists_var_samp_fields"],
	variance?:ResolverInputTypes["player_assists_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "player_assists" */
["player_assists_aggregate_order_by"]: {
	avg?: ResolverInputTypes["player_assists_avg_order_by"] | undefined | null,
	count?: ResolverInputTypes["order_by"] | undefined | null,
	max?: ResolverInputTypes["player_assists_max_order_by"] | undefined | null,
	min?: ResolverInputTypes["player_assists_min_order_by"] | undefined | null,
	stddev?: ResolverInputTypes["player_assists_stddev_order_by"] | undefined | null,
	stddev_pop?: ResolverInputTypes["player_assists_stddev_pop_order_by"] | undefined | null,
	stddev_samp?: ResolverInputTypes["player_assists_stddev_samp_order_by"] | undefined | null,
	sum?: ResolverInputTypes["player_assists_sum_order_by"] | undefined | null,
	var_pop?: ResolverInputTypes["player_assists_var_pop_order_by"] | undefined | null,
	var_samp?: ResolverInputTypes["player_assists_var_samp_order_by"] | undefined | null,
	variance?: ResolverInputTypes["player_assists_variance_order_by"] | undefined | null
};
	/** input type for inserting array relation for remote table "player_assists" */
["player_assists_arr_rel_insert_input"]: {
	data: Array<ResolverInputTypes["player_assists_insert_input"]>,
	/** upsert condition */
	on_conflict?: ResolverInputTypes["player_assists_on_conflict"] | undefined | null
};
	/** aggregate avg on columns */
["player_assists_avg_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "player_assists" */
["player_assists_avg_order_by"]: {
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Boolean expression to filter rows from the table "player_assists". All fields are combined with a logical 'AND'. */
["player_assists_bool_exp"]: {
	_and?: Array<ResolverInputTypes["player_assists_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["player_assists_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["player_assists_bool_exp"]> | undefined | null,
	attacked_player?: ResolverInputTypes["players_bool_exp"] | undefined | null,
	attacked_steam_id?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null,
	attacked_team?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null,
	attacker_team?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	flash?: ResolverInputTypes["Boolean_comparison_exp"] | undefined | null,
	id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	match?: ResolverInputTypes["matches_bool_exp"] | undefined | null,
	match_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	match_map?: ResolverInputTypes["match_maps_bool_exp"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	player?: ResolverInputTypes["players_bool_exp"] | undefined | null,
	round?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	time?: ResolverInputTypes["timestamptz_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "player_assists" */
["player_assists_constraint"]:player_assists_constraint;
	/** input type for incrementing numeric columns in table "player_assists" */
["player_assists_inc_input"]: {
	attacked_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	round?: number | undefined | null
};
	/** input type for inserting data into table "player_assists" */
["player_assists_insert_input"]: {
	attacked_player?: ResolverInputTypes["players_obj_rel_insert_input"] | undefined | null,
	attacked_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	attacked_team?: string | undefined | null,
	attacker_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	attacker_team?: string | undefined | null,
	flash?: boolean | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	match?: ResolverInputTypes["matches_obj_rel_insert_input"] | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	match_map?: ResolverInputTypes["match_maps_obj_rel_insert_input"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid"] | undefined | null,
	player?: ResolverInputTypes["players_obj_rel_insert_input"] | undefined | null,
	round?: number | undefined | null,
	time?: ResolverInputTypes["timestamptz"] | undefined | null
};
	/** aggregate max on columns */
["player_assists_max_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacked_team?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	attacker_team?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "player_assists" */
["player_assists_max_order_by"]: {
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacked_team?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_team?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	match_map_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null,
	time?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate min on columns */
["player_assists_min_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacked_team?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	attacker_team?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "player_assists" */
["player_assists_min_order_by"]: {
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacked_team?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_team?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	match_map_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null,
	time?: ResolverInputTypes["order_by"] | undefined | null
};
	/** response of any mutation on the table "player_assists" */
["player_assists_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["player_assists"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "player_assists" */
["player_assists_on_conflict"]: {
	constraint: ResolverInputTypes["player_assists_constraint"],
	update_columns: Array<ResolverInputTypes["player_assists_update_column"]>,
	where?: ResolverInputTypes["player_assists_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "player_assists". */
["player_assists_order_by"]: {
	attacked_player?: ResolverInputTypes["players_order_by"] | undefined | null,
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacked_team?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_team?: ResolverInputTypes["order_by"] | undefined | null,
	flash?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	match?: ResolverInputTypes["matches_order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	match_map?: ResolverInputTypes["match_maps_order_by"] | undefined | null,
	match_map_id?: ResolverInputTypes["order_by"] | undefined | null,
	player?: ResolverInputTypes["players_order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null,
	time?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: player_assists */
["player_assists_pk_columns_input"]: {
	id: ResolverInputTypes["uuid"]
};
	/** select columns of table "player_assists" */
["player_assists_select_column"]:player_assists_select_column;
	/** select "player_assists_aggregate_bool_exp_bool_and_arguments_columns" columns of table "player_assists" */
["player_assists_select_column_player_assists_aggregate_bool_exp_bool_and_arguments_columns"]:player_assists_select_column_player_assists_aggregate_bool_exp_bool_and_arguments_columns;
	/** select "player_assists_aggregate_bool_exp_bool_or_arguments_columns" columns of table "player_assists" */
["player_assists_select_column_player_assists_aggregate_bool_exp_bool_or_arguments_columns"]:player_assists_select_column_player_assists_aggregate_bool_exp_bool_or_arguments_columns;
	/** input type for updating data in table "player_assists" */
["player_assists_set_input"]: {
	attacked_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	attacked_team?: string | undefined | null,
	attacker_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	attacker_team?: string | undefined | null,
	flash?: boolean | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid"] | undefined | null,
	round?: number | undefined | null,
	time?: ResolverInputTypes["timestamptz"] | undefined | null
};
	/** aggregate stddev on columns */
["player_assists_stddev_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "player_assists" */
["player_assists_stddev_order_by"]: {
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_pop on columns */
["player_assists_stddev_pop_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "player_assists" */
["player_assists_stddev_pop_order_by"]: {
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_samp on columns */
["player_assists_stddev_samp_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "player_assists" */
["player_assists_stddev_samp_order_by"]: {
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Streaming cursor of the table "player_assists" */
["player_assists_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["player_assists_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["player_assists_stream_cursor_value_input"]: {
	attacked_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	attacked_team?: string | undefined | null,
	attacker_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	attacker_team?: string | undefined | null,
	flash?: boolean | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid"] | undefined | null,
	round?: number | undefined | null,
	time?: ResolverInputTypes["timestamptz"] | undefined | null
};
	/** aggregate sum on columns */
["player_assists_sum_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "player_assists" */
["player_assists_sum_order_by"]: {
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** update columns of table "player_assists" */
["player_assists_update_column"]:player_assists_update_column;
	["player_assists_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["player_assists_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["player_assists_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["player_assists_bool_exp"]
};
	/** aggregate var_pop on columns */
["player_assists_var_pop_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "player_assists" */
["player_assists_var_pop_order_by"]: {
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate var_samp on columns */
["player_assists_var_samp_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "player_assists" */
["player_assists_var_samp_order_by"]: {
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate variance on columns */
["player_assists_variance_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "player_assists" */
["player_assists_variance_order_by"]: {
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** columns and relationships of "player_damages" */
["player_damages"]: AliasType<{
	armor?:boolean | `@${string}`,
	attacked_location?:boolean | `@${string}`,
	attacked_location_coordinates?:boolean | `@${string}`,
	/** An object relationship */
	attacked_player?:ResolverInputTypes["players"],
	attacked_steam_id?:boolean | `@${string}`,
	attacked_team?:boolean | `@${string}`,
	attacker_location?:boolean | `@${string}`,
	attacker_location_coordinates?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	attacker_team?:boolean | `@${string}`,
	damage?:boolean | `@${string}`,
	damage_armor?:boolean | `@${string}`,
	health?:boolean | `@${string}`,
	hitgroup?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** An object relationship */
	match?:ResolverInputTypes["matches"],
	match_id?:boolean | `@${string}`,
	/** An object relationship */
	match_map?:ResolverInputTypes["match_maps"],
	match_map_id?:boolean | `@${string}`,
	/** An object relationship */
	player?:ResolverInputTypes["players"],
	round?:boolean | `@${string}`,
	/** A computed field, executes function "is_team_damage" */
	team_damage?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
	with?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "player_damages" */
["player_damages_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["player_damages_aggregate_fields"],
	nodes?:ResolverInputTypes["player_damages"],
		__typename?: boolean | `@${string}`
}>;
	["player_damages_aggregate_bool_exp"]: {
	count?: ResolverInputTypes["player_damages_aggregate_bool_exp_count"] | undefined | null
};
	["player_damages_aggregate_bool_exp_count"]: {
	arguments?: Array<ResolverInputTypes["player_damages_select_column"]> | undefined | null,
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["player_damages_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Int_comparison_exp"]
};
	/** aggregate fields of "player_damages" */
["player_damages_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["player_damages_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["player_damages_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["player_damages_max_fields"],
	min?:ResolverInputTypes["player_damages_min_fields"],
	stddev?:ResolverInputTypes["player_damages_stddev_fields"],
	stddev_pop?:ResolverInputTypes["player_damages_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["player_damages_stddev_samp_fields"],
	sum?:ResolverInputTypes["player_damages_sum_fields"],
	var_pop?:ResolverInputTypes["player_damages_var_pop_fields"],
	var_samp?:ResolverInputTypes["player_damages_var_samp_fields"],
	variance?:ResolverInputTypes["player_damages_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "player_damages" */
["player_damages_aggregate_order_by"]: {
	avg?: ResolverInputTypes["player_damages_avg_order_by"] | undefined | null,
	count?: ResolverInputTypes["order_by"] | undefined | null,
	max?: ResolverInputTypes["player_damages_max_order_by"] | undefined | null,
	min?: ResolverInputTypes["player_damages_min_order_by"] | undefined | null,
	stddev?: ResolverInputTypes["player_damages_stddev_order_by"] | undefined | null,
	stddev_pop?: ResolverInputTypes["player_damages_stddev_pop_order_by"] | undefined | null,
	stddev_samp?: ResolverInputTypes["player_damages_stddev_samp_order_by"] | undefined | null,
	sum?: ResolverInputTypes["player_damages_sum_order_by"] | undefined | null,
	var_pop?: ResolverInputTypes["player_damages_var_pop_order_by"] | undefined | null,
	var_samp?: ResolverInputTypes["player_damages_var_samp_order_by"] | undefined | null,
	variance?: ResolverInputTypes["player_damages_variance_order_by"] | undefined | null
};
	/** input type for inserting array relation for remote table "player_damages" */
["player_damages_arr_rel_insert_input"]: {
	data: Array<ResolverInputTypes["player_damages_insert_input"]>,
	/** upsert condition */
	on_conflict?: ResolverInputTypes["player_damages_on_conflict"] | undefined | null
};
	/** aggregate avg on columns */
["player_damages_avg_fields"]: AliasType<{
	armor?:boolean | `@${string}`,
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	damage?:boolean | `@${string}`,
	damage_armor?:boolean | `@${string}`,
	health?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "player_damages" */
["player_damages_avg_order_by"]: {
	armor?: ResolverInputTypes["order_by"] | undefined | null,
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	damage?: ResolverInputTypes["order_by"] | undefined | null,
	damage_armor?: ResolverInputTypes["order_by"] | undefined | null,
	health?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Boolean expression to filter rows from the table "player_damages". All fields are combined with a logical 'AND'. */
["player_damages_bool_exp"]: {
	_and?: Array<ResolverInputTypes["player_damages_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["player_damages_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["player_damages_bool_exp"]> | undefined | null,
	armor?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	attacked_location?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	attacked_location_coordinates?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	attacked_player?: ResolverInputTypes["players_bool_exp"] | undefined | null,
	attacked_steam_id?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null,
	attacked_team?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	attacker_location?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	attacker_location_coordinates?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null,
	attacker_team?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	damage?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	damage_armor?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	health?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	hitgroup?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	match?: ResolverInputTypes["matches_bool_exp"] | undefined | null,
	match_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	match_map?: ResolverInputTypes["match_maps_bool_exp"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	player?: ResolverInputTypes["players_bool_exp"] | undefined | null,
	round?: ResolverInputTypes["numeric_comparison_exp"] | undefined | null,
	team_damage?: ResolverInputTypes["Boolean_comparison_exp"] | undefined | null,
	time?: ResolverInputTypes["timestamptz_comparison_exp"] | undefined | null,
	with?: ResolverInputTypes["String_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "player_damages" */
["player_damages_constraint"]:player_damages_constraint;
	/** input type for incrementing numeric columns in table "player_damages" */
["player_damages_inc_input"]: {
	armor?: number | undefined | null,
	attacked_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	damage?: number | undefined | null,
	damage_armor?: number | undefined | null,
	health?: number | undefined | null,
	round?: ResolverInputTypes["numeric"] | undefined | null
};
	/** input type for inserting data into table "player_damages" */
["player_damages_insert_input"]: {
	armor?: number | undefined | null,
	attacked_location?: string | undefined | null,
	attacked_location_coordinates?: string | undefined | null,
	attacked_player?: ResolverInputTypes["players_obj_rel_insert_input"] | undefined | null,
	attacked_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	attacked_team?: string | undefined | null,
	attacker_location?: string | undefined | null,
	attacker_location_coordinates?: string | undefined | null,
	attacker_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	attacker_team?: string | undefined | null,
	damage?: number | undefined | null,
	damage_armor?: number | undefined | null,
	health?: number | undefined | null,
	hitgroup?: string | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	match?: ResolverInputTypes["matches_obj_rel_insert_input"] | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	match_map?: ResolverInputTypes["match_maps_obj_rel_insert_input"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid"] | undefined | null,
	player?: ResolverInputTypes["players_obj_rel_insert_input"] | undefined | null,
	round?: ResolverInputTypes["numeric"] | undefined | null,
	time?: ResolverInputTypes["timestamptz"] | undefined | null,
	with?: string | undefined | null
};
	/** aggregate max on columns */
["player_damages_max_fields"]: AliasType<{
	armor?:boolean | `@${string}`,
	attacked_location?:boolean | `@${string}`,
	attacked_location_coordinates?:boolean | `@${string}`,
	attacked_steam_id?:boolean | `@${string}`,
	attacked_team?:boolean | `@${string}`,
	attacker_location?:boolean | `@${string}`,
	attacker_location_coordinates?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	attacker_team?:boolean | `@${string}`,
	damage?:boolean | `@${string}`,
	damage_armor?:boolean | `@${string}`,
	health?:boolean | `@${string}`,
	hitgroup?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
	with?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "player_damages" */
["player_damages_max_order_by"]: {
	armor?: ResolverInputTypes["order_by"] | undefined | null,
	attacked_location?: ResolverInputTypes["order_by"] | undefined | null,
	attacked_location_coordinates?: ResolverInputTypes["order_by"] | undefined | null,
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacked_team?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_location?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_location_coordinates?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_team?: ResolverInputTypes["order_by"] | undefined | null,
	damage?: ResolverInputTypes["order_by"] | undefined | null,
	damage_armor?: ResolverInputTypes["order_by"] | undefined | null,
	health?: ResolverInputTypes["order_by"] | undefined | null,
	hitgroup?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	match_map_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null,
	time?: ResolverInputTypes["order_by"] | undefined | null,
	with?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate min on columns */
["player_damages_min_fields"]: AliasType<{
	armor?:boolean | `@${string}`,
	attacked_location?:boolean | `@${string}`,
	attacked_location_coordinates?:boolean | `@${string}`,
	attacked_steam_id?:boolean | `@${string}`,
	attacked_team?:boolean | `@${string}`,
	attacker_location?:boolean | `@${string}`,
	attacker_location_coordinates?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	attacker_team?:boolean | `@${string}`,
	damage?:boolean | `@${string}`,
	damage_armor?:boolean | `@${string}`,
	health?:boolean | `@${string}`,
	hitgroup?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
	with?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "player_damages" */
["player_damages_min_order_by"]: {
	armor?: ResolverInputTypes["order_by"] | undefined | null,
	attacked_location?: ResolverInputTypes["order_by"] | undefined | null,
	attacked_location_coordinates?: ResolverInputTypes["order_by"] | undefined | null,
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacked_team?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_location?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_location_coordinates?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_team?: ResolverInputTypes["order_by"] | undefined | null,
	damage?: ResolverInputTypes["order_by"] | undefined | null,
	damage_armor?: ResolverInputTypes["order_by"] | undefined | null,
	health?: ResolverInputTypes["order_by"] | undefined | null,
	hitgroup?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	match_map_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null,
	time?: ResolverInputTypes["order_by"] | undefined | null,
	with?: ResolverInputTypes["order_by"] | undefined | null
};
	/** response of any mutation on the table "player_damages" */
["player_damages_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["player_damages"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "player_damages" */
["player_damages_on_conflict"]: {
	constraint: ResolverInputTypes["player_damages_constraint"],
	update_columns: Array<ResolverInputTypes["player_damages_update_column"]>,
	where?: ResolverInputTypes["player_damages_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "player_damages". */
["player_damages_order_by"]: {
	armor?: ResolverInputTypes["order_by"] | undefined | null,
	attacked_location?: ResolverInputTypes["order_by"] | undefined | null,
	attacked_location_coordinates?: ResolverInputTypes["order_by"] | undefined | null,
	attacked_player?: ResolverInputTypes["players_order_by"] | undefined | null,
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacked_team?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_location?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_location_coordinates?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_team?: ResolverInputTypes["order_by"] | undefined | null,
	damage?: ResolverInputTypes["order_by"] | undefined | null,
	damage_armor?: ResolverInputTypes["order_by"] | undefined | null,
	health?: ResolverInputTypes["order_by"] | undefined | null,
	hitgroup?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	match?: ResolverInputTypes["matches_order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	match_map?: ResolverInputTypes["match_maps_order_by"] | undefined | null,
	match_map_id?: ResolverInputTypes["order_by"] | undefined | null,
	player?: ResolverInputTypes["players_order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null,
	team_damage?: ResolverInputTypes["order_by"] | undefined | null,
	time?: ResolverInputTypes["order_by"] | undefined | null,
	with?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: player_damages */
["player_damages_pk_columns_input"]: {
	id: ResolverInputTypes["uuid"]
};
	/** select columns of table "player_damages" */
["player_damages_select_column"]:player_damages_select_column;
	/** input type for updating data in table "player_damages" */
["player_damages_set_input"]: {
	armor?: number | undefined | null,
	attacked_location?: string | undefined | null,
	attacked_location_coordinates?: string | undefined | null,
	attacked_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	attacked_team?: string | undefined | null,
	attacker_location?: string | undefined | null,
	attacker_location_coordinates?: string | undefined | null,
	attacker_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	attacker_team?: string | undefined | null,
	damage?: number | undefined | null,
	damage_armor?: number | undefined | null,
	health?: number | undefined | null,
	hitgroup?: string | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid"] | undefined | null,
	round?: ResolverInputTypes["numeric"] | undefined | null,
	time?: ResolverInputTypes["timestamptz"] | undefined | null,
	with?: string | undefined | null
};
	/** aggregate stddev on columns */
["player_damages_stddev_fields"]: AliasType<{
	armor?:boolean | `@${string}`,
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	damage?:boolean | `@${string}`,
	damage_armor?:boolean | `@${string}`,
	health?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "player_damages" */
["player_damages_stddev_order_by"]: {
	armor?: ResolverInputTypes["order_by"] | undefined | null,
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	damage?: ResolverInputTypes["order_by"] | undefined | null,
	damage_armor?: ResolverInputTypes["order_by"] | undefined | null,
	health?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_pop on columns */
["player_damages_stddev_pop_fields"]: AliasType<{
	armor?:boolean | `@${string}`,
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	damage?:boolean | `@${string}`,
	damage_armor?:boolean | `@${string}`,
	health?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "player_damages" */
["player_damages_stddev_pop_order_by"]: {
	armor?: ResolverInputTypes["order_by"] | undefined | null,
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	damage?: ResolverInputTypes["order_by"] | undefined | null,
	damage_armor?: ResolverInputTypes["order_by"] | undefined | null,
	health?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_samp on columns */
["player_damages_stddev_samp_fields"]: AliasType<{
	armor?:boolean | `@${string}`,
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	damage?:boolean | `@${string}`,
	damage_armor?:boolean | `@${string}`,
	health?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "player_damages" */
["player_damages_stddev_samp_order_by"]: {
	armor?: ResolverInputTypes["order_by"] | undefined | null,
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	damage?: ResolverInputTypes["order_by"] | undefined | null,
	damage_armor?: ResolverInputTypes["order_by"] | undefined | null,
	health?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Streaming cursor of the table "player_damages" */
["player_damages_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["player_damages_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["player_damages_stream_cursor_value_input"]: {
	armor?: number | undefined | null,
	attacked_location?: string | undefined | null,
	attacked_location_coordinates?: string | undefined | null,
	attacked_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	attacked_team?: string | undefined | null,
	attacker_location?: string | undefined | null,
	attacker_location_coordinates?: string | undefined | null,
	attacker_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	attacker_team?: string | undefined | null,
	damage?: number | undefined | null,
	damage_armor?: number | undefined | null,
	health?: number | undefined | null,
	hitgroup?: string | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid"] | undefined | null,
	round?: ResolverInputTypes["numeric"] | undefined | null,
	time?: ResolverInputTypes["timestamptz"] | undefined | null,
	with?: string | undefined | null
};
	/** aggregate sum on columns */
["player_damages_sum_fields"]: AliasType<{
	armor?:boolean | `@${string}`,
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	damage?:boolean | `@${string}`,
	damage_armor?:boolean | `@${string}`,
	health?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "player_damages" */
["player_damages_sum_order_by"]: {
	armor?: ResolverInputTypes["order_by"] | undefined | null,
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	damage?: ResolverInputTypes["order_by"] | undefined | null,
	damage_armor?: ResolverInputTypes["order_by"] | undefined | null,
	health?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** update columns of table "player_damages" */
["player_damages_update_column"]:player_damages_update_column;
	["player_damages_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["player_damages_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["player_damages_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["player_damages_bool_exp"]
};
	/** aggregate var_pop on columns */
["player_damages_var_pop_fields"]: AliasType<{
	armor?:boolean | `@${string}`,
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	damage?:boolean | `@${string}`,
	damage_armor?:boolean | `@${string}`,
	health?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "player_damages" */
["player_damages_var_pop_order_by"]: {
	armor?: ResolverInputTypes["order_by"] | undefined | null,
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	damage?: ResolverInputTypes["order_by"] | undefined | null,
	damage_armor?: ResolverInputTypes["order_by"] | undefined | null,
	health?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate var_samp on columns */
["player_damages_var_samp_fields"]: AliasType<{
	armor?:boolean | `@${string}`,
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	damage?:boolean | `@${string}`,
	damage_armor?:boolean | `@${string}`,
	health?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "player_damages" */
["player_damages_var_samp_order_by"]: {
	armor?: ResolverInputTypes["order_by"] | undefined | null,
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	damage?: ResolverInputTypes["order_by"] | undefined | null,
	damage_armor?: ResolverInputTypes["order_by"] | undefined | null,
	health?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate variance on columns */
["player_damages_variance_fields"]: AliasType<{
	armor?:boolean | `@${string}`,
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	damage?:boolean | `@${string}`,
	damage_armor?:boolean | `@${string}`,
	health?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "player_damages" */
["player_damages_variance_order_by"]: {
	armor?: ResolverInputTypes["order_by"] | undefined | null,
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	damage?: ResolverInputTypes["order_by"] | undefined | null,
	damage_armor?: ResolverInputTypes["order_by"] | undefined | null,
	health?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** columns and relationships of "player_flashes" */
["player_flashes"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	/** An object relationship */
	blinded?:ResolverInputTypes["players"],
	duration?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** An object relationship */
	match?:ResolverInputTypes["matches"],
	match_id?:boolean | `@${string}`,
	/** An object relationship */
	match_map?:ResolverInputTypes["match_maps"],
	match_map_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	team_flash?:boolean | `@${string}`,
	/** An object relationship */
	thrown_by?:ResolverInputTypes["players"],
	time?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "player_flashes" */
["player_flashes_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["player_flashes_aggregate_fields"],
	nodes?:ResolverInputTypes["player_flashes"],
		__typename?: boolean | `@${string}`
}>;
	["player_flashes_aggregate_bool_exp"]: {
	bool_and?: ResolverInputTypes["player_flashes_aggregate_bool_exp_bool_and"] | undefined | null,
	bool_or?: ResolverInputTypes["player_flashes_aggregate_bool_exp_bool_or"] | undefined | null,
	count?: ResolverInputTypes["player_flashes_aggregate_bool_exp_count"] | undefined | null
};
	["player_flashes_aggregate_bool_exp_bool_and"]: {
	arguments: ResolverInputTypes["player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_and_arguments_columns"],
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["player_flashes_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Boolean_comparison_exp"]
};
	["player_flashes_aggregate_bool_exp_bool_or"]: {
	arguments: ResolverInputTypes["player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_or_arguments_columns"],
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["player_flashes_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Boolean_comparison_exp"]
};
	["player_flashes_aggregate_bool_exp_count"]: {
	arguments?: Array<ResolverInputTypes["player_flashes_select_column"]> | undefined | null,
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["player_flashes_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Int_comparison_exp"]
};
	/** aggregate fields of "player_flashes" */
["player_flashes_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["player_flashes_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["player_flashes_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["player_flashes_max_fields"],
	min?:ResolverInputTypes["player_flashes_min_fields"],
	stddev?:ResolverInputTypes["player_flashes_stddev_fields"],
	stddev_pop?:ResolverInputTypes["player_flashes_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["player_flashes_stddev_samp_fields"],
	sum?:ResolverInputTypes["player_flashes_sum_fields"],
	var_pop?:ResolverInputTypes["player_flashes_var_pop_fields"],
	var_samp?:ResolverInputTypes["player_flashes_var_samp_fields"],
	variance?:ResolverInputTypes["player_flashes_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "player_flashes" */
["player_flashes_aggregate_order_by"]: {
	avg?: ResolverInputTypes["player_flashes_avg_order_by"] | undefined | null,
	count?: ResolverInputTypes["order_by"] | undefined | null,
	max?: ResolverInputTypes["player_flashes_max_order_by"] | undefined | null,
	min?: ResolverInputTypes["player_flashes_min_order_by"] | undefined | null,
	stddev?: ResolverInputTypes["player_flashes_stddev_order_by"] | undefined | null,
	stddev_pop?: ResolverInputTypes["player_flashes_stddev_pop_order_by"] | undefined | null,
	stddev_samp?: ResolverInputTypes["player_flashes_stddev_samp_order_by"] | undefined | null,
	sum?: ResolverInputTypes["player_flashes_sum_order_by"] | undefined | null,
	var_pop?: ResolverInputTypes["player_flashes_var_pop_order_by"] | undefined | null,
	var_samp?: ResolverInputTypes["player_flashes_var_samp_order_by"] | undefined | null,
	variance?: ResolverInputTypes["player_flashes_variance_order_by"] | undefined | null
};
	/** input type for inserting array relation for remote table "player_flashes" */
["player_flashes_arr_rel_insert_input"]: {
	data: Array<ResolverInputTypes["player_flashes_insert_input"]>,
	/** upsert condition */
	on_conflict?: ResolverInputTypes["player_flashes_on_conflict"] | undefined | null
};
	/** aggregate avg on columns */
["player_flashes_avg_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	duration?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "player_flashes" */
["player_flashes_avg_order_by"]: {
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	duration?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Boolean expression to filter rows from the table "player_flashes". All fields are combined with a logical 'AND'. */
["player_flashes_bool_exp"]: {
	_and?: Array<ResolverInputTypes["player_flashes_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["player_flashes_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["player_flashes_bool_exp"]> | undefined | null,
	attacked_steam_id?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null,
	blinded?: ResolverInputTypes["players_bool_exp"] | undefined | null,
	duration?: ResolverInputTypes["numeric_comparison_exp"] | undefined | null,
	id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	match?: ResolverInputTypes["matches_bool_exp"] | undefined | null,
	match_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	match_map?: ResolverInputTypes["match_maps_bool_exp"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	round?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	team_flash?: ResolverInputTypes["Boolean_comparison_exp"] | undefined | null,
	thrown_by?: ResolverInputTypes["players_bool_exp"] | undefined | null,
	time?: ResolverInputTypes["timestamptz_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "player_flashes" */
["player_flashes_constraint"]:player_flashes_constraint;
	/** input type for incrementing numeric columns in table "player_flashes" */
["player_flashes_inc_input"]: {
	attacked_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	duration?: ResolverInputTypes["numeric"] | undefined | null,
	round?: number | undefined | null
};
	/** input type for inserting data into table "player_flashes" */
["player_flashes_insert_input"]: {
	attacked_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	blinded?: ResolverInputTypes["players_obj_rel_insert_input"] | undefined | null,
	duration?: ResolverInputTypes["numeric"] | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	match?: ResolverInputTypes["matches_obj_rel_insert_input"] | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	match_map?: ResolverInputTypes["match_maps_obj_rel_insert_input"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid"] | undefined | null,
	round?: number | undefined | null,
	team_flash?: boolean | undefined | null,
	thrown_by?: ResolverInputTypes["players_obj_rel_insert_input"] | undefined | null,
	time?: ResolverInputTypes["timestamptz"] | undefined | null
};
	/** aggregate max on columns */
["player_flashes_max_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	duration?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "player_flashes" */
["player_flashes_max_order_by"]: {
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	duration?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	match_map_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null,
	time?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate min on columns */
["player_flashes_min_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	duration?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "player_flashes" */
["player_flashes_min_order_by"]: {
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	duration?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	match_map_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null,
	time?: ResolverInputTypes["order_by"] | undefined | null
};
	/** response of any mutation on the table "player_flashes" */
["player_flashes_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["player_flashes"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "player_flashes" */
["player_flashes_on_conflict"]: {
	constraint: ResolverInputTypes["player_flashes_constraint"],
	update_columns: Array<ResolverInputTypes["player_flashes_update_column"]>,
	where?: ResolverInputTypes["player_flashes_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "player_flashes". */
["player_flashes_order_by"]: {
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	blinded?: ResolverInputTypes["players_order_by"] | undefined | null,
	duration?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	match?: ResolverInputTypes["matches_order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	match_map?: ResolverInputTypes["match_maps_order_by"] | undefined | null,
	match_map_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null,
	team_flash?: ResolverInputTypes["order_by"] | undefined | null,
	thrown_by?: ResolverInputTypes["players_order_by"] | undefined | null,
	time?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: player_flashes */
["player_flashes_pk_columns_input"]: {
	id: ResolverInputTypes["uuid"]
};
	/** select columns of table "player_flashes" */
["player_flashes_select_column"]:player_flashes_select_column;
	/** select "player_flashes_aggregate_bool_exp_bool_and_arguments_columns" columns of table "player_flashes" */
["player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_and_arguments_columns"]:player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_and_arguments_columns;
	/** select "player_flashes_aggregate_bool_exp_bool_or_arguments_columns" columns of table "player_flashes" */
["player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_or_arguments_columns"]:player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_or_arguments_columns;
	/** input type for updating data in table "player_flashes" */
["player_flashes_set_input"]: {
	attacked_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	duration?: ResolverInputTypes["numeric"] | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid"] | undefined | null,
	round?: number | undefined | null,
	team_flash?: boolean | undefined | null,
	time?: ResolverInputTypes["timestamptz"] | undefined | null
};
	/** aggregate stddev on columns */
["player_flashes_stddev_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	duration?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "player_flashes" */
["player_flashes_stddev_order_by"]: {
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	duration?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_pop on columns */
["player_flashes_stddev_pop_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	duration?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "player_flashes" */
["player_flashes_stddev_pop_order_by"]: {
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	duration?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_samp on columns */
["player_flashes_stddev_samp_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	duration?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "player_flashes" */
["player_flashes_stddev_samp_order_by"]: {
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	duration?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Streaming cursor of the table "player_flashes" */
["player_flashes_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["player_flashes_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["player_flashes_stream_cursor_value_input"]: {
	attacked_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	duration?: ResolverInputTypes["numeric"] | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid"] | undefined | null,
	round?: number | undefined | null,
	team_flash?: boolean | undefined | null,
	time?: ResolverInputTypes["timestamptz"] | undefined | null
};
	/** aggregate sum on columns */
["player_flashes_sum_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	duration?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "player_flashes" */
["player_flashes_sum_order_by"]: {
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	duration?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** update columns of table "player_flashes" */
["player_flashes_update_column"]:player_flashes_update_column;
	["player_flashes_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["player_flashes_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["player_flashes_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["player_flashes_bool_exp"]
};
	/** aggregate var_pop on columns */
["player_flashes_var_pop_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	duration?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "player_flashes" */
["player_flashes_var_pop_order_by"]: {
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	duration?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate var_samp on columns */
["player_flashes_var_samp_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	duration?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "player_flashes" */
["player_flashes_var_samp_order_by"]: {
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	duration?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate variance on columns */
["player_flashes_variance_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	duration?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "player_flashes" */
["player_flashes_variance_order_by"]: {
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	duration?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** columns and relationships of "player_kills" */
["player_kills"]: AliasType<{
	assisted?:boolean | `@${string}`,
	attacked_location?:boolean | `@${string}`,
	attacked_location_coordinates?:boolean | `@${string}`,
	/** An object relationship */
	attacked_player?:ResolverInputTypes["players"],
	attacked_steam_id?:boolean | `@${string}`,
	attacked_team?:boolean | `@${string}`,
	attacker_location?:boolean | `@${string}`,
	attacker_location_coordinates?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	attacker_team?:boolean | `@${string}`,
	blinded?:boolean | `@${string}`,
	headshot?:boolean | `@${string}`,
	hitgroup?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	in_air?:boolean | `@${string}`,
	/** An object relationship */
	match?:ResolverInputTypes["matches"],
	match_id?:boolean | `@${string}`,
	/** An object relationship */
	match_map?:ResolverInputTypes["match_maps"],
	match_map_id?:boolean | `@${string}`,
	no_scope?:boolean | `@${string}`,
	/** An object relationship */
	player?:ResolverInputTypes["players"],
	round?:boolean | `@${string}`,
	thru_smoke?:boolean | `@${string}`,
	thru_wall?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
	with?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "player_kills" */
["player_kills_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["player_kills_aggregate_fields"],
	nodes?:ResolverInputTypes["player_kills"],
		__typename?: boolean | `@${string}`
}>;
	["player_kills_aggregate_bool_exp"]: {
	bool_and?: ResolverInputTypes["player_kills_aggregate_bool_exp_bool_and"] | undefined | null,
	bool_or?: ResolverInputTypes["player_kills_aggregate_bool_exp_bool_or"] | undefined | null,
	count?: ResolverInputTypes["player_kills_aggregate_bool_exp_count"] | undefined | null
};
	["player_kills_aggregate_bool_exp_bool_and"]: {
	arguments: ResolverInputTypes["player_kills_select_column_player_kills_aggregate_bool_exp_bool_and_arguments_columns"],
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["player_kills_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Boolean_comparison_exp"]
};
	["player_kills_aggregate_bool_exp_bool_or"]: {
	arguments: ResolverInputTypes["player_kills_select_column_player_kills_aggregate_bool_exp_bool_or_arguments_columns"],
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["player_kills_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Boolean_comparison_exp"]
};
	["player_kills_aggregate_bool_exp_count"]: {
	arguments?: Array<ResolverInputTypes["player_kills_select_column"]> | undefined | null,
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["player_kills_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Int_comparison_exp"]
};
	/** aggregate fields of "player_kills" */
["player_kills_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["player_kills_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["player_kills_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["player_kills_max_fields"],
	min?:ResolverInputTypes["player_kills_min_fields"],
	stddev?:ResolverInputTypes["player_kills_stddev_fields"],
	stddev_pop?:ResolverInputTypes["player_kills_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["player_kills_stddev_samp_fields"],
	sum?:ResolverInputTypes["player_kills_sum_fields"],
	var_pop?:ResolverInputTypes["player_kills_var_pop_fields"],
	var_samp?:ResolverInputTypes["player_kills_var_samp_fields"],
	variance?:ResolverInputTypes["player_kills_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "player_kills" */
["player_kills_aggregate_order_by"]: {
	avg?: ResolverInputTypes["player_kills_avg_order_by"] | undefined | null,
	count?: ResolverInputTypes["order_by"] | undefined | null,
	max?: ResolverInputTypes["player_kills_max_order_by"] | undefined | null,
	min?: ResolverInputTypes["player_kills_min_order_by"] | undefined | null,
	stddev?: ResolverInputTypes["player_kills_stddev_order_by"] | undefined | null,
	stddev_pop?: ResolverInputTypes["player_kills_stddev_pop_order_by"] | undefined | null,
	stddev_samp?: ResolverInputTypes["player_kills_stddev_samp_order_by"] | undefined | null,
	sum?: ResolverInputTypes["player_kills_sum_order_by"] | undefined | null,
	var_pop?: ResolverInputTypes["player_kills_var_pop_order_by"] | undefined | null,
	var_samp?: ResolverInputTypes["player_kills_var_samp_order_by"] | undefined | null,
	variance?: ResolverInputTypes["player_kills_variance_order_by"] | undefined | null
};
	/** input type for inserting array relation for remote table "player_kills" */
["player_kills_arr_rel_insert_input"]: {
	data: Array<ResolverInputTypes["player_kills_insert_input"]>,
	/** upsert condition */
	on_conflict?: ResolverInputTypes["player_kills_on_conflict"] | undefined | null
};
	/** aggregate avg on columns */
["player_kills_avg_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "player_kills" */
["player_kills_avg_order_by"]: {
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Boolean expression to filter rows from the table "player_kills". All fields are combined with a logical 'AND'. */
["player_kills_bool_exp"]: {
	_and?: Array<ResolverInputTypes["player_kills_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["player_kills_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["player_kills_bool_exp"]> | undefined | null,
	assisted?: ResolverInputTypes["Boolean_comparison_exp"] | undefined | null,
	attacked_location?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	attacked_location_coordinates?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	attacked_player?: ResolverInputTypes["players_bool_exp"] | undefined | null,
	attacked_steam_id?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null,
	attacked_team?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	attacker_location?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	attacker_location_coordinates?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null,
	attacker_team?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	blinded?: ResolverInputTypes["Boolean_comparison_exp"] | undefined | null,
	headshot?: ResolverInputTypes["Boolean_comparison_exp"] | undefined | null,
	hitgroup?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	in_air?: ResolverInputTypes["Boolean_comparison_exp"] | undefined | null,
	match?: ResolverInputTypes["matches_bool_exp"] | undefined | null,
	match_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	match_map?: ResolverInputTypes["match_maps_bool_exp"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	no_scope?: ResolverInputTypes["Boolean_comparison_exp"] | undefined | null,
	player?: ResolverInputTypes["players_bool_exp"] | undefined | null,
	round?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	thru_smoke?: ResolverInputTypes["Boolean_comparison_exp"] | undefined | null,
	thru_wall?: ResolverInputTypes["Boolean_comparison_exp"] | undefined | null,
	time?: ResolverInputTypes["timestamptz_comparison_exp"] | undefined | null,
	with?: ResolverInputTypes["String_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "player_kills" */
["player_kills_constraint"]:player_kills_constraint;
	/** input type for incrementing numeric columns in table "player_kills" */
["player_kills_inc_input"]: {
	attacked_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	round?: number | undefined | null
};
	/** input type for inserting data into table "player_kills" */
["player_kills_insert_input"]: {
	assisted?: boolean | undefined | null,
	attacked_location?: string | undefined | null,
	attacked_location_coordinates?: string | undefined | null,
	attacked_player?: ResolverInputTypes["players_obj_rel_insert_input"] | undefined | null,
	attacked_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	attacked_team?: string | undefined | null,
	attacker_location?: string | undefined | null,
	attacker_location_coordinates?: string | undefined | null,
	attacker_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	attacker_team?: string | undefined | null,
	blinded?: boolean | undefined | null,
	headshot?: boolean | undefined | null,
	hitgroup?: string | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	in_air?: boolean | undefined | null,
	match?: ResolverInputTypes["matches_obj_rel_insert_input"] | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	match_map?: ResolverInputTypes["match_maps_obj_rel_insert_input"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid"] | undefined | null,
	no_scope?: boolean | undefined | null,
	player?: ResolverInputTypes["players_obj_rel_insert_input"] | undefined | null,
	round?: number | undefined | null,
	thru_smoke?: boolean | undefined | null,
	thru_wall?: boolean | undefined | null,
	time?: ResolverInputTypes["timestamptz"] | undefined | null,
	with?: string | undefined | null
};
	/** aggregate max on columns */
["player_kills_max_fields"]: AliasType<{
	attacked_location?:boolean | `@${string}`,
	attacked_location_coordinates?:boolean | `@${string}`,
	attacked_steam_id?:boolean | `@${string}`,
	attacked_team?:boolean | `@${string}`,
	attacker_location?:boolean | `@${string}`,
	attacker_location_coordinates?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	attacker_team?:boolean | `@${string}`,
	hitgroup?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
	with?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "player_kills" */
["player_kills_max_order_by"]: {
	attacked_location?: ResolverInputTypes["order_by"] | undefined | null,
	attacked_location_coordinates?: ResolverInputTypes["order_by"] | undefined | null,
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacked_team?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_location?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_location_coordinates?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_team?: ResolverInputTypes["order_by"] | undefined | null,
	hitgroup?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	match_map_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null,
	time?: ResolverInputTypes["order_by"] | undefined | null,
	with?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate min on columns */
["player_kills_min_fields"]: AliasType<{
	attacked_location?:boolean | `@${string}`,
	attacked_location_coordinates?:boolean | `@${string}`,
	attacked_steam_id?:boolean | `@${string}`,
	attacked_team?:boolean | `@${string}`,
	attacker_location?:boolean | `@${string}`,
	attacker_location_coordinates?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	attacker_team?:boolean | `@${string}`,
	hitgroup?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
	with?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "player_kills" */
["player_kills_min_order_by"]: {
	attacked_location?: ResolverInputTypes["order_by"] | undefined | null,
	attacked_location_coordinates?: ResolverInputTypes["order_by"] | undefined | null,
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacked_team?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_location?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_location_coordinates?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_team?: ResolverInputTypes["order_by"] | undefined | null,
	hitgroup?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	match_map_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null,
	time?: ResolverInputTypes["order_by"] | undefined | null,
	with?: ResolverInputTypes["order_by"] | undefined | null
};
	/** response of any mutation on the table "player_kills" */
["player_kills_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["player_kills"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "player_kills" */
["player_kills_on_conflict"]: {
	constraint: ResolverInputTypes["player_kills_constraint"],
	update_columns: Array<ResolverInputTypes["player_kills_update_column"]>,
	where?: ResolverInputTypes["player_kills_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "player_kills". */
["player_kills_order_by"]: {
	assisted?: ResolverInputTypes["order_by"] | undefined | null,
	attacked_location?: ResolverInputTypes["order_by"] | undefined | null,
	attacked_location_coordinates?: ResolverInputTypes["order_by"] | undefined | null,
	attacked_player?: ResolverInputTypes["players_order_by"] | undefined | null,
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacked_team?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_location?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_location_coordinates?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_team?: ResolverInputTypes["order_by"] | undefined | null,
	blinded?: ResolverInputTypes["order_by"] | undefined | null,
	headshot?: ResolverInputTypes["order_by"] | undefined | null,
	hitgroup?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	in_air?: ResolverInputTypes["order_by"] | undefined | null,
	match?: ResolverInputTypes["matches_order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	match_map?: ResolverInputTypes["match_maps_order_by"] | undefined | null,
	match_map_id?: ResolverInputTypes["order_by"] | undefined | null,
	no_scope?: ResolverInputTypes["order_by"] | undefined | null,
	player?: ResolverInputTypes["players_order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null,
	thru_smoke?: ResolverInputTypes["order_by"] | undefined | null,
	thru_wall?: ResolverInputTypes["order_by"] | undefined | null,
	time?: ResolverInputTypes["order_by"] | undefined | null,
	with?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: player_kills */
["player_kills_pk_columns_input"]: {
	id: ResolverInputTypes["uuid"]
};
	/** select columns of table "player_kills" */
["player_kills_select_column"]:player_kills_select_column;
	/** select "player_kills_aggregate_bool_exp_bool_and_arguments_columns" columns of table "player_kills" */
["player_kills_select_column_player_kills_aggregate_bool_exp_bool_and_arguments_columns"]:player_kills_select_column_player_kills_aggregate_bool_exp_bool_and_arguments_columns;
	/** select "player_kills_aggregate_bool_exp_bool_or_arguments_columns" columns of table "player_kills" */
["player_kills_select_column_player_kills_aggregate_bool_exp_bool_or_arguments_columns"]:player_kills_select_column_player_kills_aggregate_bool_exp_bool_or_arguments_columns;
	/** input type for updating data in table "player_kills" */
["player_kills_set_input"]: {
	assisted?: boolean | undefined | null,
	attacked_location?: string | undefined | null,
	attacked_location_coordinates?: string | undefined | null,
	attacked_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	attacked_team?: string | undefined | null,
	attacker_location?: string | undefined | null,
	attacker_location_coordinates?: string | undefined | null,
	attacker_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	attacker_team?: string | undefined | null,
	blinded?: boolean | undefined | null,
	headshot?: boolean | undefined | null,
	hitgroup?: string | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	in_air?: boolean | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid"] | undefined | null,
	no_scope?: boolean | undefined | null,
	round?: number | undefined | null,
	thru_smoke?: boolean | undefined | null,
	thru_wall?: boolean | undefined | null,
	time?: ResolverInputTypes["timestamptz"] | undefined | null,
	with?: string | undefined | null
};
	/** aggregate stddev on columns */
["player_kills_stddev_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "player_kills" */
["player_kills_stddev_order_by"]: {
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_pop on columns */
["player_kills_stddev_pop_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "player_kills" */
["player_kills_stddev_pop_order_by"]: {
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_samp on columns */
["player_kills_stddev_samp_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "player_kills" */
["player_kills_stddev_samp_order_by"]: {
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Streaming cursor of the table "player_kills" */
["player_kills_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["player_kills_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["player_kills_stream_cursor_value_input"]: {
	assisted?: boolean | undefined | null,
	attacked_location?: string | undefined | null,
	attacked_location_coordinates?: string | undefined | null,
	attacked_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	attacked_team?: string | undefined | null,
	attacker_location?: string | undefined | null,
	attacker_location_coordinates?: string | undefined | null,
	attacker_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	attacker_team?: string | undefined | null,
	blinded?: boolean | undefined | null,
	headshot?: boolean | undefined | null,
	hitgroup?: string | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	in_air?: boolean | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid"] | undefined | null,
	no_scope?: boolean | undefined | null,
	round?: number | undefined | null,
	thru_smoke?: boolean | undefined | null,
	thru_wall?: boolean | undefined | null,
	time?: ResolverInputTypes["timestamptz"] | undefined | null,
	with?: string | undefined | null
};
	/** aggregate sum on columns */
["player_kills_sum_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "player_kills" */
["player_kills_sum_order_by"]: {
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** update columns of table "player_kills" */
["player_kills_update_column"]:player_kills_update_column;
	["player_kills_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["player_kills_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["player_kills_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["player_kills_bool_exp"]
};
	/** aggregate var_pop on columns */
["player_kills_var_pop_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "player_kills" */
["player_kills_var_pop_order_by"]: {
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate var_samp on columns */
["player_kills_var_samp_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "player_kills" */
["player_kills_var_samp_order_by"]: {
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate variance on columns */
["player_kills_variance_fields"]: AliasType<{
	attacked_steam_id?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "player_kills" */
["player_kills_variance_order_by"]: {
	attacked_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** columns and relationships of "player_objectives" */
["player_objectives"]: AliasType<{
	id?:boolean | `@${string}`,
	/** An object relationship */
	match?:ResolverInputTypes["matches"],
	match_id?:boolean | `@${string}`,
	/** An object relationship */
	match_map?:ResolverInputTypes["match_maps"],
	match_map_id?:boolean | `@${string}`,
	/** An object relationship */
	player?:ResolverInputTypes["players"],
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
	type?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "player_objectives" */
["player_objectives_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["player_objectives_aggregate_fields"],
	nodes?:ResolverInputTypes["player_objectives"],
		__typename?: boolean | `@${string}`
}>;
	["player_objectives_aggregate_bool_exp"]: {
	count?: ResolverInputTypes["player_objectives_aggregate_bool_exp_count"] | undefined | null
};
	["player_objectives_aggregate_bool_exp_count"]: {
	arguments?: Array<ResolverInputTypes["player_objectives_select_column"]> | undefined | null,
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["player_objectives_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Int_comparison_exp"]
};
	/** aggregate fields of "player_objectives" */
["player_objectives_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["player_objectives_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["player_objectives_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["player_objectives_max_fields"],
	min?:ResolverInputTypes["player_objectives_min_fields"],
	stddev?:ResolverInputTypes["player_objectives_stddev_fields"],
	stddev_pop?:ResolverInputTypes["player_objectives_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["player_objectives_stddev_samp_fields"],
	sum?:ResolverInputTypes["player_objectives_sum_fields"],
	var_pop?:ResolverInputTypes["player_objectives_var_pop_fields"],
	var_samp?:ResolverInputTypes["player_objectives_var_samp_fields"],
	variance?:ResolverInputTypes["player_objectives_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "player_objectives" */
["player_objectives_aggregate_order_by"]: {
	avg?: ResolverInputTypes["player_objectives_avg_order_by"] | undefined | null,
	count?: ResolverInputTypes["order_by"] | undefined | null,
	max?: ResolverInputTypes["player_objectives_max_order_by"] | undefined | null,
	min?: ResolverInputTypes["player_objectives_min_order_by"] | undefined | null,
	stddev?: ResolverInputTypes["player_objectives_stddev_order_by"] | undefined | null,
	stddev_pop?: ResolverInputTypes["player_objectives_stddev_pop_order_by"] | undefined | null,
	stddev_samp?: ResolverInputTypes["player_objectives_stddev_samp_order_by"] | undefined | null,
	sum?: ResolverInputTypes["player_objectives_sum_order_by"] | undefined | null,
	var_pop?: ResolverInputTypes["player_objectives_var_pop_order_by"] | undefined | null,
	var_samp?: ResolverInputTypes["player_objectives_var_samp_order_by"] | undefined | null,
	variance?: ResolverInputTypes["player_objectives_variance_order_by"] | undefined | null
};
	/** input type for inserting array relation for remote table "player_objectives" */
["player_objectives_arr_rel_insert_input"]: {
	data: Array<ResolverInputTypes["player_objectives_insert_input"]>,
	/** upsert condition */
	on_conflict?: ResolverInputTypes["player_objectives_on_conflict"] | undefined | null
};
	/** aggregate avg on columns */
["player_objectives_avg_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "player_objectives" */
["player_objectives_avg_order_by"]: {
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Boolean expression to filter rows from the table "player_objectives". All fields are combined with a logical 'AND'. */
["player_objectives_bool_exp"]: {
	_and?: Array<ResolverInputTypes["player_objectives_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["player_objectives_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["player_objectives_bool_exp"]> | undefined | null,
	id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	match?: ResolverInputTypes["matches_bool_exp"] | undefined | null,
	match_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	match_map?: ResolverInputTypes["match_maps_bool_exp"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	player?: ResolverInputTypes["players_bool_exp"] | undefined | null,
	player_steam_id?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null,
	round?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	time?: ResolverInputTypes["timestamptz_comparison_exp"] | undefined | null,
	type?: ResolverInputTypes["e_objective_types_enum_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "player_objectives" */
["player_objectives_constraint"]:player_objectives_constraint;
	/** input type for incrementing numeric columns in table "player_objectives" */
["player_objectives_inc_input"]: {
	player_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	round?: number | undefined | null
};
	/** input type for inserting data into table "player_objectives" */
["player_objectives_insert_input"]: {
	id?: ResolverInputTypes["uuid"] | undefined | null,
	match?: ResolverInputTypes["matches_obj_rel_insert_input"] | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	match_map?: ResolverInputTypes["match_maps_obj_rel_insert_input"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid"] | undefined | null,
	player?: ResolverInputTypes["players_obj_rel_insert_input"] | undefined | null,
	player_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	round?: number | undefined | null,
	time?: ResolverInputTypes["timestamptz"] | undefined | null,
	type?: ResolverInputTypes["e_objective_types_enum"] | undefined | null
};
	/** aggregate max on columns */
["player_objectives_max_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "player_objectives" */
["player_objectives_max_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	match_map_id?: ResolverInputTypes["order_by"] | undefined | null,
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null,
	time?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate min on columns */
["player_objectives_min_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "player_objectives" */
["player_objectives_min_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	match_map_id?: ResolverInputTypes["order_by"] | undefined | null,
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null,
	time?: ResolverInputTypes["order_by"] | undefined | null
};
	/** response of any mutation on the table "player_objectives" */
["player_objectives_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["player_objectives"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "player_objectives" */
["player_objectives_on_conflict"]: {
	constraint: ResolverInputTypes["player_objectives_constraint"],
	update_columns: Array<ResolverInputTypes["player_objectives_update_column"]>,
	where?: ResolverInputTypes["player_objectives_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "player_objectives". */
["player_objectives_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	match?: ResolverInputTypes["matches_order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	match_map?: ResolverInputTypes["match_maps_order_by"] | undefined | null,
	match_map_id?: ResolverInputTypes["order_by"] | undefined | null,
	player?: ResolverInputTypes["players_order_by"] | undefined | null,
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null,
	time?: ResolverInputTypes["order_by"] | undefined | null,
	type?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: player_objectives */
["player_objectives_pk_columns_input"]: {
	id: ResolverInputTypes["uuid"]
};
	/** select columns of table "player_objectives" */
["player_objectives_select_column"]:player_objectives_select_column;
	/** input type for updating data in table "player_objectives" */
["player_objectives_set_input"]: {
	id?: ResolverInputTypes["uuid"] | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid"] | undefined | null,
	player_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	round?: number | undefined | null,
	time?: ResolverInputTypes["timestamptz"] | undefined | null,
	type?: ResolverInputTypes["e_objective_types_enum"] | undefined | null
};
	/** aggregate stddev on columns */
["player_objectives_stddev_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "player_objectives" */
["player_objectives_stddev_order_by"]: {
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_pop on columns */
["player_objectives_stddev_pop_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "player_objectives" */
["player_objectives_stddev_pop_order_by"]: {
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_samp on columns */
["player_objectives_stddev_samp_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "player_objectives" */
["player_objectives_stddev_samp_order_by"]: {
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Streaming cursor of the table "player_objectives" */
["player_objectives_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["player_objectives_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["player_objectives_stream_cursor_value_input"]: {
	id?: ResolverInputTypes["uuid"] | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid"] | undefined | null,
	player_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	round?: number | undefined | null,
	time?: ResolverInputTypes["timestamptz"] | undefined | null,
	type?: ResolverInputTypes["e_objective_types_enum"] | undefined | null
};
	/** aggregate sum on columns */
["player_objectives_sum_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "player_objectives" */
["player_objectives_sum_order_by"]: {
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** update columns of table "player_objectives" */
["player_objectives_update_column"]:player_objectives_update_column;
	["player_objectives_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["player_objectives_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["player_objectives_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["player_objectives_bool_exp"]
};
	/** aggregate var_pop on columns */
["player_objectives_var_pop_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "player_objectives" */
["player_objectives_var_pop_order_by"]: {
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate var_samp on columns */
["player_objectives_var_samp_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "player_objectives" */
["player_objectives_var_samp_order_by"]: {
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate variance on columns */
["player_objectives_variance_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "player_objectives" */
["player_objectives_variance_order_by"]: {
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** columns and relationships of "player_unused_utility" */
["player_unused_utility"]: AliasType<{
	id?:boolean | `@${string}`,
	/** An object relationship */
	match?:ResolverInputTypes["matches"],
	match_id?:boolean | `@${string}`,
	/** An object relationship */
	match_map?:ResolverInputTypes["match_maps"],
	match_map_id?:boolean | `@${string}`,
	/** An object relationship */
	player?:ResolverInputTypes["players"],
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	unused?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "player_unused_utility" */
["player_unused_utility_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["player_unused_utility_aggregate_fields"],
	nodes?:ResolverInputTypes["player_unused_utility"],
		__typename?: boolean | `@${string}`
}>;
	["player_unused_utility_aggregate_bool_exp"]: {
	count?: ResolverInputTypes["player_unused_utility_aggregate_bool_exp_count"] | undefined | null
};
	["player_unused_utility_aggregate_bool_exp_count"]: {
	arguments?: Array<ResolverInputTypes["player_unused_utility_select_column"]> | undefined | null,
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["player_unused_utility_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Int_comparison_exp"]
};
	/** aggregate fields of "player_unused_utility" */
["player_unused_utility_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["player_unused_utility_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["player_unused_utility_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["player_unused_utility_max_fields"],
	min?:ResolverInputTypes["player_unused_utility_min_fields"],
	stddev?:ResolverInputTypes["player_unused_utility_stddev_fields"],
	stddev_pop?:ResolverInputTypes["player_unused_utility_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["player_unused_utility_stddev_samp_fields"],
	sum?:ResolverInputTypes["player_unused_utility_sum_fields"],
	var_pop?:ResolverInputTypes["player_unused_utility_var_pop_fields"],
	var_samp?:ResolverInputTypes["player_unused_utility_var_samp_fields"],
	variance?:ResolverInputTypes["player_unused_utility_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "player_unused_utility" */
["player_unused_utility_aggregate_order_by"]: {
	avg?: ResolverInputTypes["player_unused_utility_avg_order_by"] | undefined | null,
	count?: ResolverInputTypes["order_by"] | undefined | null,
	max?: ResolverInputTypes["player_unused_utility_max_order_by"] | undefined | null,
	min?: ResolverInputTypes["player_unused_utility_min_order_by"] | undefined | null,
	stddev?: ResolverInputTypes["player_unused_utility_stddev_order_by"] | undefined | null,
	stddev_pop?: ResolverInputTypes["player_unused_utility_stddev_pop_order_by"] | undefined | null,
	stddev_samp?: ResolverInputTypes["player_unused_utility_stddev_samp_order_by"] | undefined | null,
	sum?: ResolverInputTypes["player_unused_utility_sum_order_by"] | undefined | null,
	var_pop?: ResolverInputTypes["player_unused_utility_var_pop_order_by"] | undefined | null,
	var_samp?: ResolverInputTypes["player_unused_utility_var_samp_order_by"] | undefined | null,
	variance?: ResolverInputTypes["player_unused_utility_variance_order_by"] | undefined | null
};
	/** input type for inserting array relation for remote table "player_unused_utility" */
["player_unused_utility_arr_rel_insert_input"]: {
	data: Array<ResolverInputTypes["player_unused_utility_insert_input"]>,
	/** upsert condition */
	on_conflict?: ResolverInputTypes["player_unused_utility_on_conflict"] | undefined | null
};
	/** aggregate avg on columns */
["player_unused_utility_avg_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	unused?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "player_unused_utility" */
["player_unused_utility_avg_order_by"]: {
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null,
	unused?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Boolean expression to filter rows from the table "player_unused_utility". All fields are combined with a logical 'AND'. */
["player_unused_utility_bool_exp"]: {
	_and?: Array<ResolverInputTypes["player_unused_utility_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["player_unused_utility_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["player_unused_utility_bool_exp"]> | undefined | null,
	id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	match?: ResolverInputTypes["matches_bool_exp"] | undefined | null,
	match_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	match_map?: ResolverInputTypes["match_maps_bool_exp"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	player?: ResolverInputTypes["players_bool_exp"] | undefined | null,
	player_steam_id?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null,
	round?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	unused?: ResolverInputTypes["Int_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "player_unused_utility" */
["player_unused_utility_constraint"]:player_unused_utility_constraint;
	/** input type for incrementing numeric columns in table "player_unused_utility" */
["player_unused_utility_inc_input"]: {
	player_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	round?: number | undefined | null,
	unused?: number | undefined | null
};
	/** input type for inserting data into table "player_unused_utility" */
["player_unused_utility_insert_input"]: {
	id?: ResolverInputTypes["uuid"] | undefined | null,
	match?: ResolverInputTypes["matches_obj_rel_insert_input"] | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	match_map?: ResolverInputTypes["match_maps_obj_rel_insert_input"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid"] | undefined | null,
	player?: ResolverInputTypes["players_obj_rel_insert_input"] | undefined | null,
	player_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	round?: number | undefined | null,
	unused?: number | undefined | null
};
	/** aggregate max on columns */
["player_unused_utility_max_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	unused?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "player_unused_utility" */
["player_unused_utility_max_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	match_map_id?: ResolverInputTypes["order_by"] | undefined | null,
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null,
	unused?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate min on columns */
["player_unused_utility_min_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	unused?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "player_unused_utility" */
["player_unused_utility_min_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	match_map_id?: ResolverInputTypes["order_by"] | undefined | null,
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null,
	unused?: ResolverInputTypes["order_by"] | undefined | null
};
	/** response of any mutation on the table "player_unused_utility" */
["player_unused_utility_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["player_unused_utility"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "player_unused_utility" */
["player_unused_utility_on_conflict"]: {
	constraint: ResolverInputTypes["player_unused_utility_constraint"],
	update_columns: Array<ResolverInputTypes["player_unused_utility_update_column"]>,
	where?: ResolverInputTypes["player_unused_utility_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "player_unused_utility". */
["player_unused_utility_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	match?: ResolverInputTypes["matches_order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	match_map?: ResolverInputTypes["match_maps_order_by"] | undefined | null,
	match_map_id?: ResolverInputTypes["order_by"] | undefined | null,
	player?: ResolverInputTypes["players_order_by"] | undefined | null,
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null,
	unused?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: player_unused_utility */
["player_unused_utility_pk_columns_input"]: {
	id: ResolverInputTypes["uuid"]
};
	/** select columns of table "player_unused_utility" */
["player_unused_utility_select_column"]:player_unused_utility_select_column;
	/** input type for updating data in table "player_unused_utility" */
["player_unused_utility_set_input"]: {
	id?: ResolverInputTypes["uuid"] | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid"] | undefined | null,
	player_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	round?: number | undefined | null,
	unused?: number | undefined | null
};
	/** aggregate stddev on columns */
["player_unused_utility_stddev_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	unused?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "player_unused_utility" */
["player_unused_utility_stddev_order_by"]: {
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null,
	unused?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_pop on columns */
["player_unused_utility_stddev_pop_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	unused?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "player_unused_utility" */
["player_unused_utility_stddev_pop_order_by"]: {
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null,
	unused?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_samp on columns */
["player_unused_utility_stddev_samp_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	unused?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "player_unused_utility" */
["player_unused_utility_stddev_samp_order_by"]: {
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null,
	unused?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Streaming cursor of the table "player_unused_utility" */
["player_unused_utility_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["player_unused_utility_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["player_unused_utility_stream_cursor_value_input"]: {
	id?: ResolverInputTypes["uuid"] | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid"] | undefined | null,
	player_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	round?: number | undefined | null,
	unused?: number | undefined | null
};
	/** aggregate sum on columns */
["player_unused_utility_sum_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	unused?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "player_unused_utility" */
["player_unused_utility_sum_order_by"]: {
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null,
	unused?: ResolverInputTypes["order_by"] | undefined | null
};
	/** update columns of table "player_unused_utility" */
["player_unused_utility_update_column"]:player_unused_utility_update_column;
	["player_unused_utility_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["player_unused_utility_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["player_unused_utility_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["player_unused_utility_bool_exp"]
};
	/** aggregate var_pop on columns */
["player_unused_utility_var_pop_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	unused?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "player_unused_utility" */
["player_unused_utility_var_pop_order_by"]: {
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null,
	unused?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate var_samp on columns */
["player_unused_utility_var_samp_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	unused?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "player_unused_utility" */
["player_unused_utility_var_samp_order_by"]: {
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null,
	unused?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate variance on columns */
["player_unused_utility_variance_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	unused?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "player_unused_utility" */
["player_unused_utility_variance_order_by"]: {
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null,
	unused?: ResolverInputTypes["order_by"] | undefined | null
};
	/** columns and relationships of "player_utility" */
["player_utility"]: AliasType<{
	attacker_location_coordinates?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** An object relationship */
	match?:ResolverInputTypes["matches"],
	match_id?:boolean | `@${string}`,
	/** An object relationship */
	match_map?:ResolverInputTypes["match_maps"],
	match_map_id?:boolean | `@${string}`,
	/** An object relationship */
	player?:ResolverInputTypes["players"],
	round?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
	type?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "player_utility" */
["player_utility_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["player_utility_aggregate_fields"],
	nodes?:ResolverInputTypes["player_utility"],
		__typename?: boolean | `@${string}`
}>;
	["player_utility_aggregate_bool_exp"]: {
	count?: ResolverInputTypes["player_utility_aggregate_bool_exp_count"] | undefined | null
};
	["player_utility_aggregate_bool_exp_count"]: {
	arguments?: Array<ResolverInputTypes["player_utility_select_column"]> | undefined | null,
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["player_utility_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Int_comparison_exp"]
};
	/** aggregate fields of "player_utility" */
["player_utility_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["player_utility_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["player_utility_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["player_utility_max_fields"],
	min?:ResolverInputTypes["player_utility_min_fields"],
	stddev?:ResolverInputTypes["player_utility_stddev_fields"],
	stddev_pop?:ResolverInputTypes["player_utility_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["player_utility_stddev_samp_fields"],
	sum?:ResolverInputTypes["player_utility_sum_fields"],
	var_pop?:ResolverInputTypes["player_utility_var_pop_fields"],
	var_samp?:ResolverInputTypes["player_utility_var_samp_fields"],
	variance?:ResolverInputTypes["player_utility_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "player_utility" */
["player_utility_aggregate_order_by"]: {
	avg?: ResolverInputTypes["player_utility_avg_order_by"] | undefined | null,
	count?: ResolverInputTypes["order_by"] | undefined | null,
	max?: ResolverInputTypes["player_utility_max_order_by"] | undefined | null,
	min?: ResolverInputTypes["player_utility_min_order_by"] | undefined | null,
	stddev?: ResolverInputTypes["player_utility_stddev_order_by"] | undefined | null,
	stddev_pop?: ResolverInputTypes["player_utility_stddev_pop_order_by"] | undefined | null,
	stddev_samp?: ResolverInputTypes["player_utility_stddev_samp_order_by"] | undefined | null,
	sum?: ResolverInputTypes["player_utility_sum_order_by"] | undefined | null,
	var_pop?: ResolverInputTypes["player_utility_var_pop_order_by"] | undefined | null,
	var_samp?: ResolverInputTypes["player_utility_var_samp_order_by"] | undefined | null,
	variance?: ResolverInputTypes["player_utility_variance_order_by"] | undefined | null
};
	/** input type for inserting array relation for remote table "player_utility" */
["player_utility_arr_rel_insert_input"]: {
	data: Array<ResolverInputTypes["player_utility_insert_input"]>,
	/** upsert condition */
	on_conflict?: ResolverInputTypes["player_utility_on_conflict"] | undefined | null
};
	/** aggregate avg on columns */
["player_utility_avg_fields"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "player_utility" */
["player_utility_avg_order_by"]: {
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Boolean expression to filter rows from the table "player_utility". All fields are combined with a logical 'AND'. */
["player_utility_bool_exp"]: {
	_and?: Array<ResolverInputTypes["player_utility_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["player_utility_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["player_utility_bool_exp"]> | undefined | null,
	attacker_location_coordinates?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null,
	id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	match?: ResolverInputTypes["matches_bool_exp"] | undefined | null,
	match_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	match_map?: ResolverInputTypes["match_maps_bool_exp"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	player?: ResolverInputTypes["players_bool_exp"] | undefined | null,
	round?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	time?: ResolverInputTypes["timestamptz_comparison_exp"] | undefined | null,
	type?: ResolverInputTypes["e_utility_types_enum_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "player_utility" */
["player_utility_constraint"]:player_utility_constraint;
	/** input type for incrementing numeric columns in table "player_utility" */
["player_utility_inc_input"]: {
	attacker_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	round?: number | undefined | null
};
	/** input type for inserting data into table "player_utility" */
["player_utility_insert_input"]: {
	attacker_location_coordinates?: string | undefined | null,
	attacker_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	match?: ResolverInputTypes["matches_obj_rel_insert_input"] | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	match_map?: ResolverInputTypes["match_maps_obj_rel_insert_input"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid"] | undefined | null,
	player?: ResolverInputTypes["players_obj_rel_insert_input"] | undefined | null,
	round?: number | undefined | null,
	time?: ResolverInputTypes["timestamptz"] | undefined | null,
	type?: ResolverInputTypes["e_utility_types_enum"] | undefined | null
};
	/** aggregate max on columns */
["player_utility_max_fields"]: AliasType<{
	attacker_location_coordinates?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "player_utility" */
["player_utility_max_order_by"]: {
	attacker_location_coordinates?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	match_map_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null,
	time?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate min on columns */
["player_utility_min_fields"]: AliasType<{
	attacker_location_coordinates?:boolean | `@${string}`,
	attacker_steam_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
	time?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "player_utility" */
["player_utility_min_order_by"]: {
	attacker_location_coordinates?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	match_map_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null,
	time?: ResolverInputTypes["order_by"] | undefined | null
};
	/** response of any mutation on the table "player_utility" */
["player_utility_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["player_utility"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "player_utility" */
["player_utility_on_conflict"]: {
	constraint: ResolverInputTypes["player_utility_constraint"],
	update_columns: Array<ResolverInputTypes["player_utility_update_column"]>,
	where?: ResolverInputTypes["player_utility_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "player_utility". */
["player_utility_order_by"]: {
	attacker_location_coordinates?: ResolverInputTypes["order_by"] | undefined | null,
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	match?: ResolverInputTypes["matches_order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	match_map?: ResolverInputTypes["match_maps_order_by"] | undefined | null,
	match_map_id?: ResolverInputTypes["order_by"] | undefined | null,
	player?: ResolverInputTypes["players_order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null,
	time?: ResolverInputTypes["order_by"] | undefined | null,
	type?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: player_utility */
["player_utility_pk_columns_input"]: {
	id: ResolverInputTypes["uuid"]
};
	/** select columns of table "player_utility" */
["player_utility_select_column"]:player_utility_select_column;
	/** input type for updating data in table "player_utility" */
["player_utility_set_input"]: {
	attacker_location_coordinates?: string | undefined | null,
	attacker_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid"] | undefined | null,
	round?: number | undefined | null,
	time?: ResolverInputTypes["timestamptz"] | undefined | null,
	type?: ResolverInputTypes["e_utility_types_enum"] | undefined | null
};
	/** aggregate stddev on columns */
["player_utility_stddev_fields"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "player_utility" */
["player_utility_stddev_order_by"]: {
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_pop on columns */
["player_utility_stddev_pop_fields"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "player_utility" */
["player_utility_stddev_pop_order_by"]: {
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_samp on columns */
["player_utility_stddev_samp_fields"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "player_utility" */
["player_utility_stddev_samp_order_by"]: {
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Streaming cursor of the table "player_utility" */
["player_utility_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["player_utility_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["player_utility_stream_cursor_value_input"]: {
	attacker_location_coordinates?: string | undefined | null,
	attacker_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid"] | undefined | null,
	round?: number | undefined | null,
	time?: ResolverInputTypes["timestamptz"] | undefined | null,
	type?: ResolverInputTypes["e_utility_types_enum"] | undefined | null
};
	/** aggregate sum on columns */
["player_utility_sum_fields"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "player_utility" */
["player_utility_sum_order_by"]: {
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** update columns of table "player_utility" */
["player_utility_update_column"]:player_utility_update_column;
	["player_utility_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["player_utility_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["player_utility_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["player_utility_bool_exp"]
};
	/** aggregate var_pop on columns */
["player_utility_var_pop_fields"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "player_utility" */
["player_utility_var_pop_order_by"]: {
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate var_samp on columns */
["player_utility_var_samp_fields"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "player_utility" */
["player_utility_var_samp_order_by"]: {
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate variance on columns */
["player_utility_variance_fields"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "player_utility" */
["player_utility_variance_order_by"]: {
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** columns and relationships of "players" */
["players"]: AliasType<{
assists?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_assists_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_assists_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_assists_bool_exp"] | undefined | null},ResolverInputTypes["player_assists"]],
assists_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_assists_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_assists_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_assists_bool_exp"] | undefined | null},ResolverInputTypes["player_assists_aggregate"]],
assited_by_players?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_assists_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_assists_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_assists_bool_exp"] | undefined | null},ResolverInputTypes["player_assists"]],
assited_by_players_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_assists_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_assists_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_assists_bool_exp"] | undefined | null},ResolverInputTypes["player_assists_aggregate"]],
	avatar_url?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
damage_dealt?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_damages_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_damages_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_damages_bool_exp"] | undefined | null},ResolverInputTypes["player_damages"]],
damage_dealt_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_damages_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_damages_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_damages_bool_exp"] | undefined | null},ResolverInputTypes["player_damages_aggregate"]],
damage_taken?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_damages_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_damages_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_damages_bool_exp"] | undefined | null},ResolverInputTypes["player_damages"]],
damage_taken_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_damages_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_damages_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_damages_bool_exp"] | undefined | null},ResolverInputTypes["player_damages_aggregate"]],
deaths?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_kills_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_kills_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_kills_bool_exp"] | undefined | null},ResolverInputTypes["player_kills"]],
deaths_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_kills_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_kills_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_kills_bool_exp"] | undefined | null},ResolverInputTypes["player_kills_aggregate"]],
	discord_id?:boolean | `@${string}`,
flashed_by_players?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_flashes_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_flashes_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_flashes_bool_exp"] | undefined | null},ResolverInputTypes["player_flashes"]],
flashed_by_players_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_flashes_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_flashes_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_flashes_bool_exp"] | undefined | null},ResolverInputTypes["player_flashes_aggregate"]],
flashed_players?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_flashes_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_flashes_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_flashes_bool_exp"] | undefined | null},ResolverInputTypes["player_flashes"]],
flashed_players_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_flashes_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_flashes_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_flashes_bool_exp"] | undefined | null},ResolverInputTypes["player_flashes_aggregate"]],
invited_players?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["team_invites_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["team_invites_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["team_invites_bool_exp"] | undefined | null},ResolverInputTypes["team_invites"]],
invited_players_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["team_invites_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["team_invites_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["team_invites_bool_exp"] | undefined | null},ResolverInputTypes["team_invites_aggregate"]],
kills?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_kills_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_kills_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_kills_bool_exp"] | undefined | null},ResolverInputTypes["player_kills"]],
kills_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_kills_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_kills_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_kills_bool_exp"] | undefined | null},ResolverInputTypes["player_kills_aggregate"]],
match_lineups?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_lineups_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_lineups_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_lineups_bool_exp"] | undefined | null},ResolverInputTypes["match_lineups"]],
match_lineups_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_lineups_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_lineups_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_lineups_bool_exp"] | undefined | null},ResolverInputTypes["match_lineups_aggregate"]],
matches?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["matches_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["matches_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["matches_bool_exp"] | undefined | null},ResolverInputTypes["matches"]],
multi_kills?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_player_multi_kills_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_player_multi_kills_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_player_multi_kills_bool_exp"] | undefined | null},ResolverInputTypes["v_player_multi_kills"]],
multi_kills_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_player_multi_kills_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_player_multi_kills_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_player_multi_kills_bool_exp"] | undefined | null},ResolverInputTypes["v_player_multi_kills_aggregate"]],
	name?:boolean | `@${string}`,
objectives?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_objectives_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_objectives_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_objectives_bool_exp"] | undefined | null},ResolverInputTypes["player_objectives"]],
objectives_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_objectives_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_objectives_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_objectives_bool_exp"] | undefined | null},ResolverInputTypes["player_objectives_aggregate"]],
opening_duels?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_player_opening_duels_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_player_opening_duels_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_player_opening_duels_bool_exp"] | undefined | null},ResolverInputTypes["v_player_opening_duels"]],
opening_duels_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_player_opening_duels_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_player_opening_duels_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_player_opening_duels_bool_exp"] | undefined | null},ResolverInputTypes["v_player_opening_duels_aggregate"]],
owned_teams?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["teams_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["teams_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["teams_bool_exp"] | undefined | null},ResolverInputTypes["teams"]],
owned_teams_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["teams_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["teams_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["teams_bool_exp"] | undefined | null},ResolverInputTypes["teams_aggregate"]],
player_lineup?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_lineup_players_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_lineup_players_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_lineup_players_bool_exp"] | undefined | null},ResolverInputTypes["match_lineup_players"]],
player_lineup_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_lineup_players_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_lineup_players_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_lineup_players_bool_exp"] | undefined | null},ResolverInputTypes["match_lineup_players_aggregate"]],
player_unused_utilities?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_unused_utility_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_unused_utility_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_unused_utility_bool_exp"] | undefined | null},ResolverInputTypes["player_unused_utility"]],
player_unused_utilities_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_unused_utility_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_unused_utility_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_unused_utility_bool_exp"] | undefined | null},ResolverInputTypes["player_unused_utility_aggregate"]],
	profile_url?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
team_invites?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["team_invites_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["team_invites_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["team_invites_bool_exp"] | undefined | null},ResolverInputTypes["team_invites"]],
team_invites_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["team_invites_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["team_invites_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["team_invites_bool_exp"] | undefined | null},ResolverInputTypes["team_invites_aggregate"]],
team_members?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["team_roster_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["team_roster_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["team_roster_bool_exp"] | undefined | null},ResolverInputTypes["team_roster"]],
team_members_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["team_roster_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["team_roster_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["team_roster_bool_exp"] | undefined | null},ResolverInputTypes["team_roster_aggregate"]],
teams?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["teams_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["teams_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["teams_bool_exp"] | undefined | null},ResolverInputTypes["teams"]],
tournament_organizers?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_organizers_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_organizers_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_organizers_bool_exp"] | undefined | null},ResolverInputTypes["tournament_organizers"]],
tournament_organizers_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_organizers_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_organizers_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_organizers_bool_exp"] | undefined | null},ResolverInputTypes["tournament_organizers_aggregate"]],
tournament_rosters?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_roster_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_roster_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_roster_bool_exp"] | undefined | null},ResolverInputTypes["tournament_roster"]],
tournament_rosters_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_roster_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_roster_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_roster_bool_exp"] | undefined | null},ResolverInputTypes["tournament_roster_aggregate"]],
tournaments?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournaments_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournaments_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournaments_bool_exp"] | undefined | null},ResolverInputTypes["tournaments"]],
tournaments_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournaments_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournaments_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournaments_bool_exp"] | undefined | null},ResolverInputTypes["tournaments_aggregate"]],
	updated_at?:boolean | `@${string}`,
utility_thrown?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_utility_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_utility_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_utility_bool_exp"] | undefined | null},ResolverInputTypes["player_utility"]],
utility_thrown_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_utility_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_utility_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_utility_bool_exp"] | undefined | null},ResolverInputTypes["player_utility_aggregate"]],
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "players" */
["players_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["players_aggregate_fields"],
	nodes?:ResolverInputTypes["players"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "players" */
["players_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["players_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["players_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["players_max_fields"],
	min?:ResolverInputTypes["players_min_fields"],
	stddev?:ResolverInputTypes["players_stddev_fields"],
	stddev_pop?:ResolverInputTypes["players_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["players_stddev_samp_fields"],
	sum?:ResolverInputTypes["players_sum_fields"],
	var_pop?:ResolverInputTypes["players_var_pop_fields"],
	var_samp?:ResolverInputTypes["players_var_samp_fields"],
	variance?:ResolverInputTypes["players_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate avg on columns */
["players_avg_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "players". All fields are combined with a logical 'AND'. */
["players_bool_exp"]: {
	_and?: Array<ResolverInputTypes["players_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["players_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["players_bool_exp"]> | undefined | null,
	assists?: ResolverInputTypes["player_assists_bool_exp"] | undefined | null,
	assists_aggregate?: ResolverInputTypes["player_assists_aggregate_bool_exp"] | undefined | null,
	assited_by_players?: ResolverInputTypes["player_assists_bool_exp"] | undefined | null,
	assited_by_players_aggregate?: ResolverInputTypes["player_assists_aggregate_bool_exp"] | undefined | null,
	avatar_url?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	created_at?: ResolverInputTypes["timestamptz_comparison_exp"] | undefined | null,
	damage_dealt?: ResolverInputTypes["player_damages_bool_exp"] | undefined | null,
	damage_dealt_aggregate?: ResolverInputTypes["player_damages_aggregate_bool_exp"] | undefined | null,
	damage_taken?: ResolverInputTypes["player_damages_bool_exp"] | undefined | null,
	damage_taken_aggregate?: ResolverInputTypes["player_damages_aggregate_bool_exp"] | undefined | null,
	deaths?: ResolverInputTypes["player_kills_bool_exp"] | undefined | null,
	deaths_aggregate?: ResolverInputTypes["player_kills_aggregate_bool_exp"] | undefined | null,
	discord_id?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	flashed_by_players?: ResolverInputTypes["player_flashes_bool_exp"] | undefined | null,
	flashed_by_players_aggregate?: ResolverInputTypes["player_flashes_aggregate_bool_exp"] | undefined | null,
	flashed_players?: ResolverInputTypes["player_flashes_bool_exp"] | undefined | null,
	flashed_players_aggregate?: ResolverInputTypes["player_flashes_aggregate_bool_exp"] | undefined | null,
	invited_players?: ResolverInputTypes["team_invites_bool_exp"] | undefined | null,
	invited_players_aggregate?: ResolverInputTypes["team_invites_aggregate_bool_exp"] | undefined | null,
	kills?: ResolverInputTypes["player_kills_bool_exp"] | undefined | null,
	kills_aggregate?: ResolverInputTypes["player_kills_aggregate_bool_exp"] | undefined | null,
	match_lineups?: ResolverInputTypes["match_lineups_bool_exp"] | undefined | null,
	match_lineups_aggregate?: ResolverInputTypes["match_lineups_aggregate_bool_exp"] | undefined | null,
	matches?: ResolverInputTypes["matches_bool_exp"] | undefined | null,
	multi_kills?: ResolverInputTypes["v_player_multi_kills_bool_exp"] | undefined | null,
	multi_kills_aggregate?: ResolverInputTypes["v_player_multi_kills_aggregate_bool_exp"] | undefined | null,
	name?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	objectives?: ResolverInputTypes["player_objectives_bool_exp"] | undefined | null,
	objectives_aggregate?: ResolverInputTypes["player_objectives_aggregate_bool_exp"] | undefined | null,
	opening_duels?: ResolverInputTypes["v_player_opening_duels_bool_exp"] | undefined | null,
	opening_duels_aggregate?: ResolverInputTypes["v_player_opening_duels_aggregate_bool_exp"] | undefined | null,
	owned_teams?: ResolverInputTypes["teams_bool_exp"] | undefined | null,
	owned_teams_aggregate?: ResolverInputTypes["teams_aggregate_bool_exp"] | undefined | null,
	player_lineup?: ResolverInputTypes["match_lineup_players_bool_exp"] | undefined | null,
	player_lineup_aggregate?: ResolverInputTypes["match_lineup_players_aggregate_bool_exp"] | undefined | null,
	player_unused_utilities?: ResolverInputTypes["player_unused_utility_bool_exp"] | undefined | null,
	player_unused_utilities_aggregate?: ResolverInputTypes["player_unused_utility_aggregate_bool_exp"] | undefined | null,
	profile_url?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	steam_id?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null,
	team_invites?: ResolverInputTypes["team_invites_bool_exp"] | undefined | null,
	team_invites_aggregate?: ResolverInputTypes["team_invites_aggregate_bool_exp"] | undefined | null,
	team_members?: ResolverInputTypes["team_roster_bool_exp"] | undefined | null,
	team_members_aggregate?: ResolverInputTypes["team_roster_aggregate_bool_exp"] | undefined | null,
	teams?: ResolverInputTypes["teams_bool_exp"] | undefined | null,
	tournament_organizers?: ResolverInputTypes["tournament_organizers_bool_exp"] | undefined | null,
	tournament_organizers_aggregate?: ResolverInputTypes["tournament_organizers_aggregate_bool_exp"] | undefined | null,
	tournament_rosters?: ResolverInputTypes["tournament_roster_bool_exp"] | undefined | null,
	tournament_rosters_aggregate?: ResolverInputTypes["tournament_roster_aggregate_bool_exp"] | undefined | null,
	tournaments?: ResolverInputTypes["tournaments_bool_exp"] | undefined | null,
	tournaments_aggregate?: ResolverInputTypes["tournaments_aggregate_bool_exp"] | undefined | null,
	updated_at?: ResolverInputTypes["timestamptz_comparison_exp"] | undefined | null,
	utility_thrown?: ResolverInputTypes["player_utility_bool_exp"] | undefined | null,
	utility_thrown_aggregate?: ResolverInputTypes["player_utility_aggregate_bool_exp"] | undefined | null
};
	/** unique or primary key constraints on table "players" */
["players_constraint"]:players_constraint;
	/** input type for incrementing numeric columns in table "players" */
["players_inc_input"]: {
	steam_id?: ResolverInputTypes["bigint"] | undefined | null
};
	/** input type for inserting data into table "players" */
["players_insert_input"]: {
	assists?: ResolverInputTypes["player_assists_arr_rel_insert_input"] | undefined | null,
	assited_by_players?: ResolverInputTypes["player_assists_arr_rel_insert_input"] | undefined | null,
	avatar_url?: string | undefined | null,
	created_at?: ResolverInputTypes["timestamptz"] | undefined | null,
	damage_dealt?: ResolverInputTypes["player_damages_arr_rel_insert_input"] | undefined | null,
	damage_taken?: ResolverInputTypes["player_damages_arr_rel_insert_input"] | undefined | null,
	deaths?: ResolverInputTypes["player_kills_arr_rel_insert_input"] | undefined | null,
	discord_id?: string | undefined | null,
	flashed_by_players?: ResolverInputTypes["player_flashes_arr_rel_insert_input"] | undefined | null,
	flashed_players?: ResolverInputTypes["player_flashes_arr_rel_insert_input"] | undefined | null,
	invited_players?: ResolverInputTypes["team_invites_arr_rel_insert_input"] | undefined | null,
	kills?: ResolverInputTypes["player_kills_arr_rel_insert_input"] | undefined | null,
	match_lineups?: ResolverInputTypes["match_lineups_arr_rel_insert_input"] | undefined | null,
	multi_kills?: ResolverInputTypes["v_player_multi_kills_arr_rel_insert_input"] | undefined | null,
	name?: string | undefined | null,
	objectives?: ResolverInputTypes["player_objectives_arr_rel_insert_input"] | undefined | null,
	opening_duels?: ResolverInputTypes["v_player_opening_duels_arr_rel_insert_input"] | undefined | null,
	owned_teams?: ResolverInputTypes["teams_arr_rel_insert_input"] | undefined | null,
	player_lineup?: ResolverInputTypes["match_lineup_players_arr_rel_insert_input"] | undefined | null,
	player_unused_utilities?: ResolverInputTypes["player_unused_utility_arr_rel_insert_input"] | undefined | null,
	profile_url?: string | undefined | null,
	steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	team_invites?: ResolverInputTypes["team_invites_arr_rel_insert_input"] | undefined | null,
	team_members?: ResolverInputTypes["team_roster_arr_rel_insert_input"] | undefined | null,
	tournament_organizers?: ResolverInputTypes["tournament_organizers_arr_rel_insert_input"] | undefined | null,
	tournament_rosters?: ResolverInputTypes["tournament_roster_arr_rel_insert_input"] | undefined | null,
	tournaments?: ResolverInputTypes["tournaments_arr_rel_insert_input"] | undefined | null,
	updated_at?: ResolverInputTypes["timestamptz"] | undefined | null,
	utility_thrown?: ResolverInputTypes["player_utility_arr_rel_insert_input"] | undefined | null
};
	/** aggregate max on columns */
["players_max_fields"]: AliasType<{
	avatar_url?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	discord_id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	profile_url?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["players_min_fields"]: AliasType<{
	avatar_url?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	discord_id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	profile_url?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "players" */
["players_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["players"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "players" */
["players_obj_rel_insert_input"]: {
	data: ResolverInputTypes["players_insert_input"],
	/** upsert condition */
	on_conflict?: ResolverInputTypes["players_on_conflict"] | undefined | null
};
	/** on_conflict condition type for table "players" */
["players_on_conflict"]: {
	constraint: ResolverInputTypes["players_constraint"],
	update_columns: Array<ResolverInputTypes["players_update_column"]>,
	where?: ResolverInputTypes["players_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "players". */
["players_order_by"]: {
	assists_aggregate?: ResolverInputTypes["player_assists_aggregate_order_by"] | undefined | null,
	assited_by_players_aggregate?: ResolverInputTypes["player_assists_aggregate_order_by"] | undefined | null,
	avatar_url?: ResolverInputTypes["order_by"] | undefined | null,
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	damage_dealt_aggregate?: ResolverInputTypes["player_damages_aggregate_order_by"] | undefined | null,
	damage_taken_aggregate?: ResolverInputTypes["player_damages_aggregate_order_by"] | undefined | null,
	deaths_aggregate?: ResolverInputTypes["player_kills_aggregate_order_by"] | undefined | null,
	discord_id?: ResolverInputTypes["order_by"] | undefined | null,
	flashed_by_players_aggregate?: ResolverInputTypes["player_flashes_aggregate_order_by"] | undefined | null,
	flashed_players_aggregate?: ResolverInputTypes["player_flashes_aggregate_order_by"] | undefined | null,
	invited_players_aggregate?: ResolverInputTypes["team_invites_aggregate_order_by"] | undefined | null,
	kills_aggregate?: ResolverInputTypes["player_kills_aggregate_order_by"] | undefined | null,
	match_lineups_aggregate?: ResolverInputTypes["match_lineups_aggregate_order_by"] | undefined | null,
	matches_aggregate?: ResolverInputTypes["matches_aggregate_order_by"] | undefined | null,
	multi_kills_aggregate?: ResolverInputTypes["v_player_multi_kills_aggregate_order_by"] | undefined | null,
	name?: ResolverInputTypes["order_by"] | undefined | null,
	objectives_aggregate?: ResolverInputTypes["player_objectives_aggregate_order_by"] | undefined | null,
	opening_duels_aggregate?: ResolverInputTypes["v_player_opening_duels_aggregate_order_by"] | undefined | null,
	owned_teams_aggregate?: ResolverInputTypes["teams_aggregate_order_by"] | undefined | null,
	player_lineup_aggregate?: ResolverInputTypes["match_lineup_players_aggregate_order_by"] | undefined | null,
	player_unused_utilities_aggregate?: ResolverInputTypes["player_unused_utility_aggregate_order_by"] | undefined | null,
	profile_url?: ResolverInputTypes["order_by"] | undefined | null,
	steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	team_invites_aggregate?: ResolverInputTypes["team_invites_aggregate_order_by"] | undefined | null,
	team_members_aggregate?: ResolverInputTypes["team_roster_aggregate_order_by"] | undefined | null,
	teams_aggregate?: ResolverInputTypes["teams_aggregate_order_by"] | undefined | null,
	tournament_organizers_aggregate?: ResolverInputTypes["tournament_organizers_aggregate_order_by"] | undefined | null,
	tournament_rosters_aggregate?: ResolverInputTypes["tournament_roster_aggregate_order_by"] | undefined | null,
	tournaments_aggregate?: ResolverInputTypes["tournaments_aggregate_order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null,
	utility_thrown_aggregate?: ResolverInputTypes["player_utility_aggregate_order_by"] | undefined | null
};
	/** primary key columns input for table: players */
["players_pk_columns_input"]: {
	steam_id: ResolverInputTypes["bigint"]
};
	/** select columns of table "players" */
["players_select_column"]:players_select_column;
	/** input type for updating data in table "players" */
["players_set_input"]: {
	avatar_url?: string | undefined | null,
	created_at?: ResolverInputTypes["timestamptz"] | undefined | null,
	discord_id?: string | undefined | null,
	name?: string | undefined | null,
	profile_url?: string | undefined | null,
	steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	updated_at?: ResolverInputTypes["timestamptz"] | undefined | null
};
	/** aggregate stddev on columns */
["players_stddev_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_pop on columns */
["players_stddev_pop_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_samp on columns */
["players_stddev_samp_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Streaming cursor of the table "players" */
["players_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["players_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["players_stream_cursor_value_input"]: {
	avatar_url?: string | undefined | null,
	created_at?: ResolverInputTypes["timestamptz"] | undefined | null,
	discord_id?: string | undefined | null,
	name?: string | undefined | null,
	profile_url?: string | undefined | null,
	steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	updated_at?: ResolverInputTypes["timestamptz"] | undefined | null
};
	/** aggregate sum on columns */
["players_sum_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** update columns of table "players" */
["players_update_column"]:players_update_column;
	["players_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["players_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["players_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["players_bool_exp"]
};
	/** aggregate var_pop on columns */
["players_var_pop_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate var_samp on columns */
["players_var_samp_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate variance on columns */
["players_variance_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	["query_root"]: AliasType<{
_map_pool?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["_map_pool_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["_map_pool_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["_map_pool_bool_exp"] | undefined | null},ResolverInputTypes["_map_pool"]],
_map_pool_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["_map_pool_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["_map_pool_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["_map_pool_bool_exp"] | undefined | null},ResolverInputTypes["_map_pool_aggregate"]],
_map_pool_by_pk?: [{	map_id: ResolverInputTypes["uuid"],	map_pool_id: ResolverInputTypes["uuid"]},ResolverInputTypes["_map_pool"]],
e_match_map_status?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["e_match_map_status_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["e_match_map_status_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["e_match_map_status_bool_exp"] | undefined | null},ResolverInputTypes["e_match_map_status"]],
e_match_map_status_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["e_match_map_status_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["e_match_map_status_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["e_match_map_status_bool_exp"] | undefined | null},ResolverInputTypes["e_match_map_status_aggregate"]],
e_match_map_status_by_pk?: [{	value: string},ResolverInputTypes["e_match_map_status"]],
e_match_status?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["e_match_status_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["e_match_status_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["e_match_status_bool_exp"] | undefined | null},ResolverInputTypes["e_match_status"]],
e_match_status_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["e_match_status_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["e_match_status_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["e_match_status_bool_exp"] | undefined | null},ResolverInputTypes["e_match_status_aggregate"]],
e_match_status_by_pk?: [{	value: string},ResolverInputTypes["e_match_status"]],
e_match_types?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["e_match_types_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["e_match_types_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["e_match_types_bool_exp"] | undefined | null},ResolverInputTypes["e_match_types"]],
e_match_types_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["e_match_types_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["e_match_types_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["e_match_types_bool_exp"] | undefined | null},ResolverInputTypes["e_match_types_aggregate"]],
e_match_types_by_pk?: [{	value: string},ResolverInputTypes["e_match_types"]],
e_objective_types?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["e_objective_types_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["e_objective_types_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["e_objective_types_bool_exp"] | undefined | null},ResolverInputTypes["e_objective_types"]],
e_objective_types_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["e_objective_types_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["e_objective_types_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["e_objective_types_bool_exp"] | undefined | null},ResolverInputTypes["e_objective_types_aggregate"]],
e_objective_types_by_pk?: [{	value: string},ResolverInputTypes["e_objective_types"]],
e_sides?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["e_sides_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["e_sides_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["e_sides_bool_exp"] | undefined | null},ResolverInputTypes["e_sides"]],
e_sides_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["e_sides_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["e_sides_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["e_sides_bool_exp"] | undefined | null},ResolverInputTypes["e_sides_aggregate"]],
e_sides_by_pk?: [{	value: string},ResolverInputTypes["e_sides"]],
e_team_roles?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["e_team_roles_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["e_team_roles_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["e_team_roles_bool_exp"] | undefined | null},ResolverInputTypes["e_team_roles"]],
e_team_roles_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["e_team_roles_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["e_team_roles_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["e_team_roles_bool_exp"] | undefined | null},ResolverInputTypes["e_team_roles_aggregate"]],
e_team_roles_by_pk?: [{	value: string},ResolverInputTypes["e_team_roles"]],
e_timeout_settings?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["e_timeout_settings_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["e_timeout_settings_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["e_timeout_settings_bool_exp"] | undefined | null},ResolverInputTypes["e_timeout_settings"]],
e_timeout_settings_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["e_timeout_settings_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["e_timeout_settings_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["e_timeout_settings_bool_exp"] | undefined | null},ResolverInputTypes["e_timeout_settings_aggregate"]],
e_timeout_settings_by_pk?: [{	value: string},ResolverInputTypes["e_timeout_settings"]],
e_utility_types?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["e_utility_types_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["e_utility_types_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["e_utility_types_bool_exp"] | undefined | null},ResolverInputTypes["e_utility_types"]],
e_utility_types_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["e_utility_types_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["e_utility_types_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["e_utility_types_bool_exp"] | undefined | null},ResolverInputTypes["e_utility_types_aggregate"]],
e_utility_types_by_pk?: [{	value: string},ResolverInputTypes["e_utility_types"]],
e_veto_pick_types?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["e_veto_pick_types_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["e_veto_pick_types_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["e_veto_pick_types_bool_exp"] | undefined | null},ResolverInputTypes["e_veto_pick_types"]],
e_veto_pick_types_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["e_veto_pick_types_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["e_veto_pick_types_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["e_veto_pick_types_bool_exp"] | undefined | null},ResolverInputTypes["e_veto_pick_types_aggregate"]],
e_veto_pick_types_by_pk?: [{	value: string},ResolverInputTypes["e_veto_pick_types"]],
map_pools?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["map_pools_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["map_pools_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["map_pools_bool_exp"] | undefined | null},ResolverInputTypes["map_pools"]],
map_pools_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["map_pools_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["map_pools_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["map_pools_bool_exp"] | undefined | null},ResolverInputTypes["map_pools_aggregate"]],
map_pools_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["map_pools"]],
maps?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["maps_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["maps_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["maps_bool_exp"] | undefined | null},ResolverInputTypes["maps"]],
maps_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["maps_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["maps_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["maps_bool_exp"] | undefined | null},ResolverInputTypes["maps_aggregate"]],
maps_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["maps"]],
match_lineup_players?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_lineup_players_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_lineup_players_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_lineup_players_bool_exp"] | undefined | null},ResolverInputTypes["match_lineup_players"]],
match_lineup_players_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_lineup_players_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_lineup_players_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_lineup_players_bool_exp"] | undefined | null},ResolverInputTypes["match_lineup_players_aggregate"]],
match_lineup_players_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["match_lineup_players"]],
match_lineups?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_lineups_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_lineups_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_lineups_bool_exp"] | undefined | null},ResolverInputTypes["match_lineups"]],
match_lineups_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_lineups_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_lineups_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_lineups_bool_exp"] | undefined | null},ResolverInputTypes["match_lineups_aggregate"]],
match_lineups_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["match_lineups"]],
match_map_demos?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_map_demos_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_map_demos_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_map_demos_bool_exp"] | undefined | null},ResolverInputTypes["match_map_demos"]],
match_map_demos_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_map_demos_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_map_demos_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_map_demos_bool_exp"] | undefined | null},ResolverInputTypes["match_map_demos_aggregate"]],
match_map_demos_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["match_map_demos"]],
match_map_rounds?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_map_rounds_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_map_rounds_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_map_rounds_bool_exp"] | undefined | null},ResolverInputTypes["match_map_rounds"]],
match_map_rounds_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_map_rounds_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_map_rounds_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_map_rounds_bool_exp"] | undefined | null},ResolverInputTypes["match_map_rounds_aggregate"]],
match_map_rounds_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["match_map_rounds"]],
match_maps?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_maps_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_maps_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_maps_bool_exp"] | undefined | null},ResolverInputTypes["match_maps"]],
match_maps_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_maps_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_maps_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_maps_bool_exp"] | undefined | null},ResolverInputTypes["match_maps_aggregate"]],
match_maps_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["match_maps"]],
match_veto_picks?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_veto_picks_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_veto_picks_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_veto_picks_bool_exp"] | undefined | null},ResolverInputTypes["match_veto_picks"]],
match_veto_picks_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_veto_picks_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_veto_picks_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_veto_picks_bool_exp"] | undefined | null},ResolverInputTypes["match_veto_picks_aggregate"]],
match_veto_picks_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["match_veto_picks"]],
matches?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["matches_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["matches_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["matches_bool_exp"] | undefined | null},ResolverInputTypes["matches"]],
matches_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["matches_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["matches_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["matches_bool_exp"] | undefined | null},ResolverInputTypes["matches_aggregate"]],
matches_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["matches"]],
	/** Gets Current User */
	me?:ResolverInputTypes["MeResponse"],
player_assists?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_assists_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_assists_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_assists_bool_exp"] | undefined | null},ResolverInputTypes["player_assists"]],
player_assists_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_assists_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_assists_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_assists_bool_exp"] | undefined | null},ResolverInputTypes["player_assists_aggregate"]],
player_assists_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["player_assists"]],
player_damages?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_damages_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_damages_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_damages_bool_exp"] | undefined | null},ResolverInputTypes["player_damages"]],
player_damages_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_damages_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_damages_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_damages_bool_exp"] | undefined | null},ResolverInputTypes["player_damages_aggregate"]],
player_damages_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["player_damages"]],
player_flashes?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_flashes_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_flashes_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_flashes_bool_exp"] | undefined | null},ResolverInputTypes["player_flashes"]],
player_flashes_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_flashes_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_flashes_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_flashes_bool_exp"] | undefined | null},ResolverInputTypes["player_flashes_aggregate"]],
player_flashes_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["player_flashes"]],
player_kills?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_kills_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_kills_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_kills_bool_exp"] | undefined | null},ResolverInputTypes["player_kills"]],
player_kills_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_kills_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_kills_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_kills_bool_exp"] | undefined | null},ResolverInputTypes["player_kills_aggregate"]],
player_kills_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["player_kills"]],
player_objectives?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_objectives_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_objectives_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_objectives_bool_exp"] | undefined | null},ResolverInputTypes["player_objectives"]],
player_objectives_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_objectives_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_objectives_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_objectives_bool_exp"] | undefined | null},ResolverInputTypes["player_objectives_aggregate"]],
player_objectives_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["player_objectives"]],
player_unused_utility?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_unused_utility_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_unused_utility_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_unused_utility_bool_exp"] | undefined | null},ResolverInputTypes["player_unused_utility"]],
player_unused_utility_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_unused_utility_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_unused_utility_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_unused_utility_bool_exp"] | undefined | null},ResolverInputTypes["player_unused_utility_aggregate"]],
player_unused_utility_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["player_unused_utility"]],
player_utility?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_utility_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_utility_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_utility_bool_exp"] | undefined | null},ResolverInputTypes["player_utility"]],
player_utility_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_utility_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_utility_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_utility_bool_exp"] | undefined | null},ResolverInputTypes["player_utility_aggregate"]],
player_utility_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["player_utility"]],
players?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["players_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["players_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["players_bool_exp"] | undefined | null},ResolverInputTypes["players"]],
players_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["players_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["players_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["players_bool_exp"] | undefined | null},ResolverInputTypes["players_aggregate"]],
players_by_pk?: [{	steam_id: ResolverInputTypes["bigint"]},ResolverInputTypes["players"]],
servers?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["servers_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["servers_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["servers_bool_exp"] | undefined | null},ResolverInputTypes["servers"]],
servers_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["servers_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["servers_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["servers_bool_exp"] | undefined | null},ResolverInputTypes["servers_aggregate"]],
servers_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["servers"]],
team_invites?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["team_invites_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["team_invites_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["team_invites_bool_exp"] | undefined | null},ResolverInputTypes["team_invites"]],
team_invites_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["team_invites_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["team_invites_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["team_invites_bool_exp"] | undefined | null},ResolverInputTypes["team_invites_aggregate"]],
team_invites_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["team_invites"]],
team_roster?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["team_roster_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["team_roster_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["team_roster_bool_exp"] | undefined | null},ResolverInputTypes["team_roster"]],
team_roster_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["team_roster_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["team_roster_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["team_roster_bool_exp"] | undefined | null},ResolverInputTypes["team_roster_aggregate"]],
team_roster_by_pk?: [{	player_steam_id: ResolverInputTypes["bigint"],	team_id: ResolverInputTypes["uuid"]},ResolverInputTypes["team_roster"]],
teams?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["teams_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["teams_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["teams_bool_exp"] | undefined | null},ResolverInputTypes["teams"]],
teams_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["teams_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["teams_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["teams_bool_exp"] | undefined | null},ResolverInputTypes["teams_aggregate"]],
teams_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["teams"]],
tournament_organizers?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_organizers_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_organizers_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_organizers_bool_exp"] | undefined | null},ResolverInputTypes["tournament_organizers"]],
tournament_organizers_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_organizers_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_organizers_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_organizers_bool_exp"] | undefined | null},ResolverInputTypes["tournament_organizers_aggregate"]],
tournament_organizers_by_pk?: [{	steam_id: ResolverInputTypes["bigint"],	tournament_id: ResolverInputTypes["uuid"]},ResolverInputTypes["tournament_organizers"]],
tournament_roster?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_roster_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_roster_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_roster_bool_exp"] | undefined | null},ResolverInputTypes["tournament_roster"]],
tournament_roster_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_roster_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_roster_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_roster_bool_exp"] | undefined | null},ResolverInputTypes["tournament_roster_aggregate"]],
tournament_roster_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["tournament_roster"]],
tournament_servers?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_servers_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_servers_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_servers_bool_exp"] | undefined | null},ResolverInputTypes["tournament_servers"]],
tournament_servers_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_servers_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_servers_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_servers_bool_exp"] | undefined | null},ResolverInputTypes["tournament_servers_aggregate"]],
tournament_servers_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["tournament_servers"]],
tournament_stages?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_stages_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_stages_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_stages_bool_exp"] | undefined | null},ResolverInputTypes["tournament_stages"]],
tournament_stages_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_stages_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_stages_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_stages_bool_exp"] | undefined | null},ResolverInputTypes["tournament_stages_aggregate"]],
tournament_stages_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["tournament_stages"]],
tournament_teams?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_teams_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_teams_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_teams_bool_exp"] | undefined | null},ResolverInputTypes["tournament_teams"]],
tournament_teams_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_teams_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_teams_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_teams_bool_exp"] | undefined | null},ResolverInputTypes["tournament_teams_aggregate"]],
tournament_teams_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["tournament_teams"]],
tournaments?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournaments_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournaments_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournaments_bool_exp"] | undefined | null},ResolverInputTypes["tournaments"]],
tournaments_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournaments_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournaments_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournaments_bool_exp"] | undefined | null},ResolverInputTypes["tournaments_aggregate"]],
tournaments_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["tournaments"]],
v_match_captains?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_match_captains_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_match_captains_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_match_captains_bool_exp"] | undefined | null},ResolverInputTypes["v_match_captains"]],
v_match_captains_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_match_captains_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_match_captains_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_match_captains_bool_exp"] | undefined | null},ResolverInputTypes["v_match_captains_aggregate"]],
v_player_arch_nemesis?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_player_arch_nemesis_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_player_arch_nemesis_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_player_arch_nemesis_bool_exp"] | undefined | null},ResolverInputTypes["v_player_arch_nemesis"]],
v_player_arch_nemesis_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_player_arch_nemesis_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_player_arch_nemesis_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_player_arch_nemesis_bool_exp"] | undefined | null},ResolverInputTypes["v_player_arch_nemesis_aggregate"]],
v_player_damage?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_player_damage_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_player_damage_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_player_damage_bool_exp"] | undefined | null},ResolverInputTypes["v_player_damage"]],
v_player_damage_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_player_damage_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_player_damage_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_player_damage_bool_exp"] | undefined | null},ResolverInputTypes["v_player_damage_aggregate"]],
v_player_killed_player_counts?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_player_killed_player_counts_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_player_killed_player_counts_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_player_killed_player_counts_bool_exp"] | undefined | null},ResolverInputTypes["v_player_killed_player_counts"]],
v_player_killed_player_counts_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_player_killed_player_counts_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_player_killed_player_counts_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_player_killed_player_counts_bool_exp"] | undefined | null},ResolverInputTypes["v_player_killed_player_counts_aggregate"]],
v_player_match_kills?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_player_match_kills_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_player_match_kills_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_player_match_kills_bool_exp"] | undefined | null},ResolverInputTypes["v_player_match_kills"]],
v_player_match_kills_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_player_match_kills_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_player_match_kills_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_player_match_kills_bool_exp"] | undefined | null},ResolverInputTypes["v_player_match_kills_aggregate"]],
v_player_multi_kills?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_player_multi_kills_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_player_multi_kills_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_player_multi_kills_bool_exp"] | undefined | null},ResolverInputTypes["v_player_multi_kills"]],
v_player_multi_kills_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_player_multi_kills_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_player_multi_kills_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_player_multi_kills_bool_exp"] | undefined | null},ResolverInputTypes["v_player_multi_kills_aggregate"]],
v_player_opening_duels?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_player_opening_duels_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_player_opening_duels_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_player_opening_duels_bool_exp"] | undefined | null},ResolverInputTypes["v_player_opening_duels"]],
v_player_opening_duels_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_player_opening_duels_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_player_opening_duels_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_player_opening_duels_bool_exp"] | undefined | null},ResolverInputTypes["v_player_opening_duels_aggregate"]],
v_pool_maps?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_pool_maps_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_pool_maps_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_pool_maps_bool_exp"] | undefined | null},ResolverInputTypes["v_pool_maps"]],
v_pool_maps_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_pool_maps_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_pool_maps_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_pool_maps_bool_exp"] | undefined | null},ResolverInputTypes["v_pool_maps_aggregate"]],
		__typename?: boolean | `@${string}`
}>;
	/** columns and relationships of "servers" */
["servers"]: AliasType<{
	api_password?:boolean | `@${string}`,
	/** A computed field, executes function "get_server_current_match_id" */
	current_match_id?:boolean | `@${string}`,
	enabled?:boolean | `@${string}`,
	host?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	label?:boolean | `@${string}`,
matches?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["matches_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["matches_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["matches_bool_exp"] | undefined | null},ResolverInputTypes["matches"]],
matches_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["matches_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["matches_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["matches_bool_exp"] | undefined | null},ResolverInputTypes["matches_aggregate"]],
	on_demand?:boolean | `@${string}`,
	/** An object relationship */
	owner?:ResolverInputTypes["players"],
	player_steam_id?:boolean | `@${string}`,
	port?:boolean | `@${string}`,
	rcon_password?:boolean | `@${string}`,
tournament_servers?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_servers_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_servers_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_servers_bool_exp"] | undefined | null},ResolverInputTypes["tournament_servers"]],
tournament_servers_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_servers_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_servers_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_servers_bool_exp"] | undefined | null},ResolverInputTypes["tournament_servers_aggregate"]],
	tv_port?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "servers" */
["servers_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["servers_aggregate_fields"],
	nodes?:ResolverInputTypes["servers"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "servers" */
["servers_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["servers_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["servers_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["servers_max_fields"],
	min?:ResolverInputTypes["servers_min_fields"],
	stddev?:ResolverInputTypes["servers_stddev_fields"],
	stddev_pop?:ResolverInputTypes["servers_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["servers_stddev_samp_fields"],
	sum?:ResolverInputTypes["servers_sum_fields"],
	var_pop?:ResolverInputTypes["servers_var_pop_fields"],
	var_samp?:ResolverInputTypes["servers_var_samp_fields"],
	variance?:ResolverInputTypes["servers_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate avg on columns */
["servers_avg_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	port?:boolean | `@${string}`,
	tv_port?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "servers". All fields are combined with a logical 'AND'. */
["servers_bool_exp"]: {
	_and?: Array<ResolverInputTypes["servers_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["servers_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["servers_bool_exp"]> | undefined | null,
	api_password?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	current_match_id?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	enabled?: ResolverInputTypes["Boolean_comparison_exp"] | undefined | null,
	host?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	label?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	matches?: ResolverInputTypes["matches_bool_exp"] | undefined | null,
	matches_aggregate?: ResolverInputTypes["matches_aggregate_bool_exp"] | undefined | null,
	on_demand?: ResolverInputTypes["Boolean_comparison_exp"] | undefined | null,
	owner?: ResolverInputTypes["players_bool_exp"] | undefined | null,
	player_steam_id?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null,
	port?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	rcon_password?: ResolverInputTypes["bytea_comparison_exp"] | undefined | null,
	tournament_servers?: ResolverInputTypes["tournament_servers_bool_exp"] | undefined | null,
	tournament_servers_aggregate?: ResolverInputTypes["tournament_servers_aggregate_bool_exp"] | undefined | null,
	tv_port?: ResolverInputTypes["Int_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "servers" */
["servers_constraint"]:servers_constraint;
	/** input type for incrementing numeric columns in table "servers" */
["servers_inc_input"]: {
	player_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	port?: number | undefined | null,
	tv_port?: number | undefined | null
};
	/** input type for inserting data into table "servers" */
["servers_insert_input"]: {
	api_password?: ResolverInputTypes["uuid"] | undefined | null,
	enabled?: boolean | undefined | null,
	host?: string | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	label?: string | undefined | null,
	matches?: ResolverInputTypes["matches_arr_rel_insert_input"] | undefined | null,
	on_demand?: boolean | undefined | null,
	owner?: ResolverInputTypes["players_obj_rel_insert_input"] | undefined | null,
	player_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	port?: number | undefined | null,
	rcon_password?: ResolverInputTypes["bytea"] | undefined | null,
	tournament_servers?: ResolverInputTypes["tournament_servers_arr_rel_insert_input"] | undefined | null,
	tv_port?: number | undefined | null
};
	/** aggregate max on columns */
["servers_max_fields"]: AliasType<{
	api_password?:boolean | `@${string}`,
	/** A computed field, executes function "get_server_current_match_id" */
	current_match_id?:boolean | `@${string}`,
	host?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	label?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	port?:boolean | `@${string}`,
	tv_port?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["servers_min_fields"]: AliasType<{
	api_password?:boolean | `@${string}`,
	/** A computed field, executes function "get_server_current_match_id" */
	current_match_id?:boolean | `@${string}`,
	host?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	label?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	port?:boolean | `@${string}`,
	tv_port?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "servers" */
["servers_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["servers"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "servers" */
["servers_obj_rel_insert_input"]: {
	data: ResolverInputTypes["servers_insert_input"],
	/** upsert condition */
	on_conflict?: ResolverInputTypes["servers_on_conflict"] | undefined | null
};
	/** on_conflict condition type for table "servers" */
["servers_on_conflict"]: {
	constraint: ResolverInputTypes["servers_constraint"],
	update_columns: Array<ResolverInputTypes["servers_update_column"]>,
	where?: ResolverInputTypes["servers_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "servers". */
["servers_order_by"]: {
	api_password?: ResolverInputTypes["order_by"] | undefined | null,
	current_match_id?: ResolverInputTypes["order_by"] | undefined | null,
	enabled?: ResolverInputTypes["order_by"] | undefined | null,
	host?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	label?: ResolverInputTypes["order_by"] | undefined | null,
	matches_aggregate?: ResolverInputTypes["matches_aggregate_order_by"] | undefined | null,
	on_demand?: ResolverInputTypes["order_by"] | undefined | null,
	owner?: ResolverInputTypes["players_order_by"] | undefined | null,
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	port?: ResolverInputTypes["order_by"] | undefined | null,
	rcon_password?: ResolverInputTypes["order_by"] | undefined | null,
	tournament_servers_aggregate?: ResolverInputTypes["tournament_servers_aggregate_order_by"] | undefined | null,
	tv_port?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: servers */
["servers_pk_columns_input"]: {
	id: ResolverInputTypes["uuid"]
};
	/** select columns of table "servers" */
["servers_select_column"]:servers_select_column;
	/** input type for updating data in table "servers" */
["servers_set_input"]: {
	api_password?: ResolverInputTypes["uuid"] | undefined | null,
	enabled?: boolean | undefined | null,
	host?: string | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	label?: string | undefined | null,
	on_demand?: boolean | undefined | null,
	player_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	port?: number | undefined | null,
	rcon_password?: ResolverInputTypes["bytea"] | undefined | null,
	tv_port?: number | undefined | null
};
	/** aggregate stddev on columns */
["servers_stddev_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	port?:boolean | `@${string}`,
	tv_port?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_pop on columns */
["servers_stddev_pop_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	port?:boolean | `@${string}`,
	tv_port?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_samp on columns */
["servers_stddev_samp_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	port?:boolean | `@${string}`,
	tv_port?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Streaming cursor of the table "servers" */
["servers_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["servers_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["servers_stream_cursor_value_input"]: {
	api_password?: ResolverInputTypes["uuid"] | undefined | null,
	enabled?: boolean | undefined | null,
	host?: string | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	label?: string | undefined | null,
	on_demand?: boolean | undefined | null,
	player_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	port?: number | undefined | null,
	rcon_password?: ResolverInputTypes["bytea"] | undefined | null,
	tv_port?: number | undefined | null
};
	/** aggregate sum on columns */
["servers_sum_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	port?:boolean | `@${string}`,
	tv_port?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** update columns of table "servers" */
["servers_update_column"]:servers_update_column;
	["servers_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["servers_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["servers_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["servers_bool_exp"]
};
	/** aggregate var_pop on columns */
["servers_var_pop_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	port?:boolean | `@${string}`,
	tv_port?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate var_samp on columns */
["servers_var_samp_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	port?:boolean | `@${string}`,
	tv_port?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate variance on columns */
["servers_variance_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	port?:boolean | `@${string}`,
	tv_port?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	["subscription_root"]: AliasType<{
_map_pool?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["_map_pool_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["_map_pool_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["_map_pool_bool_exp"] | undefined | null},ResolverInputTypes["_map_pool"]],
_map_pool_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["_map_pool_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["_map_pool_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["_map_pool_bool_exp"] | undefined | null},ResolverInputTypes["_map_pool_aggregate"]],
_map_pool_by_pk?: [{	map_id: ResolverInputTypes["uuid"],	map_pool_id: ResolverInputTypes["uuid"]},ResolverInputTypes["_map_pool"]],
_map_pool_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["_map_pool_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["_map_pool_bool_exp"] | undefined | null},ResolverInputTypes["_map_pool"]],
e_match_map_status?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["e_match_map_status_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["e_match_map_status_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["e_match_map_status_bool_exp"] | undefined | null},ResolverInputTypes["e_match_map_status"]],
e_match_map_status_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["e_match_map_status_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["e_match_map_status_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["e_match_map_status_bool_exp"] | undefined | null},ResolverInputTypes["e_match_map_status_aggregate"]],
e_match_map_status_by_pk?: [{	value: string},ResolverInputTypes["e_match_map_status"]],
e_match_map_status_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["e_match_map_status_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["e_match_map_status_bool_exp"] | undefined | null},ResolverInputTypes["e_match_map_status"]],
e_match_status?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["e_match_status_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["e_match_status_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["e_match_status_bool_exp"] | undefined | null},ResolverInputTypes["e_match_status"]],
e_match_status_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["e_match_status_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["e_match_status_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["e_match_status_bool_exp"] | undefined | null},ResolverInputTypes["e_match_status_aggregate"]],
e_match_status_by_pk?: [{	value: string},ResolverInputTypes["e_match_status"]],
e_match_status_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["e_match_status_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["e_match_status_bool_exp"] | undefined | null},ResolverInputTypes["e_match_status"]],
e_match_types?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["e_match_types_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["e_match_types_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["e_match_types_bool_exp"] | undefined | null},ResolverInputTypes["e_match_types"]],
e_match_types_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["e_match_types_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["e_match_types_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["e_match_types_bool_exp"] | undefined | null},ResolverInputTypes["e_match_types_aggregate"]],
e_match_types_by_pk?: [{	value: string},ResolverInputTypes["e_match_types"]],
e_match_types_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["e_match_types_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["e_match_types_bool_exp"] | undefined | null},ResolverInputTypes["e_match_types"]],
e_objective_types?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["e_objective_types_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["e_objective_types_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["e_objective_types_bool_exp"] | undefined | null},ResolverInputTypes["e_objective_types"]],
e_objective_types_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["e_objective_types_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["e_objective_types_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["e_objective_types_bool_exp"] | undefined | null},ResolverInputTypes["e_objective_types_aggregate"]],
e_objective_types_by_pk?: [{	value: string},ResolverInputTypes["e_objective_types"]],
e_objective_types_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["e_objective_types_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["e_objective_types_bool_exp"] | undefined | null},ResolverInputTypes["e_objective_types"]],
e_sides?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["e_sides_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["e_sides_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["e_sides_bool_exp"] | undefined | null},ResolverInputTypes["e_sides"]],
e_sides_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["e_sides_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["e_sides_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["e_sides_bool_exp"] | undefined | null},ResolverInputTypes["e_sides_aggregate"]],
e_sides_by_pk?: [{	value: string},ResolverInputTypes["e_sides"]],
e_sides_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["e_sides_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["e_sides_bool_exp"] | undefined | null},ResolverInputTypes["e_sides"]],
e_team_roles?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["e_team_roles_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["e_team_roles_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["e_team_roles_bool_exp"] | undefined | null},ResolverInputTypes["e_team_roles"]],
e_team_roles_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["e_team_roles_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["e_team_roles_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["e_team_roles_bool_exp"] | undefined | null},ResolverInputTypes["e_team_roles_aggregate"]],
e_team_roles_by_pk?: [{	value: string},ResolverInputTypes["e_team_roles"]],
e_team_roles_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["e_team_roles_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["e_team_roles_bool_exp"] | undefined | null},ResolverInputTypes["e_team_roles"]],
e_timeout_settings?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["e_timeout_settings_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["e_timeout_settings_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["e_timeout_settings_bool_exp"] | undefined | null},ResolverInputTypes["e_timeout_settings"]],
e_timeout_settings_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["e_timeout_settings_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["e_timeout_settings_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["e_timeout_settings_bool_exp"] | undefined | null},ResolverInputTypes["e_timeout_settings_aggregate"]],
e_timeout_settings_by_pk?: [{	value: string},ResolverInputTypes["e_timeout_settings"]],
e_timeout_settings_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["e_timeout_settings_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["e_timeout_settings_bool_exp"] | undefined | null},ResolverInputTypes["e_timeout_settings"]],
e_utility_types?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["e_utility_types_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["e_utility_types_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["e_utility_types_bool_exp"] | undefined | null},ResolverInputTypes["e_utility_types"]],
e_utility_types_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["e_utility_types_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["e_utility_types_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["e_utility_types_bool_exp"] | undefined | null},ResolverInputTypes["e_utility_types_aggregate"]],
e_utility_types_by_pk?: [{	value: string},ResolverInputTypes["e_utility_types"]],
e_utility_types_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["e_utility_types_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["e_utility_types_bool_exp"] | undefined | null},ResolverInputTypes["e_utility_types"]],
e_veto_pick_types?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["e_veto_pick_types_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["e_veto_pick_types_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["e_veto_pick_types_bool_exp"] | undefined | null},ResolverInputTypes["e_veto_pick_types"]],
e_veto_pick_types_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["e_veto_pick_types_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["e_veto_pick_types_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["e_veto_pick_types_bool_exp"] | undefined | null},ResolverInputTypes["e_veto_pick_types_aggregate"]],
e_veto_pick_types_by_pk?: [{	value: string},ResolverInputTypes["e_veto_pick_types"]],
e_veto_pick_types_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["e_veto_pick_types_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["e_veto_pick_types_bool_exp"] | undefined | null},ResolverInputTypes["e_veto_pick_types"]],
map_pools?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["map_pools_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["map_pools_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["map_pools_bool_exp"] | undefined | null},ResolverInputTypes["map_pools"]],
map_pools_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["map_pools_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["map_pools_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["map_pools_bool_exp"] | undefined | null},ResolverInputTypes["map_pools_aggregate"]],
map_pools_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["map_pools"]],
map_pools_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["map_pools_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["map_pools_bool_exp"] | undefined | null},ResolverInputTypes["map_pools"]],
maps?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["maps_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["maps_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["maps_bool_exp"] | undefined | null},ResolverInputTypes["maps"]],
maps_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["maps_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["maps_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["maps_bool_exp"] | undefined | null},ResolverInputTypes["maps_aggregate"]],
maps_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["maps"]],
maps_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["maps_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["maps_bool_exp"] | undefined | null},ResolverInputTypes["maps"]],
match_lineup_players?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_lineup_players_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_lineup_players_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_lineup_players_bool_exp"] | undefined | null},ResolverInputTypes["match_lineup_players"]],
match_lineup_players_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_lineup_players_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_lineup_players_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_lineup_players_bool_exp"] | undefined | null},ResolverInputTypes["match_lineup_players_aggregate"]],
match_lineup_players_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["match_lineup_players"]],
match_lineup_players_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["match_lineup_players_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["match_lineup_players_bool_exp"] | undefined | null},ResolverInputTypes["match_lineup_players"]],
match_lineups?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_lineups_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_lineups_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_lineups_bool_exp"] | undefined | null},ResolverInputTypes["match_lineups"]],
match_lineups_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_lineups_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_lineups_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_lineups_bool_exp"] | undefined | null},ResolverInputTypes["match_lineups_aggregate"]],
match_lineups_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["match_lineups"]],
match_lineups_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["match_lineups_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["match_lineups_bool_exp"] | undefined | null},ResolverInputTypes["match_lineups"]],
match_map_demos?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_map_demos_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_map_demos_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_map_demos_bool_exp"] | undefined | null},ResolverInputTypes["match_map_demos"]],
match_map_demos_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_map_demos_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_map_demos_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_map_demos_bool_exp"] | undefined | null},ResolverInputTypes["match_map_demos_aggregate"]],
match_map_demos_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["match_map_demos"]],
match_map_demos_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["match_map_demos_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["match_map_demos_bool_exp"] | undefined | null},ResolverInputTypes["match_map_demos"]],
match_map_rounds?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_map_rounds_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_map_rounds_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_map_rounds_bool_exp"] | undefined | null},ResolverInputTypes["match_map_rounds"]],
match_map_rounds_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_map_rounds_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_map_rounds_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_map_rounds_bool_exp"] | undefined | null},ResolverInputTypes["match_map_rounds_aggregate"]],
match_map_rounds_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["match_map_rounds"]],
match_map_rounds_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["match_map_rounds_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["match_map_rounds_bool_exp"] | undefined | null},ResolverInputTypes["match_map_rounds"]],
match_maps?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_maps_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_maps_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_maps_bool_exp"] | undefined | null},ResolverInputTypes["match_maps"]],
match_maps_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_maps_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_maps_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_maps_bool_exp"] | undefined | null},ResolverInputTypes["match_maps_aggregate"]],
match_maps_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["match_maps"]],
match_maps_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["match_maps_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["match_maps_bool_exp"] | undefined | null},ResolverInputTypes["match_maps"]],
match_veto_picks?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_veto_picks_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_veto_picks_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_veto_picks_bool_exp"] | undefined | null},ResolverInputTypes["match_veto_picks"]],
match_veto_picks_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_veto_picks_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_veto_picks_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_veto_picks_bool_exp"] | undefined | null},ResolverInputTypes["match_veto_picks_aggregate"]],
match_veto_picks_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["match_veto_picks"]],
match_veto_picks_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["match_veto_picks_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["match_veto_picks_bool_exp"] | undefined | null},ResolverInputTypes["match_veto_picks"]],
matches?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["matches_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["matches_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["matches_bool_exp"] | undefined | null},ResolverInputTypes["matches"]],
matches_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["matches_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["matches_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["matches_bool_exp"] | undefined | null},ResolverInputTypes["matches_aggregate"]],
matches_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["matches"]],
matches_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["matches_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["matches_bool_exp"] | undefined | null},ResolverInputTypes["matches"]],
player_assists?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_assists_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_assists_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_assists_bool_exp"] | undefined | null},ResolverInputTypes["player_assists"]],
player_assists_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_assists_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_assists_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_assists_bool_exp"] | undefined | null},ResolverInputTypes["player_assists_aggregate"]],
player_assists_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["player_assists"]],
player_assists_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["player_assists_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["player_assists_bool_exp"] | undefined | null},ResolverInputTypes["player_assists"]],
player_damages?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_damages_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_damages_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_damages_bool_exp"] | undefined | null},ResolverInputTypes["player_damages"]],
player_damages_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_damages_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_damages_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_damages_bool_exp"] | undefined | null},ResolverInputTypes["player_damages_aggregate"]],
player_damages_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["player_damages"]],
player_damages_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["player_damages_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["player_damages_bool_exp"] | undefined | null},ResolverInputTypes["player_damages"]],
player_flashes?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_flashes_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_flashes_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_flashes_bool_exp"] | undefined | null},ResolverInputTypes["player_flashes"]],
player_flashes_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_flashes_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_flashes_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_flashes_bool_exp"] | undefined | null},ResolverInputTypes["player_flashes_aggregate"]],
player_flashes_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["player_flashes"]],
player_flashes_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["player_flashes_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["player_flashes_bool_exp"] | undefined | null},ResolverInputTypes["player_flashes"]],
player_kills?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_kills_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_kills_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_kills_bool_exp"] | undefined | null},ResolverInputTypes["player_kills"]],
player_kills_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_kills_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_kills_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_kills_bool_exp"] | undefined | null},ResolverInputTypes["player_kills_aggregate"]],
player_kills_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["player_kills"]],
player_kills_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["player_kills_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["player_kills_bool_exp"] | undefined | null},ResolverInputTypes["player_kills"]],
player_objectives?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_objectives_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_objectives_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_objectives_bool_exp"] | undefined | null},ResolverInputTypes["player_objectives"]],
player_objectives_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_objectives_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_objectives_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_objectives_bool_exp"] | undefined | null},ResolverInputTypes["player_objectives_aggregate"]],
player_objectives_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["player_objectives"]],
player_objectives_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["player_objectives_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["player_objectives_bool_exp"] | undefined | null},ResolverInputTypes["player_objectives"]],
player_unused_utility?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_unused_utility_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_unused_utility_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_unused_utility_bool_exp"] | undefined | null},ResolverInputTypes["player_unused_utility"]],
player_unused_utility_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_unused_utility_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_unused_utility_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_unused_utility_bool_exp"] | undefined | null},ResolverInputTypes["player_unused_utility_aggregate"]],
player_unused_utility_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["player_unused_utility"]],
player_unused_utility_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["player_unused_utility_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["player_unused_utility_bool_exp"] | undefined | null},ResolverInputTypes["player_unused_utility"]],
player_utility?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_utility_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_utility_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_utility_bool_exp"] | undefined | null},ResolverInputTypes["player_utility"]],
player_utility_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["player_utility_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["player_utility_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["player_utility_bool_exp"] | undefined | null},ResolverInputTypes["player_utility_aggregate"]],
player_utility_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["player_utility"]],
player_utility_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["player_utility_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["player_utility_bool_exp"] | undefined | null},ResolverInputTypes["player_utility"]],
players?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["players_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["players_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["players_bool_exp"] | undefined | null},ResolverInputTypes["players"]],
players_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["players_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["players_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["players_bool_exp"] | undefined | null},ResolverInputTypes["players_aggregate"]],
players_by_pk?: [{	steam_id: ResolverInputTypes["bigint"]},ResolverInputTypes["players"]],
players_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["players_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["players_bool_exp"] | undefined | null},ResolverInputTypes["players"]],
servers?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["servers_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["servers_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["servers_bool_exp"] | undefined | null},ResolverInputTypes["servers"]],
servers_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["servers_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["servers_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["servers_bool_exp"] | undefined | null},ResolverInputTypes["servers_aggregate"]],
servers_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["servers"]],
servers_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["servers_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["servers_bool_exp"] | undefined | null},ResolverInputTypes["servers"]],
team_invites?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["team_invites_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["team_invites_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["team_invites_bool_exp"] | undefined | null},ResolverInputTypes["team_invites"]],
team_invites_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["team_invites_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["team_invites_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["team_invites_bool_exp"] | undefined | null},ResolverInputTypes["team_invites_aggregate"]],
team_invites_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["team_invites"]],
team_invites_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["team_invites_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["team_invites_bool_exp"] | undefined | null},ResolverInputTypes["team_invites"]],
team_roster?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["team_roster_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["team_roster_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["team_roster_bool_exp"] | undefined | null},ResolverInputTypes["team_roster"]],
team_roster_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["team_roster_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["team_roster_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["team_roster_bool_exp"] | undefined | null},ResolverInputTypes["team_roster_aggregate"]],
team_roster_by_pk?: [{	player_steam_id: ResolverInputTypes["bigint"],	team_id: ResolverInputTypes["uuid"]},ResolverInputTypes["team_roster"]],
team_roster_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["team_roster_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["team_roster_bool_exp"] | undefined | null},ResolverInputTypes["team_roster"]],
teams?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["teams_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["teams_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["teams_bool_exp"] | undefined | null},ResolverInputTypes["teams"]],
teams_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["teams_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["teams_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["teams_bool_exp"] | undefined | null},ResolverInputTypes["teams_aggregate"]],
teams_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["teams"]],
teams_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["teams_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["teams_bool_exp"] | undefined | null},ResolverInputTypes["teams"]],
tournament_organizers?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_organizers_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_organizers_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_organizers_bool_exp"] | undefined | null},ResolverInputTypes["tournament_organizers"]],
tournament_organizers_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_organizers_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_organizers_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_organizers_bool_exp"] | undefined | null},ResolverInputTypes["tournament_organizers_aggregate"]],
tournament_organizers_by_pk?: [{	steam_id: ResolverInputTypes["bigint"],	tournament_id: ResolverInputTypes["uuid"]},ResolverInputTypes["tournament_organizers"]],
tournament_organizers_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["tournament_organizers_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_organizers_bool_exp"] | undefined | null},ResolverInputTypes["tournament_organizers"]],
tournament_roster?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_roster_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_roster_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_roster_bool_exp"] | undefined | null},ResolverInputTypes["tournament_roster"]],
tournament_roster_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_roster_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_roster_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_roster_bool_exp"] | undefined | null},ResolverInputTypes["tournament_roster_aggregate"]],
tournament_roster_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["tournament_roster"]],
tournament_roster_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["tournament_roster_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_roster_bool_exp"] | undefined | null},ResolverInputTypes["tournament_roster"]],
tournament_servers?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_servers_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_servers_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_servers_bool_exp"] | undefined | null},ResolverInputTypes["tournament_servers"]],
tournament_servers_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_servers_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_servers_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_servers_bool_exp"] | undefined | null},ResolverInputTypes["tournament_servers_aggregate"]],
tournament_servers_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["tournament_servers"]],
tournament_servers_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["tournament_servers_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_servers_bool_exp"] | undefined | null},ResolverInputTypes["tournament_servers"]],
tournament_stages?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_stages_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_stages_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_stages_bool_exp"] | undefined | null},ResolverInputTypes["tournament_stages"]],
tournament_stages_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_stages_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_stages_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_stages_bool_exp"] | undefined | null},ResolverInputTypes["tournament_stages_aggregate"]],
tournament_stages_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["tournament_stages"]],
tournament_stages_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["tournament_stages_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_stages_bool_exp"] | undefined | null},ResolverInputTypes["tournament_stages"]],
tournament_teams?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_teams_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_teams_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_teams_bool_exp"] | undefined | null},ResolverInputTypes["tournament_teams"]],
tournament_teams_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_teams_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_teams_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_teams_bool_exp"] | undefined | null},ResolverInputTypes["tournament_teams_aggregate"]],
tournament_teams_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["tournament_teams"]],
tournament_teams_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["tournament_teams_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_teams_bool_exp"] | undefined | null},ResolverInputTypes["tournament_teams"]],
tournaments?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournaments_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournaments_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournaments_bool_exp"] | undefined | null},ResolverInputTypes["tournaments"]],
tournaments_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournaments_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournaments_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournaments_bool_exp"] | undefined | null},ResolverInputTypes["tournaments_aggregate"]],
tournaments_by_pk?: [{	id: ResolverInputTypes["uuid"]},ResolverInputTypes["tournaments"]],
tournaments_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["tournaments_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["tournaments_bool_exp"] | undefined | null},ResolverInputTypes["tournaments"]],
v_match_captains?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_match_captains_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_match_captains_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_match_captains_bool_exp"] | undefined | null},ResolverInputTypes["v_match_captains"]],
v_match_captains_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_match_captains_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_match_captains_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_match_captains_bool_exp"] | undefined | null},ResolverInputTypes["v_match_captains_aggregate"]],
v_match_captains_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["v_match_captains_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["v_match_captains_bool_exp"] | undefined | null},ResolverInputTypes["v_match_captains"]],
v_player_arch_nemesis?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_player_arch_nemesis_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_player_arch_nemesis_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_player_arch_nemesis_bool_exp"] | undefined | null},ResolverInputTypes["v_player_arch_nemesis"]],
v_player_arch_nemesis_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_player_arch_nemesis_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_player_arch_nemesis_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_player_arch_nemesis_bool_exp"] | undefined | null},ResolverInputTypes["v_player_arch_nemesis_aggregate"]],
v_player_arch_nemesis_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["v_player_arch_nemesis_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["v_player_arch_nemesis_bool_exp"] | undefined | null},ResolverInputTypes["v_player_arch_nemesis"]],
v_player_damage?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_player_damage_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_player_damage_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_player_damage_bool_exp"] | undefined | null},ResolverInputTypes["v_player_damage"]],
v_player_damage_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_player_damage_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_player_damage_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_player_damage_bool_exp"] | undefined | null},ResolverInputTypes["v_player_damage_aggregate"]],
v_player_damage_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["v_player_damage_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["v_player_damage_bool_exp"] | undefined | null},ResolverInputTypes["v_player_damage"]],
v_player_killed_player_counts?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_player_killed_player_counts_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_player_killed_player_counts_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_player_killed_player_counts_bool_exp"] | undefined | null},ResolverInputTypes["v_player_killed_player_counts"]],
v_player_killed_player_counts_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_player_killed_player_counts_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_player_killed_player_counts_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_player_killed_player_counts_bool_exp"] | undefined | null},ResolverInputTypes["v_player_killed_player_counts_aggregate"]],
v_player_killed_player_counts_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["v_player_killed_player_counts_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["v_player_killed_player_counts_bool_exp"] | undefined | null},ResolverInputTypes["v_player_killed_player_counts"]],
v_player_match_kills?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_player_match_kills_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_player_match_kills_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_player_match_kills_bool_exp"] | undefined | null},ResolverInputTypes["v_player_match_kills"]],
v_player_match_kills_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_player_match_kills_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_player_match_kills_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_player_match_kills_bool_exp"] | undefined | null},ResolverInputTypes["v_player_match_kills_aggregate"]],
v_player_match_kills_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["v_player_match_kills_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["v_player_match_kills_bool_exp"] | undefined | null},ResolverInputTypes["v_player_match_kills"]],
v_player_multi_kills?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_player_multi_kills_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_player_multi_kills_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_player_multi_kills_bool_exp"] | undefined | null},ResolverInputTypes["v_player_multi_kills"]],
v_player_multi_kills_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_player_multi_kills_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_player_multi_kills_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_player_multi_kills_bool_exp"] | undefined | null},ResolverInputTypes["v_player_multi_kills_aggregate"]],
v_player_multi_kills_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["v_player_multi_kills_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["v_player_multi_kills_bool_exp"] | undefined | null},ResolverInputTypes["v_player_multi_kills"]],
v_player_opening_duels?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_player_opening_duels_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_player_opening_duels_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_player_opening_duels_bool_exp"] | undefined | null},ResolverInputTypes["v_player_opening_duels"]],
v_player_opening_duels_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_player_opening_duels_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_player_opening_duels_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_player_opening_duels_bool_exp"] | undefined | null},ResolverInputTypes["v_player_opening_duels_aggregate"]],
v_player_opening_duels_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["v_player_opening_duels_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["v_player_opening_duels_bool_exp"] | undefined | null},ResolverInputTypes["v_player_opening_duels"]],
v_pool_maps?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_pool_maps_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_pool_maps_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_pool_maps_bool_exp"] | undefined | null},ResolverInputTypes["v_pool_maps"]],
v_pool_maps_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["v_pool_maps_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["v_pool_maps_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["v_pool_maps_bool_exp"] | undefined | null},ResolverInputTypes["v_pool_maps_aggregate"]],
v_pool_maps_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["v_pool_maps_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["v_pool_maps_bool_exp"] | undefined | null},ResolverInputTypes["v_pool_maps"]],
		__typename?: boolean | `@${string}`
}>;
	/** columns and relationships of "team_invites" */
["team_invites"]: AliasType<{
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** An object relationship */
	invited_by?:ResolverInputTypes["players"],
	invited_by_player_steam_id?:boolean | `@${string}`,
	/** An object relationship */
	player?:ResolverInputTypes["players"],
	steam_id?:boolean | `@${string}`,
	/** An object relationship */
	team?:ResolverInputTypes["teams"],
	team_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "team_invites" */
["team_invites_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["team_invites_aggregate_fields"],
	nodes?:ResolverInputTypes["team_invites"],
		__typename?: boolean | `@${string}`
}>;
	["team_invites_aggregate_bool_exp"]: {
	count?: ResolverInputTypes["team_invites_aggregate_bool_exp_count"] | undefined | null
};
	["team_invites_aggregate_bool_exp_count"]: {
	arguments?: Array<ResolverInputTypes["team_invites_select_column"]> | undefined | null,
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["team_invites_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Int_comparison_exp"]
};
	/** aggregate fields of "team_invites" */
["team_invites_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["team_invites_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["team_invites_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["team_invites_max_fields"],
	min?:ResolverInputTypes["team_invites_min_fields"],
	stddev?:ResolverInputTypes["team_invites_stddev_fields"],
	stddev_pop?:ResolverInputTypes["team_invites_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["team_invites_stddev_samp_fields"],
	sum?:ResolverInputTypes["team_invites_sum_fields"],
	var_pop?:ResolverInputTypes["team_invites_var_pop_fields"],
	var_samp?:ResolverInputTypes["team_invites_var_samp_fields"],
	variance?:ResolverInputTypes["team_invites_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "team_invites" */
["team_invites_aggregate_order_by"]: {
	avg?: ResolverInputTypes["team_invites_avg_order_by"] | undefined | null,
	count?: ResolverInputTypes["order_by"] | undefined | null,
	max?: ResolverInputTypes["team_invites_max_order_by"] | undefined | null,
	min?: ResolverInputTypes["team_invites_min_order_by"] | undefined | null,
	stddev?: ResolverInputTypes["team_invites_stddev_order_by"] | undefined | null,
	stddev_pop?: ResolverInputTypes["team_invites_stddev_pop_order_by"] | undefined | null,
	stddev_samp?: ResolverInputTypes["team_invites_stddev_samp_order_by"] | undefined | null,
	sum?: ResolverInputTypes["team_invites_sum_order_by"] | undefined | null,
	var_pop?: ResolverInputTypes["team_invites_var_pop_order_by"] | undefined | null,
	var_samp?: ResolverInputTypes["team_invites_var_samp_order_by"] | undefined | null,
	variance?: ResolverInputTypes["team_invites_variance_order_by"] | undefined | null
};
	/** input type for inserting array relation for remote table "team_invites" */
["team_invites_arr_rel_insert_input"]: {
	data: Array<ResolverInputTypes["team_invites_insert_input"]>,
	/** upsert condition */
	on_conflict?: ResolverInputTypes["team_invites_on_conflict"] | undefined | null
};
	/** aggregate avg on columns */
["team_invites_avg_fields"]: AliasType<{
	invited_by_player_steam_id?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "team_invites" */
["team_invites_avg_order_by"]: {
	invited_by_player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Boolean expression to filter rows from the table "team_invites". All fields are combined with a logical 'AND'. */
["team_invites_bool_exp"]: {
	_and?: Array<ResolverInputTypes["team_invites_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["team_invites_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["team_invites_bool_exp"]> | undefined | null,
	created_at?: ResolverInputTypes["timestamptz_comparison_exp"] | undefined | null,
	id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	invited_by?: ResolverInputTypes["players_bool_exp"] | undefined | null,
	invited_by_player_steam_id?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null,
	player?: ResolverInputTypes["players_bool_exp"] | undefined | null,
	steam_id?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null,
	team?: ResolverInputTypes["teams_bool_exp"] | undefined | null,
	team_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "team_invites" */
["team_invites_constraint"]:team_invites_constraint;
	/** input type for incrementing numeric columns in table "team_invites" */
["team_invites_inc_input"]: {
	invited_by_player_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	steam_id?: ResolverInputTypes["bigint"] | undefined | null
};
	/** input type for inserting data into table "team_invites" */
["team_invites_insert_input"]: {
	created_at?: ResolverInputTypes["timestamptz"] | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	invited_by?: ResolverInputTypes["players_obj_rel_insert_input"] | undefined | null,
	invited_by_player_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	player?: ResolverInputTypes["players_obj_rel_insert_input"] | undefined | null,
	steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	team?: ResolverInputTypes["teams_obj_rel_insert_input"] | undefined | null,
	team_id?: ResolverInputTypes["uuid"] | undefined | null
};
	/** aggregate max on columns */
["team_invites_max_fields"]: AliasType<{
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	invited_by_player_steam_id?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
	team_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "team_invites" */
["team_invites_max_order_by"]: {
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	invited_by_player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	team_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate min on columns */
["team_invites_min_fields"]: AliasType<{
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	invited_by_player_steam_id?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
	team_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "team_invites" */
["team_invites_min_order_by"]: {
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	invited_by_player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	team_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** response of any mutation on the table "team_invites" */
["team_invites_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["team_invites"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "team_invites" */
["team_invites_on_conflict"]: {
	constraint: ResolverInputTypes["team_invites_constraint"],
	update_columns: Array<ResolverInputTypes["team_invites_update_column"]>,
	where?: ResolverInputTypes["team_invites_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "team_invites". */
["team_invites_order_by"]: {
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	invited_by?: ResolverInputTypes["players_order_by"] | undefined | null,
	invited_by_player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	player?: ResolverInputTypes["players_order_by"] | undefined | null,
	steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	team?: ResolverInputTypes["teams_order_by"] | undefined | null,
	team_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: team_invites */
["team_invites_pk_columns_input"]: {
	id: ResolverInputTypes["uuid"]
};
	/** select columns of table "team_invites" */
["team_invites_select_column"]:team_invites_select_column;
	/** input type for updating data in table "team_invites" */
["team_invites_set_input"]: {
	created_at?: ResolverInputTypes["timestamptz"] | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	invited_by_player_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	team_id?: ResolverInputTypes["uuid"] | undefined | null
};
	/** aggregate stddev on columns */
["team_invites_stddev_fields"]: AliasType<{
	invited_by_player_steam_id?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "team_invites" */
["team_invites_stddev_order_by"]: {
	invited_by_player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_pop on columns */
["team_invites_stddev_pop_fields"]: AliasType<{
	invited_by_player_steam_id?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "team_invites" */
["team_invites_stddev_pop_order_by"]: {
	invited_by_player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_samp on columns */
["team_invites_stddev_samp_fields"]: AliasType<{
	invited_by_player_steam_id?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "team_invites" */
["team_invites_stddev_samp_order_by"]: {
	invited_by_player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Streaming cursor of the table "team_invites" */
["team_invites_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["team_invites_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["team_invites_stream_cursor_value_input"]: {
	created_at?: ResolverInputTypes["timestamptz"] | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	invited_by_player_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	team_id?: ResolverInputTypes["uuid"] | undefined | null
};
	/** aggregate sum on columns */
["team_invites_sum_fields"]: AliasType<{
	invited_by_player_steam_id?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "team_invites" */
["team_invites_sum_order_by"]: {
	invited_by_player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** update columns of table "team_invites" */
["team_invites_update_column"]:team_invites_update_column;
	["team_invites_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["team_invites_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["team_invites_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["team_invites_bool_exp"]
};
	/** aggregate var_pop on columns */
["team_invites_var_pop_fields"]: AliasType<{
	invited_by_player_steam_id?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "team_invites" */
["team_invites_var_pop_order_by"]: {
	invited_by_player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate var_samp on columns */
["team_invites_var_samp_fields"]: AliasType<{
	invited_by_player_steam_id?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "team_invites" */
["team_invites_var_samp_order_by"]: {
	invited_by_player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate variance on columns */
["team_invites_variance_fields"]: AliasType<{
	invited_by_player_steam_id?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "team_invites" */
["team_invites_variance_order_by"]: {
	invited_by_player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** columns and relationships of "team_roster" */
["team_roster"]: AliasType<{
	/** An object relationship */
	player?:ResolverInputTypes["players"],
	player_steam_id?:boolean | `@${string}`,
	role?:boolean | `@${string}`,
	/** An object relationship */
	team?:ResolverInputTypes["teams"],
	team_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "team_roster" */
["team_roster_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["team_roster_aggregate_fields"],
	nodes?:ResolverInputTypes["team_roster"],
		__typename?: boolean | `@${string}`
}>;
	["team_roster_aggregate_bool_exp"]: {
	count?: ResolverInputTypes["team_roster_aggregate_bool_exp_count"] | undefined | null
};
	["team_roster_aggregate_bool_exp_count"]: {
	arguments?: Array<ResolverInputTypes["team_roster_select_column"]> | undefined | null,
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["team_roster_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Int_comparison_exp"]
};
	/** aggregate fields of "team_roster" */
["team_roster_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["team_roster_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["team_roster_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["team_roster_max_fields"],
	min?:ResolverInputTypes["team_roster_min_fields"],
	stddev?:ResolverInputTypes["team_roster_stddev_fields"],
	stddev_pop?:ResolverInputTypes["team_roster_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["team_roster_stddev_samp_fields"],
	sum?:ResolverInputTypes["team_roster_sum_fields"],
	var_pop?:ResolverInputTypes["team_roster_var_pop_fields"],
	var_samp?:ResolverInputTypes["team_roster_var_samp_fields"],
	variance?:ResolverInputTypes["team_roster_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "team_roster" */
["team_roster_aggregate_order_by"]: {
	avg?: ResolverInputTypes["team_roster_avg_order_by"] | undefined | null,
	count?: ResolverInputTypes["order_by"] | undefined | null,
	max?: ResolverInputTypes["team_roster_max_order_by"] | undefined | null,
	min?: ResolverInputTypes["team_roster_min_order_by"] | undefined | null,
	stddev?: ResolverInputTypes["team_roster_stddev_order_by"] | undefined | null,
	stddev_pop?: ResolverInputTypes["team_roster_stddev_pop_order_by"] | undefined | null,
	stddev_samp?: ResolverInputTypes["team_roster_stddev_samp_order_by"] | undefined | null,
	sum?: ResolverInputTypes["team_roster_sum_order_by"] | undefined | null,
	var_pop?: ResolverInputTypes["team_roster_var_pop_order_by"] | undefined | null,
	var_samp?: ResolverInputTypes["team_roster_var_samp_order_by"] | undefined | null,
	variance?: ResolverInputTypes["team_roster_variance_order_by"] | undefined | null
};
	/** input type for inserting array relation for remote table "team_roster" */
["team_roster_arr_rel_insert_input"]: {
	data: Array<ResolverInputTypes["team_roster_insert_input"]>,
	/** upsert condition */
	on_conflict?: ResolverInputTypes["team_roster_on_conflict"] | undefined | null
};
	/** aggregate avg on columns */
["team_roster_avg_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "team_roster" */
["team_roster_avg_order_by"]: {
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Boolean expression to filter rows from the table "team_roster". All fields are combined with a logical 'AND'. */
["team_roster_bool_exp"]: {
	_and?: Array<ResolverInputTypes["team_roster_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["team_roster_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["team_roster_bool_exp"]> | undefined | null,
	player?: ResolverInputTypes["players_bool_exp"] | undefined | null,
	player_steam_id?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null,
	role?: ResolverInputTypes["e_team_roles_enum_comparison_exp"] | undefined | null,
	team?: ResolverInputTypes["teams_bool_exp"] | undefined | null,
	team_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "team_roster" */
["team_roster_constraint"]:team_roster_constraint;
	/** input type for incrementing numeric columns in table "team_roster" */
["team_roster_inc_input"]: {
	player_steam_id?: ResolverInputTypes["bigint"] | undefined | null
};
	/** input type for inserting data into table "team_roster" */
["team_roster_insert_input"]: {
	player?: ResolverInputTypes["players_obj_rel_insert_input"] | undefined | null,
	player_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	role?: ResolverInputTypes["e_team_roles_enum"] | undefined | null,
	team?: ResolverInputTypes["teams_obj_rel_insert_input"] | undefined | null,
	team_id?: ResolverInputTypes["uuid"] | undefined | null
};
	/** aggregate max on columns */
["team_roster_max_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	team_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "team_roster" */
["team_roster_max_order_by"]: {
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	team_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate min on columns */
["team_roster_min_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
	team_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "team_roster" */
["team_roster_min_order_by"]: {
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	team_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** response of any mutation on the table "team_roster" */
["team_roster_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["team_roster"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "team_roster" */
["team_roster_on_conflict"]: {
	constraint: ResolverInputTypes["team_roster_constraint"],
	update_columns: Array<ResolverInputTypes["team_roster_update_column"]>,
	where?: ResolverInputTypes["team_roster_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "team_roster". */
["team_roster_order_by"]: {
	player?: ResolverInputTypes["players_order_by"] | undefined | null,
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	role?: ResolverInputTypes["order_by"] | undefined | null,
	team?: ResolverInputTypes["teams_order_by"] | undefined | null,
	team_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: team_roster */
["team_roster_pk_columns_input"]: {
	player_steam_id: ResolverInputTypes["bigint"],
	team_id: ResolverInputTypes["uuid"]
};
	/** select columns of table "team_roster" */
["team_roster_select_column"]:team_roster_select_column;
	/** input type for updating data in table "team_roster" */
["team_roster_set_input"]: {
	player_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	role?: ResolverInputTypes["e_team_roles_enum"] | undefined | null,
	team_id?: ResolverInputTypes["uuid"] | undefined | null
};
	/** aggregate stddev on columns */
["team_roster_stddev_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "team_roster" */
["team_roster_stddev_order_by"]: {
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_pop on columns */
["team_roster_stddev_pop_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "team_roster" */
["team_roster_stddev_pop_order_by"]: {
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_samp on columns */
["team_roster_stddev_samp_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "team_roster" */
["team_roster_stddev_samp_order_by"]: {
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Streaming cursor of the table "team_roster" */
["team_roster_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["team_roster_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["team_roster_stream_cursor_value_input"]: {
	player_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	role?: ResolverInputTypes["e_team_roles_enum"] | undefined | null,
	team_id?: ResolverInputTypes["uuid"] | undefined | null
};
	/** aggregate sum on columns */
["team_roster_sum_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "team_roster" */
["team_roster_sum_order_by"]: {
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** update columns of table "team_roster" */
["team_roster_update_column"]:team_roster_update_column;
	["team_roster_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["team_roster_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["team_roster_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["team_roster_bool_exp"]
};
	/** aggregate var_pop on columns */
["team_roster_var_pop_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "team_roster" */
["team_roster_var_pop_order_by"]: {
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate var_samp on columns */
["team_roster_var_samp_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "team_roster" */
["team_roster_var_samp_order_by"]: {
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate variance on columns */
["team_roster_variance_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "team_roster" */
["team_roster_variance_order_by"]: {
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** columns and relationships of "teams" */
["teams"]: AliasType<{
	id?:boolean | `@${string}`,
invites?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["team_invites_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["team_invites_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["team_invites_bool_exp"] | undefined | null},ResolverInputTypes["team_invites"]],
invites_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["team_invites_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["team_invites_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["team_invites_bool_exp"] | undefined | null},ResolverInputTypes["team_invites_aggregate"]],
match_lineups?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_lineups_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_lineups_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_lineups_bool_exp"] | undefined | null},ResolverInputTypes["match_lineups"]],
match_lineups_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["match_lineups_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["match_lineups_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["match_lineups_bool_exp"] | undefined | null},ResolverInputTypes["match_lineups_aggregate"]],
matches?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["matches_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["matches_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["matches_bool_exp"] | undefined | null},ResolverInputTypes["matches"]],
	name?:boolean | `@${string}`,
	/** An object relationship */
	owner?:ResolverInputTypes["players"],
	owner_steam_id?:boolean | `@${string}`,
roster?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["team_roster_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["team_roster_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["team_roster_bool_exp"] | undefined | null},ResolverInputTypes["team_roster"]],
roster_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["team_roster_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["team_roster_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["team_roster_bool_exp"] | undefined | null},ResolverInputTypes["team_roster_aggregate"]],
	short_name?:boolean | `@${string}`,
tournament_rosters?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_roster_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_roster_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_roster_bool_exp"] | undefined | null},ResolverInputTypes["tournament_roster"]],
tournament_rosters_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_roster_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_roster_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_roster_bool_exp"] | undefined | null},ResolverInputTypes["tournament_roster_aggregate"]],
tournament_teams?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_teams_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_teams_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_teams_bool_exp"] | undefined | null},ResolverInputTypes["tournament_teams"]],
tournament_teams_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_teams_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_teams_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_teams_bool_exp"] | undefined | null},ResolverInputTypes["tournament_teams_aggregate"]],
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "teams" */
["teams_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["teams_aggregate_fields"],
	nodes?:ResolverInputTypes["teams"],
		__typename?: boolean | `@${string}`
}>;
	["teams_aggregate_bool_exp"]: {
	count?: ResolverInputTypes["teams_aggregate_bool_exp_count"] | undefined | null
};
	["teams_aggregate_bool_exp_count"]: {
	arguments?: Array<ResolverInputTypes["teams_select_column"]> | undefined | null,
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["teams_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Int_comparison_exp"]
};
	/** aggregate fields of "teams" */
["teams_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["teams_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["teams_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["teams_max_fields"],
	min?:ResolverInputTypes["teams_min_fields"],
	stddev?:ResolverInputTypes["teams_stddev_fields"],
	stddev_pop?:ResolverInputTypes["teams_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["teams_stddev_samp_fields"],
	sum?:ResolverInputTypes["teams_sum_fields"],
	var_pop?:ResolverInputTypes["teams_var_pop_fields"],
	var_samp?:ResolverInputTypes["teams_var_samp_fields"],
	variance?:ResolverInputTypes["teams_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "teams" */
["teams_aggregate_order_by"]: {
	avg?: ResolverInputTypes["teams_avg_order_by"] | undefined | null,
	count?: ResolverInputTypes["order_by"] | undefined | null,
	max?: ResolverInputTypes["teams_max_order_by"] | undefined | null,
	min?: ResolverInputTypes["teams_min_order_by"] | undefined | null,
	stddev?: ResolverInputTypes["teams_stddev_order_by"] | undefined | null,
	stddev_pop?: ResolverInputTypes["teams_stddev_pop_order_by"] | undefined | null,
	stddev_samp?: ResolverInputTypes["teams_stddev_samp_order_by"] | undefined | null,
	sum?: ResolverInputTypes["teams_sum_order_by"] | undefined | null,
	var_pop?: ResolverInputTypes["teams_var_pop_order_by"] | undefined | null,
	var_samp?: ResolverInputTypes["teams_var_samp_order_by"] | undefined | null,
	variance?: ResolverInputTypes["teams_variance_order_by"] | undefined | null
};
	/** input type for inserting array relation for remote table "teams" */
["teams_arr_rel_insert_input"]: {
	data: Array<ResolverInputTypes["teams_insert_input"]>,
	/** upsert condition */
	on_conflict?: ResolverInputTypes["teams_on_conflict"] | undefined | null
};
	/** aggregate avg on columns */
["teams_avg_fields"]: AliasType<{
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "teams" */
["teams_avg_order_by"]: {
	owner_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Boolean expression to filter rows from the table "teams". All fields are combined with a logical 'AND'. */
["teams_bool_exp"]: {
	_and?: Array<ResolverInputTypes["teams_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["teams_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["teams_bool_exp"]> | undefined | null,
	id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	invites?: ResolverInputTypes["team_invites_bool_exp"] | undefined | null,
	invites_aggregate?: ResolverInputTypes["team_invites_aggregate_bool_exp"] | undefined | null,
	match_lineups?: ResolverInputTypes["match_lineups_bool_exp"] | undefined | null,
	match_lineups_aggregate?: ResolverInputTypes["match_lineups_aggregate_bool_exp"] | undefined | null,
	matches?: ResolverInputTypes["matches_bool_exp"] | undefined | null,
	name?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	owner?: ResolverInputTypes["players_bool_exp"] | undefined | null,
	owner_steam_id?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null,
	roster?: ResolverInputTypes["team_roster_bool_exp"] | undefined | null,
	roster_aggregate?: ResolverInputTypes["team_roster_aggregate_bool_exp"] | undefined | null,
	short_name?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	tournament_rosters?: ResolverInputTypes["tournament_roster_bool_exp"] | undefined | null,
	tournament_rosters_aggregate?: ResolverInputTypes["tournament_roster_aggregate_bool_exp"] | undefined | null,
	tournament_teams?: ResolverInputTypes["tournament_teams_bool_exp"] | undefined | null,
	tournament_teams_aggregate?: ResolverInputTypes["tournament_teams_aggregate_bool_exp"] | undefined | null
};
	/** unique or primary key constraints on table "teams" */
["teams_constraint"]:teams_constraint;
	/** input type for incrementing numeric columns in table "teams" */
["teams_inc_input"]: {
	owner_steam_id?: ResolverInputTypes["bigint"] | undefined | null
};
	/** input type for inserting data into table "teams" */
["teams_insert_input"]: {
	id?: ResolverInputTypes["uuid"] | undefined | null,
	invites?: ResolverInputTypes["team_invites_arr_rel_insert_input"] | undefined | null,
	match_lineups?: ResolverInputTypes["match_lineups_arr_rel_insert_input"] | undefined | null,
	name?: string | undefined | null,
	owner?: ResolverInputTypes["players_obj_rel_insert_input"] | undefined | null,
	owner_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	roster?: ResolverInputTypes["team_roster_arr_rel_insert_input"] | undefined | null,
	short_name?: string | undefined | null,
	tournament_rosters?: ResolverInputTypes["tournament_roster_arr_rel_insert_input"] | undefined | null,
	tournament_teams?: ResolverInputTypes["tournament_teams_arr_rel_insert_input"] | undefined | null
};
	/** aggregate max on columns */
["teams_max_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	owner_steam_id?:boolean | `@${string}`,
	short_name?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "teams" */
["teams_max_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	name?: ResolverInputTypes["order_by"] | undefined | null,
	owner_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	short_name?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate min on columns */
["teams_min_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	owner_steam_id?:boolean | `@${string}`,
	short_name?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "teams" */
["teams_min_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	name?: ResolverInputTypes["order_by"] | undefined | null,
	owner_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	short_name?: ResolverInputTypes["order_by"] | undefined | null
};
	/** response of any mutation on the table "teams" */
["teams_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["teams"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "teams" */
["teams_obj_rel_insert_input"]: {
	data: ResolverInputTypes["teams_insert_input"],
	/** upsert condition */
	on_conflict?: ResolverInputTypes["teams_on_conflict"] | undefined | null
};
	/** on_conflict condition type for table "teams" */
["teams_on_conflict"]: {
	constraint: ResolverInputTypes["teams_constraint"],
	update_columns: Array<ResolverInputTypes["teams_update_column"]>,
	where?: ResolverInputTypes["teams_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "teams". */
["teams_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	invites_aggregate?: ResolverInputTypes["team_invites_aggregate_order_by"] | undefined | null,
	match_lineups_aggregate?: ResolverInputTypes["match_lineups_aggregate_order_by"] | undefined | null,
	matches_aggregate?: ResolverInputTypes["matches_aggregate_order_by"] | undefined | null,
	name?: ResolverInputTypes["order_by"] | undefined | null,
	owner?: ResolverInputTypes["players_order_by"] | undefined | null,
	owner_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	roster_aggregate?: ResolverInputTypes["team_roster_aggregate_order_by"] | undefined | null,
	short_name?: ResolverInputTypes["order_by"] | undefined | null,
	tournament_rosters_aggregate?: ResolverInputTypes["tournament_roster_aggregate_order_by"] | undefined | null,
	tournament_teams_aggregate?: ResolverInputTypes["tournament_teams_aggregate_order_by"] | undefined | null
};
	/** primary key columns input for table: teams */
["teams_pk_columns_input"]: {
	id: ResolverInputTypes["uuid"]
};
	/** select columns of table "teams" */
["teams_select_column"]:teams_select_column;
	/** input type for updating data in table "teams" */
["teams_set_input"]: {
	id?: ResolverInputTypes["uuid"] | undefined | null,
	name?: string | undefined | null,
	owner_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	short_name?: string | undefined | null
};
	/** aggregate stddev on columns */
["teams_stddev_fields"]: AliasType<{
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "teams" */
["teams_stddev_order_by"]: {
	owner_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_pop on columns */
["teams_stddev_pop_fields"]: AliasType<{
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "teams" */
["teams_stddev_pop_order_by"]: {
	owner_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_samp on columns */
["teams_stddev_samp_fields"]: AliasType<{
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "teams" */
["teams_stddev_samp_order_by"]: {
	owner_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Streaming cursor of the table "teams" */
["teams_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["teams_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["teams_stream_cursor_value_input"]: {
	id?: ResolverInputTypes["uuid"] | undefined | null,
	name?: string | undefined | null,
	owner_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	short_name?: string | undefined | null
};
	/** aggregate sum on columns */
["teams_sum_fields"]: AliasType<{
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "teams" */
["teams_sum_order_by"]: {
	owner_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** update columns of table "teams" */
["teams_update_column"]:teams_update_column;
	["teams_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["teams_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["teams_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["teams_bool_exp"]
};
	/** aggregate var_pop on columns */
["teams_var_pop_fields"]: AliasType<{
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "teams" */
["teams_var_pop_order_by"]: {
	owner_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate var_samp on columns */
["teams_var_samp_fields"]: AliasType<{
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "teams" */
["teams_var_samp_order_by"]: {
	owner_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate variance on columns */
["teams_variance_fields"]: AliasType<{
	owner_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "teams" */
["teams_variance_order_by"]: {
	owner_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	["timestamptz"]:unknown;
	/** Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'. */
["timestamptz_comparison_exp"]: {
	_eq?: ResolverInputTypes["timestamptz"] | undefined | null,
	_gt?: ResolverInputTypes["timestamptz"] | undefined | null,
	_gte?: ResolverInputTypes["timestamptz"] | undefined | null,
	_in?: Array<ResolverInputTypes["timestamptz"]> | undefined | null,
	_is_null?: boolean | undefined | null,
	_lt?: ResolverInputTypes["timestamptz"] | undefined | null,
	_lte?: ResolverInputTypes["timestamptz"] | undefined | null,
	_neq?: ResolverInputTypes["timestamptz"] | undefined | null,
	_nin?: Array<ResolverInputTypes["timestamptz"]> | undefined | null
};
	/** columns and relationships of "tournament_organizers" */
["tournament_organizers"]: AliasType<{
	/** An object relationship */
	organizer?:ResolverInputTypes["players"],
	role?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
	/** An object relationship */
	tournament?:ResolverInputTypes["tournaments"],
	tournament_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "tournament_organizers" */
["tournament_organizers_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["tournament_organizers_aggregate_fields"],
	nodes?:ResolverInputTypes["tournament_organizers"],
		__typename?: boolean | `@${string}`
}>;
	["tournament_organizers_aggregate_bool_exp"]: {
	count?: ResolverInputTypes["tournament_organizers_aggregate_bool_exp_count"] | undefined | null
};
	["tournament_organizers_aggregate_bool_exp_count"]: {
	arguments?: Array<ResolverInputTypes["tournament_organizers_select_column"]> | undefined | null,
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["tournament_organizers_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Int_comparison_exp"]
};
	/** aggregate fields of "tournament_organizers" */
["tournament_organizers_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["tournament_organizers_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["tournament_organizers_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["tournament_organizers_max_fields"],
	min?:ResolverInputTypes["tournament_organizers_min_fields"],
	stddev?:ResolverInputTypes["tournament_organizers_stddev_fields"],
	stddev_pop?:ResolverInputTypes["tournament_organizers_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["tournament_organizers_stddev_samp_fields"],
	sum?:ResolverInputTypes["tournament_organizers_sum_fields"],
	var_pop?:ResolverInputTypes["tournament_organizers_var_pop_fields"],
	var_samp?:ResolverInputTypes["tournament_organizers_var_samp_fields"],
	variance?:ResolverInputTypes["tournament_organizers_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "tournament_organizers" */
["tournament_organizers_aggregate_order_by"]: {
	avg?: ResolverInputTypes["tournament_organizers_avg_order_by"] | undefined | null,
	count?: ResolverInputTypes["order_by"] | undefined | null,
	max?: ResolverInputTypes["tournament_organizers_max_order_by"] | undefined | null,
	min?: ResolverInputTypes["tournament_organizers_min_order_by"] | undefined | null,
	stddev?: ResolverInputTypes["tournament_organizers_stddev_order_by"] | undefined | null,
	stddev_pop?: ResolverInputTypes["tournament_organizers_stddev_pop_order_by"] | undefined | null,
	stddev_samp?: ResolverInputTypes["tournament_organizers_stddev_samp_order_by"] | undefined | null,
	sum?: ResolverInputTypes["tournament_organizers_sum_order_by"] | undefined | null,
	var_pop?: ResolverInputTypes["tournament_organizers_var_pop_order_by"] | undefined | null,
	var_samp?: ResolverInputTypes["tournament_organizers_var_samp_order_by"] | undefined | null,
	variance?: ResolverInputTypes["tournament_organizers_variance_order_by"] | undefined | null
};
	/** input type for inserting array relation for remote table "tournament_organizers" */
["tournament_organizers_arr_rel_insert_input"]: {
	data: Array<ResolverInputTypes["tournament_organizers_insert_input"]>,
	/** upsert condition */
	on_conflict?: ResolverInputTypes["tournament_organizers_on_conflict"] | undefined | null
};
	/** aggregate avg on columns */
["tournament_organizers_avg_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "tournament_organizers" */
["tournament_organizers_avg_order_by"]: {
	steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Boolean expression to filter rows from the table "tournament_organizers". All fields are combined with a logical 'AND'. */
["tournament_organizers_bool_exp"]: {
	_and?: Array<ResolverInputTypes["tournament_organizers_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["tournament_organizers_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["tournament_organizers_bool_exp"]> | undefined | null,
	organizer?: ResolverInputTypes["players_bool_exp"] | undefined | null,
	role?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	steam_id?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null,
	tournament?: ResolverInputTypes["tournaments_bool_exp"] | undefined | null,
	tournament_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "tournament_organizers" */
["tournament_organizers_constraint"]:tournament_organizers_constraint;
	/** input type for incrementing numeric columns in table "tournament_organizers" */
["tournament_organizers_inc_input"]: {
	steam_id?: ResolverInputTypes["bigint"] | undefined | null
};
	/** input type for inserting data into table "tournament_organizers" */
["tournament_organizers_insert_input"]: {
	organizer?: ResolverInputTypes["players_obj_rel_insert_input"] | undefined | null,
	role?: string | undefined | null,
	steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	tournament?: ResolverInputTypes["tournaments_obj_rel_insert_input"] | undefined | null,
	tournament_id?: ResolverInputTypes["uuid"] | undefined | null
};
	/** aggregate max on columns */
["tournament_organizers_max_fields"]: AliasType<{
	role?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
	tournament_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "tournament_organizers" */
["tournament_organizers_max_order_by"]: {
	role?: ResolverInputTypes["order_by"] | undefined | null,
	steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	tournament_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate min on columns */
["tournament_organizers_min_fields"]: AliasType<{
	role?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
	tournament_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "tournament_organizers" */
["tournament_organizers_min_order_by"]: {
	role?: ResolverInputTypes["order_by"] | undefined | null,
	steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	tournament_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** response of any mutation on the table "tournament_organizers" */
["tournament_organizers_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["tournament_organizers"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "tournament_organizers" */
["tournament_organizers_on_conflict"]: {
	constraint: ResolverInputTypes["tournament_organizers_constraint"],
	update_columns: Array<ResolverInputTypes["tournament_organizers_update_column"]>,
	where?: ResolverInputTypes["tournament_organizers_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "tournament_organizers". */
["tournament_organizers_order_by"]: {
	organizer?: ResolverInputTypes["players_order_by"] | undefined | null,
	role?: ResolverInputTypes["order_by"] | undefined | null,
	steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	tournament?: ResolverInputTypes["tournaments_order_by"] | undefined | null,
	tournament_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: tournament_organizers */
["tournament_organizers_pk_columns_input"]: {
	steam_id: ResolverInputTypes["bigint"],
	tournament_id: ResolverInputTypes["uuid"]
};
	/** select columns of table "tournament_organizers" */
["tournament_organizers_select_column"]:tournament_organizers_select_column;
	/** input type for updating data in table "tournament_organizers" */
["tournament_organizers_set_input"]: {
	role?: string | undefined | null,
	steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	tournament_id?: ResolverInputTypes["uuid"] | undefined | null
};
	/** aggregate stddev on columns */
["tournament_organizers_stddev_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "tournament_organizers" */
["tournament_organizers_stddev_order_by"]: {
	steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_pop on columns */
["tournament_organizers_stddev_pop_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "tournament_organizers" */
["tournament_organizers_stddev_pop_order_by"]: {
	steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_samp on columns */
["tournament_organizers_stddev_samp_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "tournament_organizers" */
["tournament_organizers_stddev_samp_order_by"]: {
	steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Streaming cursor of the table "tournament_organizers" */
["tournament_organizers_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["tournament_organizers_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["tournament_organizers_stream_cursor_value_input"]: {
	role?: string | undefined | null,
	steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	tournament_id?: ResolverInputTypes["uuid"] | undefined | null
};
	/** aggregate sum on columns */
["tournament_organizers_sum_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "tournament_organizers" */
["tournament_organizers_sum_order_by"]: {
	steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** update columns of table "tournament_organizers" */
["tournament_organizers_update_column"]:tournament_organizers_update_column;
	["tournament_organizers_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["tournament_organizers_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["tournament_organizers_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["tournament_organizers_bool_exp"]
};
	/** aggregate var_pop on columns */
["tournament_organizers_var_pop_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "tournament_organizers" */
["tournament_organizers_var_pop_order_by"]: {
	steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate var_samp on columns */
["tournament_organizers_var_samp_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "tournament_organizers" */
["tournament_organizers_var_samp_order_by"]: {
	steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate variance on columns */
["tournament_organizers_variance_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "tournament_organizers" */
["tournament_organizers_variance_order_by"]: {
	steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** columns and relationships of "tournament_roster" */
["tournament_roster"]: AliasType<{
	id?:boolean | `@${string}`,
	/** An object relationship */
	player?:ResolverInputTypes["players"],
	player_steam_id?:boolean | `@${string}`,
	/** An object relationship */
	team?:ResolverInputTypes["teams"],
	team_id?:boolean | `@${string}`,
	/** An object relationship */
	tournament?:ResolverInputTypes["tournaments"],
	tournament_id?:boolean | `@${string}`,
	type?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "tournament_roster" */
["tournament_roster_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["tournament_roster_aggregate_fields"],
	nodes?:ResolverInputTypes["tournament_roster"],
		__typename?: boolean | `@${string}`
}>;
	["tournament_roster_aggregate_bool_exp"]: {
	count?: ResolverInputTypes["tournament_roster_aggregate_bool_exp_count"] | undefined | null
};
	["tournament_roster_aggregate_bool_exp_count"]: {
	arguments?: Array<ResolverInputTypes["tournament_roster_select_column"]> | undefined | null,
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["tournament_roster_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Int_comparison_exp"]
};
	/** aggregate fields of "tournament_roster" */
["tournament_roster_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["tournament_roster_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["tournament_roster_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["tournament_roster_max_fields"],
	min?:ResolverInputTypes["tournament_roster_min_fields"],
	stddev?:ResolverInputTypes["tournament_roster_stddev_fields"],
	stddev_pop?:ResolverInputTypes["tournament_roster_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["tournament_roster_stddev_samp_fields"],
	sum?:ResolverInputTypes["tournament_roster_sum_fields"],
	var_pop?:ResolverInputTypes["tournament_roster_var_pop_fields"],
	var_samp?:ResolverInputTypes["tournament_roster_var_samp_fields"],
	variance?:ResolverInputTypes["tournament_roster_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "tournament_roster" */
["tournament_roster_aggregate_order_by"]: {
	avg?: ResolverInputTypes["tournament_roster_avg_order_by"] | undefined | null,
	count?: ResolverInputTypes["order_by"] | undefined | null,
	max?: ResolverInputTypes["tournament_roster_max_order_by"] | undefined | null,
	min?: ResolverInputTypes["tournament_roster_min_order_by"] | undefined | null,
	stddev?: ResolverInputTypes["tournament_roster_stddev_order_by"] | undefined | null,
	stddev_pop?: ResolverInputTypes["tournament_roster_stddev_pop_order_by"] | undefined | null,
	stddev_samp?: ResolverInputTypes["tournament_roster_stddev_samp_order_by"] | undefined | null,
	sum?: ResolverInputTypes["tournament_roster_sum_order_by"] | undefined | null,
	var_pop?: ResolverInputTypes["tournament_roster_var_pop_order_by"] | undefined | null,
	var_samp?: ResolverInputTypes["tournament_roster_var_samp_order_by"] | undefined | null,
	variance?: ResolverInputTypes["tournament_roster_variance_order_by"] | undefined | null
};
	/** input type for inserting array relation for remote table "tournament_roster" */
["tournament_roster_arr_rel_insert_input"]: {
	data: Array<ResolverInputTypes["tournament_roster_insert_input"]>,
	/** upsert condition */
	on_conflict?: ResolverInputTypes["tournament_roster_on_conflict"] | undefined | null
};
	/** aggregate avg on columns */
["tournament_roster_avg_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "tournament_roster" */
["tournament_roster_avg_order_by"]: {
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Boolean expression to filter rows from the table "tournament_roster". All fields are combined with a logical 'AND'. */
["tournament_roster_bool_exp"]: {
	_and?: Array<ResolverInputTypes["tournament_roster_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["tournament_roster_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["tournament_roster_bool_exp"]> | undefined | null,
	id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	player?: ResolverInputTypes["players_bool_exp"] | undefined | null,
	player_steam_id?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null,
	team?: ResolverInputTypes["teams_bool_exp"] | undefined | null,
	team_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	tournament?: ResolverInputTypes["tournaments_bool_exp"] | undefined | null,
	tournament_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	type?: ResolverInputTypes["String_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "tournament_roster" */
["tournament_roster_constraint"]:tournament_roster_constraint;
	/** input type for incrementing numeric columns in table "tournament_roster" */
["tournament_roster_inc_input"]: {
	player_steam_id?: ResolverInputTypes["bigint"] | undefined | null
};
	/** input type for inserting data into table "tournament_roster" */
["tournament_roster_insert_input"]: {
	id?: ResolverInputTypes["uuid"] | undefined | null,
	player?: ResolverInputTypes["players_obj_rel_insert_input"] | undefined | null,
	player_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	team?: ResolverInputTypes["teams_obj_rel_insert_input"] | undefined | null,
	team_id?: ResolverInputTypes["uuid"] | undefined | null,
	tournament?: ResolverInputTypes["tournaments_obj_rel_insert_input"] | undefined | null,
	tournament_id?: ResolverInputTypes["uuid"] | undefined | null,
	type?: string | undefined | null
};
	/** aggregate max on columns */
["tournament_roster_max_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	team_id?:boolean | `@${string}`,
	tournament_id?:boolean | `@${string}`,
	type?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "tournament_roster" */
["tournament_roster_max_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	team_id?: ResolverInputTypes["order_by"] | undefined | null,
	tournament_id?: ResolverInputTypes["order_by"] | undefined | null,
	type?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate min on columns */
["tournament_roster_min_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	team_id?:boolean | `@${string}`,
	tournament_id?:boolean | `@${string}`,
	type?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "tournament_roster" */
["tournament_roster_min_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	team_id?: ResolverInputTypes["order_by"] | undefined | null,
	tournament_id?: ResolverInputTypes["order_by"] | undefined | null,
	type?: ResolverInputTypes["order_by"] | undefined | null
};
	/** response of any mutation on the table "tournament_roster" */
["tournament_roster_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["tournament_roster"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "tournament_roster" */
["tournament_roster_on_conflict"]: {
	constraint: ResolverInputTypes["tournament_roster_constraint"],
	update_columns: Array<ResolverInputTypes["tournament_roster_update_column"]>,
	where?: ResolverInputTypes["tournament_roster_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "tournament_roster". */
["tournament_roster_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	player?: ResolverInputTypes["players_order_by"] | undefined | null,
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	team?: ResolverInputTypes["teams_order_by"] | undefined | null,
	team_id?: ResolverInputTypes["order_by"] | undefined | null,
	tournament?: ResolverInputTypes["tournaments_order_by"] | undefined | null,
	tournament_id?: ResolverInputTypes["order_by"] | undefined | null,
	type?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: tournament_roster */
["tournament_roster_pk_columns_input"]: {
	id: ResolverInputTypes["uuid"]
};
	/** select columns of table "tournament_roster" */
["tournament_roster_select_column"]:tournament_roster_select_column;
	/** input type for updating data in table "tournament_roster" */
["tournament_roster_set_input"]: {
	id?: ResolverInputTypes["uuid"] | undefined | null,
	player_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	team_id?: ResolverInputTypes["uuid"] | undefined | null,
	tournament_id?: ResolverInputTypes["uuid"] | undefined | null,
	type?: string | undefined | null
};
	/** aggregate stddev on columns */
["tournament_roster_stddev_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "tournament_roster" */
["tournament_roster_stddev_order_by"]: {
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_pop on columns */
["tournament_roster_stddev_pop_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "tournament_roster" */
["tournament_roster_stddev_pop_order_by"]: {
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_samp on columns */
["tournament_roster_stddev_samp_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "tournament_roster" */
["tournament_roster_stddev_samp_order_by"]: {
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Streaming cursor of the table "tournament_roster" */
["tournament_roster_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["tournament_roster_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["tournament_roster_stream_cursor_value_input"]: {
	id?: ResolverInputTypes["uuid"] | undefined | null,
	player_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	team_id?: ResolverInputTypes["uuid"] | undefined | null,
	tournament_id?: ResolverInputTypes["uuid"] | undefined | null,
	type?: string | undefined | null
};
	/** aggregate sum on columns */
["tournament_roster_sum_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "tournament_roster" */
["tournament_roster_sum_order_by"]: {
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** update columns of table "tournament_roster" */
["tournament_roster_update_column"]:tournament_roster_update_column;
	["tournament_roster_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["tournament_roster_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["tournament_roster_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["tournament_roster_bool_exp"]
};
	/** aggregate var_pop on columns */
["tournament_roster_var_pop_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "tournament_roster" */
["tournament_roster_var_pop_order_by"]: {
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate var_samp on columns */
["tournament_roster_var_samp_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "tournament_roster" */
["tournament_roster_var_samp_order_by"]: {
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate variance on columns */
["tournament_roster_variance_fields"]: AliasType<{
	player_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "tournament_roster" */
["tournament_roster_variance_order_by"]: {
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** columns and relationships of "tournament_servers" */
["tournament_servers"]: AliasType<{
	id?:boolean | `@${string}`,
	/** An object relationship */
	server?:ResolverInputTypes["servers"],
	server_id?:boolean | `@${string}`,
	/** An object relationship */
	tournament?:ResolverInputTypes["tournaments"],
	tournament_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "tournament_servers" */
["tournament_servers_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["tournament_servers_aggregate_fields"],
	nodes?:ResolverInputTypes["tournament_servers"],
		__typename?: boolean | `@${string}`
}>;
	["tournament_servers_aggregate_bool_exp"]: {
	count?: ResolverInputTypes["tournament_servers_aggregate_bool_exp_count"] | undefined | null
};
	["tournament_servers_aggregate_bool_exp_count"]: {
	arguments?: Array<ResolverInputTypes["tournament_servers_select_column"]> | undefined | null,
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["tournament_servers_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Int_comparison_exp"]
};
	/** aggregate fields of "tournament_servers" */
["tournament_servers_aggregate_fields"]: AliasType<{
count?: [{	columns?: Array<ResolverInputTypes["tournament_servers_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["tournament_servers_max_fields"],
	min?:ResolverInputTypes["tournament_servers_min_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "tournament_servers" */
["tournament_servers_aggregate_order_by"]: {
	count?: ResolverInputTypes["order_by"] | undefined | null,
	max?: ResolverInputTypes["tournament_servers_max_order_by"] | undefined | null,
	min?: ResolverInputTypes["tournament_servers_min_order_by"] | undefined | null
};
	/** input type for inserting array relation for remote table "tournament_servers" */
["tournament_servers_arr_rel_insert_input"]: {
	data: Array<ResolverInputTypes["tournament_servers_insert_input"]>,
	/** upsert condition */
	on_conflict?: ResolverInputTypes["tournament_servers_on_conflict"] | undefined | null
};
	/** Boolean expression to filter rows from the table "tournament_servers". All fields are combined with a logical 'AND'. */
["tournament_servers_bool_exp"]: {
	_and?: Array<ResolverInputTypes["tournament_servers_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["tournament_servers_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["tournament_servers_bool_exp"]> | undefined | null,
	id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	server?: ResolverInputTypes["servers_bool_exp"] | undefined | null,
	server_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	tournament?: ResolverInputTypes["tournaments_bool_exp"] | undefined | null,
	tournament_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "tournament_servers" */
["tournament_servers_constraint"]:tournament_servers_constraint;
	/** input type for inserting data into table "tournament_servers" */
["tournament_servers_insert_input"]: {
	id?: ResolverInputTypes["uuid"] | undefined | null,
	server?: ResolverInputTypes["servers_obj_rel_insert_input"] | undefined | null,
	server_id?: ResolverInputTypes["uuid"] | undefined | null,
	tournament?: ResolverInputTypes["tournaments_obj_rel_insert_input"] | undefined | null,
	tournament_id?: ResolverInputTypes["uuid"] | undefined | null
};
	/** aggregate max on columns */
["tournament_servers_max_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	server_id?:boolean | `@${string}`,
	tournament_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "tournament_servers" */
["tournament_servers_max_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	server_id?: ResolverInputTypes["order_by"] | undefined | null,
	tournament_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate min on columns */
["tournament_servers_min_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	server_id?:boolean | `@${string}`,
	tournament_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "tournament_servers" */
["tournament_servers_min_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	server_id?: ResolverInputTypes["order_by"] | undefined | null,
	tournament_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** response of any mutation on the table "tournament_servers" */
["tournament_servers_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["tournament_servers"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "tournament_servers" */
["tournament_servers_on_conflict"]: {
	constraint: ResolverInputTypes["tournament_servers_constraint"],
	update_columns: Array<ResolverInputTypes["tournament_servers_update_column"]>,
	where?: ResolverInputTypes["tournament_servers_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "tournament_servers". */
["tournament_servers_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	server?: ResolverInputTypes["servers_order_by"] | undefined | null,
	server_id?: ResolverInputTypes["order_by"] | undefined | null,
	tournament?: ResolverInputTypes["tournaments_order_by"] | undefined | null,
	tournament_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: tournament_servers */
["tournament_servers_pk_columns_input"]: {
	id: ResolverInputTypes["uuid"]
};
	/** select columns of table "tournament_servers" */
["tournament_servers_select_column"]:tournament_servers_select_column;
	/** input type for updating data in table "tournament_servers" */
["tournament_servers_set_input"]: {
	id?: ResolverInputTypes["uuid"] | undefined | null,
	server_id?: ResolverInputTypes["uuid"] | undefined | null,
	tournament_id?: ResolverInputTypes["uuid"] | undefined | null
};
	/** Streaming cursor of the table "tournament_servers" */
["tournament_servers_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["tournament_servers_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["tournament_servers_stream_cursor_value_input"]: {
	id?: ResolverInputTypes["uuid"] | undefined | null,
	server_id?: ResolverInputTypes["uuid"] | undefined | null,
	tournament_id?: ResolverInputTypes["uuid"] | undefined | null
};
	/** update columns of table "tournament_servers" */
["tournament_servers_update_column"]:tournament_servers_update_column;
	["tournament_servers_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["tournament_servers_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["tournament_servers_bool_exp"]
};
	/** columns and relationships of "tournament_stages" */
["tournament_stages"]: AliasType<{
	id?:boolean | `@${string}`,
	order?:boolean | `@${string}`,
settings?: [{	/** JSON select path */
	path?: string | undefined | null},boolean | `@${string}`],
	/** An object relationship */
	tournament?:ResolverInputTypes["tournaments"],
	tournament_id?:boolean | `@${string}`,
	type?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "tournament_stages" */
["tournament_stages_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["tournament_stages_aggregate_fields"],
	nodes?:ResolverInputTypes["tournament_stages"],
		__typename?: boolean | `@${string}`
}>;
	["tournament_stages_aggregate_bool_exp"]: {
	count?: ResolverInputTypes["tournament_stages_aggregate_bool_exp_count"] | undefined | null
};
	["tournament_stages_aggregate_bool_exp_count"]: {
	arguments?: Array<ResolverInputTypes["tournament_stages_select_column"]> | undefined | null,
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["tournament_stages_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Int_comparison_exp"]
};
	/** aggregate fields of "tournament_stages" */
["tournament_stages_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["tournament_stages_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["tournament_stages_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["tournament_stages_max_fields"],
	min?:ResolverInputTypes["tournament_stages_min_fields"],
	stddev?:ResolverInputTypes["tournament_stages_stddev_fields"],
	stddev_pop?:ResolverInputTypes["tournament_stages_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["tournament_stages_stddev_samp_fields"],
	sum?:ResolverInputTypes["tournament_stages_sum_fields"],
	var_pop?:ResolverInputTypes["tournament_stages_var_pop_fields"],
	var_samp?:ResolverInputTypes["tournament_stages_var_samp_fields"],
	variance?:ResolverInputTypes["tournament_stages_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "tournament_stages" */
["tournament_stages_aggregate_order_by"]: {
	avg?: ResolverInputTypes["tournament_stages_avg_order_by"] | undefined | null,
	count?: ResolverInputTypes["order_by"] | undefined | null,
	max?: ResolverInputTypes["tournament_stages_max_order_by"] | undefined | null,
	min?: ResolverInputTypes["tournament_stages_min_order_by"] | undefined | null,
	stddev?: ResolverInputTypes["tournament_stages_stddev_order_by"] | undefined | null,
	stddev_pop?: ResolverInputTypes["tournament_stages_stddev_pop_order_by"] | undefined | null,
	stddev_samp?: ResolverInputTypes["tournament_stages_stddev_samp_order_by"] | undefined | null,
	sum?: ResolverInputTypes["tournament_stages_sum_order_by"] | undefined | null,
	var_pop?: ResolverInputTypes["tournament_stages_var_pop_order_by"] | undefined | null,
	var_samp?: ResolverInputTypes["tournament_stages_var_samp_order_by"] | undefined | null,
	variance?: ResolverInputTypes["tournament_stages_variance_order_by"] | undefined | null
};
	/** append existing jsonb value of filtered columns with new jsonb value */
["tournament_stages_append_input"]: {
	settings?: ResolverInputTypes["jsonb"] | undefined | null
};
	/** input type for inserting array relation for remote table "tournament_stages" */
["tournament_stages_arr_rel_insert_input"]: {
	data: Array<ResolverInputTypes["tournament_stages_insert_input"]>,
	/** upsert condition */
	on_conflict?: ResolverInputTypes["tournament_stages_on_conflict"] | undefined | null
};
	/** aggregate avg on columns */
["tournament_stages_avg_fields"]: AliasType<{
	order?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "tournament_stages" */
["tournament_stages_avg_order_by"]: {
	order?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Boolean expression to filter rows from the table "tournament_stages". All fields are combined with a logical 'AND'. */
["tournament_stages_bool_exp"]: {
	_and?: Array<ResolverInputTypes["tournament_stages_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["tournament_stages_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["tournament_stages_bool_exp"]> | undefined | null,
	id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	order?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	settings?: ResolverInputTypes["jsonb_comparison_exp"] | undefined | null,
	tournament?: ResolverInputTypes["tournaments_bool_exp"] | undefined | null,
	tournament_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	type?: ResolverInputTypes["String_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "tournament_stages" */
["tournament_stages_constraint"]:tournament_stages_constraint;
	/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
["tournament_stages_delete_at_path_input"]: {
	settings?: Array<string> | undefined | null
};
	/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
["tournament_stages_delete_elem_input"]: {
	settings?: number | undefined | null
};
	/** delete key/value pair or string element. key/value pairs are matched based on their key value */
["tournament_stages_delete_key_input"]: {
	settings?: string | undefined | null
};
	/** input type for incrementing numeric columns in table "tournament_stages" */
["tournament_stages_inc_input"]: {
	order?: number | undefined | null
};
	/** input type for inserting data into table "tournament_stages" */
["tournament_stages_insert_input"]: {
	id?: ResolverInputTypes["uuid"] | undefined | null,
	order?: number | undefined | null,
	settings?: ResolverInputTypes["jsonb"] | undefined | null,
	tournament?: ResolverInputTypes["tournaments_obj_rel_insert_input"] | undefined | null,
	tournament_id?: ResolverInputTypes["uuid"] | undefined | null,
	type?: string | undefined | null
};
	/** aggregate max on columns */
["tournament_stages_max_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	order?:boolean | `@${string}`,
	tournament_id?:boolean | `@${string}`,
	type?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "tournament_stages" */
["tournament_stages_max_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	order?: ResolverInputTypes["order_by"] | undefined | null,
	tournament_id?: ResolverInputTypes["order_by"] | undefined | null,
	type?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate min on columns */
["tournament_stages_min_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	order?:boolean | `@${string}`,
	tournament_id?:boolean | `@${string}`,
	type?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "tournament_stages" */
["tournament_stages_min_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	order?: ResolverInputTypes["order_by"] | undefined | null,
	tournament_id?: ResolverInputTypes["order_by"] | undefined | null,
	type?: ResolverInputTypes["order_by"] | undefined | null
};
	/** response of any mutation on the table "tournament_stages" */
["tournament_stages_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["tournament_stages"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "tournament_stages" */
["tournament_stages_on_conflict"]: {
	constraint: ResolverInputTypes["tournament_stages_constraint"],
	update_columns: Array<ResolverInputTypes["tournament_stages_update_column"]>,
	where?: ResolverInputTypes["tournament_stages_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "tournament_stages". */
["tournament_stages_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	order?: ResolverInputTypes["order_by"] | undefined | null,
	settings?: ResolverInputTypes["order_by"] | undefined | null,
	tournament?: ResolverInputTypes["tournaments_order_by"] | undefined | null,
	tournament_id?: ResolverInputTypes["order_by"] | undefined | null,
	type?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: tournament_stages */
["tournament_stages_pk_columns_input"]: {
	id: ResolverInputTypes["uuid"]
};
	/** prepend existing jsonb value of filtered columns with new jsonb value */
["tournament_stages_prepend_input"]: {
	settings?: ResolverInputTypes["jsonb"] | undefined | null
};
	/** select columns of table "tournament_stages" */
["tournament_stages_select_column"]:tournament_stages_select_column;
	/** input type for updating data in table "tournament_stages" */
["tournament_stages_set_input"]: {
	id?: ResolverInputTypes["uuid"] | undefined | null,
	order?: number | undefined | null,
	settings?: ResolverInputTypes["jsonb"] | undefined | null,
	tournament_id?: ResolverInputTypes["uuid"] | undefined | null,
	type?: string | undefined | null
};
	/** aggregate stddev on columns */
["tournament_stages_stddev_fields"]: AliasType<{
	order?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "tournament_stages" */
["tournament_stages_stddev_order_by"]: {
	order?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_pop on columns */
["tournament_stages_stddev_pop_fields"]: AliasType<{
	order?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "tournament_stages" */
["tournament_stages_stddev_pop_order_by"]: {
	order?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_samp on columns */
["tournament_stages_stddev_samp_fields"]: AliasType<{
	order?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "tournament_stages" */
["tournament_stages_stddev_samp_order_by"]: {
	order?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Streaming cursor of the table "tournament_stages" */
["tournament_stages_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["tournament_stages_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["tournament_stages_stream_cursor_value_input"]: {
	id?: ResolverInputTypes["uuid"] | undefined | null,
	order?: number | undefined | null,
	settings?: ResolverInputTypes["jsonb"] | undefined | null,
	tournament_id?: ResolverInputTypes["uuid"] | undefined | null,
	type?: string | undefined | null
};
	/** aggregate sum on columns */
["tournament_stages_sum_fields"]: AliasType<{
	order?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "tournament_stages" */
["tournament_stages_sum_order_by"]: {
	order?: ResolverInputTypes["order_by"] | undefined | null
};
	/** update columns of table "tournament_stages" */
["tournament_stages_update_column"]:tournament_stages_update_column;
	["tournament_stages_updates"]: {
	/** append existing jsonb value of filtered columns with new jsonb value */
	_append?: ResolverInputTypes["tournament_stages_append_input"] | undefined | null,
	/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
	_delete_at_path?: ResolverInputTypes["tournament_stages_delete_at_path_input"] | undefined | null,
	/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
	_delete_elem?: ResolverInputTypes["tournament_stages_delete_elem_input"] | undefined | null,
	/** delete key/value pair or string element. key/value pairs are matched based on their key value */
	_delete_key?: ResolverInputTypes["tournament_stages_delete_key_input"] | undefined | null,
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["tournament_stages_inc_input"] | undefined | null,
	/** prepend existing jsonb value of filtered columns with new jsonb value */
	_prepend?: ResolverInputTypes["tournament_stages_prepend_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["tournament_stages_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["tournament_stages_bool_exp"]
};
	/** aggregate var_pop on columns */
["tournament_stages_var_pop_fields"]: AliasType<{
	order?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "tournament_stages" */
["tournament_stages_var_pop_order_by"]: {
	order?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate var_samp on columns */
["tournament_stages_var_samp_fields"]: AliasType<{
	order?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "tournament_stages" */
["tournament_stages_var_samp_order_by"]: {
	order?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate variance on columns */
["tournament_stages_variance_fields"]: AliasType<{
	order?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "tournament_stages" */
["tournament_stages_variance_order_by"]: {
	order?: ResolverInputTypes["order_by"] | undefined | null
};
	/** columns and relationships of "tournament_teams" */
["tournament_teams"]: AliasType<{
	id?:boolean | `@${string}`,
	/** An object relationship */
	team?:ResolverInputTypes["teams"],
	team_id?:boolean | `@${string}`,
	/** An object relationship */
	tournament?:ResolverInputTypes["tournaments"],
	tournament_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "tournament_teams" */
["tournament_teams_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["tournament_teams_aggregate_fields"],
	nodes?:ResolverInputTypes["tournament_teams"],
		__typename?: boolean | `@${string}`
}>;
	["tournament_teams_aggregate_bool_exp"]: {
	count?: ResolverInputTypes["tournament_teams_aggregate_bool_exp_count"] | undefined | null
};
	["tournament_teams_aggregate_bool_exp_count"]: {
	arguments?: Array<ResolverInputTypes["tournament_teams_select_column"]> | undefined | null,
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["tournament_teams_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Int_comparison_exp"]
};
	/** aggregate fields of "tournament_teams" */
["tournament_teams_aggregate_fields"]: AliasType<{
count?: [{	columns?: Array<ResolverInputTypes["tournament_teams_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["tournament_teams_max_fields"],
	min?:ResolverInputTypes["tournament_teams_min_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "tournament_teams" */
["tournament_teams_aggregate_order_by"]: {
	count?: ResolverInputTypes["order_by"] | undefined | null,
	max?: ResolverInputTypes["tournament_teams_max_order_by"] | undefined | null,
	min?: ResolverInputTypes["tournament_teams_min_order_by"] | undefined | null
};
	/** input type for inserting array relation for remote table "tournament_teams" */
["tournament_teams_arr_rel_insert_input"]: {
	data: Array<ResolverInputTypes["tournament_teams_insert_input"]>,
	/** upsert condition */
	on_conflict?: ResolverInputTypes["tournament_teams_on_conflict"] | undefined | null
};
	/** Boolean expression to filter rows from the table "tournament_teams". All fields are combined with a logical 'AND'. */
["tournament_teams_bool_exp"]: {
	_and?: Array<ResolverInputTypes["tournament_teams_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["tournament_teams_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["tournament_teams_bool_exp"]> | undefined | null,
	id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	team?: ResolverInputTypes["teams_bool_exp"] | undefined | null,
	team_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	tournament?: ResolverInputTypes["tournaments_bool_exp"] | undefined | null,
	tournament_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "tournament_teams" */
["tournament_teams_constraint"]:tournament_teams_constraint;
	/** input type for inserting data into table "tournament_teams" */
["tournament_teams_insert_input"]: {
	id?: ResolverInputTypes["uuid"] | undefined | null,
	team?: ResolverInputTypes["teams_obj_rel_insert_input"] | undefined | null,
	team_id?: ResolverInputTypes["uuid"] | undefined | null,
	tournament?: ResolverInputTypes["tournaments_obj_rel_insert_input"] | undefined | null,
	tournament_id?: ResolverInputTypes["uuid"] | undefined | null
};
	/** aggregate max on columns */
["tournament_teams_max_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	team_id?:boolean | `@${string}`,
	tournament_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "tournament_teams" */
["tournament_teams_max_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	team_id?: ResolverInputTypes["order_by"] | undefined | null,
	tournament_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate min on columns */
["tournament_teams_min_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	team_id?:boolean | `@${string}`,
	tournament_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "tournament_teams" */
["tournament_teams_min_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	team_id?: ResolverInputTypes["order_by"] | undefined | null,
	tournament_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** response of any mutation on the table "tournament_teams" */
["tournament_teams_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["tournament_teams"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "tournament_teams" */
["tournament_teams_on_conflict"]: {
	constraint: ResolverInputTypes["tournament_teams_constraint"],
	update_columns: Array<ResolverInputTypes["tournament_teams_update_column"]>,
	where?: ResolverInputTypes["tournament_teams_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "tournament_teams". */
["tournament_teams_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	team?: ResolverInputTypes["teams_order_by"] | undefined | null,
	team_id?: ResolverInputTypes["order_by"] | undefined | null,
	tournament?: ResolverInputTypes["tournaments_order_by"] | undefined | null,
	tournament_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: tournament_teams */
["tournament_teams_pk_columns_input"]: {
	id: ResolverInputTypes["uuid"]
};
	/** select columns of table "tournament_teams" */
["tournament_teams_select_column"]:tournament_teams_select_column;
	/** input type for updating data in table "tournament_teams" */
["tournament_teams_set_input"]: {
	id?: ResolverInputTypes["uuid"] | undefined | null,
	team_id?: ResolverInputTypes["uuid"] | undefined | null,
	tournament_id?: ResolverInputTypes["uuid"] | undefined | null
};
	/** Streaming cursor of the table "tournament_teams" */
["tournament_teams_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["tournament_teams_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["tournament_teams_stream_cursor_value_input"]: {
	id?: ResolverInputTypes["uuid"] | undefined | null,
	team_id?: ResolverInputTypes["uuid"] | undefined | null,
	tournament_id?: ResolverInputTypes["uuid"] | undefined | null
};
	/** update columns of table "tournament_teams" */
["tournament_teams_update_column"]:tournament_teams_update_column;
	["tournament_teams_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["tournament_teams_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["tournament_teams_bool_exp"]
};
	/** columns and relationships of "tournaments" */
["tournaments"]: AliasType<{
	/** An object relationship */
	admin?:ResolverInputTypes["players"],
	description?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	organizer_steam_id?:boolean | `@${string}`,
organizers?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_organizers_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_organizers_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_organizers_bool_exp"] | undefined | null},ResolverInputTypes["tournament_organizers"]],
organizers_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_organizers_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_organizers_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_organizers_bool_exp"] | undefined | null},ResolverInputTypes["tournament_organizers_aggregate"]],
rosters?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_roster_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_roster_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_roster_bool_exp"] | undefined | null},ResolverInputTypes["tournament_roster"]],
rosters_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_roster_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_roster_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_roster_bool_exp"] | undefined | null},ResolverInputTypes["tournament_roster_aggregate"]],
servers?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_servers_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_servers_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_servers_bool_exp"] | undefined | null},ResolverInputTypes["tournament_servers"]],
servers_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_servers_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_servers_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_servers_bool_exp"] | undefined | null},ResolverInputTypes["tournament_servers_aggregate"]],
stages?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_stages_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_stages_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_stages_bool_exp"] | undefined | null},ResolverInputTypes["tournament_stages"]],
stages_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_stages_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_stages_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_stages_bool_exp"] | undefined | null},ResolverInputTypes["tournament_stages_aggregate"]],
	start?:boolean | `@${string}`,
	status?:boolean | `@${string}`,
teams?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_teams_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_teams_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_teams_bool_exp"] | undefined | null},ResolverInputTypes["tournament_teams"]],
teams_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["tournament_teams_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["tournament_teams_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["tournament_teams_bool_exp"] | undefined | null},ResolverInputTypes["tournament_teams_aggregate"]],
	type?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "tournaments" */
["tournaments_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["tournaments_aggregate_fields"],
	nodes?:ResolverInputTypes["tournaments"],
		__typename?: boolean | `@${string}`
}>;
	["tournaments_aggregate_bool_exp"]: {
	count?: ResolverInputTypes["tournaments_aggregate_bool_exp_count"] | undefined | null
};
	["tournaments_aggregate_bool_exp_count"]: {
	arguments?: Array<ResolverInputTypes["tournaments_select_column"]> | undefined | null,
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["tournaments_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Int_comparison_exp"]
};
	/** aggregate fields of "tournaments" */
["tournaments_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["tournaments_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["tournaments_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["tournaments_max_fields"],
	min?:ResolverInputTypes["tournaments_min_fields"],
	stddev?:ResolverInputTypes["tournaments_stddev_fields"],
	stddev_pop?:ResolverInputTypes["tournaments_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["tournaments_stddev_samp_fields"],
	sum?:ResolverInputTypes["tournaments_sum_fields"],
	var_pop?:ResolverInputTypes["tournaments_var_pop_fields"],
	var_samp?:ResolverInputTypes["tournaments_var_samp_fields"],
	variance?:ResolverInputTypes["tournaments_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "tournaments" */
["tournaments_aggregate_order_by"]: {
	avg?: ResolverInputTypes["tournaments_avg_order_by"] | undefined | null,
	count?: ResolverInputTypes["order_by"] | undefined | null,
	max?: ResolverInputTypes["tournaments_max_order_by"] | undefined | null,
	min?: ResolverInputTypes["tournaments_min_order_by"] | undefined | null,
	stddev?: ResolverInputTypes["tournaments_stddev_order_by"] | undefined | null,
	stddev_pop?: ResolverInputTypes["tournaments_stddev_pop_order_by"] | undefined | null,
	stddev_samp?: ResolverInputTypes["tournaments_stddev_samp_order_by"] | undefined | null,
	sum?: ResolverInputTypes["tournaments_sum_order_by"] | undefined | null,
	var_pop?: ResolverInputTypes["tournaments_var_pop_order_by"] | undefined | null,
	var_samp?: ResolverInputTypes["tournaments_var_samp_order_by"] | undefined | null,
	variance?: ResolverInputTypes["tournaments_variance_order_by"] | undefined | null
};
	/** input type for inserting array relation for remote table "tournaments" */
["tournaments_arr_rel_insert_input"]: {
	data: Array<ResolverInputTypes["tournaments_insert_input"]>,
	/** upsert condition */
	on_conflict?: ResolverInputTypes["tournaments_on_conflict"] | undefined | null
};
	/** aggregate avg on columns */
["tournaments_avg_fields"]: AliasType<{
	organizer_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "tournaments" */
["tournaments_avg_order_by"]: {
	organizer_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Boolean expression to filter rows from the table "tournaments". All fields are combined with a logical 'AND'. */
["tournaments_bool_exp"]: {
	_and?: Array<ResolverInputTypes["tournaments_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["tournaments_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["tournaments_bool_exp"]> | undefined | null,
	admin?: ResolverInputTypes["players_bool_exp"] | undefined | null,
	description?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	name?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	organizer_steam_id?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null,
	organizers?: ResolverInputTypes["tournament_organizers_bool_exp"] | undefined | null,
	organizers_aggregate?: ResolverInputTypes["tournament_organizers_aggregate_bool_exp"] | undefined | null,
	rosters?: ResolverInputTypes["tournament_roster_bool_exp"] | undefined | null,
	rosters_aggregate?: ResolverInputTypes["tournament_roster_aggregate_bool_exp"] | undefined | null,
	servers?: ResolverInputTypes["tournament_servers_bool_exp"] | undefined | null,
	servers_aggregate?: ResolverInputTypes["tournament_servers_aggregate_bool_exp"] | undefined | null,
	stages?: ResolverInputTypes["tournament_stages_bool_exp"] | undefined | null,
	stages_aggregate?: ResolverInputTypes["tournament_stages_aggregate_bool_exp"] | undefined | null,
	start?: ResolverInputTypes["timestamptz_comparison_exp"] | undefined | null,
	status?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	teams?: ResolverInputTypes["tournament_teams_bool_exp"] | undefined | null,
	teams_aggregate?: ResolverInputTypes["tournament_teams_aggregate_bool_exp"] | undefined | null,
	type?: ResolverInputTypes["String_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "tournaments" */
["tournaments_constraint"]:tournaments_constraint;
	/** input type for incrementing numeric columns in table "tournaments" */
["tournaments_inc_input"]: {
	organizer_steam_id?: ResolverInputTypes["bigint"] | undefined | null
};
	/** input type for inserting data into table "tournaments" */
["tournaments_insert_input"]: {
	admin?: ResolverInputTypes["players_obj_rel_insert_input"] | undefined | null,
	description?: string | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	name?: string | undefined | null,
	organizer_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	organizers?: ResolverInputTypes["tournament_organizers_arr_rel_insert_input"] | undefined | null,
	rosters?: ResolverInputTypes["tournament_roster_arr_rel_insert_input"] | undefined | null,
	servers?: ResolverInputTypes["tournament_servers_arr_rel_insert_input"] | undefined | null,
	stages?: ResolverInputTypes["tournament_stages_arr_rel_insert_input"] | undefined | null,
	start?: ResolverInputTypes["timestamptz"] | undefined | null,
	status?: string | undefined | null,
	teams?: ResolverInputTypes["tournament_teams_arr_rel_insert_input"] | undefined | null,
	type?: string | undefined | null
};
	/** aggregate max on columns */
["tournaments_max_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	organizer_steam_id?:boolean | `@${string}`,
	start?:boolean | `@${string}`,
	status?:boolean | `@${string}`,
	type?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "tournaments" */
["tournaments_max_order_by"]: {
	description?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	name?: ResolverInputTypes["order_by"] | undefined | null,
	organizer_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	start?: ResolverInputTypes["order_by"] | undefined | null,
	status?: ResolverInputTypes["order_by"] | undefined | null,
	type?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate min on columns */
["tournaments_min_fields"]: AliasType<{
	description?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	organizer_steam_id?:boolean | `@${string}`,
	start?:boolean | `@${string}`,
	status?:boolean | `@${string}`,
	type?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "tournaments" */
["tournaments_min_order_by"]: {
	description?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	name?: ResolverInputTypes["order_by"] | undefined | null,
	organizer_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	start?: ResolverInputTypes["order_by"] | undefined | null,
	status?: ResolverInputTypes["order_by"] | undefined | null,
	type?: ResolverInputTypes["order_by"] | undefined | null
};
	/** response of any mutation on the table "tournaments" */
["tournaments_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["tournaments"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "tournaments" */
["tournaments_obj_rel_insert_input"]: {
	data: ResolverInputTypes["tournaments_insert_input"],
	/** upsert condition */
	on_conflict?: ResolverInputTypes["tournaments_on_conflict"] | undefined | null
};
	/** on_conflict condition type for table "tournaments" */
["tournaments_on_conflict"]: {
	constraint: ResolverInputTypes["tournaments_constraint"],
	update_columns: Array<ResolverInputTypes["tournaments_update_column"]>,
	where?: ResolverInputTypes["tournaments_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "tournaments". */
["tournaments_order_by"]: {
	admin?: ResolverInputTypes["players_order_by"] | undefined | null,
	description?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	name?: ResolverInputTypes["order_by"] | undefined | null,
	organizer_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	organizers_aggregate?: ResolverInputTypes["tournament_organizers_aggregate_order_by"] | undefined | null,
	rosters_aggregate?: ResolverInputTypes["tournament_roster_aggregate_order_by"] | undefined | null,
	servers_aggregate?: ResolverInputTypes["tournament_servers_aggregate_order_by"] | undefined | null,
	stages_aggregate?: ResolverInputTypes["tournament_stages_aggregate_order_by"] | undefined | null,
	start?: ResolverInputTypes["order_by"] | undefined | null,
	status?: ResolverInputTypes["order_by"] | undefined | null,
	teams_aggregate?: ResolverInputTypes["tournament_teams_aggregate_order_by"] | undefined | null,
	type?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: tournaments */
["tournaments_pk_columns_input"]: {
	id: ResolverInputTypes["uuid"]
};
	/** select columns of table "tournaments" */
["tournaments_select_column"]:tournaments_select_column;
	/** input type for updating data in table "tournaments" */
["tournaments_set_input"]: {
	description?: string | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	name?: string | undefined | null,
	organizer_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	start?: ResolverInputTypes["timestamptz"] | undefined | null,
	status?: string | undefined | null,
	type?: string | undefined | null
};
	/** aggregate stddev on columns */
["tournaments_stddev_fields"]: AliasType<{
	organizer_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "tournaments" */
["tournaments_stddev_order_by"]: {
	organizer_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_pop on columns */
["tournaments_stddev_pop_fields"]: AliasType<{
	organizer_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "tournaments" */
["tournaments_stddev_pop_order_by"]: {
	organizer_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_samp on columns */
["tournaments_stddev_samp_fields"]: AliasType<{
	organizer_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "tournaments" */
["tournaments_stddev_samp_order_by"]: {
	organizer_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Streaming cursor of the table "tournaments" */
["tournaments_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["tournaments_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["tournaments_stream_cursor_value_input"]: {
	description?: string | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	name?: string | undefined | null,
	organizer_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	start?: ResolverInputTypes["timestamptz"] | undefined | null,
	status?: string | undefined | null,
	type?: string | undefined | null
};
	/** aggregate sum on columns */
["tournaments_sum_fields"]: AliasType<{
	organizer_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "tournaments" */
["tournaments_sum_order_by"]: {
	organizer_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** update columns of table "tournaments" */
["tournaments_update_column"]:tournaments_update_column;
	["tournaments_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["tournaments_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["tournaments_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["tournaments_bool_exp"]
};
	/** aggregate var_pop on columns */
["tournaments_var_pop_fields"]: AliasType<{
	organizer_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "tournaments" */
["tournaments_var_pop_order_by"]: {
	organizer_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate var_samp on columns */
["tournaments_var_samp_fields"]: AliasType<{
	organizer_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "tournaments" */
["tournaments_var_samp_order_by"]: {
	organizer_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate variance on columns */
["tournaments_variance_fields"]: AliasType<{
	organizer_steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "tournaments" */
["tournaments_variance_order_by"]: {
	organizer_steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	["uuid"]:unknown;
	/** Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'. */
["uuid_comparison_exp"]: {
	_eq?: ResolverInputTypes["uuid"] | undefined | null,
	_gt?: ResolverInputTypes["uuid"] | undefined | null,
	_gte?: ResolverInputTypes["uuid"] | undefined | null,
	_in?: Array<ResolverInputTypes["uuid"]> | undefined | null,
	_is_null?: boolean | undefined | null,
	_lt?: ResolverInputTypes["uuid"] | undefined | null,
	_lte?: ResolverInputTypes["uuid"] | undefined | null,
	_neq?: ResolverInputTypes["uuid"] | undefined | null,
	_nin?: Array<ResolverInputTypes["uuid"]> | undefined | null
};
	/** columns and relationships of "v_match_captains" */
["v_match_captains"]: AliasType<{
	captain?:boolean | `@${string}`,
	discord_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** An object relationship */
	lineup?:ResolverInputTypes["match_lineups"],
	match_lineup_id?:boolean | `@${string}`,
	placeholder_name?:boolean | `@${string}`,
	/** An object relationship */
	player?:ResolverInputTypes["players"],
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "v_match_captains" */
["v_match_captains_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["v_match_captains_aggregate_fields"],
	nodes?:ResolverInputTypes["v_match_captains"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "v_match_captains" */
["v_match_captains_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["v_match_captains_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["v_match_captains_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["v_match_captains_max_fields"],
	min?:ResolverInputTypes["v_match_captains_min_fields"],
	stddev?:ResolverInputTypes["v_match_captains_stddev_fields"],
	stddev_pop?:ResolverInputTypes["v_match_captains_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["v_match_captains_stddev_samp_fields"],
	sum?:ResolverInputTypes["v_match_captains_sum_fields"],
	var_pop?:ResolverInputTypes["v_match_captains_var_pop_fields"],
	var_samp?:ResolverInputTypes["v_match_captains_var_samp_fields"],
	variance?:ResolverInputTypes["v_match_captains_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate avg on columns */
["v_match_captains_avg_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "v_match_captains". All fields are combined with a logical 'AND'. */
["v_match_captains_bool_exp"]: {
	_and?: Array<ResolverInputTypes["v_match_captains_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["v_match_captains_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["v_match_captains_bool_exp"]> | undefined | null,
	captain?: ResolverInputTypes["Boolean_comparison_exp"] | undefined | null,
	discord_id?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	lineup?: ResolverInputTypes["match_lineups_bool_exp"] | undefined | null,
	match_lineup_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	placeholder_name?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	player?: ResolverInputTypes["players_bool_exp"] | undefined | null,
	steam_id?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null
};
	/** input type for incrementing numeric columns in table "v_match_captains" */
["v_match_captains_inc_input"]: {
	steam_id?: ResolverInputTypes["bigint"] | undefined | null
};
	/** input type for inserting data into table "v_match_captains" */
["v_match_captains_insert_input"]: {
	captain?: boolean | undefined | null,
	discord_id?: string | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	lineup?: ResolverInputTypes["match_lineups_obj_rel_insert_input"] | undefined | null,
	match_lineup_id?: ResolverInputTypes["uuid"] | undefined | null,
	placeholder_name?: string | undefined | null,
	player?: ResolverInputTypes["players_obj_rel_insert_input"] | undefined | null,
	steam_id?: ResolverInputTypes["bigint"] | undefined | null
};
	/** aggregate max on columns */
["v_match_captains_max_fields"]: AliasType<{
	discord_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_lineup_id?:boolean | `@${string}`,
	placeholder_name?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["v_match_captains_min_fields"]: AliasType<{
	discord_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	match_lineup_id?:boolean | `@${string}`,
	placeholder_name?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "v_match_captains" */
["v_match_captains_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["v_match_captains"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "v_match_captains" */
["v_match_captains_obj_rel_insert_input"]: {
	data: ResolverInputTypes["v_match_captains_insert_input"]
};
	/** Ordering options when selecting data from "v_match_captains". */
["v_match_captains_order_by"]: {
	captain?: ResolverInputTypes["order_by"] | undefined | null,
	discord_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	lineup?: ResolverInputTypes["match_lineups_order_by"] | undefined | null,
	match_lineup_id?: ResolverInputTypes["order_by"] | undefined | null,
	placeholder_name?: ResolverInputTypes["order_by"] | undefined | null,
	player?: ResolverInputTypes["players_order_by"] | undefined | null,
	steam_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** select columns of table "v_match_captains" */
["v_match_captains_select_column"]:v_match_captains_select_column;
	/** input type for updating data in table "v_match_captains" */
["v_match_captains_set_input"]: {
	captain?: boolean | undefined | null,
	discord_id?: string | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	match_lineup_id?: ResolverInputTypes["uuid"] | undefined | null,
	placeholder_name?: string | undefined | null,
	steam_id?: ResolverInputTypes["bigint"] | undefined | null
};
	/** aggregate stddev on columns */
["v_match_captains_stddev_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_pop on columns */
["v_match_captains_stddev_pop_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_samp on columns */
["v_match_captains_stddev_samp_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Streaming cursor of the table "v_match_captains" */
["v_match_captains_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["v_match_captains_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["v_match_captains_stream_cursor_value_input"]: {
	captain?: boolean | undefined | null,
	discord_id?: string | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	match_lineup_id?: ResolverInputTypes["uuid"] | undefined | null,
	placeholder_name?: string | undefined | null,
	steam_id?: ResolverInputTypes["bigint"] | undefined | null
};
	/** aggregate sum on columns */
["v_match_captains_sum_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	["v_match_captains_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["v_match_captains_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["v_match_captains_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["v_match_captains_bool_exp"]
};
	/** aggregate var_pop on columns */
["v_match_captains_var_pop_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate var_samp on columns */
["v_match_captains_var_samp_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate variance on columns */
["v_match_captains_variance_fields"]: AliasType<{
	steam_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** columns and relationships of "v_player_arch_nemesis" */
["v_player_arch_nemesis"]: AliasType<{
	attacker_id?:boolean | `@${string}`,
	kill_count?:boolean | `@${string}`,
	/** An object relationship */
	nemsis?:ResolverInputTypes["players"],
	/** An object relationship */
	player?:ResolverInputTypes["players"],
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "v_player_arch_nemesis" */
["v_player_arch_nemesis_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["v_player_arch_nemesis_aggregate_fields"],
	nodes?:ResolverInputTypes["v_player_arch_nemesis"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "v_player_arch_nemesis" */
["v_player_arch_nemesis_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["v_player_arch_nemesis_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["v_player_arch_nemesis_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["v_player_arch_nemesis_max_fields"],
	min?:ResolverInputTypes["v_player_arch_nemesis_min_fields"],
	stddev?:ResolverInputTypes["v_player_arch_nemesis_stddev_fields"],
	stddev_pop?:ResolverInputTypes["v_player_arch_nemesis_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["v_player_arch_nemesis_stddev_samp_fields"],
	sum?:ResolverInputTypes["v_player_arch_nemesis_sum_fields"],
	var_pop?:ResolverInputTypes["v_player_arch_nemesis_var_pop_fields"],
	var_samp?:ResolverInputTypes["v_player_arch_nemesis_var_samp_fields"],
	variance?:ResolverInputTypes["v_player_arch_nemesis_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate avg on columns */
["v_player_arch_nemesis_avg_fields"]: AliasType<{
	attacker_id?:boolean | `@${string}`,
	kill_count?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "v_player_arch_nemesis". All fields are combined with a logical 'AND'. */
["v_player_arch_nemesis_bool_exp"]: {
	_and?: Array<ResolverInputTypes["v_player_arch_nemesis_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["v_player_arch_nemesis_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["v_player_arch_nemesis_bool_exp"]> | undefined | null,
	attacker_id?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null,
	kill_count?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null,
	nemsis?: ResolverInputTypes["players_bool_exp"] | undefined | null,
	player?: ResolverInputTypes["players_bool_exp"] | undefined | null,
	victim_id?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null
};
	/** aggregate max on columns */
["v_player_arch_nemesis_max_fields"]: AliasType<{
	attacker_id?:boolean | `@${string}`,
	kill_count?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["v_player_arch_nemesis_min_fields"]: AliasType<{
	attacker_id?:boolean | `@${string}`,
	kill_count?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options when selecting data from "v_player_arch_nemesis". */
["v_player_arch_nemesis_order_by"]: {
	attacker_id?: ResolverInputTypes["order_by"] | undefined | null,
	kill_count?: ResolverInputTypes["order_by"] | undefined | null,
	nemsis?: ResolverInputTypes["players_order_by"] | undefined | null,
	player?: ResolverInputTypes["players_order_by"] | undefined | null,
	victim_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** select columns of table "v_player_arch_nemesis" */
["v_player_arch_nemesis_select_column"]:v_player_arch_nemesis_select_column;
	/** aggregate stddev on columns */
["v_player_arch_nemesis_stddev_fields"]: AliasType<{
	attacker_id?:boolean | `@${string}`,
	kill_count?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_pop on columns */
["v_player_arch_nemesis_stddev_pop_fields"]: AliasType<{
	attacker_id?:boolean | `@${string}`,
	kill_count?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_samp on columns */
["v_player_arch_nemesis_stddev_samp_fields"]: AliasType<{
	attacker_id?:boolean | `@${string}`,
	kill_count?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Streaming cursor of the table "v_player_arch_nemesis" */
["v_player_arch_nemesis_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["v_player_arch_nemesis_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["v_player_arch_nemesis_stream_cursor_value_input"]: {
	attacker_id?: ResolverInputTypes["bigint"] | undefined | null,
	kill_count?: ResolverInputTypes["bigint"] | undefined | null,
	victim_id?: ResolverInputTypes["bigint"] | undefined | null
};
	/** aggregate sum on columns */
["v_player_arch_nemesis_sum_fields"]: AliasType<{
	attacker_id?:boolean | `@${string}`,
	kill_count?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate var_pop on columns */
["v_player_arch_nemesis_var_pop_fields"]: AliasType<{
	attacker_id?:boolean | `@${string}`,
	kill_count?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate var_samp on columns */
["v_player_arch_nemesis_var_samp_fields"]: AliasType<{
	attacker_id?:boolean | `@${string}`,
	kill_count?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate variance on columns */
["v_player_arch_nemesis_variance_fields"]: AliasType<{
	attacker_id?:boolean | `@${string}`,
	kill_count?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** columns and relationships of "v_player_damage" */
["v_player_damage"]: AliasType<{
	avg_damage_per_round?:boolean | `@${string}`,
	/** An object relationship */
	player?:ResolverInputTypes["players"],
	player_steam_id?:boolean | `@${string}`,
	total_damage?:boolean | `@${string}`,
	total_rounds?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "v_player_damage" */
["v_player_damage_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["v_player_damage_aggregate_fields"],
	nodes?:ResolverInputTypes["v_player_damage"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "v_player_damage" */
["v_player_damage_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["v_player_damage_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["v_player_damage_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["v_player_damage_max_fields"],
	min?:ResolverInputTypes["v_player_damage_min_fields"],
	stddev?:ResolverInputTypes["v_player_damage_stddev_fields"],
	stddev_pop?:ResolverInputTypes["v_player_damage_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["v_player_damage_stddev_samp_fields"],
	sum?:ResolverInputTypes["v_player_damage_sum_fields"],
	var_pop?:ResolverInputTypes["v_player_damage_var_pop_fields"],
	var_samp?:ResolverInputTypes["v_player_damage_var_samp_fields"],
	variance?:ResolverInputTypes["v_player_damage_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate avg on columns */
["v_player_damage_avg_fields"]: AliasType<{
	avg_damage_per_round?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_damage?:boolean | `@${string}`,
	total_rounds?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "v_player_damage". All fields are combined with a logical 'AND'. */
["v_player_damage_bool_exp"]: {
	_and?: Array<ResolverInputTypes["v_player_damage_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["v_player_damage_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["v_player_damage_bool_exp"]> | undefined | null,
	avg_damage_per_round?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null,
	player?: ResolverInputTypes["players_bool_exp"] | undefined | null,
	player_steam_id?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null,
	total_damage?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null,
	total_rounds?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null
};
	/** aggregate max on columns */
["v_player_damage_max_fields"]: AliasType<{
	avg_damage_per_round?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_damage?:boolean | `@${string}`,
	total_rounds?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["v_player_damage_min_fields"]: AliasType<{
	avg_damage_per_round?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_damage?:boolean | `@${string}`,
	total_rounds?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options when selecting data from "v_player_damage". */
["v_player_damage_order_by"]: {
	avg_damage_per_round?: ResolverInputTypes["order_by"] | undefined | null,
	player?: ResolverInputTypes["players_order_by"] | undefined | null,
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	total_damage?: ResolverInputTypes["order_by"] | undefined | null,
	total_rounds?: ResolverInputTypes["order_by"] | undefined | null
};
	/** select columns of table "v_player_damage" */
["v_player_damage_select_column"]:v_player_damage_select_column;
	/** aggregate stddev on columns */
["v_player_damage_stddev_fields"]: AliasType<{
	avg_damage_per_round?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_damage?:boolean | `@${string}`,
	total_rounds?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_pop on columns */
["v_player_damage_stddev_pop_fields"]: AliasType<{
	avg_damage_per_round?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_damage?:boolean | `@${string}`,
	total_rounds?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_samp on columns */
["v_player_damage_stddev_samp_fields"]: AliasType<{
	avg_damage_per_round?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_damage?:boolean | `@${string}`,
	total_rounds?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Streaming cursor of the table "v_player_damage" */
["v_player_damage_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["v_player_damage_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["v_player_damage_stream_cursor_value_input"]: {
	avg_damage_per_round?: ResolverInputTypes["bigint"] | undefined | null,
	player_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	total_damage?: ResolverInputTypes["bigint"] | undefined | null,
	total_rounds?: ResolverInputTypes["bigint"] | undefined | null
};
	/** aggregate sum on columns */
["v_player_damage_sum_fields"]: AliasType<{
	avg_damage_per_round?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_damage?:boolean | `@${string}`,
	total_rounds?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate var_pop on columns */
["v_player_damage_var_pop_fields"]: AliasType<{
	avg_damage_per_round?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_damage?:boolean | `@${string}`,
	total_rounds?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate var_samp on columns */
["v_player_damage_var_samp_fields"]: AliasType<{
	avg_damage_per_round?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_damage?:boolean | `@${string}`,
	total_rounds?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate variance on columns */
["v_player_damage_variance_fields"]: AliasType<{
	avg_damage_per_round?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_damage?:boolean | `@${string}`,
	total_rounds?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** columns and relationships of "v_player_killed_player_counts" */
["v_player_killed_player_counts"]: AliasType<{
	kill_count?:boolean | `@${string}`,
	player_id?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "v_player_killed_player_counts" */
["v_player_killed_player_counts_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["v_player_killed_player_counts_aggregate_fields"],
	nodes?:ResolverInputTypes["v_player_killed_player_counts"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "v_player_killed_player_counts" */
["v_player_killed_player_counts_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["v_player_killed_player_counts_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["v_player_killed_player_counts_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["v_player_killed_player_counts_max_fields"],
	min?:ResolverInputTypes["v_player_killed_player_counts_min_fields"],
	stddev?:ResolverInputTypes["v_player_killed_player_counts_stddev_fields"],
	stddev_pop?:ResolverInputTypes["v_player_killed_player_counts_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["v_player_killed_player_counts_stddev_samp_fields"],
	sum?:ResolverInputTypes["v_player_killed_player_counts_sum_fields"],
	var_pop?:ResolverInputTypes["v_player_killed_player_counts_var_pop_fields"],
	var_samp?:ResolverInputTypes["v_player_killed_player_counts_var_samp_fields"],
	variance?:ResolverInputTypes["v_player_killed_player_counts_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate avg on columns */
["v_player_killed_player_counts_avg_fields"]: AliasType<{
	kill_count?:boolean | `@${string}`,
	player_id?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "v_player_killed_player_counts". All fields are combined with a logical 'AND'. */
["v_player_killed_player_counts_bool_exp"]: {
	_and?: Array<ResolverInputTypes["v_player_killed_player_counts_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["v_player_killed_player_counts_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["v_player_killed_player_counts_bool_exp"]> | undefined | null,
	kill_count?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null,
	player_id?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null,
	victim_id?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null
};
	/** aggregate max on columns */
["v_player_killed_player_counts_max_fields"]: AliasType<{
	kill_count?:boolean | `@${string}`,
	player_id?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["v_player_killed_player_counts_min_fields"]: AliasType<{
	kill_count?:boolean | `@${string}`,
	player_id?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options when selecting data from "v_player_killed_player_counts". */
["v_player_killed_player_counts_order_by"]: {
	kill_count?: ResolverInputTypes["order_by"] | undefined | null,
	player_id?: ResolverInputTypes["order_by"] | undefined | null,
	victim_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** select columns of table "v_player_killed_player_counts" */
["v_player_killed_player_counts_select_column"]:v_player_killed_player_counts_select_column;
	/** aggregate stddev on columns */
["v_player_killed_player_counts_stddev_fields"]: AliasType<{
	kill_count?:boolean | `@${string}`,
	player_id?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_pop on columns */
["v_player_killed_player_counts_stddev_pop_fields"]: AliasType<{
	kill_count?:boolean | `@${string}`,
	player_id?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_samp on columns */
["v_player_killed_player_counts_stddev_samp_fields"]: AliasType<{
	kill_count?:boolean | `@${string}`,
	player_id?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Streaming cursor of the table "v_player_killed_player_counts" */
["v_player_killed_player_counts_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["v_player_killed_player_counts_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["v_player_killed_player_counts_stream_cursor_value_input"]: {
	kill_count?: ResolverInputTypes["bigint"] | undefined | null,
	player_id?: ResolverInputTypes["bigint"] | undefined | null,
	victim_id?: ResolverInputTypes["bigint"] | undefined | null
};
	/** aggregate sum on columns */
["v_player_killed_player_counts_sum_fields"]: AliasType<{
	kill_count?:boolean | `@${string}`,
	player_id?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate var_pop on columns */
["v_player_killed_player_counts_var_pop_fields"]: AliasType<{
	kill_count?:boolean | `@${string}`,
	player_id?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate var_samp on columns */
["v_player_killed_player_counts_var_samp_fields"]: AliasType<{
	kill_count?:boolean | `@${string}`,
	player_id?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate variance on columns */
["v_player_killed_player_counts_variance_fields"]: AliasType<{
	kill_count?:boolean | `@${string}`,
	player_id?:boolean | `@${string}`,
	victim_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** columns and relationships of "v_player_match_kills" */
["v_player_match_kills"]: AliasType<{
	avg_kills_per_game?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	/** An object relationship */
	player?:ResolverInputTypes["players"],
	player_steam_id?:boolean | `@${string}`,
	total_matches?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "v_player_match_kills" */
["v_player_match_kills_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["v_player_match_kills_aggregate_fields"],
	nodes?:ResolverInputTypes["v_player_match_kills"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "v_player_match_kills" */
["v_player_match_kills_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["v_player_match_kills_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["v_player_match_kills_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["v_player_match_kills_max_fields"],
	min?:ResolverInputTypes["v_player_match_kills_min_fields"],
	stddev?:ResolverInputTypes["v_player_match_kills_stddev_fields"],
	stddev_pop?:ResolverInputTypes["v_player_match_kills_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["v_player_match_kills_stddev_samp_fields"],
	sum?:ResolverInputTypes["v_player_match_kills_sum_fields"],
	var_pop?:ResolverInputTypes["v_player_match_kills_var_pop_fields"],
	var_samp?:ResolverInputTypes["v_player_match_kills_var_samp_fields"],
	variance?:ResolverInputTypes["v_player_match_kills_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate avg on columns */
["v_player_match_kills_avg_fields"]: AliasType<{
	avg_kills_per_game?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_matches?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "v_player_match_kills". All fields are combined with a logical 'AND'. */
["v_player_match_kills_bool_exp"]: {
	_and?: Array<ResolverInputTypes["v_player_match_kills_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["v_player_match_kills_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["v_player_match_kills_bool_exp"]> | undefined | null,
	avg_kills_per_game?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null,
	kills?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null,
	player?: ResolverInputTypes["players_bool_exp"] | undefined | null,
	player_steam_id?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null,
	total_matches?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null
};
	/** aggregate max on columns */
["v_player_match_kills_max_fields"]: AliasType<{
	avg_kills_per_game?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_matches?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["v_player_match_kills_min_fields"]: AliasType<{
	avg_kills_per_game?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_matches?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options when selecting data from "v_player_match_kills". */
["v_player_match_kills_order_by"]: {
	avg_kills_per_game?: ResolverInputTypes["order_by"] | undefined | null,
	kills?: ResolverInputTypes["order_by"] | undefined | null,
	player?: ResolverInputTypes["players_order_by"] | undefined | null,
	player_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	total_matches?: ResolverInputTypes["order_by"] | undefined | null
};
	/** select columns of table "v_player_match_kills" */
["v_player_match_kills_select_column"]:v_player_match_kills_select_column;
	/** aggregate stddev on columns */
["v_player_match_kills_stddev_fields"]: AliasType<{
	avg_kills_per_game?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_matches?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_pop on columns */
["v_player_match_kills_stddev_pop_fields"]: AliasType<{
	avg_kills_per_game?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_matches?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_samp on columns */
["v_player_match_kills_stddev_samp_fields"]: AliasType<{
	avg_kills_per_game?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_matches?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Streaming cursor of the table "v_player_match_kills" */
["v_player_match_kills_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["v_player_match_kills_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["v_player_match_kills_stream_cursor_value_input"]: {
	avg_kills_per_game?: ResolverInputTypes["bigint"] | undefined | null,
	kills?: ResolverInputTypes["bigint"] | undefined | null,
	player_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	total_matches?: ResolverInputTypes["bigint"] | undefined | null
};
	/** aggregate sum on columns */
["v_player_match_kills_sum_fields"]: AliasType<{
	avg_kills_per_game?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_matches?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate var_pop on columns */
["v_player_match_kills_var_pop_fields"]: AliasType<{
	avg_kills_per_game?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_matches?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate var_samp on columns */
["v_player_match_kills_var_samp_fields"]: AliasType<{
	avg_kills_per_game?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_matches?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate variance on columns */
["v_player_match_kills_variance_fields"]: AliasType<{
	avg_kills_per_game?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	player_steam_id?:boolean | `@${string}`,
	total_matches?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** columns and relationships of "v_player_multi_kills" */
["v_player_multi_kills"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "v_player_multi_kills" */
["v_player_multi_kills_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["v_player_multi_kills_aggregate_fields"],
	nodes?:ResolverInputTypes["v_player_multi_kills"],
		__typename?: boolean | `@${string}`
}>;
	["v_player_multi_kills_aggregate_bool_exp"]: {
	count?: ResolverInputTypes["v_player_multi_kills_aggregate_bool_exp_count"] | undefined | null
};
	["v_player_multi_kills_aggregate_bool_exp_count"]: {
	arguments?: Array<ResolverInputTypes["v_player_multi_kills_select_column"]> | undefined | null,
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["v_player_multi_kills_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Int_comparison_exp"]
};
	/** aggregate fields of "v_player_multi_kills" */
["v_player_multi_kills_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["v_player_multi_kills_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["v_player_multi_kills_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["v_player_multi_kills_max_fields"],
	min?:ResolverInputTypes["v_player_multi_kills_min_fields"],
	stddev?:ResolverInputTypes["v_player_multi_kills_stddev_fields"],
	stddev_pop?:ResolverInputTypes["v_player_multi_kills_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["v_player_multi_kills_stddev_samp_fields"],
	sum?:ResolverInputTypes["v_player_multi_kills_sum_fields"],
	var_pop?:ResolverInputTypes["v_player_multi_kills_var_pop_fields"],
	var_samp?:ResolverInputTypes["v_player_multi_kills_var_samp_fields"],
	variance?:ResolverInputTypes["v_player_multi_kills_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "v_player_multi_kills" */
["v_player_multi_kills_aggregate_order_by"]: {
	avg?: ResolverInputTypes["v_player_multi_kills_avg_order_by"] | undefined | null,
	count?: ResolverInputTypes["order_by"] | undefined | null,
	max?: ResolverInputTypes["v_player_multi_kills_max_order_by"] | undefined | null,
	min?: ResolverInputTypes["v_player_multi_kills_min_order_by"] | undefined | null,
	stddev?: ResolverInputTypes["v_player_multi_kills_stddev_order_by"] | undefined | null,
	stddev_pop?: ResolverInputTypes["v_player_multi_kills_stddev_pop_order_by"] | undefined | null,
	stddev_samp?: ResolverInputTypes["v_player_multi_kills_stddev_samp_order_by"] | undefined | null,
	sum?: ResolverInputTypes["v_player_multi_kills_sum_order_by"] | undefined | null,
	var_pop?: ResolverInputTypes["v_player_multi_kills_var_pop_order_by"] | undefined | null,
	var_samp?: ResolverInputTypes["v_player_multi_kills_var_samp_order_by"] | undefined | null,
	variance?: ResolverInputTypes["v_player_multi_kills_variance_order_by"] | undefined | null
};
	/** input type for inserting array relation for remote table "v_player_multi_kills" */
["v_player_multi_kills_arr_rel_insert_input"]: {
	data: Array<ResolverInputTypes["v_player_multi_kills_insert_input"]>
};
	/** aggregate avg on columns */
["v_player_multi_kills_avg_fields"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_avg_order_by"]: {
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	kills?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Boolean expression to filter rows from the table "v_player_multi_kills". All fields are combined with a logical 'AND'. */
["v_player_multi_kills_bool_exp"]: {
	_and?: Array<ResolverInputTypes["v_player_multi_kills_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["v_player_multi_kills_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["v_player_multi_kills_bool_exp"]> | undefined | null,
	attacker_steam_id?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null,
	kills?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null,
	match_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	round?: ResolverInputTypes["Int_comparison_exp"] | undefined | null
};
	/** input type for inserting data into table "v_player_multi_kills" */
["v_player_multi_kills_insert_input"]: {
	attacker_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	kills?: ResolverInputTypes["bigint"] | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	round?: number | undefined | null
};
	/** aggregate max on columns */
["v_player_multi_kills_max_fields"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_max_order_by"]: {
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	kills?: ResolverInputTypes["order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate min on columns */
["v_player_multi_kills_min_fields"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_min_order_by"]: {
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	kills?: ResolverInputTypes["order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Ordering options when selecting data from "v_player_multi_kills". */
["v_player_multi_kills_order_by"]: {
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	kills?: ResolverInputTypes["order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** select columns of table "v_player_multi_kills" */
["v_player_multi_kills_select_column"]:v_player_multi_kills_select_column;
	/** aggregate stddev on columns */
["v_player_multi_kills_stddev_fields"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_stddev_order_by"]: {
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	kills?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_pop on columns */
["v_player_multi_kills_stddev_pop_fields"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_stddev_pop_order_by"]: {
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	kills?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_samp on columns */
["v_player_multi_kills_stddev_samp_fields"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_stddev_samp_order_by"]: {
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	kills?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Streaming cursor of the table "v_player_multi_kills" */
["v_player_multi_kills_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["v_player_multi_kills_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["v_player_multi_kills_stream_cursor_value_input"]: {
	attacker_steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	kills?: ResolverInputTypes["bigint"] | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	round?: number | undefined | null
};
	/** aggregate sum on columns */
["v_player_multi_kills_sum_fields"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_sum_order_by"]: {
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	kills?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate var_pop on columns */
["v_player_multi_kills_var_pop_fields"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_var_pop_order_by"]: {
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	kills?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate var_samp on columns */
["v_player_multi_kills_var_samp_fields"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_var_samp_order_by"]: {
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	kills?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate variance on columns */
["v_player_multi_kills_variance_fields"]: AliasType<{
	attacker_steam_id?:boolean | `@${string}`,
	kills?:boolean | `@${string}`,
	round?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_variance_order_by"]: {
	attacker_steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	kills?: ResolverInputTypes["order_by"] | undefined | null,
	round?: ResolverInputTypes["order_by"] | undefined | null
};
	/** columns and relationships of "v_player_opening_duels" */
["v_player_opening_duels"]: AliasType<{
	attempts?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
	successes?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "v_player_opening_duels" */
["v_player_opening_duels_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["v_player_opening_duels_aggregate_fields"],
	nodes?:ResolverInputTypes["v_player_opening_duels"],
		__typename?: boolean | `@${string}`
}>;
	["v_player_opening_duels_aggregate_bool_exp"]: {
	count?: ResolverInputTypes["v_player_opening_duels_aggregate_bool_exp_count"] | undefined | null
};
	["v_player_opening_duels_aggregate_bool_exp_count"]: {
	arguments?: Array<ResolverInputTypes["v_player_opening_duels_select_column"]> | undefined | null,
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["v_player_opening_duels_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Int_comparison_exp"]
};
	/** aggregate fields of "v_player_opening_duels" */
["v_player_opening_duels_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["v_player_opening_duels_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["v_player_opening_duels_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["v_player_opening_duels_max_fields"],
	min?:ResolverInputTypes["v_player_opening_duels_min_fields"],
	stddev?:ResolverInputTypes["v_player_opening_duels_stddev_fields"],
	stddev_pop?:ResolverInputTypes["v_player_opening_duels_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["v_player_opening_duels_stddev_samp_fields"],
	sum?:ResolverInputTypes["v_player_opening_duels_sum_fields"],
	var_pop?:ResolverInputTypes["v_player_opening_duels_var_pop_fields"],
	var_samp?:ResolverInputTypes["v_player_opening_duels_var_samp_fields"],
	variance?:ResolverInputTypes["v_player_opening_duels_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "v_player_opening_duels" */
["v_player_opening_duels_aggregate_order_by"]: {
	avg?: ResolverInputTypes["v_player_opening_duels_avg_order_by"] | undefined | null,
	count?: ResolverInputTypes["order_by"] | undefined | null,
	max?: ResolverInputTypes["v_player_opening_duels_max_order_by"] | undefined | null,
	min?: ResolverInputTypes["v_player_opening_duels_min_order_by"] | undefined | null,
	stddev?: ResolverInputTypes["v_player_opening_duels_stddev_order_by"] | undefined | null,
	stddev_pop?: ResolverInputTypes["v_player_opening_duels_stddev_pop_order_by"] | undefined | null,
	stddev_samp?: ResolverInputTypes["v_player_opening_duels_stddev_samp_order_by"] | undefined | null,
	sum?: ResolverInputTypes["v_player_opening_duels_sum_order_by"] | undefined | null,
	var_pop?: ResolverInputTypes["v_player_opening_duels_var_pop_order_by"] | undefined | null,
	var_samp?: ResolverInputTypes["v_player_opening_duels_var_samp_order_by"] | undefined | null,
	variance?: ResolverInputTypes["v_player_opening_duels_variance_order_by"] | undefined | null
};
	/** input type for inserting array relation for remote table "v_player_opening_duels" */
["v_player_opening_duels_arr_rel_insert_input"]: {
	data: Array<ResolverInputTypes["v_player_opening_duels_insert_input"]>
};
	/** aggregate avg on columns */
["v_player_opening_duels_avg_fields"]: AliasType<{
	attempts?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
	successes?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_avg_order_by"]: {
	attempts?: ResolverInputTypes["order_by"] | undefined | null,
	steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	successes?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Boolean expression to filter rows from the table "v_player_opening_duels". All fields are combined with a logical 'AND'. */
["v_player_opening_duels_bool_exp"]: {
	_and?: Array<ResolverInputTypes["v_player_opening_duels_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["v_player_opening_duels_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["v_player_opening_duels_bool_exp"]> | undefined | null,
	attempts?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null,
	match_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	steam_id?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null,
	successes?: ResolverInputTypes["bigint_comparison_exp"] | undefined | null
};
	/** input type for inserting data into table "v_player_opening_duels" */
["v_player_opening_duels_insert_input"]: {
	attempts?: ResolverInputTypes["bigint"] | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid"] | undefined | null,
	steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	successes?: ResolverInputTypes["bigint"] | undefined | null
};
	/** aggregate max on columns */
["v_player_opening_duels_max_fields"]: AliasType<{
	attempts?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
	successes?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_max_order_by"]: {
	attempts?: ResolverInputTypes["order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	match_map_id?: ResolverInputTypes["order_by"] | undefined | null,
	steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	successes?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate min on columns */
["v_player_opening_duels_min_fields"]: AliasType<{
	attempts?:boolean | `@${string}`,
	match_id?:boolean | `@${string}`,
	match_map_id?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
	successes?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_min_order_by"]: {
	attempts?: ResolverInputTypes["order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	match_map_id?: ResolverInputTypes["order_by"] | undefined | null,
	steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	successes?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Ordering options when selecting data from "v_player_opening_duels". */
["v_player_opening_duels_order_by"]: {
	attempts?: ResolverInputTypes["order_by"] | undefined | null,
	match_id?: ResolverInputTypes["order_by"] | undefined | null,
	match_map_id?: ResolverInputTypes["order_by"] | undefined | null,
	steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	successes?: ResolverInputTypes["order_by"] | undefined | null
};
	/** select columns of table "v_player_opening_duels" */
["v_player_opening_duels_select_column"]:v_player_opening_duels_select_column;
	/** aggregate stddev on columns */
["v_player_opening_duels_stddev_fields"]: AliasType<{
	attempts?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
	successes?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_stddev_order_by"]: {
	attempts?: ResolverInputTypes["order_by"] | undefined | null,
	steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	successes?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_pop on columns */
["v_player_opening_duels_stddev_pop_fields"]: AliasType<{
	attempts?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
	successes?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_stddev_pop_order_by"]: {
	attempts?: ResolverInputTypes["order_by"] | undefined | null,
	steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	successes?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_samp on columns */
["v_player_opening_duels_stddev_samp_fields"]: AliasType<{
	attempts?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
	successes?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_stddev_samp_order_by"]: {
	attempts?: ResolverInputTypes["order_by"] | undefined | null,
	steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	successes?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Streaming cursor of the table "v_player_opening_duels" */
["v_player_opening_duels_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["v_player_opening_duels_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["v_player_opening_duels_stream_cursor_value_input"]: {
	attempts?: ResolverInputTypes["bigint"] | undefined | null,
	match_id?: ResolverInputTypes["uuid"] | undefined | null,
	match_map_id?: ResolverInputTypes["uuid"] | undefined | null,
	steam_id?: ResolverInputTypes["bigint"] | undefined | null,
	successes?: ResolverInputTypes["bigint"] | undefined | null
};
	/** aggregate sum on columns */
["v_player_opening_duels_sum_fields"]: AliasType<{
	attempts?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
	successes?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_sum_order_by"]: {
	attempts?: ResolverInputTypes["order_by"] | undefined | null,
	steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	successes?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate var_pop on columns */
["v_player_opening_duels_var_pop_fields"]: AliasType<{
	attempts?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
	successes?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_var_pop_order_by"]: {
	attempts?: ResolverInputTypes["order_by"] | undefined | null,
	steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	successes?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate var_samp on columns */
["v_player_opening_duels_var_samp_fields"]: AliasType<{
	attempts?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
	successes?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_var_samp_order_by"]: {
	attempts?: ResolverInputTypes["order_by"] | undefined | null,
	steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	successes?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate variance on columns */
["v_player_opening_duels_variance_fields"]: AliasType<{
	attempts?:boolean | `@${string}`,
	steam_id?:boolean | `@${string}`,
	successes?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_variance_order_by"]: {
	attempts?: ResolverInputTypes["order_by"] | undefined | null,
	steam_id?: ResolverInputTypes["order_by"] | undefined | null,
	successes?: ResolverInputTypes["order_by"] | undefined | null
};
	/** columns and relationships of "v_pool_maps" */
["v_pool_maps"]: AliasType<{
	active_pool?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** An object relationship */
	map_pool?:ResolverInputTypes["map_pools"],
	map_pool_id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	type?:boolean | `@${string}`,
	workshop_map_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "v_pool_maps" */
["v_pool_maps_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["v_pool_maps_aggregate_fields"],
	nodes?:ResolverInputTypes["v_pool_maps"],
		__typename?: boolean | `@${string}`
}>;
	["v_pool_maps_aggregate_bool_exp"]: {
	bool_and?: ResolverInputTypes["v_pool_maps_aggregate_bool_exp_bool_and"] | undefined | null,
	bool_or?: ResolverInputTypes["v_pool_maps_aggregate_bool_exp_bool_or"] | undefined | null,
	count?: ResolverInputTypes["v_pool_maps_aggregate_bool_exp_count"] | undefined | null
};
	["v_pool_maps_aggregate_bool_exp_bool_and"]: {
	arguments: ResolverInputTypes["v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_and_arguments_columns"],
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["v_pool_maps_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Boolean_comparison_exp"]
};
	["v_pool_maps_aggregate_bool_exp_bool_or"]: {
	arguments: ResolverInputTypes["v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_or_arguments_columns"],
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["v_pool_maps_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Boolean_comparison_exp"]
};
	["v_pool_maps_aggregate_bool_exp_count"]: {
	arguments?: Array<ResolverInputTypes["v_pool_maps_select_column"]> | undefined | null,
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["v_pool_maps_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Int_comparison_exp"]
};
	/** aggregate fields of "v_pool_maps" */
["v_pool_maps_aggregate_fields"]: AliasType<{
count?: [{	columns?: Array<ResolverInputTypes["v_pool_maps_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["v_pool_maps_max_fields"],
	min?:ResolverInputTypes["v_pool_maps_min_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "v_pool_maps" */
["v_pool_maps_aggregate_order_by"]: {
	count?: ResolverInputTypes["order_by"] | undefined | null,
	max?: ResolverInputTypes["v_pool_maps_max_order_by"] | undefined | null,
	min?: ResolverInputTypes["v_pool_maps_min_order_by"] | undefined | null
};
	/** input type for inserting array relation for remote table "v_pool_maps" */
["v_pool_maps_arr_rel_insert_input"]: {
	data: Array<ResolverInputTypes["v_pool_maps_insert_input"]>
};
	/** Boolean expression to filter rows from the table "v_pool_maps". All fields are combined with a logical 'AND'. */
["v_pool_maps_bool_exp"]: {
	_and?: Array<ResolverInputTypes["v_pool_maps_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["v_pool_maps_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["v_pool_maps_bool_exp"]> | undefined | null,
	active_pool?: ResolverInputTypes["Boolean_comparison_exp"] | undefined | null,
	id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	map_pool?: ResolverInputTypes["map_pools_bool_exp"] | undefined | null,
	map_pool_id?: ResolverInputTypes["uuid_comparison_exp"] | undefined | null,
	name?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	type?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	workshop_map_id?: ResolverInputTypes["String_comparison_exp"] | undefined | null
};
	/** input type for inserting data into table "v_pool_maps" */
["v_pool_maps_insert_input"]: {
	active_pool?: boolean | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	map_pool?: ResolverInputTypes["map_pools_obj_rel_insert_input"] | undefined | null,
	map_pool_id?: ResolverInputTypes["uuid"] | undefined | null,
	name?: string | undefined | null,
	type?: string | undefined | null,
	workshop_map_id?: string | undefined | null
};
	/** aggregate max on columns */
["v_pool_maps_max_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	map_pool_id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	type?:boolean | `@${string}`,
	workshop_map_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "v_pool_maps" */
["v_pool_maps_max_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	map_pool_id?: ResolverInputTypes["order_by"] | undefined | null,
	name?: ResolverInputTypes["order_by"] | undefined | null,
	type?: ResolverInputTypes["order_by"] | undefined | null,
	workshop_map_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate min on columns */
["v_pool_maps_min_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	map_pool_id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	type?:boolean | `@${string}`,
	workshop_map_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "v_pool_maps" */
["v_pool_maps_min_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	map_pool_id?: ResolverInputTypes["order_by"] | undefined | null,
	name?: ResolverInputTypes["order_by"] | undefined | null,
	type?: ResolverInputTypes["order_by"] | undefined | null,
	workshop_map_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** response of any mutation on the table "v_pool_maps" */
["v_pool_maps_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["v_pool_maps"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options when selecting data from "v_pool_maps". */
["v_pool_maps_order_by"]: {
	active_pool?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	map_pool?: ResolverInputTypes["map_pools_order_by"] | undefined | null,
	map_pool_id?: ResolverInputTypes["order_by"] | undefined | null,
	name?: ResolverInputTypes["order_by"] | undefined | null,
	type?: ResolverInputTypes["order_by"] | undefined | null,
	workshop_map_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** select columns of table "v_pool_maps" */
["v_pool_maps_select_column"]:v_pool_maps_select_column;
	/** select "v_pool_maps_aggregate_bool_exp_bool_and_arguments_columns" columns of table "v_pool_maps" */
["v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_and_arguments_columns"]:v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_and_arguments_columns;
	/** select "v_pool_maps_aggregate_bool_exp_bool_or_arguments_columns" columns of table "v_pool_maps" */
["v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_or_arguments_columns"]:v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_or_arguments_columns;
	/** Streaming cursor of the table "v_pool_maps" */
["v_pool_maps_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["v_pool_maps_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["v_pool_maps_stream_cursor_value_input"]: {
	active_pool?: boolean | undefined | null,
	id?: ResolverInputTypes["uuid"] | undefined | null,
	map_pool_id?: ResolverInputTypes["uuid"] | undefined | null,
	name?: string | undefined | null,
	type?: string | undefined | null,
	workshop_map_id?: string | undefined | null
}
  }

export type ModelTypes = {
    ["schema"]: {
	query?: ModelTypes["query_root"] | undefined,
	mutation?: ModelTypes["mutation_root"] | undefined,
	subscription?: ModelTypes["subscription_root"] | undefined
};
	/** Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'. */
["Boolean_comparison_exp"]: {
	_eq?: boolean | undefined,
	_gt?: boolean | undefined,
	_gte?: boolean | undefined,
	_in?: Array<boolean> | undefined,
	_is_null?: boolean | undefined,
	_lt?: boolean | undefined,
	_lte?: boolean | undefined,
	_neq?: boolean | undefined,
	_nin?: Array<boolean> | undefined
};
	/** Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'. */
["Int_comparison_exp"]: {
	_eq?: number | undefined,
	_gt?: number | undefined,
	_gte?: number | undefined,
	_in?: Array<number> | undefined,
	_is_null?: boolean | undefined,
	_lt?: number | undefined,
	_lte?: number | undefined,
	_neq?: number | undefined,
	_nin?: Array<number> | undefined
};
	["MeResponse"]: {
		avatar_url: string,
	discord_id?: string | undefined,
	name: string,
	player?: ModelTypes["players"] | undefined,
	profile_url?: string | undefined,
	steam_id: string
};
	/** Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'. */
["String_comparison_exp"]: {
	_eq?: string | undefined,
	_gt?: string | undefined,
	_gte?: string | undefined,
	/** does the column match the given case-insensitive pattern */
	_ilike?: string | undefined,
	_in?: Array<string> | undefined,
	/** does the column match the given POSIX regular expression, case insensitive */
	_iregex?: string | undefined,
	_is_null?: boolean | undefined,
	/** does the column match the given pattern */
	_like?: string | undefined,
	_lt?: string | undefined,
	_lte?: string | undefined,
	_neq?: string | undefined,
	/** does the column NOT match the given case-insensitive pattern */
	_nilike?: string | undefined,
	_nin?: Array<string> | undefined,
	/** does the column NOT match the given POSIX regular expression, case insensitive */
	_niregex?: string | undefined,
	/** does the column NOT match the given pattern */
	_nlike?: string | undefined,
	/** does the column NOT match the given POSIX regular expression, case sensitive */
	_nregex?: string | undefined,
	/** does the column NOT match the given SQL regular expression */
	_nsimilar?: string | undefined,
	/** does the column match the given POSIX regular expression, case sensitive */
	_regex?: string | undefined,
	/** does the column match the given SQL regular expression */
	_similar?: string | undefined
};
	["SuccessOutput"]: {
		success: boolean
};
	/** columns and relationships of "_map_pool" */
["_map_pool"]: {
		map_id: ModelTypes["uuid"],
	map_pool_id: ModelTypes["uuid"]
};
	/** aggregated selection of "_map_pool" */
["_map_pool_aggregate"]: {
		aggregate?: ModelTypes["_map_pool_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["_map_pool"]>
};
	/** aggregate fields of "_map_pool" */
["_map_pool_aggregate_fields"]: {
		count: number,
	max?: ModelTypes["_map_pool_max_fields"] | undefined,
	min?: ModelTypes["_map_pool_min_fields"] | undefined
};
	/** Boolean expression to filter rows from the table "_map_pool". All fields are combined with a logical 'AND'. */
["_map_pool_bool_exp"]: {
	_and?: Array<ModelTypes["_map_pool_bool_exp"]> | undefined,
	_not?: ModelTypes["_map_pool_bool_exp"] | undefined,
	_or?: Array<ModelTypes["_map_pool_bool_exp"]> | undefined,
	map_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	map_pool_id?: ModelTypes["uuid_comparison_exp"] | undefined
};
	["_map_pool_constraint"]:_map_pool_constraint;
	/** input type for inserting data into table "_map_pool" */
["_map_pool_insert_input"]: {
	map_id?: ModelTypes["uuid"] | undefined,
	map_pool_id?: ModelTypes["uuid"] | undefined
};
	/** aggregate max on columns */
["_map_pool_max_fields"]: {
		map_id?: ModelTypes["uuid"] | undefined,
	map_pool_id?: ModelTypes["uuid"] | undefined
};
	/** aggregate min on columns */
["_map_pool_min_fields"]: {
		map_id?: ModelTypes["uuid"] | undefined,
	map_pool_id?: ModelTypes["uuid"] | undefined
};
	/** response of any mutation on the table "_map_pool" */
["_map_pool_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["_map_pool"]>
};
	/** on_conflict condition type for table "_map_pool" */
["_map_pool_on_conflict"]: {
	constraint: ModelTypes["_map_pool_constraint"],
	update_columns: Array<ModelTypes["_map_pool_update_column"]>,
	where?: ModelTypes["_map_pool_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "_map_pool". */
["_map_pool_order_by"]: {
	map_id?: ModelTypes["order_by"] | undefined,
	map_pool_id?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: _map_pool */
["_map_pool_pk_columns_input"]: {
	map_id: ModelTypes["uuid"],
	map_pool_id: ModelTypes["uuid"]
};
	["_map_pool_select_column"]:_map_pool_select_column;
	/** input type for updating data in table "_map_pool" */
["_map_pool_set_input"]: {
	map_id?: ModelTypes["uuid"] | undefined,
	map_pool_id?: ModelTypes["uuid"] | undefined
};
	/** Streaming cursor of the table "_map_pool" */
["_map_pool_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["_map_pool_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["_map_pool_stream_cursor_value_input"]: {
	map_id?: ModelTypes["uuid"] | undefined,
	map_pool_id?: ModelTypes["uuid"] | undefined
};
	["_map_pool_update_column"]:_map_pool_update_column;
	["_map_pool_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["_map_pool_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["_map_pool_bool_exp"]
};
	["bigint"]:any;
	/** Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'. */
["bigint_comparison_exp"]: {
	_eq?: ModelTypes["bigint"] | undefined,
	_gt?: ModelTypes["bigint"] | undefined,
	_gte?: ModelTypes["bigint"] | undefined,
	_in?: Array<ModelTypes["bigint"]> | undefined,
	_is_null?: boolean | undefined,
	_lt?: ModelTypes["bigint"] | undefined,
	_lte?: ModelTypes["bigint"] | undefined,
	_neq?: ModelTypes["bigint"] | undefined,
	_nin?: Array<ModelTypes["bigint"]> | undefined
};
	["bytea"]:any;
	/** Boolean expression to compare columns of type "bytea". All fields are combined with logical 'AND'. */
["bytea_comparison_exp"]: {
	_eq?: ModelTypes["bytea"] | undefined,
	_gt?: ModelTypes["bytea"] | undefined,
	_gte?: ModelTypes["bytea"] | undefined,
	_in?: Array<ModelTypes["bytea"]> | undefined,
	_is_null?: boolean | undefined,
	_lt?: ModelTypes["bytea"] | undefined,
	_lte?: ModelTypes["bytea"] | undefined,
	_neq?: ModelTypes["bytea"] | undefined,
	_nin?: Array<ModelTypes["bytea"]> | undefined
};
	["cursor_ordering"]:cursor_ordering;
	["date"]:any;
	/** Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'. */
["date_comparison_exp"]: {
	_eq?: ModelTypes["date"] | undefined,
	_gt?: ModelTypes["date"] | undefined,
	_gte?: ModelTypes["date"] | undefined,
	_in?: Array<ModelTypes["date"]> | undefined,
	_is_null?: boolean | undefined,
	_lt?: ModelTypes["date"] | undefined,
	_lte?: ModelTypes["date"] | undefined,
	_neq?: ModelTypes["date"] | undefined,
	_nin?: Array<ModelTypes["date"]> | undefined
};
	/** columns and relationships of "e_match_map_status" */
["e_match_map_status"]: {
		description: string,
	value: string
};
	/** aggregated selection of "e_match_map_status" */
["e_match_map_status_aggregate"]: {
		aggregate?: ModelTypes["e_match_map_status_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["e_match_map_status"]>
};
	/** aggregate fields of "e_match_map_status" */
["e_match_map_status_aggregate_fields"]: {
		count: number,
	max?: ModelTypes["e_match_map_status_max_fields"] | undefined,
	min?: ModelTypes["e_match_map_status_min_fields"] | undefined
};
	/** Boolean expression to filter rows from the table "e_match_map_status". All fields are combined with a logical 'AND'. */
["e_match_map_status_bool_exp"]: {
	_and?: Array<ModelTypes["e_match_map_status_bool_exp"]> | undefined,
	_not?: ModelTypes["e_match_map_status_bool_exp"] | undefined,
	_or?: Array<ModelTypes["e_match_map_status_bool_exp"]> | undefined,
	description?: ModelTypes["String_comparison_exp"] | undefined,
	value?: ModelTypes["String_comparison_exp"] | undefined
};
	["e_match_map_status_constraint"]:e_match_map_status_constraint;
	["e_match_map_status_enum"]:e_match_map_status_enum;
	/** Boolean expression to compare columns of type "e_match_map_status_enum". All fields are combined with logical 'AND'. */
["e_match_map_status_enum_comparison_exp"]: {
	_eq?: ModelTypes["e_match_map_status_enum"] | undefined,
	_in?: Array<ModelTypes["e_match_map_status_enum"]> | undefined,
	_is_null?: boolean | undefined,
	_neq?: ModelTypes["e_match_map_status_enum"] | undefined,
	_nin?: Array<ModelTypes["e_match_map_status_enum"]> | undefined
};
	/** input type for inserting data into table "e_match_map_status" */
["e_match_map_status_insert_input"]: {
	description?: string | undefined,
	value?: string | undefined
};
	/** aggregate max on columns */
["e_match_map_status_max_fields"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** aggregate min on columns */
["e_match_map_status_min_fields"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** response of any mutation on the table "e_match_map_status" */
["e_match_map_status_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["e_match_map_status"]>
};
	/** input type for inserting object relation for remote table "e_match_map_status" */
["e_match_map_status_obj_rel_insert_input"]: {
	data: ModelTypes["e_match_map_status_insert_input"],
	/** upsert condition */
	on_conflict?: ModelTypes["e_match_map_status_on_conflict"] | undefined
};
	/** on_conflict condition type for table "e_match_map_status" */
["e_match_map_status_on_conflict"]: {
	constraint: ModelTypes["e_match_map_status_constraint"],
	update_columns: Array<ModelTypes["e_match_map_status_update_column"]>,
	where?: ModelTypes["e_match_map_status_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "e_match_map_status". */
["e_match_map_status_order_by"]: {
	description?: ModelTypes["order_by"] | undefined,
	value?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: e_match_map_status */
["e_match_map_status_pk_columns_input"]: {
	value: string
};
	["e_match_map_status_select_column"]:e_match_map_status_select_column;
	/** input type for updating data in table "e_match_map_status" */
["e_match_map_status_set_input"]: {
	description?: string | undefined,
	value?: string | undefined
};
	/** Streaming cursor of the table "e_match_map_status" */
["e_match_map_status_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["e_match_map_status_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["e_match_map_status_stream_cursor_value_input"]: {
	description?: string | undefined,
	value?: string | undefined
};
	["e_match_map_status_update_column"]:e_match_map_status_update_column;
	["e_match_map_status_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["e_match_map_status_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["e_match_map_status_bool_exp"]
};
	/** columns and relationships of "e_match_status" */
["e_match_status"]: {
		description: string,
	/** An array relationship */
	matches: Array<ModelTypes["matches"]>,
	/** An aggregate relationship */
	matches_aggregate: ModelTypes["matches_aggregate"],
	value: string
};
	/** aggregated selection of "e_match_status" */
["e_match_status_aggregate"]: {
		aggregate?: ModelTypes["e_match_status_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["e_match_status"]>
};
	/** aggregate fields of "e_match_status" */
["e_match_status_aggregate_fields"]: {
		count: number,
	max?: ModelTypes["e_match_status_max_fields"] | undefined,
	min?: ModelTypes["e_match_status_min_fields"] | undefined
};
	/** Boolean expression to filter rows from the table "e_match_status". All fields are combined with a logical 'AND'. */
["e_match_status_bool_exp"]: {
	_and?: Array<ModelTypes["e_match_status_bool_exp"]> | undefined,
	_not?: ModelTypes["e_match_status_bool_exp"] | undefined,
	_or?: Array<ModelTypes["e_match_status_bool_exp"]> | undefined,
	description?: ModelTypes["String_comparison_exp"] | undefined,
	matches?: ModelTypes["matches_bool_exp"] | undefined,
	matches_aggregate?: ModelTypes["matches_aggregate_bool_exp"] | undefined,
	value?: ModelTypes["String_comparison_exp"] | undefined
};
	["e_match_status_constraint"]:e_match_status_constraint;
	["e_match_status_enum"]:e_match_status_enum;
	/** Boolean expression to compare columns of type "e_match_status_enum". All fields are combined with logical 'AND'. */
["e_match_status_enum_comparison_exp"]: {
	_eq?: ModelTypes["e_match_status_enum"] | undefined,
	_in?: Array<ModelTypes["e_match_status_enum"]> | undefined,
	_is_null?: boolean | undefined,
	_neq?: ModelTypes["e_match_status_enum"] | undefined,
	_nin?: Array<ModelTypes["e_match_status_enum"]> | undefined
};
	/** input type for inserting data into table "e_match_status" */
["e_match_status_insert_input"]: {
	description?: string | undefined,
	matches?: ModelTypes["matches_arr_rel_insert_input"] | undefined,
	value?: string | undefined
};
	/** aggregate max on columns */
["e_match_status_max_fields"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** aggregate min on columns */
["e_match_status_min_fields"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** response of any mutation on the table "e_match_status" */
["e_match_status_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["e_match_status"]>
};
	/** input type for inserting object relation for remote table "e_match_status" */
["e_match_status_obj_rel_insert_input"]: {
	data: ModelTypes["e_match_status_insert_input"],
	/** upsert condition */
	on_conflict?: ModelTypes["e_match_status_on_conflict"] | undefined
};
	/** on_conflict condition type for table "e_match_status" */
["e_match_status_on_conflict"]: {
	constraint: ModelTypes["e_match_status_constraint"],
	update_columns: Array<ModelTypes["e_match_status_update_column"]>,
	where?: ModelTypes["e_match_status_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "e_match_status". */
["e_match_status_order_by"]: {
	description?: ModelTypes["order_by"] | undefined,
	matches_aggregate?: ModelTypes["matches_aggregate_order_by"] | undefined,
	value?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: e_match_status */
["e_match_status_pk_columns_input"]: {
	value: string
};
	["e_match_status_select_column"]:e_match_status_select_column;
	/** input type for updating data in table "e_match_status" */
["e_match_status_set_input"]: {
	description?: string | undefined,
	value?: string | undefined
};
	/** Streaming cursor of the table "e_match_status" */
["e_match_status_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["e_match_status_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["e_match_status_stream_cursor_value_input"]: {
	description?: string | undefined,
	value?: string | undefined
};
	["e_match_status_update_column"]:e_match_status_update_column;
	["e_match_status_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["e_match_status_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["e_match_status_bool_exp"]
};
	/** columns and relationships of "e_match_types" */
["e_match_types"]: {
		description: string,
	/** An array relationship */
	maps: Array<ModelTypes["maps"]>,
	/** An aggregate relationship */
	maps_aggregate: ModelTypes["maps_aggregate"],
	/** An array relationship */
	matches: Array<ModelTypes["matches"]>,
	/** An aggregate relationship */
	matches_aggregate: ModelTypes["matches_aggregate"],
	value: string
};
	/** aggregated selection of "e_match_types" */
["e_match_types_aggregate"]: {
		aggregate?: ModelTypes["e_match_types_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["e_match_types"]>
};
	/** aggregate fields of "e_match_types" */
["e_match_types_aggregate_fields"]: {
		count: number,
	max?: ModelTypes["e_match_types_max_fields"] | undefined,
	min?: ModelTypes["e_match_types_min_fields"] | undefined
};
	/** Boolean expression to filter rows from the table "e_match_types". All fields are combined with a logical 'AND'. */
["e_match_types_bool_exp"]: {
	_and?: Array<ModelTypes["e_match_types_bool_exp"]> | undefined,
	_not?: ModelTypes["e_match_types_bool_exp"] | undefined,
	_or?: Array<ModelTypes["e_match_types_bool_exp"]> | undefined,
	description?: ModelTypes["String_comparison_exp"] | undefined,
	maps?: ModelTypes["maps_bool_exp"] | undefined,
	maps_aggregate?: ModelTypes["maps_aggregate_bool_exp"] | undefined,
	matches?: ModelTypes["matches_bool_exp"] | undefined,
	matches_aggregate?: ModelTypes["matches_aggregate_bool_exp"] | undefined,
	value?: ModelTypes["String_comparison_exp"] | undefined
};
	["e_match_types_constraint"]:e_match_types_constraint;
	["e_match_types_enum"]:e_match_types_enum;
	/** Boolean expression to compare columns of type "e_match_types_enum". All fields are combined with logical 'AND'. */
["e_match_types_enum_comparison_exp"]: {
	_eq?: ModelTypes["e_match_types_enum"] | undefined,
	_in?: Array<ModelTypes["e_match_types_enum"]> | undefined,
	_is_null?: boolean | undefined,
	_neq?: ModelTypes["e_match_types_enum"] | undefined,
	_nin?: Array<ModelTypes["e_match_types_enum"]> | undefined
};
	/** input type for inserting data into table "e_match_types" */
["e_match_types_insert_input"]: {
	description?: string | undefined,
	maps?: ModelTypes["maps_arr_rel_insert_input"] | undefined,
	matches?: ModelTypes["matches_arr_rel_insert_input"] | undefined,
	value?: string | undefined
};
	/** aggregate max on columns */
["e_match_types_max_fields"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** aggregate min on columns */
["e_match_types_min_fields"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** response of any mutation on the table "e_match_types" */
["e_match_types_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["e_match_types"]>
};
	/** input type for inserting object relation for remote table "e_match_types" */
["e_match_types_obj_rel_insert_input"]: {
	data: ModelTypes["e_match_types_insert_input"],
	/** upsert condition */
	on_conflict?: ModelTypes["e_match_types_on_conflict"] | undefined
};
	/** on_conflict condition type for table "e_match_types" */
["e_match_types_on_conflict"]: {
	constraint: ModelTypes["e_match_types_constraint"],
	update_columns: Array<ModelTypes["e_match_types_update_column"]>,
	where?: ModelTypes["e_match_types_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "e_match_types". */
["e_match_types_order_by"]: {
	description?: ModelTypes["order_by"] | undefined,
	maps_aggregate?: ModelTypes["maps_aggregate_order_by"] | undefined,
	matches_aggregate?: ModelTypes["matches_aggregate_order_by"] | undefined,
	value?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: e_match_types */
["e_match_types_pk_columns_input"]: {
	value: string
};
	["e_match_types_select_column"]:e_match_types_select_column;
	/** input type for updating data in table "e_match_types" */
["e_match_types_set_input"]: {
	description?: string | undefined,
	value?: string | undefined
};
	/** Streaming cursor of the table "e_match_types" */
["e_match_types_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["e_match_types_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["e_match_types_stream_cursor_value_input"]: {
	description?: string | undefined,
	value?: string | undefined
};
	["e_match_types_update_column"]:e_match_types_update_column;
	["e_match_types_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["e_match_types_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["e_match_types_bool_exp"]
};
	/** columns and relationships of "e_objective_types" */
["e_objective_types"]: {
		description: string,
	value: string
};
	/** aggregated selection of "e_objective_types" */
["e_objective_types_aggregate"]: {
		aggregate?: ModelTypes["e_objective_types_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["e_objective_types"]>
};
	/** aggregate fields of "e_objective_types" */
["e_objective_types_aggregate_fields"]: {
		count: number,
	max?: ModelTypes["e_objective_types_max_fields"] | undefined,
	min?: ModelTypes["e_objective_types_min_fields"] | undefined
};
	/** Boolean expression to filter rows from the table "e_objective_types". All fields are combined with a logical 'AND'. */
["e_objective_types_bool_exp"]: {
	_and?: Array<ModelTypes["e_objective_types_bool_exp"]> | undefined,
	_not?: ModelTypes["e_objective_types_bool_exp"] | undefined,
	_or?: Array<ModelTypes["e_objective_types_bool_exp"]> | undefined,
	description?: ModelTypes["String_comparison_exp"] | undefined,
	value?: ModelTypes["String_comparison_exp"] | undefined
};
	["e_objective_types_constraint"]:e_objective_types_constraint;
	["e_objective_types_enum"]:e_objective_types_enum;
	/** Boolean expression to compare columns of type "e_objective_types_enum". All fields are combined with logical 'AND'. */
["e_objective_types_enum_comparison_exp"]: {
	_eq?: ModelTypes["e_objective_types_enum"] | undefined,
	_in?: Array<ModelTypes["e_objective_types_enum"]> | undefined,
	_is_null?: boolean | undefined,
	_neq?: ModelTypes["e_objective_types_enum"] | undefined,
	_nin?: Array<ModelTypes["e_objective_types_enum"]> | undefined
};
	/** input type for inserting data into table "e_objective_types" */
["e_objective_types_insert_input"]: {
	description?: string | undefined,
	value?: string | undefined
};
	/** aggregate max on columns */
["e_objective_types_max_fields"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** aggregate min on columns */
["e_objective_types_min_fields"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** response of any mutation on the table "e_objective_types" */
["e_objective_types_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["e_objective_types"]>
};
	/** on_conflict condition type for table "e_objective_types" */
["e_objective_types_on_conflict"]: {
	constraint: ModelTypes["e_objective_types_constraint"],
	update_columns: Array<ModelTypes["e_objective_types_update_column"]>,
	where?: ModelTypes["e_objective_types_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "e_objective_types". */
["e_objective_types_order_by"]: {
	description?: ModelTypes["order_by"] | undefined,
	value?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: e_objective_types */
["e_objective_types_pk_columns_input"]: {
	value: string
};
	["e_objective_types_select_column"]:e_objective_types_select_column;
	/** input type for updating data in table "e_objective_types" */
["e_objective_types_set_input"]: {
	description?: string | undefined,
	value?: string | undefined
};
	/** Streaming cursor of the table "e_objective_types" */
["e_objective_types_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["e_objective_types_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["e_objective_types_stream_cursor_value_input"]: {
	description?: string | undefined,
	value?: string | undefined
};
	["e_objective_types_update_column"]:e_objective_types_update_column;
	["e_objective_types_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["e_objective_types_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["e_objective_types_bool_exp"]
};
	/** columns and relationships of "e_sides" */
["e_sides"]: {
		description: string,
	/** An array relationship */
	match_map_lineup_1: Array<ModelTypes["match_maps"]>,
	/** An aggregate relationship */
	match_map_lineup_1_aggregate: ModelTypes["match_maps_aggregate"],
	/** An array relationship */
	match_map_lineup_2: Array<ModelTypes["match_maps"]>,
	/** An aggregate relationship */
	match_map_lineup_2_aggregate: ModelTypes["match_maps_aggregate"],
	value: string
};
	/** aggregated selection of "e_sides" */
["e_sides_aggregate"]: {
		aggregate?: ModelTypes["e_sides_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["e_sides"]>
};
	/** aggregate fields of "e_sides" */
["e_sides_aggregate_fields"]: {
		count: number,
	max?: ModelTypes["e_sides_max_fields"] | undefined,
	min?: ModelTypes["e_sides_min_fields"] | undefined
};
	/** Boolean expression to filter rows from the table "e_sides". All fields are combined with a logical 'AND'. */
["e_sides_bool_exp"]: {
	_and?: Array<ModelTypes["e_sides_bool_exp"]> | undefined,
	_not?: ModelTypes["e_sides_bool_exp"] | undefined,
	_or?: Array<ModelTypes["e_sides_bool_exp"]> | undefined,
	description?: ModelTypes["String_comparison_exp"] | undefined,
	match_map_lineup_1?: ModelTypes["match_maps_bool_exp"] | undefined,
	match_map_lineup_1_aggregate?: ModelTypes["match_maps_aggregate_bool_exp"] | undefined,
	match_map_lineup_2?: ModelTypes["match_maps_bool_exp"] | undefined,
	match_map_lineup_2_aggregate?: ModelTypes["match_maps_aggregate_bool_exp"] | undefined,
	value?: ModelTypes["String_comparison_exp"] | undefined
};
	["e_sides_constraint"]:e_sides_constraint;
	["e_sides_enum"]:e_sides_enum;
	/** Boolean expression to compare columns of type "e_sides_enum". All fields are combined with logical 'AND'. */
["e_sides_enum_comparison_exp"]: {
	_eq?: ModelTypes["e_sides_enum"] | undefined,
	_in?: Array<ModelTypes["e_sides_enum"]> | undefined,
	_is_null?: boolean | undefined,
	_neq?: ModelTypes["e_sides_enum"] | undefined,
	_nin?: Array<ModelTypes["e_sides_enum"]> | undefined
};
	/** input type for inserting data into table "e_sides" */
["e_sides_insert_input"]: {
	description?: string | undefined,
	match_map_lineup_1?: ModelTypes["match_maps_arr_rel_insert_input"] | undefined,
	match_map_lineup_2?: ModelTypes["match_maps_arr_rel_insert_input"] | undefined,
	value?: string | undefined
};
	/** aggregate max on columns */
["e_sides_max_fields"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** aggregate min on columns */
["e_sides_min_fields"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** response of any mutation on the table "e_sides" */
["e_sides_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["e_sides"]>
};
	/** on_conflict condition type for table "e_sides" */
["e_sides_on_conflict"]: {
	constraint: ModelTypes["e_sides_constraint"],
	update_columns: Array<ModelTypes["e_sides_update_column"]>,
	where?: ModelTypes["e_sides_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "e_sides". */
["e_sides_order_by"]: {
	description?: ModelTypes["order_by"] | undefined,
	match_map_lineup_1_aggregate?: ModelTypes["match_maps_aggregate_order_by"] | undefined,
	match_map_lineup_2_aggregate?: ModelTypes["match_maps_aggregate_order_by"] | undefined,
	value?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: e_sides */
["e_sides_pk_columns_input"]: {
	value: string
};
	["e_sides_select_column"]:e_sides_select_column;
	/** input type for updating data in table "e_sides" */
["e_sides_set_input"]: {
	description?: string | undefined,
	value?: string | undefined
};
	/** Streaming cursor of the table "e_sides" */
["e_sides_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["e_sides_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["e_sides_stream_cursor_value_input"]: {
	description?: string | undefined,
	value?: string | undefined
};
	["e_sides_update_column"]:e_sides_update_column;
	["e_sides_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["e_sides_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["e_sides_bool_exp"]
};
	/** columns and relationships of "e_team_roles" */
["e_team_roles"]: {
		description: string,
	value: string
};
	/** aggregated selection of "e_team_roles" */
["e_team_roles_aggregate"]: {
		aggregate?: ModelTypes["e_team_roles_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["e_team_roles"]>
};
	/** aggregate fields of "e_team_roles" */
["e_team_roles_aggregate_fields"]: {
		count: number,
	max?: ModelTypes["e_team_roles_max_fields"] | undefined,
	min?: ModelTypes["e_team_roles_min_fields"] | undefined
};
	/** Boolean expression to filter rows from the table "e_team_roles". All fields are combined with a logical 'AND'. */
["e_team_roles_bool_exp"]: {
	_and?: Array<ModelTypes["e_team_roles_bool_exp"]> | undefined,
	_not?: ModelTypes["e_team_roles_bool_exp"] | undefined,
	_or?: Array<ModelTypes["e_team_roles_bool_exp"]> | undefined,
	description?: ModelTypes["String_comparison_exp"] | undefined,
	value?: ModelTypes["String_comparison_exp"] | undefined
};
	["e_team_roles_constraint"]:e_team_roles_constraint;
	["e_team_roles_enum"]:e_team_roles_enum;
	/** Boolean expression to compare columns of type "e_team_roles_enum". All fields are combined with logical 'AND'. */
["e_team_roles_enum_comparison_exp"]: {
	_eq?: ModelTypes["e_team_roles_enum"] | undefined,
	_in?: Array<ModelTypes["e_team_roles_enum"]> | undefined,
	_is_null?: boolean | undefined,
	_neq?: ModelTypes["e_team_roles_enum"] | undefined,
	_nin?: Array<ModelTypes["e_team_roles_enum"]> | undefined
};
	/** input type for inserting data into table "e_team_roles" */
["e_team_roles_insert_input"]: {
	description?: string | undefined,
	value?: string | undefined
};
	/** aggregate max on columns */
["e_team_roles_max_fields"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** aggregate min on columns */
["e_team_roles_min_fields"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** response of any mutation on the table "e_team_roles" */
["e_team_roles_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["e_team_roles"]>
};
	/** on_conflict condition type for table "e_team_roles" */
["e_team_roles_on_conflict"]: {
	constraint: ModelTypes["e_team_roles_constraint"],
	update_columns: Array<ModelTypes["e_team_roles_update_column"]>,
	where?: ModelTypes["e_team_roles_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "e_team_roles". */
["e_team_roles_order_by"]: {
	description?: ModelTypes["order_by"] | undefined,
	value?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: e_team_roles */
["e_team_roles_pk_columns_input"]: {
	value: string
};
	["e_team_roles_select_column"]:e_team_roles_select_column;
	/** input type for updating data in table "e_team_roles" */
["e_team_roles_set_input"]: {
	description?: string | undefined,
	value?: string | undefined
};
	/** Streaming cursor of the table "e_team_roles" */
["e_team_roles_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["e_team_roles_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["e_team_roles_stream_cursor_value_input"]: {
	description?: string | undefined,
	value?: string | undefined
};
	["e_team_roles_update_column"]:e_team_roles_update_column;
	["e_team_roles_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["e_team_roles_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["e_team_roles_bool_exp"]
};
	/** columns and relationships of "e_timeout_settings" */
["e_timeout_settings"]: {
		description: string,
	value: string
};
	/** aggregated selection of "e_timeout_settings" */
["e_timeout_settings_aggregate"]: {
		aggregate?: ModelTypes["e_timeout_settings_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["e_timeout_settings"]>
};
	/** aggregate fields of "e_timeout_settings" */
["e_timeout_settings_aggregate_fields"]: {
		count: number,
	max?: ModelTypes["e_timeout_settings_max_fields"] | undefined,
	min?: ModelTypes["e_timeout_settings_min_fields"] | undefined
};
	/** Boolean expression to filter rows from the table "e_timeout_settings". All fields are combined with a logical 'AND'. */
["e_timeout_settings_bool_exp"]: {
	_and?: Array<ModelTypes["e_timeout_settings_bool_exp"]> | undefined,
	_not?: ModelTypes["e_timeout_settings_bool_exp"] | undefined,
	_or?: Array<ModelTypes["e_timeout_settings_bool_exp"]> | undefined,
	description?: ModelTypes["String_comparison_exp"] | undefined,
	value?: ModelTypes["String_comparison_exp"] | undefined
};
	["e_timeout_settings_constraint"]:e_timeout_settings_constraint;
	["e_timeout_settings_enum"]:e_timeout_settings_enum;
	/** Boolean expression to compare columns of type "e_timeout_settings_enum". All fields are combined with logical 'AND'. */
["e_timeout_settings_enum_comparison_exp"]: {
	_eq?: ModelTypes["e_timeout_settings_enum"] | undefined,
	_in?: Array<ModelTypes["e_timeout_settings_enum"]> | undefined,
	_is_null?: boolean | undefined,
	_neq?: ModelTypes["e_timeout_settings_enum"] | undefined,
	_nin?: Array<ModelTypes["e_timeout_settings_enum"]> | undefined
};
	/** input type for inserting data into table "e_timeout_settings" */
["e_timeout_settings_insert_input"]: {
	description?: string | undefined,
	value?: string | undefined
};
	/** aggregate max on columns */
["e_timeout_settings_max_fields"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** aggregate min on columns */
["e_timeout_settings_min_fields"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** response of any mutation on the table "e_timeout_settings" */
["e_timeout_settings_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["e_timeout_settings"]>
};
	/** on_conflict condition type for table "e_timeout_settings" */
["e_timeout_settings_on_conflict"]: {
	constraint: ModelTypes["e_timeout_settings_constraint"],
	update_columns: Array<ModelTypes["e_timeout_settings_update_column"]>,
	where?: ModelTypes["e_timeout_settings_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "e_timeout_settings". */
["e_timeout_settings_order_by"]: {
	description?: ModelTypes["order_by"] | undefined,
	value?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: e_timeout_settings */
["e_timeout_settings_pk_columns_input"]: {
	value: string
};
	["e_timeout_settings_select_column"]:e_timeout_settings_select_column;
	/** input type for updating data in table "e_timeout_settings" */
["e_timeout_settings_set_input"]: {
	description?: string | undefined,
	value?: string | undefined
};
	/** Streaming cursor of the table "e_timeout_settings" */
["e_timeout_settings_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["e_timeout_settings_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["e_timeout_settings_stream_cursor_value_input"]: {
	description?: string | undefined,
	value?: string | undefined
};
	["e_timeout_settings_update_column"]:e_timeout_settings_update_column;
	["e_timeout_settings_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["e_timeout_settings_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["e_timeout_settings_bool_exp"]
};
	/** columns and relationships of "e_utility_types" */
["e_utility_types"]: {
		description: string,
	value: string
};
	/** aggregated selection of "e_utility_types" */
["e_utility_types_aggregate"]: {
		aggregate?: ModelTypes["e_utility_types_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["e_utility_types"]>
};
	/** aggregate fields of "e_utility_types" */
["e_utility_types_aggregate_fields"]: {
		count: number,
	max?: ModelTypes["e_utility_types_max_fields"] | undefined,
	min?: ModelTypes["e_utility_types_min_fields"] | undefined
};
	/** Boolean expression to filter rows from the table "e_utility_types". All fields are combined with a logical 'AND'. */
["e_utility_types_bool_exp"]: {
	_and?: Array<ModelTypes["e_utility_types_bool_exp"]> | undefined,
	_not?: ModelTypes["e_utility_types_bool_exp"] | undefined,
	_or?: Array<ModelTypes["e_utility_types_bool_exp"]> | undefined,
	description?: ModelTypes["String_comparison_exp"] | undefined,
	value?: ModelTypes["String_comparison_exp"] | undefined
};
	["e_utility_types_constraint"]:e_utility_types_constraint;
	["e_utility_types_enum"]:e_utility_types_enum;
	/** Boolean expression to compare columns of type "e_utility_types_enum". All fields are combined with logical 'AND'. */
["e_utility_types_enum_comparison_exp"]: {
	_eq?: ModelTypes["e_utility_types_enum"] | undefined,
	_in?: Array<ModelTypes["e_utility_types_enum"]> | undefined,
	_is_null?: boolean | undefined,
	_neq?: ModelTypes["e_utility_types_enum"] | undefined,
	_nin?: Array<ModelTypes["e_utility_types_enum"]> | undefined
};
	/** input type for inserting data into table "e_utility_types" */
["e_utility_types_insert_input"]: {
	description?: string | undefined,
	value?: string | undefined
};
	/** aggregate max on columns */
["e_utility_types_max_fields"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** aggregate min on columns */
["e_utility_types_min_fields"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** response of any mutation on the table "e_utility_types" */
["e_utility_types_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["e_utility_types"]>
};
	/** on_conflict condition type for table "e_utility_types" */
["e_utility_types_on_conflict"]: {
	constraint: ModelTypes["e_utility_types_constraint"],
	update_columns: Array<ModelTypes["e_utility_types_update_column"]>,
	where?: ModelTypes["e_utility_types_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "e_utility_types". */
["e_utility_types_order_by"]: {
	description?: ModelTypes["order_by"] | undefined,
	value?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: e_utility_types */
["e_utility_types_pk_columns_input"]: {
	value: string
};
	["e_utility_types_select_column"]:e_utility_types_select_column;
	/** input type for updating data in table "e_utility_types" */
["e_utility_types_set_input"]: {
	description?: string | undefined,
	value?: string | undefined
};
	/** Streaming cursor of the table "e_utility_types" */
["e_utility_types_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["e_utility_types_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["e_utility_types_stream_cursor_value_input"]: {
	description?: string | undefined,
	value?: string | undefined
};
	["e_utility_types_update_column"]:e_utility_types_update_column;
	["e_utility_types_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["e_utility_types_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["e_utility_types_bool_exp"]
};
	/** columns and relationships of "e_veto_pick_types" */
["e_veto_pick_types"]: {
		description: string,
	value: string
};
	/** aggregated selection of "e_veto_pick_types" */
["e_veto_pick_types_aggregate"]: {
		aggregate?: ModelTypes["e_veto_pick_types_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["e_veto_pick_types"]>
};
	/** aggregate fields of "e_veto_pick_types" */
["e_veto_pick_types_aggregate_fields"]: {
		count: number,
	max?: ModelTypes["e_veto_pick_types_max_fields"] | undefined,
	min?: ModelTypes["e_veto_pick_types_min_fields"] | undefined
};
	/** Boolean expression to filter rows from the table "e_veto_pick_types". All fields are combined with a logical 'AND'. */
["e_veto_pick_types_bool_exp"]: {
	_and?: Array<ModelTypes["e_veto_pick_types_bool_exp"]> | undefined,
	_not?: ModelTypes["e_veto_pick_types_bool_exp"] | undefined,
	_or?: Array<ModelTypes["e_veto_pick_types_bool_exp"]> | undefined,
	description?: ModelTypes["String_comparison_exp"] | undefined,
	value?: ModelTypes["String_comparison_exp"] | undefined
};
	["e_veto_pick_types_constraint"]:e_veto_pick_types_constraint;
	["e_veto_pick_types_enum"]:e_veto_pick_types_enum;
	/** Boolean expression to compare columns of type "e_veto_pick_types_enum". All fields are combined with logical 'AND'. */
["e_veto_pick_types_enum_comparison_exp"]: {
	_eq?: ModelTypes["e_veto_pick_types_enum"] | undefined,
	_in?: Array<ModelTypes["e_veto_pick_types_enum"]> | undefined,
	_is_null?: boolean | undefined,
	_neq?: ModelTypes["e_veto_pick_types_enum"] | undefined,
	_nin?: Array<ModelTypes["e_veto_pick_types_enum"]> | undefined
};
	/** input type for inserting data into table "e_veto_pick_types" */
["e_veto_pick_types_insert_input"]: {
	description?: string | undefined,
	value?: string | undefined
};
	/** aggregate max on columns */
["e_veto_pick_types_max_fields"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** aggregate min on columns */
["e_veto_pick_types_min_fields"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** response of any mutation on the table "e_veto_pick_types" */
["e_veto_pick_types_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["e_veto_pick_types"]>
};
	/** on_conflict condition type for table "e_veto_pick_types" */
["e_veto_pick_types_on_conflict"]: {
	constraint: ModelTypes["e_veto_pick_types_constraint"],
	update_columns: Array<ModelTypes["e_veto_pick_types_update_column"]>,
	where?: ModelTypes["e_veto_pick_types_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "e_veto_pick_types". */
["e_veto_pick_types_order_by"]: {
	description?: ModelTypes["order_by"] | undefined,
	value?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: e_veto_pick_types */
["e_veto_pick_types_pk_columns_input"]: {
	value: string
};
	["e_veto_pick_types_select_column"]:e_veto_pick_types_select_column;
	/** input type for updating data in table "e_veto_pick_types" */
["e_veto_pick_types_set_input"]: {
	description?: string | undefined,
	value?: string | undefined
};
	/** Streaming cursor of the table "e_veto_pick_types" */
["e_veto_pick_types_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["e_veto_pick_types_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["e_veto_pick_types_stream_cursor_value_input"]: {
	description?: string | undefined,
	value?: string | undefined
};
	["e_veto_pick_types_update_column"]:e_veto_pick_types_update_column;
	["e_veto_pick_types_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["e_veto_pick_types_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["e_veto_pick_types_bool_exp"]
};
	["jsonb"]:any;
	["jsonb_cast_exp"]: {
	String?: ModelTypes["String_comparison_exp"] | undefined
};
	/** Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'. */
["jsonb_comparison_exp"]: {
	_cast?: ModelTypes["jsonb_cast_exp"] | undefined,
	/** is the column contained in the given json value */
	_contained_in?: ModelTypes["jsonb"] | undefined,
	/** does the column contain the given json value at the top level */
	_contains?: ModelTypes["jsonb"] | undefined,
	_eq?: ModelTypes["jsonb"] | undefined,
	_gt?: ModelTypes["jsonb"] | undefined,
	_gte?: ModelTypes["jsonb"] | undefined,
	/** does the string exist as a top-level key in the column */
	_has_key?: string | undefined,
	/** do all of these strings exist as top-level keys in the column */
	_has_keys_all?: Array<string> | undefined,
	/** do any of these strings exist as top-level keys in the column */
	_has_keys_any?: Array<string> | undefined,
	_in?: Array<ModelTypes["jsonb"]> | undefined,
	_is_null?: boolean | undefined,
	_lt?: ModelTypes["jsonb"] | undefined,
	_lte?: ModelTypes["jsonb"] | undefined,
	_neq?: ModelTypes["jsonb"] | undefined,
	_nin?: Array<ModelTypes["jsonb"]> | undefined
};
	/** columns and relationships of "map_pools" */
["map_pools"]: {
		enabled: boolean,
	id: ModelTypes["uuid"],
	label?: string | undefined,
	/** An array relationship */
	maps: Array<ModelTypes["v_pool_maps"]>,
	/** An aggregate relationship */
	maps_aggregate: ModelTypes["v_pool_maps_aggregate"],
	/** An array relationship */
	matches: Array<ModelTypes["matches"]>,
	/** An aggregate relationship */
	matches_aggregate: ModelTypes["matches_aggregate"],
	owner_steam_id?: ModelTypes["bigint"] | undefined
};
	/** aggregated selection of "map_pools" */
["map_pools_aggregate"]: {
		aggregate?: ModelTypes["map_pools_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["map_pools"]>
};
	/** aggregate fields of "map_pools" */
["map_pools_aggregate_fields"]: {
		avg?: ModelTypes["map_pools_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["map_pools_max_fields"] | undefined,
	min?: ModelTypes["map_pools_min_fields"] | undefined,
	stddev?: ModelTypes["map_pools_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["map_pools_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["map_pools_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["map_pools_sum_fields"] | undefined,
	var_pop?: ModelTypes["map_pools_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["map_pools_var_samp_fields"] | undefined,
	variance?: ModelTypes["map_pools_variance_fields"] | undefined
};
	/** aggregate avg on columns */
["map_pools_avg_fields"]: {
		owner_steam_id?: number | undefined
};
	/** Boolean expression to filter rows from the table "map_pools". All fields are combined with a logical 'AND'. */
["map_pools_bool_exp"]: {
	_and?: Array<ModelTypes["map_pools_bool_exp"]> | undefined,
	_not?: ModelTypes["map_pools_bool_exp"] | undefined,
	_or?: Array<ModelTypes["map_pools_bool_exp"]> | undefined,
	enabled?: ModelTypes["Boolean_comparison_exp"] | undefined,
	id?: ModelTypes["uuid_comparison_exp"] | undefined,
	label?: ModelTypes["String_comparison_exp"] | undefined,
	maps?: ModelTypes["v_pool_maps_bool_exp"] | undefined,
	maps_aggregate?: ModelTypes["v_pool_maps_aggregate_bool_exp"] | undefined,
	matches?: ModelTypes["matches_bool_exp"] | undefined,
	matches_aggregate?: ModelTypes["matches_aggregate_bool_exp"] | undefined,
	owner_steam_id?: ModelTypes["bigint_comparison_exp"] | undefined
};
	["map_pools_constraint"]:map_pools_constraint;
	/** input type for incrementing numeric columns in table "map_pools" */
["map_pools_inc_input"]: {
	owner_steam_id?: ModelTypes["bigint"] | undefined
};
	/** input type for inserting data into table "map_pools" */
["map_pools_insert_input"]: {
	enabled?: boolean | undefined,
	id?: ModelTypes["uuid"] | undefined,
	label?: string | undefined,
	maps?: ModelTypes["v_pool_maps_arr_rel_insert_input"] | undefined,
	matches?: ModelTypes["matches_arr_rel_insert_input"] | undefined,
	owner_steam_id?: ModelTypes["bigint"] | undefined
};
	/** aggregate max on columns */
["map_pools_max_fields"]: {
		id?: ModelTypes["uuid"] | undefined,
	label?: string | undefined,
	owner_steam_id?: ModelTypes["bigint"] | undefined
};
	/** aggregate min on columns */
["map_pools_min_fields"]: {
		id?: ModelTypes["uuid"] | undefined,
	label?: string | undefined,
	owner_steam_id?: ModelTypes["bigint"] | undefined
};
	/** response of any mutation on the table "map_pools" */
["map_pools_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["map_pools"]>
};
	/** input type for inserting object relation for remote table "map_pools" */
["map_pools_obj_rel_insert_input"]: {
	data: ModelTypes["map_pools_insert_input"],
	/** upsert condition */
	on_conflict?: ModelTypes["map_pools_on_conflict"] | undefined
};
	/** on_conflict condition type for table "map_pools" */
["map_pools_on_conflict"]: {
	constraint: ModelTypes["map_pools_constraint"],
	update_columns: Array<ModelTypes["map_pools_update_column"]>,
	where?: ModelTypes["map_pools_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "map_pools". */
["map_pools_order_by"]: {
	enabled?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	label?: ModelTypes["order_by"] | undefined,
	maps_aggregate?: ModelTypes["v_pool_maps_aggregate_order_by"] | undefined,
	matches_aggregate?: ModelTypes["matches_aggregate_order_by"] | undefined,
	owner_steam_id?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: map_pools */
["map_pools_pk_columns_input"]: {
	id: ModelTypes["uuid"]
};
	["map_pools_select_column"]:map_pools_select_column;
	/** input type for updating data in table "map_pools" */
["map_pools_set_input"]: {
	enabled?: boolean | undefined,
	id?: ModelTypes["uuid"] | undefined,
	label?: string | undefined,
	owner_steam_id?: ModelTypes["bigint"] | undefined
};
	/** aggregate stddev on columns */
["map_pools_stddev_fields"]: {
		owner_steam_id?: number | undefined
};
	/** aggregate stddev_pop on columns */
["map_pools_stddev_pop_fields"]: {
		owner_steam_id?: number | undefined
};
	/** aggregate stddev_samp on columns */
["map_pools_stddev_samp_fields"]: {
		owner_steam_id?: number | undefined
};
	/** Streaming cursor of the table "map_pools" */
["map_pools_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["map_pools_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["map_pools_stream_cursor_value_input"]: {
	enabled?: boolean | undefined,
	id?: ModelTypes["uuid"] | undefined,
	label?: string | undefined,
	owner_steam_id?: ModelTypes["bigint"] | undefined
};
	/** aggregate sum on columns */
["map_pools_sum_fields"]: {
		owner_steam_id?: ModelTypes["bigint"] | undefined
};
	["map_pools_update_column"]:map_pools_update_column;
	["map_pools_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["map_pools_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["map_pools_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["map_pools_bool_exp"]
};
	/** aggregate var_pop on columns */
["map_pools_var_pop_fields"]: {
		owner_steam_id?: number | undefined
};
	/** aggregate var_samp on columns */
["map_pools_var_samp_fields"]: {
		owner_steam_id?: number | undefined
};
	/** aggregate variance on columns */
["map_pools_variance_fields"]: {
		owner_steam_id?: number | undefined
};
	/** columns and relationships of "maps" */
["maps"]: {
		active_pool: boolean,
	/** An object relationship */
	e_match_type: ModelTypes["e_match_types"],
	id: ModelTypes["uuid"],
	/** An array relationship */
	match_maps: Array<ModelTypes["match_maps"]>,
	/** An aggregate relationship */
	match_maps_aggregate: ModelTypes["match_maps_aggregate"],
	/** An array relationship */
	match_veto_picks: Array<ModelTypes["match_veto_picks"]>,
	/** An aggregate relationship */
	match_veto_picks_aggregate: ModelTypes["match_veto_picks_aggregate"],
	name: string,
	type: ModelTypes["e_match_types_enum"],
	workshop_map_id?: string | undefined
};
	/** aggregated selection of "maps" */
["maps_aggregate"]: {
		aggregate?: ModelTypes["maps_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["maps"]>
};
	["maps_aggregate_bool_exp"]: {
	bool_and?: ModelTypes["maps_aggregate_bool_exp_bool_and"] | undefined,
	bool_or?: ModelTypes["maps_aggregate_bool_exp_bool_or"] | undefined,
	count?: ModelTypes["maps_aggregate_bool_exp_count"] | undefined
};
	["maps_aggregate_bool_exp_bool_and"]: {
	arguments: ModelTypes["maps_select_column_maps_aggregate_bool_exp_bool_and_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: ModelTypes["maps_bool_exp"] | undefined,
	predicate: ModelTypes["Boolean_comparison_exp"]
};
	["maps_aggregate_bool_exp_bool_or"]: {
	arguments: ModelTypes["maps_select_column_maps_aggregate_bool_exp_bool_or_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: ModelTypes["maps_bool_exp"] | undefined,
	predicate: ModelTypes["Boolean_comparison_exp"]
};
	["maps_aggregate_bool_exp_count"]: {
	arguments?: Array<ModelTypes["maps_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: ModelTypes["maps_bool_exp"] | undefined,
	predicate: ModelTypes["Int_comparison_exp"]
};
	/** aggregate fields of "maps" */
["maps_aggregate_fields"]: {
		count: number,
	max?: ModelTypes["maps_max_fields"] | undefined,
	min?: ModelTypes["maps_min_fields"] | undefined
};
	/** order by aggregate values of table "maps" */
["maps_aggregate_order_by"]: {
	count?: ModelTypes["order_by"] | undefined,
	max?: ModelTypes["maps_max_order_by"] | undefined,
	min?: ModelTypes["maps_min_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "maps" */
["maps_arr_rel_insert_input"]: {
	data: Array<ModelTypes["maps_insert_input"]>,
	/** upsert condition */
	on_conflict?: ModelTypes["maps_on_conflict"] | undefined
};
	/** Boolean expression to filter rows from the table "maps". All fields are combined with a logical 'AND'. */
["maps_bool_exp"]: {
	_and?: Array<ModelTypes["maps_bool_exp"]> | undefined,
	_not?: ModelTypes["maps_bool_exp"] | undefined,
	_or?: Array<ModelTypes["maps_bool_exp"]> | undefined,
	active_pool?: ModelTypes["Boolean_comparison_exp"] | undefined,
	e_match_type?: ModelTypes["e_match_types_bool_exp"] | undefined,
	id?: ModelTypes["uuid_comparison_exp"] | undefined,
	match_maps?: ModelTypes["match_maps_bool_exp"] | undefined,
	match_maps_aggregate?: ModelTypes["match_maps_aggregate_bool_exp"] | undefined,
	match_veto_picks?: ModelTypes["match_veto_picks_bool_exp"] | undefined,
	match_veto_picks_aggregate?: ModelTypes["match_veto_picks_aggregate_bool_exp"] | undefined,
	name?: ModelTypes["String_comparison_exp"] | undefined,
	type?: ModelTypes["e_match_types_enum_comparison_exp"] | undefined,
	workshop_map_id?: ModelTypes["String_comparison_exp"] | undefined
};
	["maps_constraint"]:maps_constraint;
	/** input type for inserting data into table "maps" */
["maps_insert_input"]: {
	active_pool?: boolean | undefined,
	e_match_type?: ModelTypes["e_match_types_obj_rel_insert_input"] | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match_maps?: ModelTypes["match_maps_arr_rel_insert_input"] | undefined,
	match_veto_picks?: ModelTypes["match_veto_picks_arr_rel_insert_input"] | undefined,
	name?: string | undefined,
	type?: ModelTypes["e_match_types_enum"] | undefined,
	workshop_map_id?: string | undefined
};
	/** aggregate max on columns */
["maps_max_fields"]: {
		id?: ModelTypes["uuid"] | undefined,
	name?: string | undefined,
	workshop_map_id?: string | undefined
};
	/** order by max() on columns of table "maps" */
["maps_max_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	name?: ModelTypes["order_by"] | undefined,
	workshop_map_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["maps_min_fields"]: {
		id?: ModelTypes["uuid"] | undefined,
	name?: string | undefined,
	workshop_map_id?: string | undefined
};
	/** order by min() on columns of table "maps" */
["maps_min_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	name?: ModelTypes["order_by"] | undefined,
	workshop_map_id?: ModelTypes["order_by"] | undefined
};
	/** response of any mutation on the table "maps" */
["maps_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["maps"]>
};
	/** input type for inserting object relation for remote table "maps" */
["maps_obj_rel_insert_input"]: {
	data: ModelTypes["maps_insert_input"],
	/** upsert condition */
	on_conflict?: ModelTypes["maps_on_conflict"] | undefined
};
	/** on_conflict condition type for table "maps" */
["maps_on_conflict"]: {
	constraint: ModelTypes["maps_constraint"],
	update_columns: Array<ModelTypes["maps_update_column"]>,
	where?: ModelTypes["maps_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "maps". */
["maps_order_by"]: {
	active_pool?: ModelTypes["order_by"] | undefined,
	e_match_type?: ModelTypes["e_match_types_order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	match_maps_aggregate?: ModelTypes["match_maps_aggregate_order_by"] | undefined,
	match_veto_picks_aggregate?: ModelTypes["match_veto_picks_aggregate_order_by"] | undefined,
	name?: ModelTypes["order_by"] | undefined,
	type?: ModelTypes["order_by"] | undefined,
	workshop_map_id?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: maps */
["maps_pk_columns_input"]: {
	id: ModelTypes["uuid"]
};
	["maps_select_column"]:maps_select_column;
	["maps_select_column_maps_aggregate_bool_exp_bool_and_arguments_columns"]:maps_select_column_maps_aggregate_bool_exp_bool_and_arguments_columns;
	["maps_select_column_maps_aggregate_bool_exp_bool_or_arguments_columns"]:maps_select_column_maps_aggregate_bool_exp_bool_or_arguments_columns;
	/** input type for updating data in table "maps" */
["maps_set_input"]: {
	active_pool?: boolean | undefined,
	id?: ModelTypes["uuid"] | undefined,
	name?: string | undefined,
	type?: ModelTypes["e_match_types_enum"] | undefined,
	workshop_map_id?: string | undefined
};
	/** Streaming cursor of the table "maps" */
["maps_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["maps_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["maps_stream_cursor_value_input"]: {
	active_pool?: boolean | undefined,
	id?: ModelTypes["uuid"] | undefined,
	name?: string | undefined,
	type?: ModelTypes["e_match_types_enum"] | undefined,
	workshop_map_id?: string | undefined
};
	["maps_update_column"]:maps_update_column;
	["maps_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["maps_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["maps_bool_exp"]
};
	/** relational table for assigning a players to a match and lineup */
["match_lineup_players"]: {
		captain: boolean,
	discord_id?: string | undefined,
	id: ModelTypes["uuid"],
	/** An object relationship */
	lineup: ModelTypes["match_lineups"],
	match_lineup_id: ModelTypes["uuid"],
	placeholder_name?: string | undefined,
	/** An object relationship */
	player?: ModelTypes["players"] | undefined,
	steam_id?: ModelTypes["bigint"] | undefined
};
	/** aggregated selection of "match_lineup_players" */
["match_lineup_players_aggregate"]: {
		aggregate?: ModelTypes["match_lineup_players_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["match_lineup_players"]>
};
	["match_lineup_players_aggregate_bool_exp"]: {
	bool_and?: ModelTypes["match_lineup_players_aggregate_bool_exp_bool_and"] | undefined,
	bool_or?: ModelTypes["match_lineup_players_aggregate_bool_exp_bool_or"] | undefined,
	count?: ModelTypes["match_lineup_players_aggregate_bool_exp_count"] | undefined
};
	["match_lineup_players_aggregate_bool_exp_bool_and"]: {
	arguments: ModelTypes["match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_and_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: ModelTypes["match_lineup_players_bool_exp"] | undefined,
	predicate: ModelTypes["Boolean_comparison_exp"]
};
	["match_lineup_players_aggregate_bool_exp_bool_or"]: {
	arguments: ModelTypes["match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_or_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: ModelTypes["match_lineup_players_bool_exp"] | undefined,
	predicate: ModelTypes["Boolean_comparison_exp"]
};
	["match_lineup_players_aggregate_bool_exp_count"]: {
	arguments?: Array<ModelTypes["match_lineup_players_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: ModelTypes["match_lineup_players_bool_exp"] | undefined,
	predicate: ModelTypes["Int_comparison_exp"]
};
	/** aggregate fields of "match_lineup_players" */
["match_lineup_players_aggregate_fields"]: {
		avg?: ModelTypes["match_lineup_players_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["match_lineup_players_max_fields"] | undefined,
	min?: ModelTypes["match_lineup_players_min_fields"] | undefined,
	stddev?: ModelTypes["match_lineup_players_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["match_lineup_players_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["match_lineup_players_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["match_lineup_players_sum_fields"] | undefined,
	var_pop?: ModelTypes["match_lineup_players_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["match_lineup_players_var_samp_fields"] | undefined,
	variance?: ModelTypes["match_lineup_players_variance_fields"] | undefined
};
	/** order by aggregate values of table "match_lineup_players" */
["match_lineup_players_aggregate_order_by"]: {
	avg?: ModelTypes["match_lineup_players_avg_order_by"] | undefined,
	count?: ModelTypes["order_by"] | undefined,
	max?: ModelTypes["match_lineup_players_max_order_by"] | undefined,
	min?: ModelTypes["match_lineup_players_min_order_by"] | undefined,
	stddev?: ModelTypes["match_lineup_players_stddev_order_by"] | undefined,
	stddev_pop?: ModelTypes["match_lineup_players_stddev_pop_order_by"] | undefined,
	stddev_samp?: ModelTypes["match_lineup_players_stddev_samp_order_by"] | undefined,
	sum?: ModelTypes["match_lineup_players_sum_order_by"] | undefined,
	var_pop?: ModelTypes["match_lineup_players_var_pop_order_by"] | undefined,
	var_samp?: ModelTypes["match_lineup_players_var_samp_order_by"] | undefined,
	variance?: ModelTypes["match_lineup_players_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "match_lineup_players" */
["match_lineup_players_arr_rel_insert_input"]: {
	data: Array<ModelTypes["match_lineup_players_insert_input"]>,
	/** upsert condition */
	on_conflict?: ModelTypes["match_lineup_players_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["match_lineup_players_avg_fields"]: {
		steam_id?: number | undefined
};
	/** order by avg() on columns of table "match_lineup_players" */
["match_lineup_players_avg_order_by"]: {
	steam_id?: ModelTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "match_lineup_players". All fields are combined with a logical 'AND'. */
["match_lineup_players_bool_exp"]: {
	_and?: Array<ModelTypes["match_lineup_players_bool_exp"]> | undefined,
	_not?: ModelTypes["match_lineup_players_bool_exp"] | undefined,
	_or?: Array<ModelTypes["match_lineup_players_bool_exp"]> | undefined,
	captain?: ModelTypes["Boolean_comparison_exp"] | undefined,
	discord_id?: ModelTypes["String_comparison_exp"] | undefined,
	id?: ModelTypes["uuid_comparison_exp"] | undefined,
	lineup?: ModelTypes["match_lineups_bool_exp"] | undefined,
	match_lineup_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	placeholder_name?: ModelTypes["String_comparison_exp"] | undefined,
	player?: ModelTypes["players_bool_exp"] | undefined,
	steam_id?: ModelTypes["bigint_comparison_exp"] | undefined
};
	["match_lineup_players_constraint"]:match_lineup_players_constraint;
	/** input type for incrementing numeric columns in table "match_lineup_players" */
["match_lineup_players_inc_input"]: {
	steam_id?: ModelTypes["bigint"] | undefined
};
	/** input type for inserting data into table "match_lineup_players" */
["match_lineup_players_insert_input"]: {
	captain?: boolean | undefined,
	discord_id?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	lineup?: ModelTypes["match_lineups_obj_rel_insert_input"] | undefined,
	match_lineup_id?: ModelTypes["uuid"] | undefined,
	placeholder_name?: string | undefined,
	player?: ModelTypes["players_obj_rel_insert_input"] | undefined,
	steam_id?: ModelTypes["bigint"] | undefined
};
	/** aggregate max on columns */
["match_lineup_players_max_fields"]: {
		discord_id?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match_lineup_id?: ModelTypes["uuid"] | undefined,
	placeholder_name?: string | undefined,
	steam_id?: ModelTypes["bigint"] | undefined
};
	/** order by max() on columns of table "match_lineup_players" */
["match_lineup_players_max_order_by"]: {
	discord_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	match_lineup_id?: ModelTypes["order_by"] | undefined,
	placeholder_name?: ModelTypes["order_by"] | undefined,
	steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["match_lineup_players_min_fields"]: {
		discord_id?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match_lineup_id?: ModelTypes["uuid"] | undefined,
	placeholder_name?: string | undefined,
	steam_id?: ModelTypes["bigint"] | undefined
};
	/** order by min() on columns of table "match_lineup_players" */
["match_lineup_players_min_order_by"]: {
	discord_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	match_lineup_id?: ModelTypes["order_by"] | undefined,
	placeholder_name?: ModelTypes["order_by"] | undefined,
	steam_id?: ModelTypes["order_by"] | undefined
};
	/** response of any mutation on the table "match_lineup_players" */
["match_lineup_players_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["match_lineup_players"]>
};
	/** on_conflict condition type for table "match_lineup_players" */
["match_lineup_players_on_conflict"]: {
	constraint: ModelTypes["match_lineup_players_constraint"],
	update_columns: Array<ModelTypes["match_lineup_players_update_column"]>,
	where?: ModelTypes["match_lineup_players_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "match_lineup_players". */
["match_lineup_players_order_by"]: {
	captain?: ModelTypes["order_by"] | undefined,
	discord_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	lineup?: ModelTypes["match_lineups_order_by"] | undefined,
	match_lineup_id?: ModelTypes["order_by"] | undefined,
	placeholder_name?: ModelTypes["order_by"] | undefined,
	player?: ModelTypes["players_order_by"] | undefined,
	steam_id?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: match_lineup_players */
["match_lineup_players_pk_columns_input"]: {
	id: ModelTypes["uuid"]
};
	["match_lineup_players_select_column"]:match_lineup_players_select_column;
	["match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_and_arguments_columns"]:match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_and_arguments_columns;
	["match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_or_arguments_columns"]:match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_or_arguments_columns;
	/** input type for updating data in table "match_lineup_players" */
["match_lineup_players_set_input"]: {
	captain?: boolean | undefined,
	discord_id?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match_lineup_id?: ModelTypes["uuid"] | undefined,
	placeholder_name?: string | undefined,
	steam_id?: ModelTypes["bigint"] | undefined
};
	/** aggregate stddev on columns */
["match_lineup_players_stddev_fields"]: {
		steam_id?: number | undefined
};
	/** order by stddev() on columns of table "match_lineup_players" */
["match_lineup_players_stddev_order_by"]: {
	steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["match_lineup_players_stddev_pop_fields"]: {
		steam_id?: number | undefined
};
	/** order by stddev_pop() on columns of table "match_lineup_players" */
["match_lineup_players_stddev_pop_order_by"]: {
	steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["match_lineup_players_stddev_samp_fields"]: {
		steam_id?: number | undefined
};
	/** order by stddev_samp() on columns of table "match_lineup_players" */
["match_lineup_players_stddev_samp_order_by"]: {
	steam_id?: ModelTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "match_lineup_players" */
["match_lineup_players_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["match_lineup_players_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["match_lineup_players_stream_cursor_value_input"]: {
	captain?: boolean | undefined,
	discord_id?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match_lineup_id?: ModelTypes["uuid"] | undefined,
	placeholder_name?: string | undefined,
	steam_id?: ModelTypes["bigint"] | undefined
};
	/** aggregate sum on columns */
["match_lineup_players_sum_fields"]: {
		steam_id?: ModelTypes["bigint"] | undefined
};
	/** order by sum() on columns of table "match_lineup_players" */
["match_lineup_players_sum_order_by"]: {
	steam_id?: ModelTypes["order_by"] | undefined
};
	["match_lineup_players_update_column"]:match_lineup_players_update_column;
	["match_lineup_players_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["match_lineup_players_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["match_lineup_players_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["match_lineup_players_bool_exp"]
};
	/** aggregate var_pop on columns */
["match_lineup_players_var_pop_fields"]: {
		steam_id?: number | undefined
};
	/** order by var_pop() on columns of table "match_lineup_players" */
["match_lineup_players_var_pop_order_by"]: {
	steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["match_lineup_players_var_samp_fields"]: {
		steam_id?: number | undefined
};
	/** order by var_samp() on columns of table "match_lineup_players" */
["match_lineup_players_var_samp_order_by"]: {
	steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["match_lineup_players_variance_fields"]: {
		steam_id?: number | undefined
};
	/** order by variance() on columns of table "match_lineup_players" */
["match_lineup_players_variance_order_by"]: {
	steam_id?: ModelTypes["order_by"] | undefined
};
	/** relational table for assigning a team to a match and lineup */
["match_lineups"]: {
		/** An object relationship */
	captain?: ModelTypes["v_match_captains"] | undefined,
	/** An object relationship */
	coach?: ModelTypes["players"] | undefined,
	coach_steam_id?: ModelTypes["bigint"] | undefined,
	id: ModelTypes["uuid"],
	/** An array relationship */
	lineup_players: Array<ModelTypes["match_lineup_players"]>,
	/** An aggregate relationship */
	lineup_players_aggregate: ModelTypes["match_lineup_players_aggregate"],
	/** An object relationship */
	match: ModelTypes["matches"],
	match_id: ModelTypes["uuid"],
	/** An array relationship */
	match_veto_picks: Array<ModelTypes["match_veto_picks"]>,
	/** An aggregate relationship */
	match_veto_picks_aggregate: ModelTypes["match_veto_picks_aggregate"],
	/** A computed field, executes function "get_team_name" */
	name?: string | undefined,
	/** An object relationship */
	player?: ModelTypes["players"] | undefined,
	/** An object relationship */
	team?: ModelTypes["teams"] | undefined,
	team_id?: ModelTypes["uuid"] | undefined
};
	/** aggregated selection of "match_lineups" */
["match_lineups_aggregate"]: {
		aggregate?: ModelTypes["match_lineups_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["match_lineups"]>
};
	["match_lineups_aggregate_bool_exp"]: {
	count?: ModelTypes["match_lineups_aggregate_bool_exp_count"] | undefined
};
	["match_lineups_aggregate_bool_exp_count"]: {
	arguments?: Array<ModelTypes["match_lineups_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: ModelTypes["match_lineups_bool_exp"] | undefined,
	predicate: ModelTypes["Int_comparison_exp"]
};
	/** aggregate fields of "match_lineups" */
["match_lineups_aggregate_fields"]: {
		avg?: ModelTypes["match_lineups_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["match_lineups_max_fields"] | undefined,
	min?: ModelTypes["match_lineups_min_fields"] | undefined,
	stddev?: ModelTypes["match_lineups_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["match_lineups_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["match_lineups_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["match_lineups_sum_fields"] | undefined,
	var_pop?: ModelTypes["match_lineups_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["match_lineups_var_samp_fields"] | undefined,
	variance?: ModelTypes["match_lineups_variance_fields"] | undefined
};
	/** order by aggregate values of table "match_lineups" */
["match_lineups_aggregate_order_by"]: {
	avg?: ModelTypes["match_lineups_avg_order_by"] | undefined,
	count?: ModelTypes["order_by"] | undefined,
	max?: ModelTypes["match_lineups_max_order_by"] | undefined,
	min?: ModelTypes["match_lineups_min_order_by"] | undefined,
	stddev?: ModelTypes["match_lineups_stddev_order_by"] | undefined,
	stddev_pop?: ModelTypes["match_lineups_stddev_pop_order_by"] | undefined,
	stddev_samp?: ModelTypes["match_lineups_stddev_samp_order_by"] | undefined,
	sum?: ModelTypes["match_lineups_sum_order_by"] | undefined,
	var_pop?: ModelTypes["match_lineups_var_pop_order_by"] | undefined,
	var_samp?: ModelTypes["match_lineups_var_samp_order_by"] | undefined,
	variance?: ModelTypes["match_lineups_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "match_lineups" */
["match_lineups_arr_rel_insert_input"]: {
	data: Array<ModelTypes["match_lineups_insert_input"]>,
	/** upsert condition */
	on_conflict?: ModelTypes["match_lineups_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["match_lineups_avg_fields"]: {
		coach_steam_id?: number | undefined
};
	/** order by avg() on columns of table "match_lineups" */
["match_lineups_avg_order_by"]: {
	coach_steam_id?: ModelTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "match_lineups". All fields are combined with a logical 'AND'. */
["match_lineups_bool_exp"]: {
	_and?: Array<ModelTypes["match_lineups_bool_exp"]> | undefined,
	_not?: ModelTypes["match_lineups_bool_exp"] | undefined,
	_or?: Array<ModelTypes["match_lineups_bool_exp"]> | undefined,
	captain?: ModelTypes["v_match_captains_bool_exp"] | undefined,
	coach?: ModelTypes["players_bool_exp"] | undefined,
	coach_steam_id?: ModelTypes["bigint_comparison_exp"] | undefined,
	id?: ModelTypes["uuid_comparison_exp"] | undefined,
	lineup_players?: ModelTypes["match_lineup_players_bool_exp"] | undefined,
	lineup_players_aggregate?: ModelTypes["match_lineup_players_aggregate_bool_exp"] | undefined,
	match?: ModelTypes["matches_bool_exp"] | undefined,
	match_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	match_veto_picks?: ModelTypes["match_veto_picks_bool_exp"] | undefined,
	match_veto_picks_aggregate?: ModelTypes["match_veto_picks_aggregate_bool_exp"] | undefined,
	name?: ModelTypes["String_comparison_exp"] | undefined,
	player?: ModelTypes["players_bool_exp"] | undefined,
	team?: ModelTypes["teams_bool_exp"] | undefined,
	team_id?: ModelTypes["uuid_comparison_exp"] | undefined
};
	["match_lineups_constraint"]:match_lineups_constraint;
	/** input type for incrementing numeric columns in table "match_lineups" */
["match_lineups_inc_input"]: {
	coach_steam_id?: ModelTypes["bigint"] | undefined
};
	/** input type for inserting data into table "match_lineups" */
["match_lineups_insert_input"]: {
	captain?: ModelTypes["v_match_captains_obj_rel_insert_input"] | undefined,
	coach?: ModelTypes["players_obj_rel_insert_input"] | undefined,
	coach_steam_id?: ModelTypes["bigint"] | undefined,
	id?: ModelTypes["uuid"] | undefined,
	lineup_players?: ModelTypes["match_lineup_players_arr_rel_insert_input"] | undefined,
	match?: ModelTypes["matches_obj_rel_insert_input"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_veto_picks?: ModelTypes["match_veto_picks_arr_rel_insert_input"] | undefined,
	player?: ModelTypes["players_obj_rel_insert_input"] | undefined,
	team?: ModelTypes["teams_obj_rel_insert_input"] | undefined,
	team_id?: ModelTypes["uuid"] | undefined
};
	/** aggregate max on columns */
["match_lineups_max_fields"]: {
		coach_steam_id?: ModelTypes["bigint"] | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	/** A computed field, executes function "get_team_name" */
	name?: string | undefined,
	team_id?: ModelTypes["uuid"] | undefined
};
	/** order by max() on columns of table "match_lineups" */
["match_lineups_max_order_by"]: {
	coach_steam_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	team_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["match_lineups_min_fields"]: {
		coach_steam_id?: ModelTypes["bigint"] | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	/** A computed field, executes function "get_team_name" */
	name?: string | undefined,
	team_id?: ModelTypes["uuid"] | undefined
};
	/** order by min() on columns of table "match_lineups" */
["match_lineups_min_order_by"]: {
	coach_steam_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	team_id?: ModelTypes["order_by"] | undefined
};
	/** response of any mutation on the table "match_lineups" */
["match_lineups_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["match_lineups"]>
};
	/** input type for inserting object relation for remote table "match_lineups" */
["match_lineups_obj_rel_insert_input"]: {
	data: ModelTypes["match_lineups_insert_input"],
	/** upsert condition */
	on_conflict?: ModelTypes["match_lineups_on_conflict"] | undefined
};
	/** on_conflict condition type for table "match_lineups" */
["match_lineups_on_conflict"]: {
	constraint: ModelTypes["match_lineups_constraint"],
	update_columns: Array<ModelTypes["match_lineups_update_column"]>,
	where?: ModelTypes["match_lineups_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "match_lineups". */
["match_lineups_order_by"]: {
	captain?: ModelTypes["v_match_captains_order_by"] | undefined,
	coach?: ModelTypes["players_order_by"] | undefined,
	coach_steam_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	lineup_players_aggregate?: ModelTypes["match_lineup_players_aggregate_order_by"] | undefined,
	match?: ModelTypes["matches_order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	match_veto_picks_aggregate?: ModelTypes["match_veto_picks_aggregate_order_by"] | undefined,
	name?: ModelTypes["order_by"] | undefined,
	player?: ModelTypes["players_order_by"] | undefined,
	team?: ModelTypes["teams_order_by"] | undefined,
	team_id?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: match_lineups */
["match_lineups_pk_columns_input"]: {
	id: ModelTypes["uuid"]
};
	["match_lineups_select_column"]:match_lineups_select_column;
	/** input type for updating data in table "match_lineups" */
["match_lineups_set_input"]: {
	coach_steam_id?: ModelTypes["bigint"] | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	team_id?: ModelTypes["uuid"] | undefined
};
	/** aggregate stddev on columns */
["match_lineups_stddev_fields"]: {
		coach_steam_id?: number | undefined
};
	/** order by stddev() on columns of table "match_lineups" */
["match_lineups_stddev_order_by"]: {
	coach_steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["match_lineups_stddev_pop_fields"]: {
		coach_steam_id?: number | undefined
};
	/** order by stddev_pop() on columns of table "match_lineups" */
["match_lineups_stddev_pop_order_by"]: {
	coach_steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["match_lineups_stddev_samp_fields"]: {
		coach_steam_id?: number | undefined
};
	/** order by stddev_samp() on columns of table "match_lineups" */
["match_lineups_stddev_samp_order_by"]: {
	coach_steam_id?: ModelTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "match_lineups" */
["match_lineups_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["match_lineups_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["match_lineups_stream_cursor_value_input"]: {
	coach_steam_id?: ModelTypes["bigint"] | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	team_id?: ModelTypes["uuid"] | undefined
};
	/** aggregate sum on columns */
["match_lineups_sum_fields"]: {
		coach_steam_id?: ModelTypes["bigint"] | undefined
};
	/** order by sum() on columns of table "match_lineups" */
["match_lineups_sum_order_by"]: {
	coach_steam_id?: ModelTypes["order_by"] | undefined
};
	["match_lineups_update_column"]:match_lineups_update_column;
	["match_lineups_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["match_lineups_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["match_lineups_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["match_lineups_bool_exp"]
};
	/** aggregate var_pop on columns */
["match_lineups_var_pop_fields"]: {
		coach_steam_id?: number | undefined
};
	/** order by var_pop() on columns of table "match_lineups" */
["match_lineups_var_pop_order_by"]: {
	coach_steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["match_lineups_var_samp_fields"]: {
		coach_steam_id?: number | undefined
};
	/** order by var_samp() on columns of table "match_lineups" */
["match_lineups_var_samp_order_by"]: {
	coach_steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["match_lineups_variance_fields"]: {
		coach_steam_id?: number | undefined
};
	/** order by variance() on columns of table "match_lineups" */
["match_lineups_variance_order_by"]: {
	coach_steam_id?: ModelTypes["order_by"] | undefined
};
	/** columns and relationships of "match_map_demos" */
["match_map_demos"]: {
		file: string,
	id: ModelTypes["uuid"],
	match_id: ModelTypes["uuid"],
	match_map_id: ModelTypes["uuid"],
	size: number
};
	/** aggregated selection of "match_map_demos" */
["match_map_demos_aggregate"]: {
		aggregate?: ModelTypes["match_map_demos_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["match_map_demos"]>
};
	/** aggregate fields of "match_map_demos" */
["match_map_demos_aggregate_fields"]: {
		avg?: ModelTypes["match_map_demos_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["match_map_demos_max_fields"] | undefined,
	min?: ModelTypes["match_map_demos_min_fields"] | undefined,
	stddev?: ModelTypes["match_map_demos_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["match_map_demos_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["match_map_demos_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["match_map_demos_sum_fields"] | undefined,
	var_pop?: ModelTypes["match_map_demos_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["match_map_demos_var_samp_fields"] | undefined,
	variance?: ModelTypes["match_map_demos_variance_fields"] | undefined
};
	/** aggregate avg on columns */
["match_map_demos_avg_fields"]: {
		size?: number | undefined
};
	/** Boolean expression to filter rows from the table "match_map_demos". All fields are combined with a logical 'AND'. */
["match_map_demos_bool_exp"]: {
	_and?: Array<ModelTypes["match_map_demos_bool_exp"]> | undefined,
	_not?: ModelTypes["match_map_demos_bool_exp"] | undefined,
	_or?: Array<ModelTypes["match_map_demos_bool_exp"]> | undefined,
	file?: ModelTypes["String_comparison_exp"] | undefined,
	id?: ModelTypes["uuid_comparison_exp"] | undefined,
	match_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	match_map_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	size?: ModelTypes["Int_comparison_exp"] | undefined
};
	["match_map_demos_constraint"]:match_map_demos_constraint;
	/** input type for incrementing numeric columns in table "match_map_demos" */
["match_map_demos_inc_input"]: {
	size?: number | undefined
};
	/** input type for inserting data into table "match_map_demos" */
["match_map_demos_insert_input"]: {
	file?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	size?: number | undefined
};
	/** aggregate max on columns */
["match_map_demos_max_fields"]: {
		file?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	size?: number | undefined
};
	/** aggregate min on columns */
["match_map_demos_min_fields"]: {
		file?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	size?: number | undefined
};
	/** response of any mutation on the table "match_map_demos" */
["match_map_demos_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["match_map_demos"]>
};
	/** on_conflict condition type for table "match_map_demos" */
["match_map_demos_on_conflict"]: {
	constraint: ModelTypes["match_map_demos_constraint"],
	update_columns: Array<ModelTypes["match_map_demos_update_column"]>,
	where?: ModelTypes["match_map_demos_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "match_map_demos". */
["match_map_demos_order_by"]: {
	file?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	match_map_id?: ModelTypes["order_by"] | undefined,
	size?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: match_map_demos */
["match_map_demos_pk_columns_input"]: {
	id: ModelTypes["uuid"]
};
	["match_map_demos_select_column"]:match_map_demos_select_column;
	/** input type for updating data in table "match_map_demos" */
["match_map_demos_set_input"]: {
	file?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	size?: number | undefined
};
	/** aggregate stddev on columns */
["match_map_demos_stddev_fields"]: {
		size?: number | undefined
};
	/** aggregate stddev_pop on columns */
["match_map_demos_stddev_pop_fields"]: {
		size?: number | undefined
};
	/** aggregate stddev_samp on columns */
["match_map_demos_stddev_samp_fields"]: {
		size?: number | undefined
};
	/** Streaming cursor of the table "match_map_demos" */
["match_map_demos_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["match_map_demos_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["match_map_demos_stream_cursor_value_input"]: {
	file?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	size?: number | undefined
};
	/** aggregate sum on columns */
["match_map_demos_sum_fields"]: {
		size?: number | undefined
};
	["match_map_demos_update_column"]:match_map_demos_update_column;
	["match_map_demos_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["match_map_demos_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["match_map_demos_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["match_map_demos_bool_exp"]
};
	/** aggregate var_pop on columns */
["match_map_demos_var_pop_fields"]: {
		size?: number | undefined
};
	/** aggregate var_samp on columns */
["match_map_demos_var_samp_fields"]: {
		size?: number | undefined
};
	/** aggregate variance on columns */
["match_map_demos_variance_fields"]: {
		size?: number | undefined
};
	/** columns and relationships of "match_map_rounds" */
["match_map_rounds"]: {
		backup_file?: string | undefined,
	id: ModelTypes["uuid"],
	/** An array relationship */
	kills: Array<ModelTypes["player_kills"]>,
	/** An aggregate relationship */
	kills_aggregate: ModelTypes["player_kills_aggregate"],
	lineup_1_money: number,
	lineup_1_score: number,
	lineup_1_timeouts_available: number,
	lineup_2_money: number,
	lineup_2_score: number,
	lineup_2_timeouts_available: number,
	/** An object relationship */
	match_map: ModelTypes["match_maps"],
	match_map_id: ModelTypes["uuid"],
	round: number,
	time: ModelTypes["timestamptz"]
};
	/** aggregated selection of "match_map_rounds" */
["match_map_rounds_aggregate"]: {
		aggregate?: ModelTypes["match_map_rounds_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["match_map_rounds"]>
};
	["match_map_rounds_aggregate_bool_exp"]: {
	count?: ModelTypes["match_map_rounds_aggregate_bool_exp_count"] | undefined
};
	["match_map_rounds_aggregate_bool_exp_count"]: {
	arguments?: Array<ModelTypes["match_map_rounds_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: ModelTypes["match_map_rounds_bool_exp"] | undefined,
	predicate: ModelTypes["Int_comparison_exp"]
};
	/** aggregate fields of "match_map_rounds" */
["match_map_rounds_aggregate_fields"]: {
		avg?: ModelTypes["match_map_rounds_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["match_map_rounds_max_fields"] | undefined,
	min?: ModelTypes["match_map_rounds_min_fields"] | undefined,
	stddev?: ModelTypes["match_map_rounds_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["match_map_rounds_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["match_map_rounds_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["match_map_rounds_sum_fields"] | undefined,
	var_pop?: ModelTypes["match_map_rounds_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["match_map_rounds_var_samp_fields"] | undefined,
	variance?: ModelTypes["match_map_rounds_variance_fields"] | undefined
};
	/** order by aggregate values of table "match_map_rounds" */
["match_map_rounds_aggregate_order_by"]: {
	avg?: ModelTypes["match_map_rounds_avg_order_by"] | undefined,
	count?: ModelTypes["order_by"] | undefined,
	max?: ModelTypes["match_map_rounds_max_order_by"] | undefined,
	min?: ModelTypes["match_map_rounds_min_order_by"] | undefined,
	stddev?: ModelTypes["match_map_rounds_stddev_order_by"] | undefined,
	stddev_pop?: ModelTypes["match_map_rounds_stddev_pop_order_by"] | undefined,
	stddev_samp?: ModelTypes["match_map_rounds_stddev_samp_order_by"] | undefined,
	sum?: ModelTypes["match_map_rounds_sum_order_by"] | undefined,
	var_pop?: ModelTypes["match_map_rounds_var_pop_order_by"] | undefined,
	var_samp?: ModelTypes["match_map_rounds_var_samp_order_by"] | undefined,
	variance?: ModelTypes["match_map_rounds_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "match_map_rounds" */
["match_map_rounds_arr_rel_insert_input"]: {
	data: Array<ModelTypes["match_map_rounds_insert_input"]>,
	/** upsert condition */
	on_conflict?: ModelTypes["match_map_rounds_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["match_map_rounds_avg_fields"]: {
		lineup_1_money?: number | undefined,
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	lineup_2_money?: number | undefined,
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	round?: number | undefined
};
	/** order by avg() on columns of table "match_map_rounds" */
["match_map_rounds_avg_order_by"]: {
	lineup_1_money?: ModelTypes["order_by"] | undefined,
	lineup_1_score?: ModelTypes["order_by"] | undefined,
	lineup_1_timeouts_available?: ModelTypes["order_by"] | undefined,
	lineup_2_money?: ModelTypes["order_by"] | undefined,
	lineup_2_score?: ModelTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "match_map_rounds". All fields are combined with a logical 'AND'. */
["match_map_rounds_bool_exp"]: {
	_and?: Array<ModelTypes["match_map_rounds_bool_exp"]> | undefined,
	_not?: ModelTypes["match_map_rounds_bool_exp"] | undefined,
	_or?: Array<ModelTypes["match_map_rounds_bool_exp"]> | undefined,
	backup_file?: ModelTypes["String_comparison_exp"] | undefined,
	id?: ModelTypes["uuid_comparison_exp"] | undefined,
	kills?: ModelTypes["player_kills_bool_exp"] | undefined,
	kills_aggregate?: ModelTypes["player_kills_aggregate_bool_exp"] | undefined,
	lineup_1_money?: ModelTypes["Int_comparison_exp"] | undefined,
	lineup_1_score?: ModelTypes["Int_comparison_exp"] | undefined,
	lineup_1_timeouts_available?: ModelTypes["Int_comparison_exp"] | undefined,
	lineup_2_money?: ModelTypes["Int_comparison_exp"] | undefined,
	lineup_2_score?: ModelTypes["Int_comparison_exp"] | undefined,
	lineup_2_timeouts_available?: ModelTypes["Int_comparison_exp"] | undefined,
	match_map?: ModelTypes["match_maps_bool_exp"] | undefined,
	match_map_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	round?: ModelTypes["Int_comparison_exp"] | undefined,
	time?: ModelTypes["timestamptz_comparison_exp"] | undefined
};
	["match_map_rounds_constraint"]:match_map_rounds_constraint;
	/** input type for incrementing numeric columns in table "match_map_rounds" */
["match_map_rounds_inc_input"]: {
	lineup_1_money?: number | undefined,
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	lineup_2_money?: number | undefined,
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	round?: number | undefined
};
	/** input type for inserting data into table "match_map_rounds" */
["match_map_rounds_insert_input"]: {
	backup_file?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	kills?: ModelTypes["player_kills_arr_rel_insert_input"] | undefined,
	lineup_1_money?: number | undefined,
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	lineup_2_money?: number | undefined,
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	match_map?: ModelTypes["match_maps_obj_rel_insert_input"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	round?: number | undefined,
	time?: ModelTypes["timestamptz"] | undefined
};
	/** aggregate max on columns */
["match_map_rounds_max_fields"]: {
		backup_file?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	lineup_1_money?: number | undefined,
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	lineup_2_money?: number | undefined,
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	round?: number | undefined,
	time?: ModelTypes["timestamptz"] | undefined
};
	/** order by max() on columns of table "match_map_rounds" */
["match_map_rounds_max_order_by"]: {
	backup_file?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	lineup_1_money?: ModelTypes["order_by"] | undefined,
	lineup_1_score?: ModelTypes["order_by"] | undefined,
	lineup_1_timeouts_available?: ModelTypes["order_by"] | undefined,
	lineup_2_money?: ModelTypes["order_by"] | undefined,
	lineup_2_score?: ModelTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: ModelTypes["order_by"] | undefined,
	match_map_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined,
	time?: ModelTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["match_map_rounds_min_fields"]: {
		backup_file?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	lineup_1_money?: number | undefined,
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	lineup_2_money?: number | undefined,
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	round?: number | undefined,
	time?: ModelTypes["timestamptz"] | undefined
};
	/** order by min() on columns of table "match_map_rounds" */
["match_map_rounds_min_order_by"]: {
	backup_file?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	lineup_1_money?: ModelTypes["order_by"] | undefined,
	lineup_1_score?: ModelTypes["order_by"] | undefined,
	lineup_1_timeouts_available?: ModelTypes["order_by"] | undefined,
	lineup_2_money?: ModelTypes["order_by"] | undefined,
	lineup_2_score?: ModelTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: ModelTypes["order_by"] | undefined,
	match_map_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined,
	time?: ModelTypes["order_by"] | undefined
};
	/** response of any mutation on the table "match_map_rounds" */
["match_map_rounds_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["match_map_rounds"]>
};
	/** on_conflict condition type for table "match_map_rounds" */
["match_map_rounds_on_conflict"]: {
	constraint: ModelTypes["match_map_rounds_constraint"],
	update_columns: Array<ModelTypes["match_map_rounds_update_column"]>,
	where?: ModelTypes["match_map_rounds_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "match_map_rounds". */
["match_map_rounds_order_by"]: {
	backup_file?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	kills_aggregate?: ModelTypes["player_kills_aggregate_order_by"] | undefined,
	lineup_1_money?: ModelTypes["order_by"] | undefined,
	lineup_1_score?: ModelTypes["order_by"] | undefined,
	lineup_1_timeouts_available?: ModelTypes["order_by"] | undefined,
	lineup_2_money?: ModelTypes["order_by"] | undefined,
	lineup_2_score?: ModelTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: ModelTypes["order_by"] | undefined,
	match_map?: ModelTypes["match_maps_order_by"] | undefined,
	match_map_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined,
	time?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: match_map_rounds */
["match_map_rounds_pk_columns_input"]: {
	id: ModelTypes["uuid"]
};
	["match_map_rounds_select_column"]:match_map_rounds_select_column;
	/** input type for updating data in table "match_map_rounds" */
["match_map_rounds_set_input"]: {
	backup_file?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	lineup_1_money?: number | undefined,
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	lineup_2_money?: number | undefined,
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	round?: number | undefined,
	time?: ModelTypes["timestamptz"] | undefined
};
	/** aggregate stddev on columns */
["match_map_rounds_stddev_fields"]: {
		lineup_1_money?: number | undefined,
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	lineup_2_money?: number | undefined,
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	round?: number | undefined
};
	/** order by stddev() on columns of table "match_map_rounds" */
["match_map_rounds_stddev_order_by"]: {
	lineup_1_money?: ModelTypes["order_by"] | undefined,
	lineup_1_score?: ModelTypes["order_by"] | undefined,
	lineup_1_timeouts_available?: ModelTypes["order_by"] | undefined,
	lineup_2_money?: ModelTypes["order_by"] | undefined,
	lineup_2_score?: ModelTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["match_map_rounds_stddev_pop_fields"]: {
		lineup_1_money?: number | undefined,
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	lineup_2_money?: number | undefined,
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	round?: number | undefined
};
	/** order by stddev_pop() on columns of table "match_map_rounds" */
["match_map_rounds_stddev_pop_order_by"]: {
	lineup_1_money?: ModelTypes["order_by"] | undefined,
	lineup_1_score?: ModelTypes["order_by"] | undefined,
	lineup_1_timeouts_available?: ModelTypes["order_by"] | undefined,
	lineup_2_money?: ModelTypes["order_by"] | undefined,
	lineup_2_score?: ModelTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["match_map_rounds_stddev_samp_fields"]: {
		lineup_1_money?: number | undefined,
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	lineup_2_money?: number | undefined,
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	round?: number | undefined
};
	/** order by stddev_samp() on columns of table "match_map_rounds" */
["match_map_rounds_stddev_samp_order_by"]: {
	lineup_1_money?: ModelTypes["order_by"] | undefined,
	lineup_1_score?: ModelTypes["order_by"] | undefined,
	lineup_1_timeouts_available?: ModelTypes["order_by"] | undefined,
	lineup_2_money?: ModelTypes["order_by"] | undefined,
	lineup_2_score?: ModelTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "match_map_rounds" */
["match_map_rounds_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["match_map_rounds_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["match_map_rounds_stream_cursor_value_input"]: {
	backup_file?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	lineup_1_money?: number | undefined,
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	lineup_2_money?: number | undefined,
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	round?: number | undefined,
	time?: ModelTypes["timestamptz"] | undefined
};
	/** aggregate sum on columns */
["match_map_rounds_sum_fields"]: {
		lineup_1_money?: number | undefined,
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	lineup_2_money?: number | undefined,
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	round?: number | undefined
};
	/** order by sum() on columns of table "match_map_rounds" */
["match_map_rounds_sum_order_by"]: {
	lineup_1_money?: ModelTypes["order_by"] | undefined,
	lineup_1_score?: ModelTypes["order_by"] | undefined,
	lineup_1_timeouts_available?: ModelTypes["order_by"] | undefined,
	lineup_2_money?: ModelTypes["order_by"] | undefined,
	lineup_2_score?: ModelTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	["match_map_rounds_update_column"]:match_map_rounds_update_column;
	["match_map_rounds_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["match_map_rounds_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["match_map_rounds_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["match_map_rounds_bool_exp"]
};
	/** aggregate var_pop on columns */
["match_map_rounds_var_pop_fields"]: {
		lineup_1_money?: number | undefined,
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	lineup_2_money?: number | undefined,
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	round?: number | undefined
};
	/** order by var_pop() on columns of table "match_map_rounds" */
["match_map_rounds_var_pop_order_by"]: {
	lineup_1_money?: ModelTypes["order_by"] | undefined,
	lineup_1_score?: ModelTypes["order_by"] | undefined,
	lineup_1_timeouts_available?: ModelTypes["order_by"] | undefined,
	lineup_2_money?: ModelTypes["order_by"] | undefined,
	lineup_2_score?: ModelTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["match_map_rounds_var_samp_fields"]: {
		lineup_1_money?: number | undefined,
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	lineup_2_money?: number | undefined,
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	round?: number | undefined
};
	/** order by var_samp() on columns of table "match_map_rounds" */
["match_map_rounds_var_samp_order_by"]: {
	lineup_1_money?: ModelTypes["order_by"] | undefined,
	lineup_1_score?: ModelTypes["order_by"] | undefined,
	lineup_1_timeouts_available?: ModelTypes["order_by"] | undefined,
	lineup_2_money?: ModelTypes["order_by"] | undefined,
	lineup_2_score?: ModelTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["match_map_rounds_variance_fields"]: {
		lineup_1_money?: number | undefined,
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	lineup_2_money?: number | undefined,
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	round?: number | undefined
};
	/** order by variance() on columns of table "match_map_rounds" */
["match_map_rounds_variance_order_by"]: {
	lineup_1_money?: ModelTypes["order_by"] | undefined,
	lineup_1_score?: ModelTypes["order_by"] | undefined,
	lineup_1_timeouts_available?: ModelTypes["order_by"] | undefined,
	lineup_2_money?: ModelTypes["order_by"] | undefined,
	lineup_2_score?: ModelTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** columns and relationships of "match_maps" */
["match_maps"]: {
		created_at: ModelTypes["timestamptz"],
	/** An object relationship */
	e_match_map_status: ModelTypes["e_match_map_status"],
	/** An array relationship */
	flashes: Array<ModelTypes["player_flashes"]>,
	/** An aggregate relationship */
	flashes_aggregate: ModelTypes["player_flashes_aggregate"],
	id: ModelTypes["uuid"],
	/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?: number | undefined,
	lineup_1_side: ModelTypes["e_sides_enum"],
	lineup_1_timeouts_available: number,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?: number | undefined,
	lineup_2_side?: ModelTypes["e_sides_enum"] | undefined,
	lineup_2_timeouts_available: number,
	/** An object relationship */
	map: ModelTypes["maps"],
	map_id: ModelTypes["uuid"],
	/** An object relationship */
	match: ModelTypes["matches"],
	match_id: ModelTypes["uuid"],
	/** An array relationship */
	objectives: Array<ModelTypes["player_objectives"]>,
	/** An aggregate relationship */
	objectives_aggregate: ModelTypes["player_objectives_aggregate"],
	order: number,
	/** An array relationship */
	player_assists: Array<ModelTypes["player_assists"]>,
	/** An aggregate relationship */
	player_assists_aggregate: ModelTypes["player_assists_aggregate"],
	/** An array relationship */
	player_damages: Array<ModelTypes["player_damages"]>,
	/** An aggregate relationship */
	player_damages_aggregate: ModelTypes["player_damages_aggregate"],
	/** An array relationship */
	player_kills: Array<ModelTypes["player_kills"]>,
	/** An aggregate relationship */
	player_kills_aggregate: ModelTypes["player_kills_aggregate"],
	/** An array relationship */
	player_unused_utilities: Array<ModelTypes["player_unused_utility"]>,
	/** An aggregate relationship */
	player_unused_utilities_aggregate: ModelTypes["player_unused_utility_aggregate"],
	/** An array relationship */
	rounds: Array<ModelTypes["match_map_rounds"]>,
	/** An aggregate relationship */
	rounds_aggregate: ModelTypes["match_map_rounds_aggregate"],
	status: ModelTypes["e_match_map_status_enum"],
	/** An array relationship */
	utility: Array<ModelTypes["player_utility"]>,
	/** An aggregate relationship */
	utility_aggregate: ModelTypes["player_utility_aggregate"],
	/** An array relationship */
	vetos: Array<ModelTypes["match_veto_picks"]>,
	/** An aggregate relationship */
	vetos_aggregate: ModelTypes["match_veto_picks_aggregate"]
};
	/** aggregated selection of "match_maps" */
["match_maps_aggregate"]: {
		aggregate?: ModelTypes["match_maps_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["match_maps"]>
};
	["match_maps_aggregate_bool_exp"]: {
	count?: ModelTypes["match_maps_aggregate_bool_exp_count"] | undefined
};
	["match_maps_aggregate_bool_exp_count"]: {
	arguments?: Array<ModelTypes["match_maps_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: ModelTypes["match_maps_bool_exp"] | undefined,
	predicate: ModelTypes["Int_comparison_exp"]
};
	/** aggregate fields of "match_maps" */
["match_maps_aggregate_fields"]: {
		avg?: ModelTypes["match_maps_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["match_maps_max_fields"] | undefined,
	min?: ModelTypes["match_maps_min_fields"] | undefined,
	stddev?: ModelTypes["match_maps_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["match_maps_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["match_maps_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["match_maps_sum_fields"] | undefined,
	var_pop?: ModelTypes["match_maps_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["match_maps_var_samp_fields"] | undefined,
	variance?: ModelTypes["match_maps_variance_fields"] | undefined
};
	/** order by aggregate values of table "match_maps" */
["match_maps_aggregate_order_by"]: {
	avg?: ModelTypes["match_maps_avg_order_by"] | undefined,
	count?: ModelTypes["order_by"] | undefined,
	max?: ModelTypes["match_maps_max_order_by"] | undefined,
	min?: ModelTypes["match_maps_min_order_by"] | undefined,
	stddev?: ModelTypes["match_maps_stddev_order_by"] | undefined,
	stddev_pop?: ModelTypes["match_maps_stddev_pop_order_by"] | undefined,
	stddev_samp?: ModelTypes["match_maps_stddev_samp_order_by"] | undefined,
	sum?: ModelTypes["match_maps_sum_order_by"] | undefined,
	var_pop?: ModelTypes["match_maps_var_pop_order_by"] | undefined,
	var_samp?: ModelTypes["match_maps_var_samp_order_by"] | undefined,
	variance?: ModelTypes["match_maps_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "match_maps" */
["match_maps_arr_rel_insert_input"]: {
	data: Array<ModelTypes["match_maps_insert_input"]>,
	/** upsert condition */
	on_conflict?: ModelTypes["match_maps_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["match_maps_avg_fields"]: {
		/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	order?: number | undefined
};
	/** order by avg() on columns of table "match_maps" */
["match_maps_avg_order_by"]: {
	lineup_1_timeouts_available?: ModelTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: ModelTypes["order_by"] | undefined,
	order?: ModelTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "match_maps". All fields are combined with a logical 'AND'. */
["match_maps_bool_exp"]: {
	_and?: Array<ModelTypes["match_maps_bool_exp"]> | undefined,
	_not?: ModelTypes["match_maps_bool_exp"] | undefined,
	_or?: Array<ModelTypes["match_maps_bool_exp"]> | undefined,
	created_at?: ModelTypes["timestamptz_comparison_exp"] | undefined,
	e_match_map_status?: ModelTypes["e_match_map_status_bool_exp"] | undefined,
	flashes?: ModelTypes["player_flashes_bool_exp"] | undefined,
	flashes_aggregate?: ModelTypes["player_flashes_aggregate_bool_exp"] | undefined,
	id?: ModelTypes["uuid_comparison_exp"] | undefined,
	lineup_1_score?: ModelTypes["Int_comparison_exp"] | undefined,
	lineup_1_side?: ModelTypes["e_sides_enum_comparison_exp"] | undefined,
	lineup_1_timeouts_available?: ModelTypes["Int_comparison_exp"] | undefined,
	lineup_2_score?: ModelTypes["Int_comparison_exp"] | undefined,
	lineup_2_side?: ModelTypes["e_sides_enum_comparison_exp"] | undefined,
	lineup_2_timeouts_available?: ModelTypes["Int_comparison_exp"] | undefined,
	map?: ModelTypes["maps_bool_exp"] | undefined,
	map_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	match?: ModelTypes["matches_bool_exp"] | undefined,
	match_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	objectives?: ModelTypes["player_objectives_bool_exp"] | undefined,
	objectives_aggregate?: ModelTypes["player_objectives_aggregate_bool_exp"] | undefined,
	order?: ModelTypes["Int_comparison_exp"] | undefined,
	player_assists?: ModelTypes["player_assists_bool_exp"] | undefined,
	player_assists_aggregate?: ModelTypes["player_assists_aggregate_bool_exp"] | undefined,
	player_damages?: ModelTypes["player_damages_bool_exp"] | undefined,
	player_damages_aggregate?: ModelTypes["player_damages_aggregate_bool_exp"] | undefined,
	player_kills?: ModelTypes["player_kills_bool_exp"] | undefined,
	player_kills_aggregate?: ModelTypes["player_kills_aggregate_bool_exp"] | undefined,
	player_unused_utilities?: ModelTypes["player_unused_utility_bool_exp"] | undefined,
	player_unused_utilities_aggregate?: ModelTypes["player_unused_utility_aggregate_bool_exp"] | undefined,
	rounds?: ModelTypes["match_map_rounds_bool_exp"] | undefined,
	rounds_aggregate?: ModelTypes["match_map_rounds_aggregate_bool_exp"] | undefined,
	status?: ModelTypes["e_match_map_status_enum_comparison_exp"] | undefined,
	utility?: ModelTypes["player_utility_bool_exp"] | undefined,
	utility_aggregate?: ModelTypes["player_utility_aggregate_bool_exp"] | undefined,
	vetos?: ModelTypes["match_veto_picks_bool_exp"] | undefined,
	vetos_aggregate?: ModelTypes["match_veto_picks_aggregate_bool_exp"] | undefined
};
	["match_maps_constraint"]:match_maps_constraint;
	/** input type for incrementing numeric columns in table "match_maps" */
["match_maps_inc_input"]: {
	lineup_1_timeouts_available?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	order?: number | undefined
};
	/** input type for inserting data into table "match_maps" */
["match_maps_insert_input"]: {
	created_at?: ModelTypes["timestamptz"] | undefined,
	e_match_map_status?: ModelTypes["e_match_map_status_obj_rel_insert_input"] | undefined,
	flashes?: ModelTypes["player_flashes_arr_rel_insert_input"] | undefined,
	id?: ModelTypes["uuid"] | undefined,
	lineup_1_side?: ModelTypes["e_sides_enum"] | undefined,
	lineup_1_timeouts_available?: number | undefined,
	lineup_2_side?: ModelTypes["e_sides_enum"] | undefined,
	lineup_2_timeouts_available?: number | undefined,
	map?: ModelTypes["maps_obj_rel_insert_input"] | undefined,
	map_id?: ModelTypes["uuid"] | undefined,
	match?: ModelTypes["matches_obj_rel_insert_input"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	objectives?: ModelTypes["player_objectives_arr_rel_insert_input"] | undefined,
	order?: number | undefined,
	player_assists?: ModelTypes["player_assists_arr_rel_insert_input"] | undefined,
	player_damages?: ModelTypes["player_damages_arr_rel_insert_input"] | undefined,
	player_kills?: ModelTypes["player_kills_arr_rel_insert_input"] | undefined,
	player_unused_utilities?: ModelTypes["player_unused_utility_arr_rel_insert_input"] | undefined,
	rounds?: ModelTypes["match_map_rounds_arr_rel_insert_input"] | undefined,
	status?: ModelTypes["e_match_map_status_enum"] | undefined,
	utility?: ModelTypes["player_utility_arr_rel_insert_input"] | undefined,
	vetos?: ModelTypes["match_veto_picks_arr_rel_insert_input"] | undefined
};
	/** aggregate max on columns */
["match_maps_max_fields"]: {
		created_at?: ModelTypes["timestamptz"] | undefined,
	id?: ModelTypes["uuid"] | undefined,
	/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	map_id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	order?: number | undefined
};
	/** order by max() on columns of table "match_maps" */
["match_maps_max_order_by"]: {
	created_at?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	lineup_1_timeouts_available?: ModelTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: ModelTypes["order_by"] | undefined,
	map_id?: ModelTypes["order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	order?: ModelTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["match_maps_min_fields"]: {
		created_at?: ModelTypes["timestamptz"] | undefined,
	id?: ModelTypes["uuid"] | undefined,
	/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	map_id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	order?: number | undefined
};
	/** order by min() on columns of table "match_maps" */
["match_maps_min_order_by"]: {
	created_at?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	lineup_1_timeouts_available?: ModelTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: ModelTypes["order_by"] | undefined,
	map_id?: ModelTypes["order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	order?: ModelTypes["order_by"] | undefined
};
	/** response of any mutation on the table "match_maps" */
["match_maps_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["match_maps"]>
};
	/** input type for inserting object relation for remote table "match_maps" */
["match_maps_obj_rel_insert_input"]: {
	data: ModelTypes["match_maps_insert_input"],
	/** upsert condition */
	on_conflict?: ModelTypes["match_maps_on_conflict"] | undefined
};
	/** on_conflict condition type for table "match_maps" */
["match_maps_on_conflict"]: {
	constraint: ModelTypes["match_maps_constraint"],
	update_columns: Array<ModelTypes["match_maps_update_column"]>,
	where?: ModelTypes["match_maps_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "match_maps". */
["match_maps_order_by"]: {
	created_at?: ModelTypes["order_by"] | undefined,
	e_match_map_status?: ModelTypes["e_match_map_status_order_by"] | undefined,
	flashes_aggregate?: ModelTypes["player_flashes_aggregate_order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	lineup_1_score?: ModelTypes["order_by"] | undefined,
	lineup_1_side?: ModelTypes["order_by"] | undefined,
	lineup_1_timeouts_available?: ModelTypes["order_by"] | undefined,
	lineup_2_score?: ModelTypes["order_by"] | undefined,
	lineup_2_side?: ModelTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: ModelTypes["order_by"] | undefined,
	map?: ModelTypes["maps_order_by"] | undefined,
	map_id?: ModelTypes["order_by"] | undefined,
	match?: ModelTypes["matches_order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	objectives_aggregate?: ModelTypes["player_objectives_aggregate_order_by"] | undefined,
	order?: ModelTypes["order_by"] | undefined,
	player_assists_aggregate?: ModelTypes["player_assists_aggregate_order_by"] | undefined,
	player_damages_aggregate?: ModelTypes["player_damages_aggregate_order_by"] | undefined,
	player_kills_aggregate?: ModelTypes["player_kills_aggregate_order_by"] | undefined,
	player_unused_utilities_aggregate?: ModelTypes["player_unused_utility_aggregate_order_by"] | undefined,
	rounds_aggregate?: ModelTypes["match_map_rounds_aggregate_order_by"] | undefined,
	status?: ModelTypes["order_by"] | undefined,
	utility_aggregate?: ModelTypes["player_utility_aggregate_order_by"] | undefined,
	vetos_aggregate?: ModelTypes["match_veto_picks_aggregate_order_by"] | undefined
};
	/** primary key columns input for table: match_maps */
["match_maps_pk_columns_input"]: {
	id: ModelTypes["uuid"]
};
	["match_maps_select_column"]:match_maps_select_column;
	/** input type for updating data in table "match_maps" */
["match_maps_set_input"]: {
	created_at?: ModelTypes["timestamptz"] | undefined,
	id?: ModelTypes["uuid"] | undefined,
	lineup_1_side?: ModelTypes["e_sides_enum"] | undefined,
	lineup_1_timeouts_available?: number | undefined,
	lineup_2_side?: ModelTypes["e_sides_enum"] | undefined,
	lineup_2_timeouts_available?: number | undefined,
	map_id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	order?: number | undefined,
	status?: ModelTypes["e_match_map_status_enum"] | undefined
};
	/** aggregate stddev on columns */
["match_maps_stddev_fields"]: {
		/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	order?: number | undefined
};
	/** order by stddev() on columns of table "match_maps" */
["match_maps_stddev_order_by"]: {
	lineup_1_timeouts_available?: ModelTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: ModelTypes["order_by"] | undefined,
	order?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["match_maps_stddev_pop_fields"]: {
		/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	order?: number | undefined
};
	/** order by stddev_pop() on columns of table "match_maps" */
["match_maps_stddev_pop_order_by"]: {
	lineup_1_timeouts_available?: ModelTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: ModelTypes["order_by"] | undefined,
	order?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["match_maps_stddev_samp_fields"]: {
		/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	order?: number | undefined
};
	/** order by stddev_samp() on columns of table "match_maps" */
["match_maps_stddev_samp_order_by"]: {
	lineup_1_timeouts_available?: ModelTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: ModelTypes["order_by"] | undefined,
	order?: ModelTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "match_maps" */
["match_maps_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["match_maps_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["match_maps_stream_cursor_value_input"]: {
	created_at?: ModelTypes["timestamptz"] | undefined,
	id?: ModelTypes["uuid"] | undefined,
	lineup_1_side?: ModelTypes["e_sides_enum"] | undefined,
	lineup_1_timeouts_available?: number | undefined,
	lineup_2_side?: ModelTypes["e_sides_enum"] | undefined,
	lineup_2_timeouts_available?: number | undefined,
	map_id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	order?: number | undefined,
	status?: ModelTypes["e_match_map_status_enum"] | undefined
};
	/** aggregate sum on columns */
["match_maps_sum_fields"]: {
		/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	order?: number | undefined
};
	/** order by sum() on columns of table "match_maps" */
["match_maps_sum_order_by"]: {
	lineup_1_timeouts_available?: ModelTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: ModelTypes["order_by"] | undefined,
	order?: ModelTypes["order_by"] | undefined
};
	["match_maps_update_column"]:match_maps_update_column;
	["match_maps_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["match_maps_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["match_maps_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["match_maps_bool_exp"]
};
	/** aggregate var_pop on columns */
["match_maps_var_pop_fields"]: {
		/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	order?: number | undefined
};
	/** order by var_pop() on columns of table "match_maps" */
["match_maps_var_pop_order_by"]: {
	lineup_1_timeouts_available?: ModelTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: ModelTypes["order_by"] | undefined,
	order?: ModelTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["match_maps_var_samp_fields"]: {
		/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	order?: number | undefined
};
	/** order by var_samp() on columns of table "match_maps" */
["match_maps_var_samp_order_by"]: {
	lineup_1_timeouts_available?: ModelTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: ModelTypes["order_by"] | undefined,
	order?: ModelTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["match_maps_variance_fields"]: {
		/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	order?: number | undefined
};
	/** order by variance() on columns of table "match_maps" */
["match_maps_variance_order_by"]: {
	lineup_1_timeouts_available?: ModelTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: ModelTypes["order_by"] | undefined,
	order?: ModelTypes["order_by"] | undefined
};
	/** columns and relationships of "match_veto_picks" */
["match_veto_picks"]: {
		created_at: ModelTypes["timestamptz"],
	id: ModelTypes["uuid"],
	/** An object relationship */
	map: ModelTypes["maps"],
	map_id: ModelTypes["uuid"],
	/** An object relationship */
	match: ModelTypes["matches"],
	match_id: ModelTypes["uuid"],
	/** An object relationship */
	match_lineup: ModelTypes["match_lineups"],
	match_lineup_id: ModelTypes["uuid"],
	side?: string | undefined,
	type: ModelTypes["e_veto_pick_types_enum"]
};
	/** aggregated selection of "match_veto_picks" */
["match_veto_picks_aggregate"]: {
		aggregate?: ModelTypes["match_veto_picks_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["match_veto_picks"]>
};
	["match_veto_picks_aggregate_bool_exp"]: {
	count?: ModelTypes["match_veto_picks_aggregate_bool_exp_count"] | undefined
};
	["match_veto_picks_aggregate_bool_exp_count"]: {
	arguments?: Array<ModelTypes["match_veto_picks_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: ModelTypes["match_veto_picks_bool_exp"] | undefined,
	predicate: ModelTypes["Int_comparison_exp"]
};
	/** aggregate fields of "match_veto_picks" */
["match_veto_picks_aggregate_fields"]: {
		count: number,
	max?: ModelTypes["match_veto_picks_max_fields"] | undefined,
	min?: ModelTypes["match_veto_picks_min_fields"] | undefined
};
	/** order by aggregate values of table "match_veto_picks" */
["match_veto_picks_aggregate_order_by"]: {
	count?: ModelTypes["order_by"] | undefined,
	max?: ModelTypes["match_veto_picks_max_order_by"] | undefined,
	min?: ModelTypes["match_veto_picks_min_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "match_veto_picks" */
["match_veto_picks_arr_rel_insert_input"]: {
	data: Array<ModelTypes["match_veto_picks_insert_input"]>,
	/** upsert condition */
	on_conflict?: ModelTypes["match_veto_picks_on_conflict"] | undefined
};
	/** Boolean expression to filter rows from the table "match_veto_picks". All fields are combined with a logical 'AND'. */
["match_veto_picks_bool_exp"]: {
	_and?: Array<ModelTypes["match_veto_picks_bool_exp"]> | undefined,
	_not?: ModelTypes["match_veto_picks_bool_exp"] | undefined,
	_or?: Array<ModelTypes["match_veto_picks_bool_exp"]> | undefined,
	created_at?: ModelTypes["timestamptz_comparison_exp"] | undefined,
	id?: ModelTypes["uuid_comparison_exp"] | undefined,
	map?: ModelTypes["maps_bool_exp"] | undefined,
	map_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	match?: ModelTypes["matches_bool_exp"] | undefined,
	match_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	match_lineup?: ModelTypes["match_lineups_bool_exp"] | undefined,
	match_lineup_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	side?: ModelTypes["String_comparison_exp"] | undefined,
	type?: ModelTypes["e_veto_pick_types_enum_comparison_exp"] | undefined
};
	["match_veto_picks_constraint"]:match_veto_picks_constraint;
	/** input type for inserting data into table "match_veto_picks" */
["match_veto_picks_insert_input"]: {
	created_at?: ModelTypes["timestamptz"] | undefined,
	id?: ModelTypes["uuid"] | undefined,
	map?: ModelTypes["maps_obj_rel_insert_input"] | undefined,
	map_id?: ModelTypes["uuid"] | undefined,
	match?: ModelTypes["matches_obj_rel_insert_input"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_lineup?: ModelTypes["match_lineups_obj_rel_insert_input"] | undefined,
	match_lineup_id?: ModelTypes["uuid"] | undefined,
	side?: string | undefined,
	type?: ModelTypes["e_veto_pick_types_enum"] | undefined
};
	/** aggregate max on columns */
["match_veto_picks_max_fields"]: {
		created_at?: ModelTypes["timestamptz"] | undefined,
	id?: ModelTypes["uuid"] | undefined,
	map_id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_lineup_id?: ModelTypes["uuid"] | undefined,
	side?: string | undefined
};
	/** order by max() on columns of table "match_veto_picks" */
["match_veto_picks_max_order_by"]: {
	created_at?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	map_id?: ModelTypes["order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	match_lineup_id?: ModelTypes["order_by"] | undefined,
	side?: ModelTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["match_veto_picks_min_fields"]: {
		created_at?: ModelTypes["timestamptz"] | undefined,
	id?: ModelTypes["uuid"] | undefined,
	map_id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_lineup_id?: ModelTypes["uuid"] | undefined,
	side?: string | undefined
};
	/** order by min() on columns of table "match_veto_picks" */
["match_veto_picks_min_order_by"]: {
	created_at?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	map_id?: ModelTypes["order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	match_lineup_id?: ModelTypes["order_by"] | undefined,
	side?: ModelTypes["order_by"] | undefined
};
	/** response of any mutation on the table "match_veto_picks" */
["match_veto_picks_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["match_veto_picks"]>
};
	/** on_conflict condition type for table "match_veto_picks" */
["match_veto_picks_on_conflict"]: {
	constraint: ModelTypes["match_veto_picks_constraint"],
	update_columns: Array<ModelTypes["match_veto_picks_update_column"]>,
	where?: ModelTypes["match_veto_picks_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "match_veto_picks". */
["match_veto_picks_order_by"]: {
	created_at?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	map?: ModelTypes["maps_order_by"] | undefined,
	map_id?: ModelTypes["order_by"] | undefined,
	match?: ModelTypes["matches_order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	match_lineup?: ModelTypes["match_lineups_order_by"] | undefined,
	match_lineup_id?: ModelTypes["order_by"] | undefined,
	side?: ModelTypes["order_by"] | undefined,
	type?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: match_veto_picks */
["match_veto_picks_pk_columns_input"]: {
	id: ModelTypes["uuid"]
};
	["match_veto_picks_select_column"]:match_veto_picks_select_column;
	/** input type for updating data in table "match_veto_picks" */
["match_veto_picks_set_input"]: {
	created_at?: ModelTypes["timestamptz"] | undefined,
	id?: ModelTypes["uuid"] | undefined,
	map_id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_lineup_id?: ModelTypes["uuid"] | undefined,
	side?: string | undefined,
	type?: ModelTypes["e_veto_pick_types_enum"] | undefined
};
	/** Streaming cursor of the table "match_veto_picks" */
["match_veto_picks_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["match_veto_picks_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["match_veto_picks_stream_cursor_value_input"]: {
	created_at?: ModelTypes["timestamptz"] | undefined,
	id?: ModelTypes["uuid"] | undefined,
	map_id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_lineup_id?: ModelTypes["uuid"] | undefined,
	side?: string | undefined,
	type?: ModelTypes["e_veto_pick_types_enum"] | undefined
};
	["match_veto_picks_update_column"]:match_veto_picks_update_column;
	["match_veto_picks_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["match_veto_picks_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["match_veto_picks_bool_exp"]
};
	/** columns and relationships of "matches" */
["matches"]: {
		best_of: number,
	coaches: boolean,
	/** A computed field, executes function "get_match_connection_link" */
	connection_link?: string | undefined,
	/** A computed field, executes function "get_match_connection_string" */
	connection_string?: string | undefined,
	created_at: ModelTypes["timestamptz"],
	/** A computed field, executes function "get_current_match_map" */
	current_match_map_id?: ModelTypes["uuid"] | undefined,
	/** An object relationship */
	e_match_status: ModelTypes["e_match_status"],
	/** An object relationship */
	e_match_type: ModelTypes["e_match_types"],
	id: ModelTypes["uuid"],
	/** A computed field, executes function "is_match_server_available" */
	is_match_server_available?: boolean | undefined,
	knife_round: boolean,
	label?: string | undefined,
	/** A computed field, executes function "get_match_lineup_1_id" */
	lineup_1_id?: string | undefined,
	/** A computed field, executes function "get_match_lineup_2_id" */
	lineup_2_id?: string | undefined,
	/** An array relationship */
	lineups: Array<ModelTypes["match_lineups"]>,
	/** An aggregate relationship */
	lineups_aggregate: ModelTypes["match_lineups_aggregate"],
	/** An object relationship */
	map_pool?: ModelTypes["map_pools"] | undefined,
	map_veto: boolean,
	/** An array relationship */
	match_maps: Array<ModelTypes["match_maps"]>,
	/** An aggregate relationship */
	match_maps_aggregate: ModelTypes["match_maps_aggregate"],
	match_pool_id?: ModelTypes["uuid"] | undefined,
	mr: number,
	number_of_substitutes: number,
	/** An object relationship */
	organizer?: ModelTypes["players"] | undefined,
	organizer_steam_id?: ModelTypes["bigint"] | undefined,
	overtime: boolean,
	password: string,
	/** An array relationship */
	player_assists: Array<ModelTypes["player_assists"]>,
	/** An aggregate relationship */
	player_assists_aggregate: ModelTypes["player_assists_aggregate"],
	/** An array relationship */
	player_damages: Array<ModelTypes["player_damages"]>,
	/** An aggregate relationship */
	player_damages_aggregate: ModelTypes["player_damages_aggregate"],
	/** An array relationship */
	player_flashes: Array<ModelTypes["player_flashes"]>,
	/** An aggregate relationship */
	player_flashes_aggregate: ModelTypes["player_flashes_aggregate"],
	/** An array relationship */
	player_kills: Array<ModelTypes["player_kills"]>,
	/** An aggregate relationship */
	player_kills_aggregate: ModelTypes["player_kills_aggregate"],
	/** An array relationship */
	player_objectives: Array<ModelTypes["player_objectives"]>,
	/** An aggregate relationship */
	player_objectives_aggregate: ModelTypes["player_objectives_aggregate"],
	/** An array relationship */
	player_unused_utilities: Array<ModelTypes["player_unused_utility"]>,
	/** An aggregate relationship */
	player_unused_utilities_aggregate: ModelTypes["player_unused_utility_aggregate"],
	/** An array relationship */
	player_utility: Array<ModelTypes["player_utility"]>,
	/** An aggregate relationship */
	player_utility_aggregate: ModelTypes["player_utility_aggregate"],
	scheduled_at?: ModelTypes["date"] | undefined,
	/** An object relationship */
	server?: ModelTypes["servers"] | undefined,
	server_id?: ModelTypes["uuid"] | undefined,
	status: ModelTypes["e_match_status_enum"],
	/** A computed field, executes function "get_match_teams" */
	teams?: Array<ModelTypes["teams"]> | undefined,
	tech_timeout_setting: ModelTypes["e_timeout_settings_enum"],
	timeout_setting: ModelTypes["e_timeout_settings_enum"],
	/** A computed field, executes function "get_match_tv_connection_link" */
	tv_connection_link?: string | undefined,
	/** A computed field, executes function "get_match_tv_connection_string" */
	tv_connection_string?: string | undefined,
	type: ModelTypes["e_match_types_enum"],
	updated_at: ModelTypes["timestamptz"],
	/** A computed field, executes function "get_veto_picking_lineup_id" */
	veto_picking_lineup_id?: ModelTypes["uuid"] | undefined,
	/** An array relationship */
	veto_picks: Array<ModelTypes["match_veto_picks"]>,
	/** An aggregate relationship */
	veto_picks_aggregate: ModelTypes["match_veto_picks_aggregate"]
};
	/** aggregated selection of "matches" */
["matches_aggregate"]: {
		aggregate?: ModelTypes["matches_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["matches"]>
};
	["matches_aggregate_bool_exp"]: {
	bool_and?: ModelTypes["matches_aggregate_bool_exp_bool_and"] | undefined,
	bool_or?: ModelTypes["matches_aggregate_bool_exp_bool_or"] | undefined,
	count?: ModelTypes["matches_aggregate_bool_exp_count"] | undefined
};
	["matches_aggregate_bool_exp_bool_and"]: {
	arguments: ModelTypes["matches_select_column_matches_aggregate_bool_exp_bool_and_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: ModelTypes["matches_bool_exp"] | undefined,
	predicate: ModelTypes["Boolean_comparison_exp"]
};
	["matches_aggregate_bool_exp_bool_or"]: {
	arguments: ModelTypes["matches_select_column_matches_aggregate_bool_exp_bool_or_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: ModelTypes["matches_bool_exp"] | undefined,
	predicate: ModelTypes["Boolean_comparison_exp"]
};
	["matches_aggregate_bool_exp_count"]: {
	arguments?: Array<ModelTypes["matches_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: ModelTypes["matches_bool_exp"] | undefined,
	predicate: ModelTypes["Int_comparison_exp"]
};
	/** aggregate fields of "matches" */
["matches_aggregate_fields"]: {
		avg?: ModelTypes["matches_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["matches_max_fields"] | undefined,
	min?: ModelTypes["matches_min_fields"] | undefined,
	stddev?: ModelTypes["matches_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["matches_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["matches_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["matches_sum_fields"] | undefined,
	var_pop?: ModelTypes["matches_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["matches_var_samp_fields"] | undefined,
	variance?: ModelTypes["matches_variance_fields"] | undefined
};
	/** order by aggregate values of table "matches" */
["matches_aggregate_order_by"]: {
	avg?: ModelTypes["matches_avg_order_by"] | undefined,
	count?: ModelTypes["order_by"] | undefined,
	max?: ModelTypes["matches_max_order_by"] | undefined,
	min?: ModelTypes["matches_min_order_by"] | undefined,
	stddev?: ModelTypes["matches_stddev_order_by"] | undefined,
	stddev_pop?: ModelTypes["matches_stddev_pop_order_by"] | undefined,
	stddev_samp?: ModelTypes["matches_stddev_samp_order_by"] | undefined,
	sum?: ModelTypes["matches_sum_order_by"] | undefined,
	var_pop?: ModelTypes["matches_var_pop_order_by"] | undefined,
	var_samp?: ModelTypes["matches_var_samp_order_by"] | undefined,
	variance?: ModelTypes["matches_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "matches" */
["matches_arr_rel_insert_input"]: {
	data: Array<ModelTypes["matches_insert_input"]>,
	/** upsert condition */
	on_conflict?: ModelTypes["matches_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["matches_avg_fields"]: {
		best_of?: number | undefined,
	mr?: number | undefined,
	number_of_substitutes?: number | undefined,
	organizer_steam_id?: number | undefined
};
	/** order by avg() on columns of table "matches" */
["matches_avg_order_by"]: {
	best_of?: ModelTypes["order_by"] | undefined,
	mr?: ModelTypes["order_by"] | undefined,
	number_of_substitutes?: ModelTypes["order_by"] | undefined,
	organizer_steam_id?: ModelTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "matches". All fields are combined with a logical 'AND'. */
["matches_bool_exp"]: {
	_and?: Array<ModelTypes["matches_bool_exp"]> | undefined,
	_not?: ModelTypes["matches_bool_exp"] | undefined,
	_or?: Array<ModelTypes["matches_bool_exp"]> | undefined,
	best_of?: ModelTypes["Int_comparison_exp"] | undefined,
	coaches?: ModelTypes["Boolean_comparison_exp"] | undefined,
	connection_link?: ModelTypes["String_comparison_exp"] | undefined,
	connection_string?: ModelTypes["String_comparison_exp"] | undefined,
	created_at?: ModelTypes["timestamptz_comparison_exp"] | undefined,
	current_match_map_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	e_match_status?: ModelTypes["e_match_status_bool_exp"] | undefined,
	e_match_type?: ModelTypes["e_match_types_bool_exp"] | undefined,
	id?: ModelTypes["uuid_comparison_exp"] | undefined,
	is_match_server_available?: ModelTypes["Boolean_comparison_exp"] | undefined,
	knife_round?: ModelTypes["Boolean_comparison_exp"] | undefined,
	label?: ModelTypes["String_comparison_exp"] | undefined,
	lineup_1_id?: ModelTypes["String_comparison_exp"] | undefined,
	lineup_2_id?: ModelTypes["String_comparison_exp"] | undefined,
	lineups?: ModelTypes["match_lineups_bool_exp"] | undefined,
	lineups_aggregate?: ModelTypes["match_lineups_aggregate_bool_exp"] | undefined,
	map_pool?: ModelTypes["map_pools_bool_exp"] | undefined,
	map_veto?: ModelTypes["Boolean_comparison_exp"] | undefined,
	match_maps?: ModelTypes["match_maps_bool_exp"] | undefined,
	match_maps_aggregate?: ModelTypes["match_maps_aggregate_bool_exp"] | undefined,
	match_pool_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	mr?: ModelTypes["Int_comparison_exp"] | undefined,
	number_of_substitutes?: ModelTypes["Int_comparison_exp"] | undefined,
	organizer?: ModelTypes["players_bool_exp"] | undefined,
	organizer_steam_id?: ModelTypes["bigint_comparison_exp"] | undefined,
	overtime?: ModelTypes["Boolean_comparison_exp"] | undefined,
	password?: ModelTypes["String_comparison_exp"] | undefined,
	player_assists?: ModelTypes["player_assists_bool_exp"] | undefined,
	player_assists_aggregate?: ModelTypes["player_assists_aggregate_bool_exp"] | undefined,
	player_damages?: ModelTypes["player_damages_bool_exp"] | undefined,
	player_damages_aggregate?: ModelTypes["player_damages_aggregate_bool_exp"] | undefined,
	player_flashes?: ModelTypes["player_flashes_bool_exp"] | undefined,
	player_flashes_aggregate?: ModelTypes["player_flashes_aggregate_bool_exp"] | undefined,
	player_kills?: ModelTypes["player_kills_bool_exp"] | undefined,
	player_kills_aggregate?: ModelTypes["player_kills_aggregate_bool_exp"] | undefined,
	player_objectives?: ModelTypes["player_objectives_bool_exp"] | undefined,
	player_objectives_aggregate?: ModelTypes["player_objectives_aggregate_bool_exp"] | undefined,
	player_unused_utilities?: ModelTypes["player_unused_utility_bool_exp"] | undefined,
	player_unused_utilities_aggregate?: ModelTypes["player_unused_utility_aggregate_bool_exp"] | undefined,
	player_utility?: ModelTypes["player_utility_bool_exp"] | undefined,
	player_utility_aggregate?: ModelTypes["player_utility_aggregate_bool_exp"] | undefined,
	scheduled_at?: ModelTypes["date_comparison_exp"] | undefined,
	server?: ModelTypes["servers_bool_exp"] | undefined,
	server_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	status?: ModelTypes["e_match_status_enum_comparison_exp"] | undefined,
	teams?: ModelTypes["teams_bool_exp"] | undefined,
	tech_timeout_setting?: ModelTypes["e_timeout_settings_enum_comparison_exp"] | undefined,
	timeout_setting?: ModelTypes["e_timeout_settings_enum_comparison_exp"] | undefined,
	tv_connection_link?: ModelTypes["String_comparison_exp"] | undefined,
	tv_connection_string?: ModelTypes["String_comparison_exp"] | undefined,
	type?: ModelTypes["e_match_types_enum_comparison_exp"] | undefined,
	updated_at?: ModelTypes["timestamptz_comparison_exp"] | undefined,
	veto_picking_lineup_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	veto_picks?: ModelTypes["match_veto_picks_bool_exp"] | undefined,
	veto_picks_aggregate?: ModelTypes["match_veto_picks_aggregate_bool_exp"] | undefined
};
	["matches_constraint"]:matches_constraint;
	/** input type for incrementing numeric columns in table "matches" */
["matches_inc_input"]: {
	best_of?: number | undefined,
	mr?: number | undefined,
	number_of_substitutes?: number | undefined,
	organizer_steam_id?: ModelTypes["bigint"] | undefined
};
	/** input type for inserting data into table "matches" */
["matches_insert_input"]: {
	best_of?: number | undefined,
	coaches?: boolean | undefined,
	created_at?: ModelTypes["timestamptz"] | undefined,
	e_match_status?: ModelTypes["e_match_status_obj_rel_insert_input"] | undefined,
	e_match_type?: ModelTypes["e_match_types_obj_rel_insert_input"] | undefined,
	id?: ModelTypes["uuid"] | undefined,
	knife_round?: boolean | undefined,
	label?: string | undefined,
	lineups?: ModelTypes["match_lineups_arr_rel_insert_input"] | undefined,
	map_pool?: ModelTypes["map_pools_obj_rel_insert_input"] | undefined,
	map_veto?: boolean | undefined,
	match_maps?: ModelTypes["match_maps_arr_rel_insert_input"] | undefined,
	match_pool_id?: ModelTypes["uuid"] | undefined,
	mr?: number | undefined,
	number_of_substitutes?: number | undefined,
	organizer?: ModelTypes["players_obj_rel_insert_input"] | undefined,
	organizer_steam_id?: ModelTypes["bigint"] | undefined,
	overtime?: boolean | undefined,
	password?: string | undefined,
	player_assists?: ModelTypes["player_assists_arr_rel_insert_input"] | undefined,
	player_damages?: ModelTypes["player_damages_arr_rel_insert_input"] | undefined,
	player_flashes?: ModelTypes["player_flashes_arr_rel_insert_input"] | undefined,
	player_kills?: ModelTypes["player_kills_arr_rel_insert_input"] | undefined,
	player_objectives?: ModelTypes["player_objectives_arr_rel_insert_input"] | undefined,
	player_unused_utilities?: ModelTypes["player_unused_utility_arr_rel_insert_input"] | undefined,
	player_utility?: ModelTypes["player_utility_arr_rel_insert_input"] | undefined,
	scheduled_at?: ModelTypes["date"] | undefined,
	server?: ModelTypes["servers_obj_rel_insert_input"] | undefined,
	server_id?: ModelTypes["uuid"] | undefined,
	status?: ModelTypes["e_match_status_enum"] | undefined,
	tech_timeout_setting?: ModelTypes["e_timeout_settings_enum"] | undefined,
	timeout_setting?: ModelTypes["e_timeout_settings_enum"] | undefined,
	type?: ModelTypes["e_match_types_enum"] | undefined,
	updated_at?: ModelTypes["timestamptz"] | undefined,
	veto_picks?: ModelTypes["match_veto_picks_arr_rel_insert_input"] | undefined
};
	/** aggregate max on columns */
["matches_max_fields"]: {
		best_of?: number | undefined,
	/** A computed field, executes function "get_match_connection_link" */
	connection_link?: string | undefined,
	/** A computed field, executes function "get_match_connection_string" */
	connection_string?: string | undefined,
	created_at?: ModelTypes["timestamptz"] | undefined,
	/** A computed field, executes function "get_current_match_map" */
	current_match_map_id?: ModelTypes["uuid"] | undefined,
	id?: ModelTypes["uuid"] | undefined,
	label?: string | undefined,
	/** A computed field, executes function "get_match_lineup_1_id" */
	lineup_1_id?: string | undefined,
	/** A computed field, executes function "get_match_lineup_2_id" */
	lineup_2_id?: string | undefined,
	match_pool_id?: ModelTypes["uuid"] | undefined,
	mr?: number | undefined,
	number_of_substitutes?: number | undefined,
	organizer_steam_id?: ModelTypes["bigint"] | undefined,
	password?: string | undefined,
	scheduled_at?: ModelTypes["date"] | undefined,
	server_id?: ModelTypes["uuid"] | undefined,
	/** A computed field, executes function "get_match_tv_connection_link" */
	tv_connection_link?: string | undefined,
	/** A computed field, executes function "get_match_tv_connection_string" */
	tv_connection_string?: string | undefined,
	updated_at?: ModelTypes["timestamptz"] | undefined,
	/** A computed field, executes function "get_veto_picking_lineup_id" */
	veto_picking_lineup_id?: ModelTypes["uuid"] | undefined
};
	/** order by max() on columns of table "matches" */
["matches_max_order_by"]: {
	best_of?: ModelTypes["order_by"] | undefined,
	created_at?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	label?: ModelTypes["order_by"] | undefined,
	match_pool_id?: ModelTypes["order_by"] | undefined,
	mr?: ModelTypes["order_by"] | undefined,
	number_of_substitutes?: ModelTypes["order_by"] | undefined,
	organizer_steam_id?: ModelTypes["order_by"] | undefined,
	password?: ModelTypes["order_by"] | undefined,
	scheduled_at?: ModelTypes["order_by"] | undefined,
	server_id?: ModelTypes["order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["matches_min_fields"]: {
		best_of?: number | undefined,
	/** A computed field, executes function "get_match_connection_link" */
	connection_link?: string | undefined,
	/** A computed field, executes function "get_match_connection_string" */
	connection_string?: string | undefined,
	created_at?: ModelTypes["timestamptz"] | undefined,
	/** A computed field, executes function "get_current_match_map" */
	current_match_map_id?: ModelTypes["uuid"] | undefined,
	id?: ModelTypes["uuid"] | undefined,
	label?: string | undefined,
	/** A computed field, executes function "get_match_lineup_1_id" */
	lineup_1_id?: string | undefined,
	/** A computed field, executes function "get_match_lineup_2_id" */
	lineup_2_id?: string | undefined,
	match_pool_id?: ModelTypes["uuid"] | undefined,
	mr?: number | undefined,
	number_of_substitutes?: number | undefined,
	organizer_steam_id?: ModelTypes["bigint"] | undefined,
	password?: string | undefined,
	scheduled_at?: ModelTypes["date"] | undefined,
	server_id?: ModelTypes["uuid"] | undefined,
	/** A computed field, executes function "get_match_tv_connection_link" */
	tv_connection_link?: string | undefined,
	/** A computed field, executes function "get_match_tv_connection_string" */
	tv_connection_string?: string | undefined,
	updated_at?: ModelTypes["timestamptz"] | undefined,
	/** A computed field, executes function "get_veto_picking_lineup_id" */
	veto_picking_lineup_id?: ModelTypes["uuid"] | undefined
};
	/** order by min() on columns of table "matches" */
["matches_min_order_by"]: {
	best_of?: ModelTypes["order_by"] | undefined,
	created_at?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	label?: ModelTypes["order_by"] | undefined,
	match_pool_id?: ModelTypes["order_by"] | undefined,
	mr?: ModelTypes["order_by"] | undefined,
	number_of_substitutes?: ModelTypes["order_by"] | undefined,
	organizer_steam_id?: ModelTypes["order_by"] | undefined,
	password?: ModelTypes["order_by"] | undefined,
	scheduled_at?: ModelTypes["order_by"] | undefined,
	server_id?: ModelTypes["order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined
};
	/** response of any mutation on the table "matches" */
["matches_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["matches"]>
};
	/** input type for inserting object relation for remote table "matches" */
["matches_obj_rel_insert_input"]: {
	data: ModelTypes["matches_insert_input"],
	/** upsert condition */
	on_conflict?: ModelTypes["matches_on_conflict"] | undefined
};
	/** on_conflict condition type for table "matches" */
["matches_on_conflict"]: {
	constraint: ModelTypes["matches_constraint"],
	update_columns: Array<ModelTypes["matches_update_column"]>,
	where?: ModelTypes["matches_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "matches". */
["matches_order_by"]: {
	best_of?: ModelTypes["order_by"] | undefined,
	coaches?: ModelTypes["order_by"] | undefined,
	connection_link?: ModelTypes["order_by"] | undefined,
	connection_string?: ModelTypes["order_by"] | undefined,
	created_at?: ModelTypes["order_by"] | undefined,
	current_match_map_id?: ModelTypes["order_by"] | undefined,
	e_match_status?: ModelTypes["e_match_status_order_by"] | undefined,
	e_match_type?: ModelTypes["e_match_types_order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	is_match_server_available?: ModelTypes["order_by"] | undefined,
	knife_round?: ModelTypes["order_by"] | undefined,
	label?: ModelTypes["order_by"] | undefined,
	lineup_1_id?: ModelTypes["order_by"] | undefined,
	lineup_2_id?: ModelTypes["order_by"] | undefined,
	lineups_aggregate?: ModelTypes["match_lineups_aggregate_order_by"] | undefined,
	map_pool?: ModelTypes["map_pools_order_by"] | undefined,
	map_veto?: ModelTypes["order_by"] | undefined,
	match_maps_aggregate?: ModelTypes["match_maps_aggregate_order_by"] | undefined,
	match_pool_id?: ModelTypes["order_by"] | undefined,
	mr?: ModelTypes["order_by"] | undefined,
	number_of_substitutes?: ModelTypes["order_by"] | undefined,
	organizer?: ModelTypes["players_order_by"] | undefined,
	organizer_steam_id?: ModelTypes["order_by"] | undefined,
	overtime?: ModelTypes["order_by"] | undefined,
	password?: ModelTypes["order_by"] | undefined,
	player_assists_aggregate?: ModelTypes["player_assists_aggregate_order_by"] | undefined,
	player_damages_aggregate?: ModelTypes["player_damages_aggregate_order_by"] | undefined,
	player_flashes_aggregate?: ModelTypes["player_flashes_aggregate_order_by"] | undefined,
	player_kills_aggregate?: ModelTypes["player_kills_aggregate_order_by"] | undefined,
	player_objectives_aggregate?: ModelTypes["player_objectives_aggregate_order_by"] | undefined,
	player_unused_utilities_aggregate?: ModelTypes["player_unused_utility_aggregate_order_by"] | undefined,
	player_utility_aggregate?: ModelTypes["player_utility_aggregate_order_by"] | undefined,
	scheduled_at?: ModelTypes["order_by"] | undefined,
	server?: ModelTypes["servers_order_by"] | undefined,
	server_id?: ModelTypes["order_by"] | undefined,
	status?: ModelTypes["order_by"] | undefined,
	teams_aggregate?: ModelTypes["teams_aggregate_order_by"] | undefined,
	tech_timeout_setting?: ModelTypes["order_by"] | undefined,
	timeout_setting?: ModelTypes["order_by"] | undefined,
	tv_connection_link?: ModelTypes["order_by"] | undefined,
	tv_connection_string?: ModelTypes["order_by"] | undefined,
	type?: ModelTypes["order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined,
	veto_picking_lineup_id?: ModelTypes["order_by"] | undefined,
	veto_picks_aggregate?: ModelTypes["match_veto_picks_aggregate_order_by"] | undefined
};
	/** primary key columns input for table: matches */
["matches_pk_columns_input"]: {
	id: ModelTypes["uuid"]
};
	["matches_select_column"]:matches_select_column;
	["matches_select_column_matches_aggregate_bool_exp_bool_and_arguments_columns"]:matches_select_column_matches_aggregate_bool_exp_bool_and_arguments_columns;
	["matches_select_column_matches_aggregate_bool_exp_bool_or_arguments_columns"]:matches_select_column_matches_aggregate_bool_exp_bool_or_arguments_columns;
	/** input type for updating data in table "matches" */
["matches_set_input"]: {
	best_of?: number | undefined,
	coaches?: boolean | undefined,
	created_at?: ModelTypes["timestamptz"] | undefined,
	id?: ModelTypes["uuid"] | undefined,
	knife_round?: boolean | undefined,
	label?: string | undefined,
	map_veto?: boolean | undefined,
	match_pool_id?: ModelTypes["uuid"] | undefined,
	mr?: number | undefined,
	number_of_substitutes?: number | undefined,
	organizer_steam_id?: ModelTypes["bigint"] | undefined,
	overtime?: boolean | undefined,
	password?: string | undefined,
	scheduled_at?: ModelTypes["date"] | undefined,
	server_id?: ModelTypes["uuid"] | undefined,
	status?: ModelTypes["e_match_status_enum"] | undefined,
	tech_timeout_setting?: ModelTypes["e_timeout_settings_enum"] | undefined,
	timeout_setting?: ModelTypes["e_timeout_settings_enum"] | undefined,
	type?: ModelTypes["e_match_types_enum"] | undefined,
	updated_at?: ModelTypes["timestamptz"] | undefined
};
	/** aggregate stddev on columns */
["matches_stddev_fields"]: {
		best_of?: number | undefined,
	mr?: number | undefined,
	number_of_substitutes?: number | undefined,
	organizer_steam_id?: number | undefined
};
	/** order by stddev() on columns of table "matches" */
["matches_stddev_order_by"]: {
	best_of?: ModelTypes["order_by"] | undefined,
	mr?: ModelTypes["order_by"] | undefined,
	number_of_substitutes?: ModelTypes["order_by"] | undefined,
	organizer_steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["matches_stddev_pop_fields"]: {
		best_of?: number | undefined,
	mr?: number | undefined,
	number_of_substitutes?: number | undefined,
	organizer_steam_id?: number | undefined
};
	/** order by stddev_pop() on columns of table "matches" */
["matches_stddev_pop_order_by"]: {
	best_of?: ModelTypes["order_by"] | undefined,
	mr?: ModelTypes["order_by"] | undefined,
	number_of_substitutes?: ModelTypes["order_by"] | undefined,
	organizer_steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["matches_stddev_samp_fields"]: {
		best_of?: number | undefined,
	mr?: number | undefined,
	number_of_substitutes?: number | undefined,
	organizer_steam_id?: number | undefined
};
	/** order by stddev_samp() on columns of table "matches" */
["matches_stddev_samp_order_by"]: {
	best_of?: ModelTypes["order_by"] | undefined,
	mr?: ModelTypes["order_by"] | undefined,
	number_of_substitutes?: ModelTypes["order_by"] | undefined,
	organizer_steam_id?: ModelTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "matches" */
["matches_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["matches_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["matches_stream_cursor_value_input"]: {
	best_of?: number | undefined,
	coaches?: boolean | undefined,
	created_at?: ModelTypes["timestamptz"] | undefined,
	id?: ModelTypes["uuid"] | undefined,
	knife_round?: boolean | undefined,
	label?: string | undefined,
	map_veto?: boolean | undefined,
	match_pool_id?: ModelTypes["uuid"] | undefined,
	mr?: number | undefined,
	number_of_substitutes?: number | undefined,
	organizer_steam_id?: ModelTypes["bigint"] | undefined,
	overtime?: boolean | undefined,
	password?: string | undefined,
	scheduled_at?: ModelTypes["date"] | undefined,
	server_id?: ModelTypes["uuid"] | undefined,
	status?: ModelTypes["e_match_status_enum"] | undefined,
	tech_timeout_setting?: ModelTypes["e_timeout_settings_enum"] | undefined,
	timeout_setting?: ModelTypes["e_timeout_settings_enum"] | undefined,
	type?: ModelTypes["e_match_types_enum"] | undefined,
	updated_at?: ModelTypes["timestamptz"] | undefined
};
	/** aggregate sum on columns */
["matches_sum_fields"]: {
		best_of?: number | undefined,
	mr?: number | undefined,
	number_of_substitutes?: number | undefined,
	organizer_steam_id?: ModelTypes["bigint"] | undefined
};
	/** order by sum() on columns of table "matches" */
["matches_sum_order_by"]: {
	best_of?: ModelTypes["order_by"] | undefined,
	mr?: ModelTypes["order_by"] | undefined,
	number_of_substitutes?: ModelTypes["order_by"] | undefined,
	organizer_steam_id?: ModelTypes["order_by"] | undefined
};
	["matches_update_column"]:matches_update_column;
	["matches_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["matches_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["matches_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["matches_bool_exp"]
};
	/** aggregate var_pop on columns */
["matches_var_pop_fields"]: {
		best_of?: number | undefined,
	mr?: number | undefined,
	number_of_substitutes?: number | undefined,
	organizer_steam_id?: number | undefined
};
	/** order by var_pop() on columns of table "matches" */
["matches_var_pop_order_by"]: {
	best_of?: ModelTypes["order_by"] | undefined,
	mr?: ModelTypes["order_by"] | undefined,
	number_of_substitutes?: ModelTypes["order_by"] | undefined,
	organizer_steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["matches_var_samp_fields"]: {
		best_of?: number | undefined,
	mr?: number | undefined,
	number_of_substitutes?: number | undefined,
	organizer_steam_id?: number | undefined
};
	/** order by var_samp() on columns of table "matches" */
["matches_var_samp_order_by"]: {
	best_of?: ModelTypes["order_by"] | undefined,
	mr?: ModelTypes["order_by"] | undefined,
	number_of_substitutes?: ModelTypes["order_by"] | undefined,
	organizer_steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["matches_variance_fields"]: {
		best_of?: number | undefined,
	mr?: number | undefined,
	number_of_substitutes?: number | undefined,
	organizer_steam_id?: number | undefined
};
	/** order by variance() on columns of table "matches" */
["matches_variance_order_by"]: {
	best_of?: ModelTypes["order_by"] | undefined,
	mr?: ModelTypes["order_by"] | undefined,
	number_of_substitutes?: ModelTypes["order_by"] | undefined,
	organizer_steam_id?: ModelTypes["order_by"] | undefined
};
	/** mutation root */
["mutation_root"]: {
		/** accept team invite */
	acceptTeamInvite?: ModelTypes["SuccessOutput"] | undefined,
	/** cancelMatch */
	cancelMatch?: ModelTypes["SuccessOutput"] | undefined,
	/** delete data from the table: "_map_pool" */
	delete__map_pool?: ModelTypes["_map_pool_mutation_response"] | undefined,
	/** delete single row from the table: "_map_pool" */
	delete__map_pool_by_pk?: ModelTypes["_map_pool"] | undefined,
	/** delete data from the table: "e_match_map_status" */
	delete_e_match_map_status?: ModelTypes["e_match_map_status_mutation_response"] | undefined,
	/** delete single row from the table: "e_match_map_status" */
	delete_e_match_map_status_by_pk?: ModelTypes["e_match_map_status"] | undefined,
	/** delete data from the table: "e_match_status" */
	delete_e_match_status?: ModelTypes["e_match_status_mutation_response"] | undefined,
	/** delete single row from the table: "e_match_status" */
	delete_e_match_status_by_pk?: ModelTypes["e_match_status"] | undefined,
	/** delete data from the table: "e_match_types" */
	delete_e_match_types?: ModelTypes["e_match_types_mutation_response"] | undefined,
	/** delete single row from the table: "e_match_types" */
	delete_e_match_types_by_pk?: ModelTypes["e_match_types"] | undefined,
	/** delete data from the table: "e_objective_types" */
	delete_e_objective_types?: ModelTypes["e_objective_types_mutation_response"] | undefined,
	/** delete single row from the table: "e_objective_types" */
	delete_e_objective_types_by_pk?: ModelTypes["e_objective_types"] | undefined,
	/** delete data from the table: "e_sides" */
	delete_e_sides?: ModelTypes["e_sides_mutation_response"] | undefined,
	/** delete single row from the table: "e_sides" */
	delete_e_sides_by_pk?: ModelTypes["e_sides"] | undefined,
	/** delete data from the table: "e_team_roles" */
	delete_e_team_roles?: ModelTypes["e_team_roles_mutation_response"] | undefined,
	/** delete single row from the table: "e_team_roles" */
	delete_e_team_roles_by_pk?: ModelTypes["e_team_roles"] | undefined,
	/** delete data from the table: "e_timeout_settings" */
	delete_e_timeout_settings?: ModelTypes["e_timeout_settings_mutation_response"] | undefined,
	/** delete single row from the table: "e_timeout_settings" */
	delete_e_timeout_settings_by_pk?: ModelTypes["e_timeout_settings"] | undefined,
	/** delete data from the table: "e_utility_types" */
	delete_e_utility_types?: ModelTypes["e_utility_types_mutation_response"] | undefined,
	/** delete single row from the table: "e_utility_types" */
	delete_e_utility_types_by_pk?: ModelTypes["e_utility_types"] | undefined,
	/** delete data from the table: "e_veto_pick_types" */
	delete_e_veto_pick_types?: ModelTypes["e_veto_pick_types_mutation_response"] | undefined,
	/** delete single row from the table: "e_veto_pick_types" */
	delete_e_veto_pick_types_by_pk?: ModelTypes["e_veto_pick_types"] | undefined,
	/** delete data from the table: "map_pools" */
	delete_map_pools?: ModelTypes["map_pools_mutation_response"] | undefined,
	/** delete single row from the table: "map_pools" */
	delete_map_pools_by_pk?: ModelTypes["map_pools"] | undefined,
	/** delete data from the table: "maps" */
	delete_maps?: ModelTypes["maps_mutation_response"] | undefined,
	/** delete single row from the table: "maps" */
	delete_maps_by_pk?: ModelTypes["maps"] | undefined,
	/** delete data from the table: "match_lineup_players" */
	delete_match_lineup_players?: ModelTypes["match_lineup_players_mutation_response"] | undefined,
	/** delete single row from the table: "match_lineup_players" */
	delete_match_lineup_players_by_pk?: ModelTypes["match_lineup_players"] | undefined,
	/** delete data from the table: "match_lineups" */
	delete_match_lineups?: ModelTypes["match_lineups_mutation_response"] | undefined,
	/** delete single row from the table: "match_lineups" */
	delete_match_lineups_by_pk?: ModelTypes["match_lineups"] | undefined,
	/** delete data from the table: "match_map_demos" */
	delete_match_map_demos?: ModelTypes["match_map_demos_mutation_response"] | undefined,
	/** delete single row from the table: "match_map_demos" */
	delete_match_map_demos_by_pk?: ModelTypes["match_map_demos"] | undefined,
	/** delete data from the table: "match_map_rounds" */
	delete_match_map_rounds?: ModelTypes["match_map_rounds_mutation_response"] | undefined,
	/** delete single row from the table: "match_map_rounds" */
	delete_match_map_rounds_by_pk?: ModelTypes["match_map_rounds"] | undefined,
	/** delete data from the table: "match_maps" */
	delete_match_maps?: ModelTypes["match_maps_mutation_response"] | undefined,
	/** delete single row from the table: "match_maps" */
	delete_match_maps_by_pk?: ModelTypes["match_maps"] | undefined,
	/** delete data from the table: "match_veto_picks" */
	delete_match_veto_picks?: ModelTypes["match_veto_picks_mutation_response"] | undefined,
	/** delete single row from the table: "match_veto_picks" */
	delete_match_veto_picks_by_pk?: ModelTypes["match_veto_picks"] | undefined,
	/** delete data from the table: "matches" */
	delete_matches?: ModelTypes["matches_mutation_response"] | undefined,
	/** delete single row from the table: "matches" */
	delete_matches_by_pk?: ModelTypes["matches"] | undefined,
	/** delete data from the table: "player_assists" */
	delete_player_assists?: ModelTypes["player_assists_mutation_response"] | undefined,
	/** delete single row from the table: "player_assists" */
	delete_player_assists_by_pk?: ModelTypes["player_assists"] | undefined,
	/** delete data from the table: "player_damages" */
	delete_player_damages?: ModelTypes["player_damages_mutation_response"] | undefined,
	/** delete single row from the table: "player_damages" */
	delete_player_damages_by_pk?: ModelTypes["player_damages"] | undefined,
	/** delete data from the table: "player_flashes" */
	delete_player_flashes?: ModelTypes["player_flashes_mutation_response"] | undefined,
	/** delete single row from the table: "player_flashes" */
	delete_player_flashes_by_pk?: ModelTypes["player_flashes"] | undefined,
	/** delete data from the table: "player_kills" */
	delete_player_kills?: ModelTypes["player_kills_mutation_response"] | undefined,
	/** delete single row from the table: "player_kills" */
	delete_player_kills_by_pk?: ModelTypes["player_kills"] | undefined,
	/** delete data from the table: "player_objectives" */
	delete_player_objectives?: ModelTypes["player_objectives_mutation_response"] | undefined,
	/** delete single row from the table: "player_objectives" */
	delete_player_objectives_by_pk?: ModelTypes["player_objectives"] | undefined,
	/** delete data from the table: "player_unused_utility" */
	delete_player_unused_utility?: ModelTypes["player_unused_utility_mutation_response"] | undefined,
	/** delete single row from the table: "player_unused_utility" */
	delete_player_unused_utility_by_pk?: ModelTypes["player_unused_utility"] | undefined,
	/** delete data from the table: "player_utility" */
	delete_player_utility?: ModelTypes["player_utility_mutation_response"] | undefined,
	/** delete single row from the table: "player_utility" */
	delete_player_utility_by_pk?: ModelTypes["player_utility"] | undefined,
	/** delete data from the table: "players" */
	delete_players?: ModelTypes["players_mutation_response"] | undefined,
	/** delete single row from the table: "players" */
	delete_players_by_pk?: ModelTypes["players"] | undefined,
	/** delete data from the table: "servers" */
	delete_servers?: ModelTypes["servers_mutation_response"] | undefined,
	/** delete single row from the table: "servers" */
	delete_servers_by_pk?: ModelTypes["servers"] | undefined,
	/** delete data from the table: "team_invites" */
	delete_team_invites?: ModelTypes["team_invites_mutation_response"] | undefined,
	/** delete single row from the table: "team_invites" */
	delete_team_invites_by_pk?: ModelTypes["team_invites"] | undefined,
	/** delete data from the table: "team_roster" */
	delete_team_roster?: ModelTypes["team_roster_mutation_response"] | undefined,
	/** delete single row from the table: "team_roster" */
	delete_team_roster_by_pk?: ModelTypes["team_roster"] | undefined,
	/** delete data from the table: "teams" */
	delete_teams?: ModelTypes["teams_mutation_response"] | undefined,
	/** delete single row from the table: "teams" */
	delete_teams_by_pk?: ModelTypes["teams"] | undefined,
	/** delete data from the table: "tournament_organizers" */
	delete_tournament_organizers?: ModelTypes["tournament_organizers_mutation_response"] | undefined,
	/** delete single row from the table: "tournament_organizers" */
	delete_tournament_organizers_by_pk?: ModelTypes["tournament_organizers"] | undefined,
	/** delete data from the table: "tournament_roster" */
	delete_tournament_roster?: ModelTypes["tournament_roster_mutation_response"] | undefined,
	/** delete single row from the table: "tournament_roster" */
	delete_tournament_roster_by_pk?: ModelTypes["tournament_roster"] | undefined,
	/** delete data from the table: "tournament_servers" */
	delete_tournament_servers?: ModelTypes["tournament_servers_mutation_response"] | undefined,
	/** delete single row from the table: "tournament_servers" */
	delete_tournament_servers_by_pk?: ModelTypes["tournament_servers"] | undefined,
	/** delete data from the table: "tournament_stages" */
	delete_tournament_stages?: ModelTypes["tournament_stages_mutation_response"] | undefined,
	/** delete single row from the table: "tournament_stages" */
	delete_tournament_stages_by_pk?: ModelTypes["tournament_stages"] | undefined,
	/** delete data from the table: "tournament_teams" */
	delete_tournament_teams?: ModelTypes["tournament_teams_mutation_response"] | undefined,
	/** delete single row from the table: "tournament_teams" */
	delete_tournament_teams_by_pk?: ModelTypes["tournament_teams"] | undefined,
	/** delete data from the table: "tournaments" */
	delete_tournaments?: ModelTypes["tournaments_mutation_response"] | undefined,
	/** delete single row from the table: "tournaments" */
	delete_tournaments_by_pk?: ModelTypes["tournaments"] | undefined,
	/** delete data from the table: "v_match_captains" */
	delete_v_match_captains?: ModelTypes["v_match_captains_mutation_response"] | undefined,
	/** delete data from the table: "v_pool_maps" */
	delete_v_pool_maps?: ModelTypes["v_pool_maps_mutation_response"] | undefined,
	/** insert data into the table: "_map_pool" */
	insert__map_pool?: ModelTypes["_map_pool_mutation_response"] | undefined,
	/** insert a single row into the table: "_map_pool" */
	insert__map_pool_one?: ModelTypes["_map_pool"] | undefined,
	/** insert data into the table: "e_match_map_status" */
	insert_e_match_map_status?: ModelTypes["e_match_map_status_mutation_response"] | undefined,
	/** insert a single row into the table: "e_match_map_status" */
	insert_e_match_map_status_one?: ModelTypes["e_match_map_status"] | undefined,
	/** insert data into the table: "e_match_status" */
	insert_e_match_status?: ModelTypes["e_match_status_mutation_response"] | undefined,
	/** insert a single row into the table: "e_match_status" */
	insert_e_match_status_one?: ModelTypes["e_match_status"] | undefined,
	/** insert data into the table: "e_match_types" */
	insert_e_match_types?: ModelTypes["e_match_types_mutation_response"] | undefined,
	/** insert a single row into the table: "e_match_types" */
	insert_e_match_types_one?: ModelTypes["e_match_types"] | undefined,
	/** insert data into the table: "e_objective_types" */
	insert_e_objective_types?: ModelTypes["e_objective_types_mutation_response"] | undefined,
	/** insert a single row into the table: "e_objective_types" */
	insert_e_objective_types_one?: ModelTypes["e_objective_types"] | undefined,
	/** insert data into the table: "e_sides" */
	insert_e_sides?: ModelTypes["e_sides_mutation_response"] | undefined,
	/** insert a single row into the table: "e_sides" */
	insert_e_sides_one?: ModelTypes["e_sides"] | undefined,
	/** insert data into the table: "e_team_roles" */
	insert_e_team_roles?: ModelTypes["e_team_roles_mutation_response"] | undefined,
	/** insert a single row into the table: "e_team_roles" */
	insert_e_team_roles_one?: ModelTypes["e_team_roles"] | undefined,
	/** insert data into the table: "e_timeout_settings" */
	insert_e_timeout_settings?: ModelTypes["e_timeout_settings_mutation_response"] | undefined,
	/** insert a single row into the table: "e_timeout_settings" */
	insert_e_timeout_settings_one?: ModelTypes["e_timeout_settings"] | undefined,
	/** insert data into the table: "e_utility_types" */
	insert_e_utility_types?: ModelTypes["e_utility_types_mutation_response"] | undefined,
	/** insert a single row into the table: "e_utility_types" */
	insert_e_utility_types_one?: ModelTypes["e_utility_types"] | undefined,
	/** insert data into the table: "e_veto_pick_types" */
	insert_e_veto_pick_types?: ModelTypes["e_veto_pick_types_mutation_response"] | undefined,
	/** insert a single row into the table: "e_veto_pick_types" */
	insert_e_veto_pick_types_one?: ModelTypes["e_veto_pick_types"] | undefined,
	/** insert data into the table: "map_pools" */
	insert_map_pools?: ModelTypes["map_pools_mutation_response"] | undefined,
	/** insert a single row into the table: "map_pools" */
	insert_map_pools_one?: ModelTypes["map_pools"] | undefined,
	/** insert data into the table: "maps" */
	insert_maps?: ModelTypes["maps_mutation_response"] | undefined,
	/** insert a single row into the table: "maps" */
	insert_maps_one?: ModelTypes["maps"] | undefined,
	/** insert data into the table: "match_lineup_players" */
	insert_match_lineup_players?: ModelTypes["match_lineup_players_mutation_response"] | undefined,
	/** insert a single row into the table: "match_lineup_players" */
	insert_match_lineup_players_one?: ModelTypes["match_lineup_players"] | undefined,
	/** insert data into the table: "match_lineups" */
	insert_match_lineups?: ModelTypes["match_lineups_mutation_response"] | undefined,
	/** insert a single row into the table: "match_lineups" */
	insert_match_lineups_one?: ModelTypes["match_lineups"] | undefined,
	/** insert data into the table: "match_map_demos" */
	insert_match_map_demos?: ModelTypes["match_map_demos_mutation_response"] | undefined,
	/** insert a single row into the table: "match_map_demos" */
	insert_match_map_demos_one?: ModelTypes["match_map_demos"] | undefined,
	/** insert data into the table: "match_map_rounds" */
	insert_match_map_rounds?: ModelTypes["match_map_rounds_mutation_response"] | undefined,
	/** insert a single row into the table: "match_map_rounds" */
	insert_match_map_rounds_one?: ModelTypes["match_map_rounds"] | undefined,
	/** insert data into the table: "match_maps" */
	insert_match_maps?: ModelTypes["match_maps_mutation_response"] | undefined,
	/** insert a single row into the table: "match_maps" */
	insert_match_maps_one?: ModelTypes["match_maps"] | undefined,
	/** insert data into the table: "match_veto_picks" */
	insert_match_veto_picks?: ModelTypes["match_veto_picks_mutation_response"] | undefined,
	/** insert a single row into the table: "match_veto_picks" */
	insert_match_veto_picks_one?: ModelTypes["match_veto_picks"] | undefined,
	/** insert data into the table: "matches" */
	insert_matches?: ModelTypes["matches_mutation_response"] | undefined,
	/** insert a single row into the table: "matches" */
	insert_matches_one?: ModelTypes["matches"] | undefined,
	/** insert data into the table: "player_assists" */
	insert_player_assists?: ModelTypes["player_assists_mutation_response"] | undefined,
	/** insert a single row into the table: "player_assists" */
	insert_player_assists_one?: ModelTypes["player_assists"] | undefined,
	/** insert data into the table: "player_damages" */
	insert_player_damages?: ModelTypes["player_damages_mutation_response"] | undefined,
	/** insert a single row into the table: "player_damages" */
	insert_player_damages_one?: ModelTypes["player_damages"] | undefined,
	/** insert data into the table: "player_flashes" */
	insert_player_flashes?: ModelTypes["player_flashes_mutation_response"] | undefined,
	/** insert a single row into the table: "player_flashes" */
	insert_player_flashes_one?: ModelTypes["player_flashes"] | undefined,
	/** insert data into the table: "player_kills" */
	insert_player_kills?: ModelTypes["player_kills_mutation_response"] | undefined,
	/** insert a single row into the table: "player_kills" */
	insert_player_kills_one?: ModelTypes["player_kills"] | undefined,
	/** insert data into the table: "player_objectives" */
	insert_player_objectives?: ModelTypes["player_objectives_mutation_response"] | undefined,
	/** insert a single row into the table: "player_objectives" */
	insert_player_objectives_one?: ModelTypes["player_objectives"] | undefined,
	/** insert data into the table: "player_unused_utility" */
	insert_player_unused_utility?: ModelTypes["player_unused_utility_mutation_response"] | undefined,
	/** insert a single row into the table: "player_unused_utility" */
	insert_player_unused_utility_one?: ModelTypes["player_unused_utility"] | undefined,
	/** insert data into the table: "player_utility" */
	insert_player_utility?: ModelTypes["player_utility_mutation_response"] | undefined,
	/** insert a single row into the table: "player_utility" */
	insert_player_utility_one?: ModelTypes["player_utility"] | undefined,
	/** insert data into the table: "players" */
	insert_players?: ModelTypes["players_mutation_response"] | undefined,
	/** insert a single row into the table: "players" */
	insert_players_one?: ModelTypes["players"] | undefined,
	/** insert data into the table: "servers" */
	insert_servers?: ModelTypes["servers_mutation_response"] | undefined,
	/** insert a single row into the table: "servers" */
	insert_servers_one?: ModelTypes["servers"] | undefined,
	/** insert data into the table: "team_invites" */
	insert_team_invites?: ModelTypes["team_invites_mutation_response"] | undefined,
	/** insert a single row into the table: "team_invites" */
	insert_team_invites_one?: ModelTypes["team_invites"] | undefined,
	/** insert data into the table: "team_roster" */
	insert_team_roster?: ModelTypes["team_roster_mutation_response"] | undefined,
	/** insert a single row into the table: "team_roster" */
	insert_team_roster_one?: ModelTypes["team_roster"] | undefined,
	/** insert data into the table: "teams" */
	insert_teams?: ModelTypes["teams_mutation_response"] | undefined,
	/** insert a single row into the table: "teams" */
	insert_teams_one?: ModelTypes["teams"] | undefined,
	/** insert data into the table: "tournament_organizers" */
	insert_tournament_organizers?: ModelTypes["tournament_organizers_mutation_response"] | undefined,
	/** insert a single row into the table: "tournament_organizers" */
	insert_tournament_organizers_one?: ModelTypes["tournament_organizers"] | undefined,
	/** insert data into the table: "tournament_roster" */
	insert_tournament_roster?: ModelTypes["tournament_roster_mutation_response"] | undefined,
	/** insert a single row into the table: "tournament_roster" */
	insert_tournament_roster_one?: ModelTypes["tournament_roster"] | undefined,
	/** insert data into the table: "tournament_servers" */
	insert_tournament_servers?: ModelTypes["tournament_servers_mutation_response"] | undefined,
	/** insert a single row into the table: "tournament_servers" */
	insert_tournament_servers_one?: ModelTypes["tournament_servers"] | undefined,
	/** insert data into the table: "tournament_stages" */
	insert_tournament_stages?: ModelTypes["tournament_stages_mutation_response"] | undefined,
	/** insert a single row into the table: "tournament_stages" */
	insert_tournament_stages_one?: ModelTypes["tournament_stages"] | undefined,
	/** insert data into the table: "tournament_teams" */
	insert_tournament_teams?: ModelTypes["tournament_teams_mutation_response"] | undefined,
	/** insert a single row into the table: "tournament_teams" */
	insert_tournament_teams_one?: ModelTypes["tournament_teams"] | undefined,
	/** insert data into the table: "tournaments" */
	insert_tournaments?: ModelTypes["tournaments_mutation_response"] | undefined,
	/** insert a single row into the table: "tournaments" */
	insert_tournaments_one?: ModelTypes["tournaments"] | undefined,
	/** insert data into the table: "v_match_captains" */
	insert_v_match_captains?: ModelTypes["v_match_captains_mutation_response"] | undefined,
	/** insert a single row into the table: "v_match_captains" */
	insert_v_match_captains_one?: ModelTypes["v_match_captains"] | undefined,
	/** insert data into the table: "v_pool_maps" */
	insert_v_pool_maps?: ModelTypes["v_pool_maps_mutation_response"] | undefined,
	/** insert a single row into the table: "v_pool_maps" */
	insert_v_pool_maps_one?: ModelTypes["v_pool_maps"] | undefined,
	/** scheduleMatch */
	scheduleMatch?: ModelTypes["SuccessOutput"] | undefined,
	/** startMatch */
	startMatch?: ModelTypes["SuccessOutput"] | undefined,
	/** update data of the table: "_map_pool" */
	update__map_pool?: ModelTypes["_map_pool_mutation_response"] | undefined,
	/** update single row of the table: "_map_pool" */
	update__map_pool_by_pk?: ModelTypes["_map_pool"] | undefined,
	/** update multiples rows of table: "_map_pool" */
	update__map_pool_many?: Array<ModelTypes["_map_pool_mutation_response"] | undefined> | undefined,
	/** update data of the table: "e_match_map_status" */
	update_e_match_map_status?: ModelTypes["e_match_map_status_mutation_response"] | undefined,
	/** update single row of the table: "e_match_map_status" */
	update_e_match_map_status_by_pk?: ModelTypes["e_match_map_status"] | undefined,
	/** update multiples rows of table: "e_match_map_status" */
	update_e_match_map_status_many?: Array<ModelTypes["e_match_map_status_mutation_response"] | undefined> | undefined,
	/** update data of the table: "e_match_status" */
	update_e_match_status?: ModelTypes["e_match_status_mutation_response"] | undefined,
	/** update single row of the table: "e_match_status" */
	update_e_match_status_by_pk?: ModelTypes["e_match_status"] | undefined,
	/** update multiples rows of table: "e_match_status" */
	update_e_match_status_many?: Array<ModelTypes["e_match_status_mutation_response"] | undefined> | undefined,
	/** update data of the table: "e_match_types" */
	update_e_match_types?: ModelTypes["e_match_types_mutation_response"] | undefined,
	/** update single row of the table: "e_match_types" */
	update_e_match_types_by_pk?: ModelTypes["e_match_types"] | undefined,
	/** update multiples rows of table: "e_match_types" */
	update_e_match_types_many?: Array<ModelTypes["e_match_types_mutation_response"] | undefined> | undefined,
	/** update data of the table: "e_objective_types" */
	update_e_objective_types?: ModelTypes["e_objective_types_mutation_response"] | undefined,
	/** update single row of the table: "e_objective_types" */
	update_e_objective_types_by_pk?: ModelTypes["e_objective_types"] | undefined,
	/** update multiples rows of table: "e_objective_types" */
	update_e_objective_types_many?: Array<ModelTypes["e_objective_types_mutation_response"] | undefined> | undefined,
	/** update data of the table: "e_sides" */
	update_e_sides?: ModelTypes["e_sides_mutation_response"] | undefined,
	/** update single row of the table: "e_sides" */
	update_e_sides_by_pk?: ModelTypes["e_sides"] | undefined,
	/** update multiples rows of table: "e_sides" */
	update_e_sides_many?: Array<ModelTypes["e_sides_mutation_response"] | undefined> | undefined,
	/** update data of the table: "e_team_roles" */
	update_e_team_roles?: ModelTypes["e_team_roles_mutation_response"] | undefined,
	/** update single row of the table: "e_team_roles" */
	update_e_team_roles_by_pk?: ModelTypes["e_team_roles"] | undefined,
	/** update multiples rows of table: "e_team_roles" */
	update_e_team_roles_many?: Array<ModelTypes["e_team_roles_mutation_response"] | undefined> | undefined,
	/** update data of the table: "e_timeout_settings" */
	update_e_timeout_settings?: ModelTypes["e_timeout_settings_mutation_response"] | undefined,
	/** update single row of the table: "e_timeout_settings" */
	update_e_timeout_settings_by_pk?: ModelTypes["e_timeout_settings"] | undefined,
	/** update multiples rows of table: "e_timeout_settings" */
	update_e_timeout_settings_many?: Array<ModelTypes["e_timeout_settings_mutation_response"] | undefined> | undefined,
	/** update data of the table: "e_utility_types" */
	update_e_utility_types?: ModelTypes["e_utility_types_mutation_response"] | undefined,
	/** update single row of the table: "e_utility_types" */
	update_e_utility_types_by_pk?: ModelTypes["e_utility_types"] | undefined,
	/** update multiples rows of table: "e_utility_types" */
	update_e_utility_types_many?: Array<ModelTypes["e_utility_types_mutation_response"] | undefined> | undefined,
	/** update data of the table: "e_veto_pick_types" */
	update_e_veto_pick_types?: ModelTypes["e_veto_pick_types_mutation_response"] | undefined,
	/** update single row of the table: "e_veto_pick_types" */
	update_e_veto_pick_types_by_pk?: ModelTypes["e_veto_pick_types"] | undefined,
	/** update multiples rows of table: "e_veto_pick_types" */
	update_e_veto_pick_types_many?: Array<ModelTypes["e_veto_pick_types_mutation_response"] | undefined> | undefined,
	/** update data of the table: "map_pools" */
	update_map_pools?: ModelTypes["map_pools_mutation_response"] | undefined,
	/** update single row of the table: "map_pools" */
	update_map_pools_by_pk?: ModelTypes["map_pools"] | undefined,
	/** update multiples rows of table: "map_pools" */
	update_map_pools_many?: Array<ModelTypes["map_pools_mutation_response"] | undefined> | undefined,
	/** update data of the table: "maps" */
	update_maps?: ModelTypes["maps_mutation_response"] | undefined,
	/** update single row of the table: "maps" */
	update_maps_by_pk?: ModelTypes["maps"] | undefined,
	/** update multiples rows of table: "maps" */
	update_maps_many?: Array<ModelTypes["maps_mutation_response"] | undefined> | undefined,
	/** update data of the table: "match_lineup_players" */
	update_match_lineup_players?: ModelTypes["match_lineup_players_mutation_response"] | undefined,
	/** update single row of the table: "match_lineup_players" */
	update_match_lineup_players_by_pk?: ModelTypes["match_lineup_players"] | undefined,
	/** update multiples rows of table: "match_lineup_players" */
	update_match_lineup_players_many?: Array<ModelTypes["match_lineup_players_mutation_response"] | undefined> | undefined,
	/** update data of the table: "match_lineups" */
	update_match_lineups?: ModelTypes["match_lineups_mutation_response"] | undefined,
	/** update single row of the table: "match_lineups" */
	update_match_lineups_by_pk?: ModelTypes["match_lineups"] | undefined,
	/** update multiples rows of table: "match_lineups" */
	update_match_lineups_many?: Array<ModelTypes["match_lineups_mutation_response"] | undefined> | undefined,
	/** update data of the table: "match_map_demos" */
	update_match_map_demos?: ModelTypes["match_map_demos_mutation_response"] | undefined,
	/** update single row of the table: "match_map_demos" */
	update_match_map_demos_by_pk?: ModelTypes["match_map_demos"] | undefined,
	/** update multiples rows of table: "match_map_demos" */
	update_match_map_demos_many?: Array<ModelTypes["match_map_demos_mutation_response"] | undefined> | undefined,
	/** update data of the table: "match_map_rounds" */
	update_match_map_rounds?: ModelTypes["match_map_rounds_mutation_response"] | undefined,
	/** update single row of the table: "match_map_rounds" */
	update_match_map_rounds_by_pk?: ModelTypes["match_map_rounds"] | undefined,
	/** update multiples rows of table: "match_map_rounds" */
	update_match_map_rounds_many?: Array<ModelTypes["match_map_rounds_mutation_response"] | undefined> | undefined,
	/** update data of the table: "match_maps" */
	update_match_maps?: ModelTypes["match_maps_mutation_response"] | undefined,
	/** update single row of the table: "match_maps" */
	update_match_maps_by_pk?: ModelTypes["match_maps"] | undefined,
	/** update multiples rows of table: "match_maps" */
	update_match_maps_many?: Array<ModelTypes["match_maps_mutation_response"] | undefined> | undefined,
	/** update data of the table: "match_veto_picks" */
	update_match_veto_picks?: ModelTypes["match_veto_picks_mutation_response"] | undefined,
	/** update single row of the table: "match_veto_picks" */
	update_match_veto_picks_by_pk?: ModelTypes["match_veto_picks"] | undefined,
	/** update multiples rows of table: "match_veto_picks" */
	update_match_veto_picks_many?: Array<ModelTypes["match_veto_picks_mutation_response"] | undefined> | undefined,
	/** update data of the table: "matches" */
	update_matches?: ModelTypes["matches_mutation_response"] | undefined,
	/** update single row of the table: "matches" */
	update_matches_by_pk?: ModelTypes["matches"] | undefined,
	/** update multiples rows of table: "matches" */
	update_matches_many?: Array<ModelTypes["matches_mutation_response"] | undefined> | undefined,
	/** update data of the table: "player_assists" */
	update_player_assists?: ModelTypes["player_assists_mutation_response"] | undefined,
	/** update single row of the table: "player_assists" */
	update_player_assists_by_pk?: ModelTypes["player_assists"] | undefined,
	/** update multiples rows of table: "player_assists" */
	update_player_assists_many?: Array<ModelTypes["player_assists_mutation_response"] | undefined> | undefined,
	/** update data of the table: "player_damages" */
	update_player_damages?: ModelTypes["player_damages_mutation_response"] | undefined,
	/** update single row of the table: "player_damages" */
	update_player_damages_by_pk?: ModelTypes["player_damages"] | undefined,
	/** update multiples rows of table: "player_damages" */
	update_player_damages_many?: Array<ModelTypes["player_damages_mutation_response"] | undefined> | undefined,
	/** update data of the table: "player_flashes" */
	update_player_flashes?: ModelTypes["player_flashes_mutation_response"] | undefined,
	/** update single row of the table: "player_flashes" */
	update_player_flashes_by_pk?: ModelTypes["player_flashes"] | undefined,
	/** update multiples rows of table: "player_flashes" */
	update_player_flashes_many?: Array<ModelTypes["player_flashes_mutation_response"] | undefined> | undefined,
	/** update data of the table: "player_kills" */
	update_player_kills?: ModelTypes["player_kills_mutation_response"] | undefined,
	/** update single row of the table: "player_kills" */
	update_player_kills_by_pk?: ModelTypes["player_kills"] | undefined,
	/** update multiples rows of table: "player_kills" */
	update_player_kills_many?: Array<ModelTypes["player_kills_mutation_response"] | undefined> | undefined,
	/** update data of the table: "player_objectives" */
	update_player_objectives?: ModelTypes["player_objectives_mutation_response"] | undefined,
	/** update single row of the table: "player_objectives" */
	update_player_objectives_by_pk?: ModelTypes["player_objectives"] | undefined,
	/** update multiples rows of table: "player_objectives" */
	update_player_objectives_many?: Array<ModelTypes["player_objectives_mutation_response"] | undefined> | undefined,
	/** update data of the table: "player_unused_utility" */
	update_player_unused_utility?: ModelTypes["player_unused_utility_mutation_response"] | undefined,
	/** update single row of the table: "player_unused_utility" */
	update_player_unused_utility_by_pk?: ModelTypes["player_unused_utility"] | undefined,
	/** update multiples rows of table: "player_unused_utility" */
	update_player_unused_utility_many?: Array<ModelTypes["player_unused_utility_mutation_response"] | undefined> | undefined,
	/** update data of the table: "player_utility" */
	update_player_utility?: ModelTypes["player_utility_mutation_response"] | undefined,
	/** update single row of the table: "player_utility" */
	update_player_utility_by_pk?: ModelTypes["player_utility"] | undefined,
	/** update multiples rows of table: "player_utility" */
	update_player_utility_many?: Array<ModelTypes["player_utility_mutation_response"] | undefined> | undefined,
	/** update data of the table: "players" */
	update_players?: ModelTypes["players_mutation_response"] | undefined,
	/** update single row of the table: "players" */
	update_players_by_pk?: ModelTypes["players"] | undefined,
	/** update multiples rows of table: "players" */
	update_players_many?: Array<ModelTypes["players_mutation_response"] | undefined> | undefined,
	/** update data of the table: "servers" */
	update_servers?: ModelTypes["servers_mutation_response"] | undefined,
	/** update single row of the table: "servers" */
	update_servers_by_pk?: ModelTypes["servers"] | undefined,
	/** update multiples rows of table: "servers" */
	update_servers_many?: Array<ModelTypes["servers_mutation_response"] | undefined> | undefined,
	/** update data of the table: "team_invites" */
	update_team_invites?: ModelTypes["team_invites_mutation_response"] | undefined,
	/** update single row of the table: "team_invites" */
	update_team_invites_by_pk?: ModelTypes["team_invites"] | undefined,
	/** update multiples rows of table: "team_invites" */
	update_team_invites_many?: Array<ModelTypes["team_invites_mutation_response"] | undefined> | undefined,
	/** update data of the table: "team_roster" */
	update_team_roster?: ModelTypes["team_roster_mutation_response"] | undefined,
	/** update single row of the table: "team_roster" */
	update_team_roster_by_pk?: ModelTypes["team_roster"] | undefined,
	/** update multiples rows of table: "team_roster" */
	update_team_roster_many?: Array<ModelTypes["team_roster_mutation_response"] | undefined> | undefined,
	/** update data of the table: "teams" */
	update_teams?: ModelTypes["teams_mutation_response"] | undefined,
	/** update single row of the table: "teams" */
	update_teams_by_pk?: ModelTypes["teams"] | undefined,
	/** update multiples rows of table: "teams" */
	update_teams_many?: Array<ModelTypes["teams_mutation_response"] | undefined> | undefined,
	/** update data of the table: "tournament_organizers" */
	update_tournament_organizers?: ModelTypes["tournament_organizers_mutation_response"] | undefined,
	/** update single row of the table: "tournament_organizers" */
	update_tournament_organizers_by_pk?: ModelTypes["tournament_organizers"] | undefined,
	/** update multiples rows of table: "tournament_organizers" */
	update_tournament_organizers_many?: Array<ModelTypes["tournament_organizers_mutation_response"] | undefined> | undefined,
	/** update data of the table: "tournament_roster" */
	update_tournament_roster?: ModelTypes["tournament_roster_mutation_response"] | undefined,
	/** update single row of the table: "tournament_roster" */
	update_tournament_roster_by_pk?: ModelTypes["tournament_roster"] | undefined,
	/** update multiples rows of table: "tournament_roster" */
	update_tournament_roster_many?: Array<ModelTypes["tournament_roster_mutation_response"] | undefined> | undefined,
	/** update data of the table: "tournament_servers" */
	update_tournament_servers?: ModelTypes["tournament_servers_mutation_response"] | undefined,
	/** update single row of the table: "tournament_servers" */
	update_tournament_servers_by_pk?: ModelTypes["tournament_servers"] | undefined,
	/** update multiples rows of table: "tournament_servers" */
	update_tournament_servers_many?: Array<ModelTypes["tournament_servers_mutation_response"] | undefined> | undefined,
	/** update data of the table: "tournament_stages" */
	update_tournament_stages?: ModelTypes["tournament_stages_mutation_response"] | undefined,
	/** update single row of the table: "tournament_stages" */
	update_tournament_stages_by_pk?: ModelTypes["tournament_stages"] | undefined,
	/** update multiples rows of table: "tournament_stages" */
	update_tournament_stages_many?: Array<ModelTypes["tournament_stages_mutation_response"] | undefined> | undefined,
	/** update data of the table: "tournament_teams" */
	update_tournament_teams?: ModelTypes["tournament_teams_mutation_response"] | undefined,
	/** update single row of the table: "tournament_teams" */
	update_tournament_teams_by_pk?: ModelTypes["tournament_teams"] | undefined,
	/** update multiples rows of table: "tournament_teams" */
	update_tournament_teams_many?: Array<ModelTypes["tournament_teams_mutation_response"] | undefined> | undefined,
	/** update data of the table: "tournaments" */
	update_tournaments?: ModelTypes["tournaments_mutation_response"] | undefined,
	/** update single row of the table: "tournaments" */
	update_tournaments_by_pk?: ModelTypes["tournaments"] | undefined,
	/** update multiples rows of table: "tournaments" */
	update_tournaments_many?: Array<ModelTypes["tournaments_mutation_response"] | undefined> | undefined,
	/** update data of the table: "v_match_captains" */
	update_v_match_captains?: ModelTypes["v_match_captains_mutation_response"] | undefined,
	/** update multiples rows of table: "v_match_captains" */
	update_v_match_captains_many?: Array<ModelTypes["v_match_captains_mutation_response"] | undefined> | undefined
};
	["numeric"]:any;
	/** Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'. */
["numeric_comparison_exp"]: {
	_eq?: ModelTypes["numeric"] | undefined,
	_gt?: ModelTypes["numeric"] | undefined,
	_gte?: ModelTypes["numeric"] | undefined,
	_in?: Array<ModelTypes["numeric"]> | undefined,
	_is_null?: boolean | undefined,
	_lt?: ModelTypes["numeric"] | undefined,
	_lte?: ModelTypes["numeric"] | undefined,
	_neq?: ModelTypes["numeric"] | undefined,
	_nin?: Array<ModelTypes["numeric"]> | undefined
};
	["order_by"]:order_by;
	/** columns and relationships of "player_assists" */
["player_assists"]: {
		/** An object relationship */
	attacked_player: ModelTypes["players"],
	attacked_steam_id: ModelTypes["bigint"],
	attacked_team: string,
	attacker_steam_id: ModelTypes["bigint"],
	attacker_team: string,
	flash: boolean,
	id: ModelTypes["uuid"],
	/** An object relationship */
	match: ModelTypes["matches"],
	match_id: ModelTypes["uuid"],
	/** An object relationship */
	match_map: ModelTypes["match_maps"],
	match_map_id: ModelTypes["uuid"],
	/** An object relationship */
	player: ModelTypes["players"],
	round: number,
	time: ModelTypes["timestamptz"]
};
	/** aggregated selection of "player_assists" */
["player_assists_aggregate"]: {
		aggregate?: ModelTypes["player_assists_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["player_assists"]>
};
	["player_assists_aggregate_bool_exp"]: {
	bool_and?: ModelTypes["player_assists_aggregate_bool_exp_bool_and"] | undefined,
	bool_or?: ModelTypes["player_assists_aggregate_bool_exp_bool_or"] | undefined,
	count?: ModelTypes["player_assists_aggregate_bool_exp_count"] | undefined
};
	["player_assists_aggregate_bool_exp_bool_and"]: {
	arguments: ModelTypes["player_assists_select_column_player_assists_aggregate_bool_exp_bool_and_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: ModelTypes["player_assists_bool_exp"] | undefined,
	predicate: ModelTypes["Boolean_comparison_exp"]
};
	["player_assists_aggregate_bool_exp_bool_or"]: {
	arguments: ModelTypes["player_assists_select_column_player_assists_aggregate_bool_exp_bool_or_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: ModelTypes["player_assists_bool_exp"] | undefined,
	predicate: ModelTypes["Boolean_comparison_exp"]
};
	["player_assists_aggregate_bool_exp_count"]: {
	arguments?: Array<ModelTypes["player_assists_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: ModelTypes["player_assists_bool_exp"] | undefined,
	predicate: ModelTypes["Int_comparison_exp"]
};
	/** aggregate fields of "player_assists" */
["player_assists_aggregate_fields"]: {
		avg?: ModelTypes["player_assists_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["player_assists_max_fields"] | undefined,
	min?: ModelTypes["player_assists_min_fields"] | undefined,
	stddev?: ModelTypes["player_assists_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["player_assists_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["player_assists_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["player_assists_sum_fields"] | undefined,
	var_pop?: ModelTypes["player_assists_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["player_assists_var_samp_fields"] | undefined,
	variance?: ModelTypes["player_assists_variance_fields"] | undefined
};
	/** order by aggregate values of table "player_assists" */
["player_assists_aggregate_order_by"]: {
	avg?: ModelTypes["player_assists_avg_order_by"] | undefined,
	count?: ModelTypes["order_by"] | undefined,
	max?: ModelTypes["player_assists_max_order_by"] | undefined,
	min?: ModelTypes["player_assists_min_order_by"] | undefined,
	stddev?: ModelTypes["player_assists_stddev_order_by"] | undefined,
	stddev_pop?: ModelTypes["player_assists_stddev_pop_order_by"] | undefined,
	stddev_samp?: ModelTypes["player_assists_stddev_samp_order_by"] | undefined,
	sum?: ModelTypes["player_assists_sum_order_by"] | undefined,
	var_pop?: ModelTypes["player_assists_var_pop_order_by"] | undefined,
	var_samp?: ModelTypes["player_assists_var_samp_order_by"] | undefined,
	variance?: ModelTypes["player_assists_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "player_assists" */
["player_assists_arr_rel_insert_input"]: {
	data: Array<ModelTypes["player_assists_insert_input"]>,
	/** upsert condition */
	on_conflict?: ModelTypes["player_assists_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["player_assists_avg_fields"]: {
		attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by avg() on columns of table "player_assists" */
["player_assists_avg_order_by"]: {
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "player_assists". All fields are combined with a logical 'AND'. */
["player_assists_bool_exp"]: {
	_and?: Array<ModelTypes["player_assists_bool_exp"]> | undefined,
	_not?: ModelTypes["player_assists_bool_exp"] | undefined,
	_or?: Array<ModelTypes["player_assists_bool_exp"]> | undefined,
	attacked_player?: ModelTypes["players_bool_exp"] | undefined,
	attacked_steam_id?: ModelTypes["bigint_comparison_exp"] | undefined,
	attacked_team?: ModelTypes["String_comparison_exp"] | undefined,
	attacker_steam_id?: ModelTypes["bigint_comparison_exp"] | undefined,
	attacker_team?: ModelTypes["String_comparison_exp"] | undefined,
	flash?: ModelTypes["Boolean_comparison_exp"] | undefined,
	id?: ModelTypes["uuid_comparison_exp"] | undefined,
	match?: ModelTypes["matches_bool_exp"] | undefined,
	match_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	match_map?: ModelTypes["match_maps_bool_exp"] | undefined,
	match_map_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	player?: ModelTypes["players_bool_exp"] | undefined,
	round?: ModelTypes["Int_comparison_exp"] | undefined,
	time?: ModelTypes["timestamptz_comparison_exp"] | undefined
};
	["player_assists_constraint"]:player_assists_constraint;
	/** input type for incrementing numeric columns in table "player_assists" */
["player_assists_inc_input"]: {
	attacked_steam_id?: ModelTypes["bigint"] | undefined,
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	round?: number | undefined
};
	/** input type for inserting data into table "player_assists" */
["player_assists_insert_input"]: {
	attacked_player?: ModelTypes["players_obj_rel_insert_input"] | undefined,
	attacked_steam_id?: ModelTypes["bigint"] | undefined,
	attacked_team?: string | undefined,
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	attacker_team?: string | undefined,
	flash?: boolean | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match?: ModelTypes["matches_obj_rel_insert_input"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map?: ModelTypes["match_maps_obj_rel_insert_input"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	player?: ModelTypes["players_obj_rel_insert_input"] | undefined,
	round?: number | undefined,
	time?: ModelTypes["timestamptz"] | undefined
};
	/** aggregate max on columns */
["player_assists_max_fields"]: {
		attacked_steam_id?: ModelTypes["bigint"] | undefined,
	attacked_team?: string | undefined,
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	attacker_team?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	round?: number | undefined,
	time?: ModelTypes["timestamptz"] | undefined
};
	/** order by max() on columns of table "player_assists" */
["player_assists_max_order_by"]: {
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacked_team?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_team?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	match_map_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined,
	time?: ModelTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["player_assists_min_fields"]: {
		attacked_steam_id?: ModelTypes["bigint"] | undefined,
	attacked_team?: string | undefined,
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	attacker_team?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	round?: number | undefined,
	time?: ModelTypes["timestamptz"] | undefined
};
	/** order by min() on columns of table "player_assists" */
["player_assists_min_order_by"]: {
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacked_team?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_team?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	match_map_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined,
	time?: ModelTypes["order_by"] | undefined
};
	/** response of any mutation on the table "player_assists" */
["player_assists_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["player_assists"]>
};
	/** on_conflict condition type for table "player_assists" */
["player_assists_on_conflict"]: {
	constraint: ModelTypes["player_assists_constraint"],
	update_columns: Array<ModelTypes["player_assists_update_column"]>,
	where?: ModelTypes["player_assists_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "player_assists". */
["player_assists_order_by"]: {
	attacked_player?: ModelTypes["players_order_by"] | undefined,
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacked_team?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_team?: ModelTypes["order_by"] | undefined,
	flash?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	match?: ModelTypes["matches_order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	match_map?: ModelTypes["match_maps_order_by"] | undefined,
	match_map_id?: ModelTypes["order_by"] | undefined,
	player?: ModelTypes["players_order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined,
	time?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: player_assists */
["player_assists_pk_columns_input"]: {
	id: ModelTypes["uuid"]
};
	["player_assists_select_column"]:player_assists_select_column;
	["player_assists_select_column_player_assists_aggregate_bool_exp_bool_and_arguments_columns"]:player_assists_select_column_player_assists_aggregate_bool_exp_bool_and_arguments_columns;
	["player_assists_select_column_player_assists_aggregate_bool_exp_bool_or_arguments_columns"]:player_assists_select_column_player_assists_aggregate_bool_exp_bool_or_arguments_columns;
	/** input type for updating data in table "player_assists" */
["player_assists_set_input"]: {
	attacked_steam_id?: ModelTypes["bigint"] | undefined,
	attacked_team?: string | undefined,
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	attacker_team?: string | undefined,
	flash?: boolean | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	round?: number | undefined,
	time?: ModelTypes["timestamptz"] | undefined
};
	/** aggregate stddev on columns */
["player_assists_stddev_fields"]: {
		attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by stddev() on columns of table "player_assists" */
["player_assists_stddev_order_by"]: {
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["player_assists_stddev_pop_fields"]: {
		attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by stddev_pop() on columns of table "player_assists" */
["player_assists_stddev_pop_order_by"]: {
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["player_assists_stddev_samp_fields"]: {
		attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by stddev_samp() on columns of table "player_assists" */
["player_assists_stddev_samp_order_by"]: {
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "player_assists" */
["player_assists_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["player_assists_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["player_assists_stream_cursor_value_input"]: {
	attacked_steam_id?: ModelTypes["bigint"] | undefined,
	attacked_team?: string | undefined,
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	attacker_team?: string | undefined,
	flash?: boolean | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	round?: number | undefined,
	time?: ModelTypes["timestamptz"] | undefined
};
	/** aggregate sum on columns */
["player_assists_sum_fields"]: {
		attacked_steam_id?: ModelTypes["bigint"] | undefined,
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	round?: number | undefined
};
	/** order by sum() on columns of table "player_assists" */
["player_assists_sum_order_by"]: {
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	["player_assists_update_column"]:player_assists_update_column;
	["player_assists_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["player_assists_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["player_assists_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["player_assists_bool_exp"]
};
	/** aggregate var_pop on columns */
["player_assists_var_pop_fields"]: {
		attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by var_pop() on columns of table "player_assists" */
["player_assists_var_pop_order_by"]: {
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["player_assists_var_samp_fields"]: {
		attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by var_samp() on columns of table "player_assists" */
["player_assists_var_samp_order_by"]: {
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["player_assists_variance_fields"]: {
		attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by variance() on columns of table "player_assists" */
["player_assists_variance_order_by"]: {
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** columns and relationships of "player_damages" */
["player_damages"]: {
		armor: number,
	attacked_location: string,
	attacked_location_coordinates?: string | undefined,
	/** An object relationship */
	attacked_player: ModelTypes["players"],
	attacked_steam_id: ModelTypes["bigint"],
	attacked_team: string,
	attacker_location?: string | undefined,
	attacker_location_coordinates?: string | undefined,
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	attacker_team?: string | undefined,
	damage: number,
	damage_armor: number,
	health: number,
	hitgroup: string,
	id: ModelTypes["uuid"],
	/** An object relationship */
	match: ModelTypes["matches"],
	match_id: ModelTypes["uuid"],
	/** An object relationship */
	match_map: ModelTypes["match_maps"],
	match_map_id: ModelTypes["uuid"],
	/** An object relationship */
	player?: ModelTypes["players"] | undefined,
	round: ModelTypes["numeric"],
	/** A computed field, executes function "is_team_damage" */
	team_damage?: boolean | undefined,
	time: ModelTypes["timestamptz"],
	with?: string | undefined
};
	/** aggregated selection of "player_damages" */
["player_damages_aggregate"]: {
		aggregate?: ModelTypes["player_damages_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["player_damages"]>
};
	["player_damages_aggregate_bool_exp"]: {
	count?: ModelTypes["player_damages_aggregate_bool_exp_count"] | undefined
};
	["player_damages_aggregate_bool_exp_count"]: {
	arguments?: Array<ModelTypes["player_damages_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: ModelTypes["player_damages_bool_exp"] | undefined,
	predicate: ModelTypes["Int_comparison_exp"]
};
	/** aggregate fields of "player_damages" */
["player_damages_aggregate_fields"]: {
		avg?: ModelTypes["player_damages_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["player_damages_max_fields"] | undefined,
	min?: ModelTypes["player_damages_min_fields"] | undefined,
	stddev?: ModelTypes["player_damages_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["player_damages_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["player_damages_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["player_damages_sum_fields"] | undefined,
	var_pop?: ModelTypes["player_damages_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["player_damages_var_samp_fields"] | undefined,
	variance?: ModelTypes["player_damages_variance_fields"] | undefined
};
	/** order by aggregate values of table "player_damages" */
["player_damages_aggregate_order_by"]: {
	avg?: ModelTypes["player_damages_avg_order_by"] | undefined,
	count?: ModelTypes["order_by"] | undefined,
	max?: ModelTypes["player_damages_max_order_by"] | undefined,
	min?: ModelTypes["player_damages_min_order_by"] | undefined,
	stddev?: ModelTypes["player_damages_stddev_order_by"] | undefined,
	stddev_pop?: ModelTypes["player_damages_stddev_pop_order_by"] | undefined,
	stddev_samp?: ModelTypes["player_damages_stddev_samp_order_by"] | undefined,
	sum?: ModelTypes["player_damages_sum_order_by"] | undefined,
	var_pop?: ModelTypes["player_damages_var_pop_order_by"] | undefined,
	var_samp?: ModelTypes["player_damages_var_samp_order_by"] | undefined,
	variance?: ModelTypes["player_damages_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "player_damages" */
["player_damages_arr_rel_insert_input"]: {
	data: Array<ModelTypes["player_damages_insert_input"]>,
	/** upsert condition */
	on_conflict?: ModelTypes["player_damages_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["player_damages_avg_fields"]: {
		armor?: number | undefined,
	attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	damage?: number | undefined,
	damage_armor?: number | undefined,
	health?: number | undefined,
	round?: number | undefined
};
	/** order by avg() on columns of table "player_damages" */
["player_damages_avg_order_by"]: {
	armor?: ModelTypes["order_by"] | undefined,
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	damage?: ModelTypes["order_by"] | undefined,
	damage_armor?: ModelTypes["order_by"] | undefined,
	health?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "player_damages". All fields are combined with a logical 'AND'. */
["player_damages_bool_exp"]: {
	_and?: Array<ModelTypes["player_damages_bool_exp"]> | undefined,
	_not?: ModelTypes["player_damages_bool_exp"] | undefined,
	_or?: Array<ModelTypes["player_damages_bool_exp"]> | undefined,
	armor?: ModelTypes["Int_comparison_exp"] | undefined,
	attacked_location?: ModelTypes["String_comparison_exp"] | undefined,
	attacked_location_coordinates?: ModelTypes["String_comparison_exp"] | undefined,
	attacked_player?: ModelTypes["players_bool_exp"] | undefined,
	attacked_steam_id?: ModelTypes["bigint_comparison_exp"] | undefined,
	attacked_team?: ModelTypes["String_comparison_exp"] | undefined,
	attacker_location?: ModelTypes["String_comparison_exp"] | undefined,
	attacker_location_coordinates?: ModelTypes["String_comparison_exp"] | undefined,
	attacker_steam_id?: ModelTypes["bigint_comparison_exp"] | undefined,
	attacker_team?: ModelTypes["String_comparison_exp"] | undefined,
	damage?: ModelTypes["Int_comparison_exp"] | undefined,
	damage_armor?: ModelTypes["Int_comparison_exp"] | undefined,
	health?: ModelTypes["Int_comparison_exp"] | undefined,
	hitgroup?: ModelTypes["String_comparison_exp"] | undefined,
	id?: ModelTypes["uuid_comparison_exp"] | undefined,
	match?: ModelTypes["matches_bool_exp"] | undefined,
	match_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	match_map?: ModelTypes["match_maps_bool_exp"] | undefined,
	match_map_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	player?: ModelTypes["players_bool_exp"] | undefined,
	round?: ModelTypes["numeric_comparison_exp"] | undefined,
	team_damage?: ModelTypes["Boolean_comparison_exp"] | undefined,
	time?: ModelTypes["timestamptz_comparison_exp"] | undefined,
	with?: ModelTypes["String_comparison_exp"] | undefined
};
	["player_damages_constraint"]:player_damages_constraint;
	/** input type for incrementing numeric columns in table "player_damages" */
["player_damages_inc_input"]: {
	armor?: number | undefined,
	attacked_steam_id?: ModelTypes["bigint"] | undefined,
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	damage?: number | undefined,
	damage_armor?: number | undefined,
	health?: number | undefined,
	round?: ModelTypes["numeric"] | undefined
};
	/** input type for inserting data into table "player_damages" */
["player_damages_insert_input"]: {
	armor?: number | undefined,
	attacked_location?: string | undefined,
	attacked_location_coordinates?: string | undefined,
	attacked_player?: ModelTypes["players_obj_rel_insert_input"] | undefined,
	attacked_steam_id?: ModelTypes["bigint"] | undefined,
	attacked_team?: string | undefined,
	attacker_location?: string | undefined,
	attacker_location_coordinates?: string | undefined,
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	attacker_team?: string | undefined,
	damage?: number | undefined,
	damage_armor?: number | undefined,
	health?: number | undefined,
	hitgroup?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match?: ModelTypes["matches_obj_rel_insert_input"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map?: ModelTypes["match_maps_obj_rel_insert_input"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	player?: ModelTypes["players_obj_rel_insert_input"] | undefined,
	round?: ModelTypes["numeric"] | undefined,
	time?: ModelTypes["timestamptz"] | undefined,
	with?: string | undefined
};
	/** aggregate max on columns */
["player_damages_max_fields"]: {
		armor?: number | undefined,
	attacked_location?: string | undefined,
	attacked_location_coordinates?: string | undefined,
	attacked_steam_id?: ModelTypes["bigint"] | undefined,
	attacked_team?: string | undefined,
	attacker_location?: string | undefined,
	attacker_location_coordinates?: string | undefined,
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	attacker_team?: string | undefined,
	damage?: number | undefined,
	damage_armor?: number | undefined,
	health?: number | undefined,
	hitgroup?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	round?: ModelTypes["numeric"] | undefined,
	time?: ModelTypes["timestamptz"] | undefined,
	with?: string | undefined
};
	/** order by max() on columns of table "player_damages" */
["player_damages_max_order_by"]: {
	armor?: ModelTypes["order_by"] | undefined,
	attacked_location?: ModelTypes["order_by"] | undefined,
	attacked_location_coordinates?: ModelTypes["order_by"] | undefined,
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacked_team?: ModelTypes["order_by"] | undefined,
	attacker_location?: ModelTypes["order_by"] | undefined,
	attacker_location_coordinates?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_team?: ModelTypes["order_by"] | undefined,
	damage?: ModelTypes["order_by"] | undefined,
	damage_armor?: ModelTypes["order_by"] | undefined,
	health?: ModelTypes["order_by"] | undefined,
	hitgroup?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	match_map_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined,
	time?: ModelTypes["order_by"] | undefined,
	with?: ModelTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["player_damages_min_fields"]: {
		armor?: number | undefined,
	attacked_location?: string | undefined,
	attacked_location_coordinates?: string | undefined,
	attacked_steam_id?: ModelTypes["bigint"] | undefined,
	attacked_team?: string | undefined,
	attacker_location?: string | undefined,
	attacker_location_coordinates?: string | undefined,
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	attacker_team?: string | undefined,
	damage?: number | undefined,
	damage_armor?: number | undefined,
	health?: number | undefined,
	hitgroup?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	round?: ModelTypes["numeric"] | undefined,
	time?: ModelTypes["timestamptz"] | undefined,
	with?: string | undefined
};
	/** order by min() on columns of table "player_damages" */
["player_damages_min_order_by"]: {
	armor?: ModelTypes["order_by"] | undefined,
	attacked_location?: ModelTypes["order_by"] | undefined,
	attacked_location_coordinates?: ModelTypes["order_by"] | undefined,
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacked_team?: ModelTypes["order_by"] | undefined,
	attacker_location?: ModelTypes["order_by"] | undefined,
	attacker_location_coordinates?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_team?: ModelTypes["order_by"] | undefined,
	damage?: ModelTypes["order_by"] | undefined,
	damage_armor?: ModelTypes["order_by"] | undefined,
	health?: ModelTypes["order_by"] | undefined,
	hitgroup?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	match_map_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined,
	time?: ModelTypes["order_by"] | undefined,
	with?: ModelTypes["order_by"] | undefined
};
	/** response of any mutation on the table "player_damages" */
["player_damages_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["player_damages"]>
};
	/** on_conflict condition type for table "player_damages" */
["player_damages_on_conflict"]: {
	constraint: ModelTypes["player_damages_constraint"],
	update_columns: Array<ModelTypes["player_damages_update_column"]>,
	where?: ModelTypes["player_damages_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "player_damages". */
["player_damages_order_by"]: {
	armor?: ModelTypes["order_by"] | undefined,
	attacked_location?: ModelTypes["order_by"] | undefined,
	attacked_location_coordinates?: ModelTypes["order_by"] | undefined,
	attacked_player?: ModelTypes["players_order_by"] | undefined,
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacked_team?: ModelTypes["order_by"] | undefined,
	attacker_location?: ModelTypes["order_by"] | undefined,
	attacker_location_coordinates?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_team?: ModelTypes["order_by"] | undefined,
	damage?: ModelTypes["order_by"] | undefined,
	damage_armor?: ModelTypes["order_by"] | undefined,
	health?: ModelTypes["order_by"] | undefined,
	hitgroup?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	match?: ModelTypes["matches_order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	match_map?: ModelTypes["match_maps_order_by"] | undefined,
	match_map_id?: ModelTypes["order_by"] | undefined,
	player?: ModelTypes["players_order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined,
	team_damage?: ModelTypes["order_by"] | undefined,
	time?: ModelTypes["order_by"] | undefined,
	with?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: player_damages */
["player_damages_pk_columns_input"]: {
	id: ModelTypes["uuid"]
};
	["player_damages_select_column"]:player_damages_select_column;
	/** input type for updating data in table "player_damages" */
["player_damages_set_input"]: {
	armor?: number | undefined,
	attacked_location?: string | undefined,
	attacked_location_coordinates?: string | undefined,
	attacked_steam_id?: ModelTypes["bigint"] | undefined,
	attacked_team?: string | undefined,
	attacker_location?: string | undefined,
	attacker_location_coordinates?: string | undefined,
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	attacker_team?: string | undefined,
	damage?: number | undefined,
	damage_armor?: number | undefined,
	health?: number | undefined,
	hitgroup?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	round?: ModelTypes["numeric"] | undefined,
	time?: ModelTypes["timestamptz"] | undefined,
	with?: string | undefined
};
	/** aggregate stddev on columns */
["player_damages_stddev_fields"]: {
		armor?: number | undefined,
	attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	damage?: number | undefined,
	damage_armor?: number | undefined,
	health?: number | undefined,
	round?: number | undefined
};
	/** order by stddev() on columns of table "player_damages" */
["player_damages_stddev_order_by"]: {
	armor?: ModelTypes["order_by"] | undefined,
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	damage?: ModelTypes["order_by"] | undefined,
	damage_armor?: ModelTypes["order_by"] | undefined,
	health?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["player_damages_stddev_pop_fields"]: {
		armor?: number | undefined,
	attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	damage?: number | undefined,
	damage_armor?: number | undefined,
	health?: number | undefined,
	round?: number | undefined
};
	/** order by stddev_pop() on columns of table "player_damages" */
["player_damages_stddev_pop_order_by"]: {
	armor?: ModelTypes["order_by"] | undefined,
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	damage?: ModelTypes["order_by"] | undefined,
	damage_armor?: ModelTypes["order_by"] | undefined,
	health?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["player_damages_stddev_samp_fields"]: {
		armor?: number | undefined,
	attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	damage?: number | undefined,
	damage_armor?: number | undefined,
	health?: number | undefined,
	round?: number | undefined
};
	/** order by stddev_samp() on columns of table "player_damages" */
["player_damages_stddev_samp_order_by"]: {
	armor?: ModelTypes["order_by"] | undefined,
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	damage?: ModelTypes["order_by"] | undefined,
	damage_armor?: ModelTypes["order_by"] | undefined,
	health?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "player_damages" */
["player_damages_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["player_damages_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["player_damages_stream_cursor_value_input"]: {
	armor?: number | undefined,
	attacked_location?: string | undefined,
	attacked_location_coordinates?: string | undefined,
	attacked_steam_id?: ModelTypes["bigint"] | undefined,
	attacked_team?: string | undefined,
	attacker_location?: string | undefined,
	attacker_location_coordinates?: string | undefined,
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	attacker_team?: string | undefined,
	damage?: number | undefined,
	damage_armor?: number | undefined,
	health?: number | undefined,
	hitgroup?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	round?: ModelTypes["numeric"] | undefined,
	time?: ModelTypes["timestamptz"] | undefined,
	with?: string | undefined
};
	/** aggregate sum on columns */
["player_damages_sum_fields"]: {
		armor?: number | undefined,
	attacked_steam_id?: ModelTypes["bigint"] | undefined,
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	damage?: number | undefined,
	damage_armor?: number | undefined,
	health?: number | undefined,
	round?: ModelTypes["numeric"] | undefined
};
	/** order by sum() on columns of table "player_damages" */
["player_damages_sum_order_by"]: {
	armor?: ModelTypes["order_by"] | undefined,
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	damage?: ModelTypes["order_by"] | undefined,
	damage_armor?: ModelTypes["order_by"] | undefined,
	health?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	["player_damages_update_column"]:player_damages_update_column;
	["player_damages_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["player_damages_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["player_damages_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["player_damages_bool_exp"]
};
	/** aggregate var_pop on columns */
["player_damages_var_pop_fields"]: {
		armor?: number | undefined,
	attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	damage?: number | undefined,
	damage_armor?: number | undefined,
	health?: number | undefined,
	round?: number | undefined
};
	/** order by var_pop() on columns of table "player_damages" */
["player_damages_var_pop_order_by"]: {
	armor?: ModelTypes["order_by"] | undefined,
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	damage?: ModelTypes["order_by"] | undefined,
	damage_armor?: ModelTypes["order_by"] | undefined,
	health?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["player_damages_var_samp_fields"]: {
		armor?: number | undefined,
	attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	damage?: number | undefined,
	damage_armor?: number | undefined,
	health?: number | undefined,
	round?: number | undefined
};
	/** order by var_samp() on columns of table "player_damages" */
["player_damages_var_samp_order_by"]: {
	armor?: ModelTypes["order_by"] | undefined,
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	damage?: ModelTypes["order_by"] | undefined,
	damage_armor?: ModelTypes["order_by"] | undefined,
	health?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["player_damages_variance_fields"]: {
		armor?: number | undefined,
	attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	damage?: number | undefined,
	damage_armor?: number | undefined,
	health?: number | undefined,
	round?: number | undefined
};
	/** order by variance() on columns of table "player_damages" */
["player_damages_variance_order_by"]: {
	armor?: ModelTypes["order_by"] | undefined,
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	damage?: ModelTypes["order_by"] | undefined,
	damage_armor?: ModelTypes["order_by"] | undefined,
	health?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** columns and relationships of "player_flashes" */
["player_flashes"]: {
		attacked_steam_id: ModelTypes["bigint"],
	attacker_steam_id: ModelTypes["bigint"],
	/** An object relationship */
	blinded: ModelTypes["players"],
	duration: ModelTypes["numeric"],
	id: ModelTypes["uuid"],
	/** An object relationship */
	match: ModelTypes["matches"],
	match_id: ModelTypes["uuid"],
	/** An object relationship */
	match_map: ModelTypes["match_maps"],
	match_map_id: ModelTypes["uuid"],
	round: number,
	team_flash: boolean,
	/** An object relationship */
	thrown_by: ModelTypes["players"],
	time: ModelTypes["timestamptz"]
};
	/** aggregated selection of "player_flashes" */
["player_flashes_aggregate"]: {
		aggregate?: ModelTypes["player_flashes_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["player_flashes"]>
};
	["player_flashes_aggregate_bool_exp"]: {
	bool_and?: ModelTypes["player_flashes_aggregate_bool_exp_bool_and"] | undefined,
	bool_or?: ModelTypes["player_flashes_aggregate_bool_exp_bool_or"] | undefined,
	count?: ModelTypes["player_flashes_aggregate_bool_exp_count"] | undefined
};
	["player_flashes_aggregate_bool_exp_bool_and"]: {
	arguments: ModelTypes["player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_and_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: ModelTypes["player_flashes_bool_exp"] | undefined,
	predicate: ModelTypes["Boolean_comparison_exp"]
};
	["player_flashes_aggregate_bool_exp_bool_or"]: {
	arguments: ModelTypes["player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_or_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: ModelTypes["player_flashes_bool_exp"] | undefined,
	predicate: ModelTypes["Boolean_comparison_exp"]
};
	["player_flashes_aggregate_bool_exp_count"]: {
	arguments?: Array<ModelTypes["player_flashes_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: ModelTypes["player_flashes_bool_exp"] | undefined,
	predicate: ModelTypes["Int_comparison_exp"]
};
	/** aggregate fields of "player_flashes" */
["player_flashes_aggregate_fields"]: {
		avg?: ModelTypes["player_flashes_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["player_flashes_max_fields"] | undefined,
	min?: ModelTypes["player_flashes_min_fields"] | undefined,
	stddev?: ModelTypes["player_flashes_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["player_flashes_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["player_flashes_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["player_flashes_sum_fields"] | undefined,
	var_pop?: ModelTypes["player_flashes_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["player_flashes_var_samp_fields"] | undefined,
	variance?: ModelTypes["player_flashes_variance_fields"] | undefined
};
	/** order by aggregate values of table "player_flashes" */
["player_flashes_aggregate_order_by"]: {
	avg?: ModelTypes["player_flashes_avg_order_by"] | undefined,
	count?: ModelTypes["order_by"] | undefined,
	max?: ModelTypes["player_flashes_max_order_by"] | undefined,
	min?: ModelTypes["player_flashes_min_order_by"] | undefined,
	stddev?: ModelTypes["player_flashes_stddev_order_by"] | undefined,
	stddev_pop?: ModelTypes["player_flashes_stddev_pop_order_by"] | undefined,
	stddev_samp?: ModelTypes["player_flashes_stddev_samp_order_by"] | undefined,
	sum?: ModelTypes["player_flashes_sum_order_by"] | undefined,
	var_pop?: ModelTypes["player_flashes_var_pop_order_by"] | undefined,
	var_samp?: ModelTypes["player_flashes_var_samp_order_by"] | undefined,
	variance?: ModelTypes["player_flashes_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "player_flashes" */
["player_flashes_arr_rel_insert_input"]: {
	data: Array<ModelTypes["player_flashes_insert_input"]>,
	/** upsert condition */
	on_conflict?: ModelTypes["player_flashes_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["player_flashes_avg_fields"]: {
		attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	duration?: number | undefined,
	round?: number | undefined
};
	/** order by avg() on columns of table "player_flashes" */
["player_flashes_avg_order_by"]: {
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	duration?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "player_flashes". All fields are combined with a logical 'AND'. */
["player_flashes_bool_exp"]: {
	_and?: Array<ModelTypes["player_flashes_bool_exp"]> | undefined,
	_not?: ModelTypes["player_flashes_bool_exp"] | undefined,
	_or?: Array<ModelTypes["player_flashes_bool_exp"]> | undefined,
	attacked_steam_id?: ModelTypes["bigint_comparison_exp"] | undefined,
	attacker_steam_id?: ModelTypes["bigint_comparison_exp"] | undefined,
	blinded?: ModelTypes["players_bool_exp"] | undefined,
	duration?: ModelTypes["numeric_comparison_exp"] | undefined,
	id?: ModelTypes["uuid_comparison_exp"] | undefined,
	match?: ModelTypes["matches_bool_exp"] | undefined,
	match_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	match_map?: ModelTypes["match_maps_bool_exp"] | undefined,
	match_map_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	round?: ModelTypes["Int_comparison_exp"] | undefined,
	team_flash?: ModelTypes["Boolean_comparison_exp"] | undefined,
	thrown_by?: ModelTypes["players_bool_exp"] | undefined,
	time?: ModelTypes["timestamptz_comparison_exp"] | undefined
};
	["player_flashes_constraint"]:player_flashes_constraint;
	/** input type for incrementing numeric columns in table "player_flashes" */
["player_flashes_inc_input"]: {
	attacked_steam_id?: ModelTypes["bigint"] | undefined,
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	duration?: ModelTypes["numeric"] | undefined,
	round?: number | undefined
};
	/** input type for inserting data into table "player_flashes" */
["player_flashes_insert_input"]: {
	attacked_steam_id?: ModelTypes["bigint"] | undefined,
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	blinded?: ModelTypes["players_obj_rel_insert_input"] | undefined,
	duration?: ModelTypes["numeric"] | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match?: ModelTypes["matches_obj_rel_insert_input"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map?: ModelTypes["match_maps_obj_rel_insert_input"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	round?: number | undefined,
	team_flash?: boolean | undefined,
	thrown_by?: ModelTypes["players_obj_rel_insert_input"] | undefined,
	time?: ModelTypes["timestamptz"] | undefined
};
	/** aggregate max on columns */
["player_flashes_max_fields"]: {
		attacked_steam_id?: ModelTypes["bigint"] | undefined,
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	duration?: ModelTypes["numeric"] | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	round?: number | undefined,
	time?: ModelTypes["timestamptz"] | undefined
};
	/** order by max() on columns of table "player_flashes" */
["player_flashes_max_order_by"]: {
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	duration?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	match_map_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined,
	time?: ModelTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["player_flashes_min_fields"]: {
		attacked_steam_id?: ModelTypes["bigint"] | undefined,
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	duration?: ModelTypes["numeric"] | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	round?: number | undefined,
	time?: ModelTypes["timestamptz"] | undefined
};
	/** order by min() on columns of table "player_flashes" */
["player_flashes_min_order_by"]: {
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	duration?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	match_map_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined,
	time?: ModelTypes["order_by"] | undefined
};
	/** response of any mutation on the table "player_flashes" */
["player_flashes_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["player_flashes"]>
};
	/** on_conflict condition type for table "player_flashes" */
["player_flashes_on_conflict"]: {
	constraint: ModelTypes["player_flashes_constraint"],
	update_columns: Array<ModelTypes["player_flashes_update_column"]>,
	where?: ModelTypes["player_flashes_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "player_flashes". */
["player_flashes_order_by"]: {
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	blinded?: ModelTypes["players_order_by"] | undefined,
	duration?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	match?: ModelTypes["matches_order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	match_map?: ModelTypes["match_maps_order_by"] | undefined,
	match_map_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined,
	team_flash?: ModelTypes["order_by"] | undefined,
	thrown_by?: ModelTypes["players_order_by"] | undefined,
	time?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: player_flashes */
["player_flashes_pk_columns_input"]: {
	id: ModelTypes["uuid"]
};
	["player_flashes_select_column"]:player_flashes_select_column;
	["player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_and_arguments_columns"]:player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_and_arguments_columns;
	["player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_or_arguments_columns"]:player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_or_arguments_columns;
	/** input type for updating data in table "player_flashes" */
["player_flashes_set_input"]: {
	attacked_steam_id?: ModelTypes["bigint"] | undefined,
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	duration?: ModelTypes["numeric"] | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	round?: number | undefined,
	team_flash?: boolean | undefined,
	time?: ModelTypes["timestamptz"] | undefined
};
	/** aggregate stddev on columns */
["player_flashes_stddev_fields"]: {
		attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	duration?: number | undefined,
	round?: number | undefined
};
	/** order by stddev() on columns of table "player_flashes" */
["player_flashes_stddev_order_by"]: {
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	duration?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["player_flashes_stddev_pop_fields"]: {
		attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	duration?: number | undefined,
	round?: number | undefined
};
	/** order by stddev_pop() on columns of table "player_flashes" */
["player_flashes_stddev_pop_order_by"]: {
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	duration?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["player_flashes_stddev_samp_fields"]: {
		attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	duration?: number | undefined,
	round?: number | undefined
};
	/** order by stddev_samp() on columns of table "player_flashes" */
["player_flashes_stddev_samp_order_by"]: {
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	duration?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "player_flashes" */
["player_flashes_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["player_flashes_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["player_flashes_stream_cursor_value_input"]: {
	attacked_steam_id?: ModelTypes["bigint"] | undefined,
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	duration?: ModelTypes["numeric"] | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	round?: number | undefined,
	team_flash?: boolean | undefined,
	time?: ModelTypes["timestamptz"] | undefined
};
	/** aggregate sum on columns */
["player_flashes_sum_fields"]: {
		attacked_steam_id?: ModelTypes["bigint"] | undefined,
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	duration?: ModelTypes["numeric"] | undefined,
	round?: number | undefined
};
	/** order by sum() on columns of table "player_flashes" */
["player_flashes_sum_order_by"]: {
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	duration?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	["player_flashes_update_column"]:player_flashes_update_column;
	["player_flashes_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["player_flashes_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["player_flashes_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["player_flashes_bool_exp"]
};
	/** aggregate var_pop on columns */
["player_flashes_var_pop_fields"]: {
		attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	duration?: number | undefined,
	round?: number | undefined
};
	/** order by var_pop() on columns of table "player_flashes" */
["player_flashes_var_pop_order_by"]: {
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	duration?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["player_flashes_var_samp_fields"]: {
		attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	duration?: number | undefined,
	round?: number | undefined
};
	/** order by var_samp() on columns of table "player_flashes" */
["player_flashes_var_samp_order_by"]: {
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	duration?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["player_flashes_variance_fields"]: {
		attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	duration?: number | undefined,
	round?: number | undefined
};
	/** order by variance() on columns of table "player_flashes" */
["player_flashes_variance_order_by"]: {
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	duration?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** columns and relationships of "player_kills" */
["player_kills"]: {
		assisted: boolean,
	attacked_location: string,
	attacked_location_coordinates?: string | undefined,
	/** An object relationship */
	attacked_player: ModelTypes["players"],
	attacked_steam_id: ModelTypes["bigint"],
	attacked_team: string,
	attacker_location?: string | undefined,
	attacker_location_coordinates?: string | undefined,
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	attacker_team?: string | undefined,
	blinded: boolean,
	headshot: boolean,
	hitgroup: string,
	id: ModelTypes["uuid"],
	in_air: boolean,
	/** An object relationship */
	match: ModelTypes["matches"],
	match_id: ModelTypes["uuid"],
	/** An object relationship */
	match_map: ModelTypes["match_maps"],
	match_map_id: ModelTypes["uuid"],
	no_scope: boolean,
	/** An object relationship */
	player?: ModelTypes["players"] | undefined,
	round: number,
	thru_smoke: boolean,
	thru_wall: boolean,
	time: ModelTypes["timestamptz"],
	with?: string | undefined
};
	/** aggregated selection of "player_kills" */
["player_kills_aggregate"]: {
		aggregate?: ModelTypes["player_kills_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["player_kills"]>
};
	["player_kills_aggregate_bool_exp"]: {
	bool_and?: ModelTypes["player_kills_aggregate_bool_exp_bool_and"] | undefined,
	bool_or?: ModelTypes["player_kills_aggregate_bool_exp_bool_or"] | undefined,
	count?: ModelTypes["player_kills_aggregate_bool_exp_count"] | undefined
};
	["player_kills_aggregate_bool_exp_bool_and"]: {
	arguments: ModelTypes["player_kills_select_column_player_kills_aggregate_bool_exp_bool_and_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: ModelTypes["player_kills_bool_exp"] | undefined,
	predicate: ModelTypes["Boolean_comparison_exp"]
};
	["player_kills_aggregate_bool_exp_bool_or"]: {
	arguments: ModelTypes["player_kills_select_column_player_kills_aggregate_bool_exp_bool_or_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: ModelTypes["player_kills_bool_exp"] | undefined,
	predicate: ModelTypes["Boolean_comparison_exp"]
};
	["player_kills_aggregate_bool_exp_count"]: {
	arguments?: Array<ModelTypes["player_kills_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: ModelTypes["player_kills_bool_exp"] | undefined,
	predicate: ModelTypes["Int_comparison_exp"]
};
	/** aggregate fields of "player_kills" */
["player_kills_aggregate_fields"]: {
		avg?: ModelTypes["player_kills_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["player_kills_max_fields"] | undefined,
	min?: ModelTypes["player_kills_min_fields"] | undefined,
	stddev?: ModelTypes["player_kills_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["player_kills_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["player_kills_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["player_kills_sum_fields"] | undefined,
	var_pop?: ModelTypes["player_kills_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["player_kills_var_samp_fields"] | undefined,
	variance?: ModelTypes["player_kills_variance_fields"] | undefined
};
	/** order by aggregate values of table "player_kills" */
["player_kills_aggregate_order_by"]: {
	avg?: ModelTypes["player_kills_avg_order_by"] | undefined,
	count?: ModelTypes["order_by"] | undefined,
	max?: ModelTypes["player_kills_max_order_by"] | undefined,
	min?: ModelTypes["player_kills_min_order_by"] | undefined,
	stddev?: ModelTypes["player_kills_stddev_order_by"] | undefined,
	stddev_pop?: ModelTypes["player_kills_stddev_pop_order_by"] | undefined,
	stddev_samp?: ModelTypes["player_kills_stddev_samp_order_by"] | undefined,
	sum?: ModelTypes["player_kills_sum_order_by"] | undefined,
	var_pop?: ModelTypes["player_kills_var_pop_order_by"] | undefined,
	var_samp?: ModelTypes["player_kills_var_samp_order_by"] | undefined,
	variance?: ModelTypes["player_kills_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "player_kills" */
["player_kills_arr_rel_insert_input"]: {
	data: Array<ModelTypes["player_kills_insert_input"]>,
	/** upsert condition */
	on_conflict?: ModelTypes["player_kills_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["player_kills_avg_fields"]: {
		attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by avg() on columns of table "player_kills" */
["player_kills_avg_order_by"]: {
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "player_kills". All fields are combined with a logical 'AND'. */
["player_kills_bool_exp"]: {
	_and?: Array<ModelTypes["player_kills_bool_exp"]> | undefined,
	_not?: ModelTypes["player_kills_bool_exp"] | undefined,
	_or?: Array<ModelTypes["player_kills_bool_exp"]> | undefined,
	assisted?: ModelTypes["Boolean_comparison_exp"] | undefined,
	attacked_location?: ModelTypes["String_comparison_exp"] | undefined,
	attacked_location_coordinates?: ModelTypes["String_comparison_exp"] | undefined,
	attacked_player?: ModelTypes["players_bool_exp"] | undefined,
	attacked_steam_id?: ModelTypes["bigint_comparison_exp"] | undefined,
	attacked_team?: ModelTypes["String_comparison_exp"] | undefined,
	attacker_location?: ModelTypes["String_comparison_exp"] | undefined,
	attacker_location_coordinates?: ModelTypes["String_comparison_exp"] | undefined,
	attacker_steam_id?: ModelTypes["bigint_comparison_exp"] | undefined,
	attacker_team?: ModelTypes["String_comparison_exp"] | undefined,
	blinded?: ModelTypes["Boolean_comparison_exp"] | undefined,
	headshot?: ModelTypes["Boolean_comparison_exp"] | undefined,
	hitgroup?: ModelTypes["String_comparison_exp"] | undefined,
	id?: ModelTypes["uuid_comparison_exp"] | undefined,
	in_air?: ModelTypes["Boolean_comparison_exp"] | undefined,
	match?: ModelTypes["matches_bool_exp"] | undefined,
	match_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	match_map?: ModelTypes["match_maps_bool_exp"] | undefined,
	match_map_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	no_scope?: ModelTypes["Boolean_comparison_exp"] | undefined,
	player?: ModelTypes["players_bool_exp"] | undefined,
	round?: ModelTypes["Int_comparison_exp"] | undefined,
	thru_smoke?: ModelTypes["Boolean_comparison_exp"] | undefined,
	thru_wall?: ModelTypes["Boolean_comparison_exp"] | undefined,
	time?: ModelTypes["timestamptz_comparison_exp"] | undefined,
	with?: ModelTypes["String_comparison_exp"] | undefined
};
	["player_kills_constraint"]:player_kills_constraint;
	/** input type for incrementing numeric columns in table "player_kills" */
["player_kills_inc_input"]: {
	attacked_steam_id?: ModelTypes["bigint"] | undefined,
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	round?: number | undefined
};
	/** input type for inserting data into table "player_kills" */
["player_kills_insert_input"]: {
	assisted?: boolean | undefined,
	attacked_location?: string | undefined,
	attacked_location_coordinates?: string | undefined,
	attacked_player?: ModelTypes["players_obj_rel_insert_input"] | undefined,
	attacked_steam_id?: ModelTypes["bigint"] | undefined,
	attacked_team?: string | undefined,
	attacker_location?: string | undefined,
	attacker_location_coordinates?: string | undefined,
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	attacker_team?: string | undefined,
	blinded?: boolean | undefined,
	headshot?: boolean | undefined,
	hitgroup?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	in_air?: boolean | undefined,
	match?: ModelTypes["matches_obj_rel_insert_input"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map?: ModelTypes["match_maps_obj_rel_insert_input"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	no_scope?: boolean | undefined,
	player?: ModelTypes["players_obj_rel_insert_input"] | undefined,
	round?: number | undefined,
	thru_smoke?: boolean | undefined,
	thru_wall?: boolean | undefined,
	time?: ModelTypes["timestamptz"] | undefined,
	with?: string | undefined
};
	/** aggregate max on columns */
["player_kills_max_fields"]: {
		attacked_location?: string | undefined,
	attacked_location_coordinates?: string | undefined,
	attacked_steam_id?: ModelTypes["bigint"] | undefined,
	attacked_team?: string | undefined,
	attacker_location?: string | undefined,
	attacker_location_coordinates?: string | undefined,
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	attacker_team?: string | undefined,
	hitgroup?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	round?: number | undefined,
	time?: ModelTypes["timestamptz"] | undefined,
	with?: string | undefined
};
	/** order by max() on columns of table "player_kills" */
["player_kills_max_order_by"]: {
	attacked_location?: ModelTypes["order_by"] | undefined,
	attacked_location_coordinates?: ModelTypes["order_by"] | undefined,
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacked_team?: ModelTypes["order_by"] | undefined,
	attacker_location?: ModelTypes["order_by"] | undefined,
	attacker_location_coordinates?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_team?: ModelTypes["order_by"] | undefined,
	hitgroup?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	match_map_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined,
	time?: ModelTypes["order_by"] | undefined,
	with?: ModelTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["player_kills_min_fields"]: {
		attacked_location?: string | undefined,
	attacked_location_coordinates?: string | undefined,
	attacked_steam_id?: ModelTypes["bigint"] | undefined,
	attacked_team?: string | undefined,
	attacker_location?: string | undefined,
	attacker_location_coordinates?: string | undefined,
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	attacker_team?: string | undefined,
	hitgroup?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	round?: number | undefined,
	time?: ModelTypes["timestamptz"] | undefined,
	with?: string | undefined
};
	/** order by min() on columns of table "player_kills" */
["player_kills_min_order_by"]: {
	attacked_location?: ModelTypes["order_by"] | undefined,
	attacked_location_coordinates?: ModelTypes["order_by"] | undefined,
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacked_team?: ModelTypes["order_by"] | undefined,
	attacker_location?: ModelTypes["order_by"] | undefined,
	attacker_location_coordinates?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_team?: ModelTypes["order_by"] | undefined,
	hitgroup?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	match_map_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined,
	time?: ModelTypes["order_by"] | undefined,
	with?: ModelTypes["order_by"] | undefined
};
	/** response of any mutation on the table "player_kills" */
["player_kills_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["player_kills"]>
};
	/** on_conflict condition type for table "player_kills" */
["player_kills_on_conflict"]: {
	constraint: ModelTypes["player_kills_constraint"],
	update_columns: Array<ModelTypes["player_kills_update_column"]>,
	where?: ModelTypes["player_kills_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "player_kills". */
["player_kills_order_by"]: {
	assisted?: ModelTypes["order_by"] | undefined,
	attacked_location?: ModelTypes["order_by"] | undefined,
	attacked_location_coordinates?: ModelTypes["order_by"] | undefined,
	attacked_player?: ModelTypes["players_order_by"] | undefined,
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacked_team?: ModelTypes["order_by"] | undefined,
	attacker_location?: ModelTypes["order_by"] | undefined,
	attacker_location_coordinates?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_team?: ModelTypes["order_by"] | undefined,
	blinded?: ModelTypes["order_by"] | undefined,
	headshot?: ModelTypes["order_by"] | undefined,
	hitgroup?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	in_air?: ModelTypes["order_by"] | undefined,
	match?: ModelTypes["matches_order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	match_map?: ModelTypes["match_maps_order_by"] | undefined,
	match_map_id?: ModelTypes["order_by"] | undefined,
	no_scope?: ModelTypes["order_by"] | undefined,
	player?: ModelTypes["players_order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined,
	thru_smoke?: ModelTypes["order_by"] | undefined,
	thru_wall?: ModelTypes["order_by"] | undefined,
	time?: ModelTypes["order_by"] | undefined,
	with?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: player_kills */
["player_kills_pk_columns_input"]: {
	id: ModelTypes["uuid"]
};
	["player_kills_select_column"]:player_kills_select_column;
	["player_kills_select_column_player_kills_aggregate_bool_exp_bool_and_arguments_columns"]:player_kills_select_column_player_kills_aggregate_bool_exp_bool_and_arguments_columns;
	["player_kills_select_column_player_kills_aggregate_bool_exp_bool_or_arguments_columns"]:player_kills_select_column_player_kills_aggregate_bool_exp_bool_or_arguments_columns;
	/** input type for updating data in table "player_kills" */
["player_kills_set_input"]: {
	assisted?: boolean | undefined,
	attacked_location?: string | undefined,
	attacked_location_coordinates?: string | undefined,
	attacked_steam_id?: ModelTypes["bigint"] | undefined,
	attacked_team?: string | undefined,
	attacker_location?: string | undefined,
	attacker_location_coordinates?: string | undefined,
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	attacker_team?: string | undefined,
	blinded?: boolean | undefined,
	headshot?: boolean | undefined,
	hitgroup?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	in_air?: boolean | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	no_scope?: boolean | undefined,
	round?: number | undefined,
	thru_smoke?: boolean | undefined,
	thru_wall?: boolean | undefined,
	time?: ModelTypes["timestamptz"] | undefined,
	with?: string | undefined
};
	/** aggregate stddev on columns */
["player_kills_stddev_fields"]: {
		attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by stddev() on columns of table "player_kills" */
["player_kills_stddev_order_by"]: {
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["player_kills_stddev_pop_fields"]: {
		attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by stddev_pop() on columns of table "player_kills" */
["player_kills_stddev_pop_order_by"]: {
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["player_kills_stddev_samp_fields"]: {
		attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by stddev_samp() on columns of table "player_kills" */
["player_kills_stddev_samp_order_by"]: {
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "player_kills" */
["player_kills_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["player_kills_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["player_kills_stream_cursor_value_input"]: {
	assisted?: boolean | undefined,
	attacked_location?: string | undefined,
	attacked_location_coordinates?: string | undefined,
	attacked_steam_id?: ModelTypes["bigint"] | undefined,
	attacked_team?: string | undefined,
	attacker_location?: string | undefined,
	attacker_location_coordinates?: string | undefined,
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	attacker_team?: string | undefined,
	blinded?: boolean | undefined,
	headshot?: boolean | undefined,
	hitgroup?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	in_air?: boolean | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	no_scope?: boolean | undefined,
	round?: number | undefined,
	thru_smoke?: boolean | undefined,
	thru_wall?: boolean | undefined,
	time?: ModelTypes["timestamptz"] | undefined,
	with?: string | undefined
};
	/** aggregate sum on columns */
["player_kills_sum_fields"]: {
		attacked_steam_id?: ModelTypes["bigint"] | undefined,
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	round?: number | undefined
};
	/** order by sum() on columns of table "player_kills" */
["player_kills_sum_order_by"]: {
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	["player_kills_update_column"]:player_kills_update_column;
	["player_kills_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["player_kills_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["player_kills_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["player_kills_bool_exp"]
};
	/** aggregate var_pop on columns */
["player_kills_var_pop_fields"]: {
		attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by var_pop() on columns of table "player_kills" */
["player_kills_var_pop_order_by"]: {
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["player_kills_var_samp_fields"]: {
		attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by var_samp() on columns of table "player_kills" */
["player_kills_var_samp_order_by"]: {
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["player_kills_variance_fields"]: {
		attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by variance() on columns of table "player_kills" */
["player_kills_variance_order_by"]: {
	attacked_steam_id?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** columns and relationships of "player_objectives" */
["player_objectives"]: {
		id: ModelTypes["uuid"],
	/** An object relationship */
	match: ModelTypes["matches"],
	match_id: ModelTypes["uuid"],
	/** An object relationship */
	match_map: ModelTypes["match_maps"],
	match_map_id: ModelTypes["uuid"],
	/** An object relationship */
	player: ModelTypes["players"],
	player_steam_id: ModelTypes["bigint"],
	round: number,
	time: ModelTypes["timestamptz"],
	type: ModelTypes["e_objective_types_enum"]
};
	/** aggregated selection of "player_objectives" */
["player_objectives_aggregate"]: {
		aggregate?: ModelTypes["player_objectives_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["player_objectives"]>
};
	["player_objectives_aggregate_bool_exp"]: {
	count?: ModelTypes["player_objectives_aggregate_bool_exp_count"] | undefined
};
	["player_objectives_aggregate_bool_exp_count"]: {
	arguments?: Array<ModelTypes["player_objectives_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: ModelTypes["player_objectives_bool_exp"] | undefined,
	predicate: ModelTypes["Int_comparison_exp"]
};
	/** aggregate fields of "player_objectives" */
["player_objectives_aggregate_fields"]: {
		avg?: ModelTypes["player_objectives_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["player_objectives_max_fields"] | undefined,
	min?: ModelTypes["player_objectives_min_fields"] | undefined,
	stddev?: ModelTypes["player_objectives_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["player_objectives_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["player_objectives_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["player_objectives_sum_fields"] | undefined,
	var_pop?: ModelTypes["player_objectives_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["player_objectives_var_samp_fields"] | undefined,
	variance?: ModelTypes["player_objectives_variance_fields"] | undefined
};
	/** order by aggregate values of table "player_objectives" */
["player_objectives_aggregate_order_by"]: {
	avg?: ModelTypes["player_objectives_avg_order_by"] | undefined,
	count?: ModelTypes["order_by"] | undefined,
	max?: ModelTypes["player_objectives_max_order_by"] | undefined,
	min?: ModelTypes["player_objectives_min_order_by"] | undefined,
	stddev?: ModelTypes["player_objectives_stddev_order_by"] | undefined,
	stddev_pop?: ModelTypes["player_objectives_stddev_pop_order_by"] | undefined,
	stddev_samp?: ModelTypes["player_objectives_stddev_samp_order_by"] | undefined,
	sum?: ModelTypes["player_objectives_sum_order_by"] | undefined,
	var_pop?: ModelTypes["player_objectives_var_pop_order_by"] | undefined,
	var_samp?: ModelTypes["player_objectives_var_samp_order_by"] | undefined,
	variance?: ModelTypes["player_objectives_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "player_objectives" */
["player_objectives_arr_rel_insert_input"]: {
	data: Array<ModelTypes["player_objectives_insert_input"]>,
	/** upsert condition */
	on_conflict?: ModelTypes["player_objectives_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["player_objectives_avg_fields"]: {
		player_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by avg() on columns of table "player_objectives" */
["player_objectives_avg_order_by"]: {
	player_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "player_objectives". All fields are combined with a logical 'AND'. */
["player_objectives_bool_exp"]: {
	_and?: Array<ModelTypes["player_objectives_bool_exp"]> | undefined,
	_not?: ModelTypes["player_objectives_bool_exp"] | undefined,
	_or?: Array<ModelTypes["player_objectives_bool_exp"]> | undefined,
	id?: ModelTypes["uuid_comparison_exp"] | undefined,
	match?: ModelTypes["matches_bool_exp"] | undefined,
	match_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	match_map?: ModelTypes["match_maps_bool_exp"] | undefined,
	match_map_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	player?: ModelTypes["players_bool_exp"] | undefined,
	player_steam_id?: ModelTypes["bigint_comparison_exp"] | undefined,
	round?: ModelTypes["Int_comparison_exp"] | undefined,
	time?: ModelTypes["timestamptz_comparison_exp"] | undefined,
	type?: ModelTypes["e_objective_types_enum_comparison_exp"] | undefined
};
	["player_objectives_constraint"]:player_objectives_constraint;
	/** input type for incrementing numeric columns in table "player_objectives" */
["player_objectives_inc_input"]: {
	player_steam_id?: ModelTypes["bigint"] | undefined,
	round?: number | undefined
};
	/** input type for inserting data into table "player_objectives" */
["player_objectives_insert_input"]: {
	id?: ModelTypes["uuid"] | undefined,
	match?: ModelTypes["matches_obj_rel_insert_input"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map?: ModelTypes["match_maps_obj_rel_insert_input"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	player?: ModelTypes["players_obj_rel_insert_input"] | undefined,
	player_steam_id?: ModelTypes["bigint"] | undefined,
	round?: number | undefined,
	time?: ModelTypes["timestamptz"] | undefined,
	type?: ModelTypes["e_objective_types_enum"] | undefined
};
	/** aggregate max on columns */
["player_objectives_max_fields"]: {
		id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	player_steam_id?: ModelTypes["bigint"] | undefined,
	round?: number | undefined,
	time?: ModelTypes["timestamptz"] | undefined
};
	/** order by max() on columns of table "player_objectives" */
["player_objectives_max_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	match_map_id?: ModelTypes["order_by"] | undefined,
	player_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined,
	time?: ModelTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["player_objectives_min_fields"]: {
		id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	player_steam_id?: ModelTypes["bigint"] | undefined,
	round?: number | undefined,
	time?: ModelTypes["timestamptz"] | undefined
};
	/** order by min() on columns of table "player_objectives" */
["player_objectives_min_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	match_map_id?: ModelTypes["order_by"] | undefined,
	player_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined,
	time?: ModelTypes["order_by"] | undefined
};
	/** response of any mutation on the table "player_objectives" */
["player_objectives_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["player_objectives"]>
};
	/** on_conflict condition type for table "player_objectives" */
["player_objectives_on_conflict"]: {
	constraint: ModelTypes["player_objectives_constraint"],
	update_columns: Array<ModelTypes["player_objectives_update_column"]>,
	where?: ModelTypes["player_objectives_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "player_objectives". */
["player_objectives_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	match?: ModelTypes["matches_order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	match_map?: ModelTypes["match_maps_order_by"] | undefined,
	match_map_id?: ModelTypes["order_by"] | undefined,
	player?: ModelTypes["players_order_by"] | undefined,
	player_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined,
	time?: ModelTypes["order_by"] | undefined,
	type?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: player_objectives */
["player_objectives_pk_columns_input"]: {
	id: ModelTypes["uuid"]
};
	["player_objectives_select_column"]:player_objectives_select_column;
	/** input type for updating data in table "player_objectives" */
["player_objectives_set_input"]: {
	id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	player_steam_id?: ModelTypes["bigint"] | undefined,
	round?: number | undefined,
	time?: ModelTypes["timestamptz"] | undefined,
	type?: ModelTypes["e_objective_types_enum"] | undefined
};
	/** aggregate stddev on columns */
["player_objectives_stddev_fields"]: {
		player_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by stddev() on columns of table "player_objectives" */
["player_objectives_stddev_order_by"]: {
	player_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["player_objectives_stddev_pop_fields"]: {
		player_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by stddev_pop() on columns of table "player_objectives" */
["player_objectives_stddev_pop_order_by"]: {
	player_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["player_objectives_stddev_samp_fields"]: {
		player_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by stddev_samp() on columns of table "player_objectives" */
["player_objectives_stddev_samp_order_by"]: {
	player_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "player_objectives" */
["player_objectives_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["player_objectives_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["player_objectives_stream_cursor_value_input"]: {
	id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	player_steam_id?: ModelTypes["bigint"] | undefined,
	round?: number | undefined,
	time?: ModelTypes["timestamptz"] | undefined,
	type?: ModelTypes["e_objective_types_enum"] | undefined
};
	/** aggregate sum on columns */
["player_objectives_sum_fields"]: {
		player_steam_id?: ModelTypes["bigint"] | undefined,
	round?: number | undefined
};
	/** order by sum() on columns of table "player_objectives" */
["player_objectives_sum_order_by"]: {
	player_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	["player_objectives_update_column"]:player_objectives_update_column;
	["player_objectives_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["player_objectives_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["player_objectives_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["player_objectives_bool_exp"]
};
	/** aggregate var_pop on columns */
["player_objectives_var_pop_fields"]: {
		player_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by var_pop() on columns of table "player_objectives" */
["player_objectives_var_pop_order_by"]: {
	player_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["player_objectives_var_samp_fields"]: {
		player_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by var_samp() on columns of table "player_objectives" */
["player_objectives_var_samp_order_by"]: {
	player_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["player_objectives_variance_fields"]: {
		player_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by variance() on columns of table "player_objectives" */
["player_objectives_variance_order_by"]: {
	player_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** columns and relationships of "player_unused_utility" */
["player_unused_utility"]: {
		id: ModelTypes["uuid"],
	/** An object relationship */
	match: ModelTypes["matches"],
	match_id: ModelTypes["uuid"],
	/** An object relationship */
	match_map: ModelTypes["match_maps"],
	match_map_id: ModelTypes["uuid"],
	/** An object relationship */
	player: ModelTypes["players"],
	player_steam_id: ModelTypes["bigint"],
	round: number,
	unused: number
};
	/** aggregated selection of "player_unused_utility" */
["player_unused_utility_aggregate"]: {
		aggregate?: ModelTypes["player_unused_utility_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["player_unused_utility"]>
};
	["player_unused_utility_aggregate_bool_exp"]: {
	count?: ModelTypes["player_unused_utility_aggregate_bool_exp_count"] | undefined
};
	["player_unused_utility_aggregate_bool_exp_count"]: {
	arguments?: Array<ModelTypes["player_unused_utility_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: ModelTypes["player_unused_utility_bool_exp"] | undefined,
	predicate: ModelTypes["Int_comparison_exp"]
};
	/** aggregate fields of "player_unused_utility" */
["player_unused_utility_aggregate_fields"]: {
		avg?: ModelTypes["player_unused_utility_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["player_unused_utility_max_fields"] | undefined,
	min?: ModelTypes["player_unused_utility_min_fields"] | undefined,
	stddev?: ModelTypes["player_unused_utility_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["player_unused_utility_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["player_unused_utility_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["player_unused_utility_sum_fields"] | undefined,
	var_pop?: ModelTypes["player_unused_utility_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["player_unused_utility_var_samp_fields"] | undefined,
	variance?: ModelTypes["player_unused_utility_variance_fields"] | undefined
};
	/** order by aggregate values of table "player_unused_utility" */
["player_unused_utility_aggregate_order_by"]: {
	avg?: ModelTypes["player_unused_utility_avg_order_by"] | undefined,
	count?: ModelTypes["order_by"] | undefined,
	max?: ModelTypes["player_unused_utility_max_order_by"] | undefined,
	min?: ModelTypes["player_unused_utility_min_order_by"] | undefined,
	stddev?: ModelTypes["player_unused_utility_stddev_order_by"] | undefined,
	stddev_pop?: ModelTypes["player_unused_utility_stddev_pop_order_by"] | undefined,
	stddev_samp?: ModelTypes["player_unused_utility_stddev_samp_order_by"] | undefined,
	sum?: ModelTypes["player_unused_utility_sum_order_by"] | undefined,
	var_pop?: ModelTypes["player_unused_utility_var_pop_order_by"] | undefined,
	var_samp?: ModelTypes["player_unused_utility_var_samp_order_by"] | undefined,
	variance?: ModelTypes["player_unused_utility_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "player_unused_utility" */
["player_unused_utility_arr_rel_insert_input"]: {
	data: Array<ModelTypes["player_unused_utility_insert_input"]>,
	/** upsert condition */
	on_conflict?: ModelTypes["player_unused_utility_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["player_unused_utility_avg_fields"]: {
		player_steam_id?: number | undefined,
	round?: number | undefined,
	unused?: number | undefined
};
	/** order by avg() on columns of table "player_unused_utility" */
["player_unused_utility_avg_order_by"]: {
	player_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined,
	unused?: ModelTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "player_unused_utility". All fields are combined with a logical 'AND'. */
["player_unused_utility_bool_exp"]: {
	_and?: Array<ModelTypes["player_unused_utility_bool_exp"]> | undefined,
	_not?: ModelTypes["player_unused_utility_bool_exp"] | undefined,
	_or?: Array<ModelTypes["player_unused_utility_bool_exp"]> | undefined,
	id?: ModelTypes["uuid_comparison_exp"] | undefined,
	match?: ModelTypes["matches_bool_exp"] | undefined,
	match_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	match_map?: ModelTypes["match_maps_bool_exp"] | undefined,
	match_map_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	player?: ModelTypes["players_bool_exp"] | undefined,
	player_steam_id?: ModelTypes["bigint_comparison_exp"] | undefined,
	round?: ModelTypes["Int_comparison_exp"] | undefined,
	unused?: ModelTypes["Int_comparison_exp"] | undefined
};
	["player_unused_utility_constraint"]:player_unused_utility_constraint;
	/** input type for incrementing numeric columns in table "player_unused_utility" */
["player_unused_utility_inc_input"]: {
	player_steam_id?: ModelTypes["bigint"] | undefined,
	round?: number | undefined,
	unused?: number | undefined
};
	/** input type for inserting data into table "player_unused_utility" */
["player_unused_utility_insert_input"]: {
	id?: ModelTypes["uuid"] | undefined,
	match?: ModelTypes["matches_obj_rel_insert_input"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map?: ModelTypes["match_maps_obj_rel_insert_input"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	player?: ModelTypes["players_obj_rel_insert_input"] | undefined,
	player_steam_id?: ModelTypes["bigint"] | undefined,
	round?: number | undefined,
	unused?: number | undefined
};
	/** aggregate max on columns */
["player_unused_utility_max_fields"]: {
		id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	player_steam_id?: ModelTypes["bigint"] | undefined,
	round?: number | undefined,
	unused?: number | undefined
};
	/** order by max() on columns of table "player_unused_utility" */
["player_unused_utility_max_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	match_map_id?: ModelTypes["order_by"] | undefined,
	player_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined,
	unused?: ModelTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["player_unused_utility_min_fields"]: {
		id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	player_steam_id?: ModelTypes["bigint"] | undefined,
	round?: number | undefined,
	unused?: number | undefined
};
	/** order by min() on columns of table "player_unused_utility" */
["player_unused_utility_min_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	match_map_id?: ModelTypes["order_by"] | undefined,
	player_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined,
	unused?: ModelTypes["order_by"] | undefined
};
	/** response of any mutation on the table "player_unused_utility" */
["player_unused_utility_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["player_unused_utility"]>
};
	/** on_conflict condition type for table "player_unused_utility" */
["player_unused_utility_on_conflict"]: {
	constraint: ModelTypes["player_unused_utility_constraint"],
	update_columns: Array<ModelTypes["player_unused_utility_update_column"]>,
	where?: ModelTypes["player_unused_utility_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "player_unused_utility". */
["player_unused_utility_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	match?: ModelTypes["matches_order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	match_map?: ModelTypes["match_maps_order_by"] | undefined,
	match_map_id?: ModelTypes["order_by"] | undefined,
	player?: ModelTypes["players_order_by"] | undefined,
	player_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined,
	unused?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: player_unused_utility */
["player_unused_utility_pk_columns_input"]: {
	id: ModelTypes["uuid"]
};
	["player_unused_utility_select_column"]:player_unused_utility_select_column;
	/** input type for updating data in table "player_unused_utility" */
["player_unused_utility_set_input"]: {
	id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	player_steam_id?: ModelTypes["bigint"] | undefined,
	round?: number | undefined,
	unused?: number | undefined
};
	/** aggregate stddev on columns */
["player_unused_utility_stddev_fields"]: {
		player_steam_id?: number | undefined,
	round?: number | undefined,
	unused?: number | undefined
};
	/** order by stddev() on columns of table "player_unused_utility" */
["player_unused_utility_stddev_order_by"]: {
	player_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined,
	unused?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["player_unused_utility_stddev_pop_fields"]: {
		player_steam_id?: number | undefined,
	round?: number | undefined,
	unused?: number | undefined
};
	/** order by stddev_pop() on columns of table "player_unused_utility" */
["player_unused_utility_stddev_pop_order_by"]: {
	player_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined,
	unused?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["player_unused_utility_stddev_samp_fields"]: {
		player_steam_id?: number | undefined,
	round?: number | undefined,
	unused?: number | undefined
};
	/** order by stddev_samp() on columns of table "player_unused_utility" */
["player_unused_utility_stddev_samp_order_by"]: {
	player_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined,
	unused?: ModelTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "player_unused_utility" */
["player_unused_utility_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["player_unused_utility_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["player_unused_utility_stream_cursor_value_input"]: {
	id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	player_steam_id?: ModelTypes["bigint"] | undefined,
	round?: number | undefined,
	unused?: number | undefined
};
	/** aggregate sum on columns */
["player_unused_utility_sum_fields"]: {
		player_steam_id?: ModelTypes["bigint"] | undefined,
	round?: number | undefined,
	unused?: number | undefined
};
	/** order by sum() on columns of table "player_unused_utility" */
["player_unused_utility_sum_order_by"]: {
	player_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined,
	unused?: ModelTypes["order_by"] | undefined
};
	["player_unused_utility_update_column"]:player_unused_utility_update_column;
	["player_unused_utility_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["player_unused_utility_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["player_unused_utility_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["player_unused_utility_bool_exp"]
};
	/** aggregate var_pop on columns */
["player_unused_utility_var_pop_fields"]: {
		player_steam_id?: number | undefined,
	round?: number | undefined,
	unused?: number | undefined
};
	/** order by var_pop() on columns of table "player_unused_utility" */
["player_unused_utility_var_pop_order_by"]: {
	player_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined,
	unused?: ModelTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["player_unused_utility_var_samp_fields"]: {
		player_steam_id?: number | undefined,
	round?: number | undefined,
	unused?: number | undefined
};
	/** order by var_samp() on columns of table "player_unused_utility" */
["player_unused_utility_var_samp_order_by"]: {
	player_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined,
	unused?: ModelTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["player_unused_utility_variance_fields"]: {
		player_steam_id?: number | undefined,
	round?: number | undefined,
	unused?: number | undefined
};
	/** order by variance() on columns of table "player_unused_utility" */
["player_unused_utility_variance_order_by"]: {
	player_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined,
	unused?: ModelTypes["order_by"] | undefined
};
	/** columns and relationships of "player_utility" */
["player_utility"]: {
		attacker_location_coordinates?: string | undefined,
	attacker_steam_id: ModelTypes["bigint"],
	id: ModelTypes["uuid"],
	/** An object relationship */
	match: ModelTypes["matches"],
	match_id: ModelTypes["uuid"],
	/** An object relationship */
	match_map: ModelTypes["match_maps"],
	match_map_id: ModelTypes["uuid"],
	/** An object relationship */
	player: ModelTypes["players"],
	round: number,
	time: ModelTypes["timestamptz"],
	type: ModelTypes["e_utility_types_enum"]
};
	/** aggregated selection of "player_utility" */
["player_utility_aggregate"]: {
		aggregate?: ModelTypes["player_utility_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["player_utility"]>
};
	["player_utility_aggregate_bool_exp"]: {
	count?: ModelTypes["player_utility_aggregate_bool_exp_count"] | undefined
};
	["player_utility_aggregate_bool_exp_count"]: {
	arguments?: Array<ModelTypes["player_utility_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: ModelTypes["player_utility_bool_exp"] | undefined,
	predicate: ModelTypes["Int_comparison_exp"]
};
	/** aggregate fields of "player_utility" */
["player_utility_aggregate_fields"]: {
		avg?: ModelTypes["player_utility_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["player_utility_max_fields"] | undefined,
	min?: ModelTypes["player_utility_min_fields"] | undefined,
	stddev?: ModelTypes["player_utility_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["player_utility_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["player_utility_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["player_utility_sum_fields"] | undefined,
	var_pop?: ModelTypes["player_utility_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["player_utility_var_samp_fields"] | undefined,
	variance?: ModelTypes["player_utility_variance_fields"] | undefined
};
	/** order by aggregate values of table "player_utility" */
["player_utility_aggregate_order_by"]: {
	avg?: ModelTypes["player_utility_avg_order_by"] | undefined,
	count?: ModelTypes["order_by"] | undefined,
	max?: ModelTypes["player_utility_max_order_by"] | undefined,
	min?: ModelTypes["player_utility_min_order_by"] | undefined,
	stddev?: ModelTypes["player_utility_stddev_order_by"] | undefined,
	stddev_pop?: ModelTypes["player_utility_stddev_pop_order_by"] | undefined,
	stddev_samp?: ModelTypes["player_utility_stddev_samp_order_by"] | undefined,
	sum?: ModelTypes["player_utility_sum_order_by"] | undefined,
	var_pop?: ModelTypes["player_utility_var_pop_order_by"] | undefined,
	var_samp?: ModelTypes["player_utility_var_samp_order_by"] | undefined,
	variance?: ModelTypes["player_utility_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "player_utility" */
["player_utility_arr_rel_insert_input"]: {
	data: Array<ModelTypes["player_utility_insert_input"]>,
	/** upsert condition */
	on_conflict?: ModelTypes["player_utility_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["player_utility_avg_fields"]: {
		attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by avg() on columns of table "player_utility" */
["player_utility_avg_order_by"]: {
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "player_utility". All fields are combined with a logical 'AND'. */
["player_utility_bool_exp"]: {
	_and?: Array<ModelTypes["player_utility_bool_exp"]> | undefined,
	_not?: ModelTypes["player_utility_bool_exp"] | undefined,
	_or?: Array<ModelTypes["player_utility_bool_exp"]> | undefined,
	attacker_location_coordinates?: ModelTypes["String_comparison_exp"] | undefined,
	attacker_steam_id?: ModelTypes["bigint_comparison_exp"] | undefined,
	id?: ModelTypes["uuid_comparison_exp"] | undefined,
	match?: ModelTypes["matches_bool_exp"] | undefined,
	match_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	match_map?: ModelTypes["match_maps_bool_exp"] | undefined,
	match_map_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	player?: ModelTypes["players_bool_exp"] | undefined,
	round?: ModelTypes["Int_comparison_exp"] | undefined,
	time?: ModelTypes["timestamptz_comparison_exp"] | undefined,
	type?: ModelTypes["e_utility_types_enum_comparison_exp"] | undefined
};
	["player_utility_constraint"]:player_utility_constraint;
	/** input type for incrementing numeric columns in table "player_utility" */
["player_utility_inc_input"]: {
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	round?: number | undefined
};
	/** input type for inserting data into table "player_utility" */
["player_utility_insert_input"]: {
	attacker_location_coordinates?: string | undefined,
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match?: ModelTypes["matches_obj_rel_insert_input"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map?: ModelTypes["match_maps_obj_rel_insert_input"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	player?: ModelTypes["players_obj_rel_insert_input"] | undefined,
	round?: number | undefined,
	time?: ModelTypes["timestamptz"] | undefined,
	type?: ModelTypes["e_utility_types_enum"] | undefined
};
	/** aggregate max on columns */
["player_utility_max_fields"]: {
		attacker_location_coordinates?: string | undefined,
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	round?: number | undefined,
	time?: ModelTypes["timestamptz"] | undefined
};
	/** order by max() on columns of table "player_utility" */
["player_utility_max_order_by"]: {
	attacker_location_coordinates?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	match_map_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined,
	time?: ModelTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["player_utility_min_fields"]: {
		attacker_location_coordinates?: string | undefined,
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	round?: number | undefined,
	time?: ModelTypes["timestamptz"] | undefined
};
	/** order by min() on columns of table "player_utility" */
["player_utility_min_order_by"]: {
	attacker_location_coordinates?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	match_map_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined,
	time?: ModelTypes["order_by"] | undefined
};
	/** response of any mutation on the table "player_utility" */
["player_utility_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["player_utility"]>
};
	/** on_conflict condition type for table "player_utility" */
["player_utility_on_conflict"]: {
	constraint: ModelTypes["player_utility_constraint"],
	update_columns: Array<ModelTypes["player_utility_update_column"]>,
	where?: ModelTypes["player_utility_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "player_utility". */
["player_utility_order_by"]: {
	attacker_location_coordinates?: ModelTypes["order_by"] | undefined,
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	match?: ModelTypes["matches_order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	match_map?: ModelTypes["match_maps_order_by"] | undefined,
	match_map_id?: ModelTypes["order_by"] | undefined,
	player?: ModelTypes["players_order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined,
	time?: ModelTypes["order_by"] | undefined,
	type?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: player_utility */
["player_utility_pk_columns_input"]: {
	id: ModelTypes["uuid"]
};
	["player_utility_select_column"]:player_utility_select_column;
	/** input type for updating data in table "player_utility" */
["player_utility_set_input"]: {
	attacker_location_coordinates?: string | undefined,
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	round?: number | undefined,
	time?: ModelTypes["timestamptz"] | undefined,
	type?: ModelTypes["e_utility_types_enum"] | undefined
};
	/** aggregate stddev on columns */
["player_utility_stddev_fields"]: {
		attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by stddev() on columns of table "player_utility" */
["player_utility_stddev_order_by"]: {
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["player_utility_stddev_pop_fields"]: {
		attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by stddev_pop() on columns of table "player_utility" */
["player_utility_stddev_pop_order_by"]: {
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["player_utility_stddev_samp_fields"]: {
		attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by stddev_samp() on columns of table "player_utility" */
["player_utility_stddev_samp_order_by"]: {
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "player_utility" */
["player_utility_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["player_utility_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["player_utility_stream_cursor_value_input"]: {
	attacker_location_coordinates?: string | undefined,
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	round?: number | undefined,
	time?: ModelTypes["timestamptz"] | undefined,
	type?: ModelTypes["e_utility_types_enum"] | undefined
};
	/** aggregate sum on columns */
["player_utility_sum_fields"]: {
		attacker_steam_id?: ModelTypes["bigint"] | undefined,
	round?: number | undefined
};
	/** order by sum() on columns of table "player_utility" */
["player_utility_sum_order_by"]: {
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	["player_utility_update_column"]:player_utility_update_column;
	["player_utility_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["player_utility_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["player_utility_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["player_utility_bool_exp"]
};
	/** aggregate var_pop on columns */
["player_utility_var_pop_fields"]: {
		attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by var_pop() on columns of table "player_utility" */
["player_utility_var_pop_order_by"]: {
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["player_utility_var_samp_fields"]: {
		attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by var_samp() on columns of table "player_utility" */
["player_utility_var_samp_order_by"]: {
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["player_utility_variance_fields"]: {
		attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by variance() on columns of table "player_utility" */
["player_utility_variance_order_by"]: {
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** columns and relationships of "players" */
["players"]: {
		/** An array relationship */
	assists: Array<ModelTypes["player_assists"]>,
	/** An aggregate relationship */
	assists_aggregate: ModelTypes["player_assists_aggregate"],
	/** An array relationship */
	assited_by_players: Array<ModelTypes["player_assists"]>,
	/** An aggregate relationship */
	assited_by_players_aggregate: ModelTypes["player_assists_aggregate"],
	avatar_url?: string | undefined,
	created_at?: ModelTypes["timestamptz"] | undefined,
	/** An array relationship */
	damage_dealt: Array<ModelTypes["player_damages"]>,
	/** An aggregate relationship */
	damage_dealt_aggregate: ModelTypes["player_damages_aggregate"],
	/** An array relationship */
	damage_taken: Array<ModelTypes["player_damages"]>,
	/** An aggregate relationship */
	damage_taken_aggregate: ModelTypes["player_damages_aggregate"],
	/** An array relationship */
	deaths: Array<ModelTypes["player_kills"]>,
	/** An aggregate relationship */
	deaths_aggregate: ModelTypes["player_kills_aggregate"],
	discord_id?: string | undefined,
	/** An array relationship */
	flashed_by_players: Array<ModelTypes["player_flashes"]>,
	/** An aggregate relationship */
	flashed_by_players_aggregate: ModelTypes["player_flashes_aggregate"],
	/** An array relationship */
	flashed_players: Array<ModelTypes["player_flashes"]>,
	/** An aggregate relationship */
	flashed_players_aggregate: ModelTypes["player_flashes_aggregate"],
	/** An array relationship */
	invited_players: Array<ModelTypes["team_invites"]>,
	/** An aggregate relationship */
	invited_players_aggregate: ModelTypes["team_invites_aggregate"],
	/** An array relationship */
	kills: Array<ModelTypes["player_kills"]>,
	/** An aggregate relationship */
	kills_aggregate: ModelTypes["player_kills_aggregate"],
	/** An array relationship */
	match_lineups: Array<ModelTypes["match_lineups"]>,
	/** An aggregate relationship */
	match_lineups_aggregate: ModelTypes["match_lineups_aggregate"],
	/** A computed field, executes function "get_player_matches" */
	matches?: Array<ModelTypes["matches"]> | undefined,
	/** An array relationship */
	multi_kills: Array<ModelTypes["v_player_multi_kills"]>,
	/** An aggregate relationship */
	multi_kills_aggregate: ModelTypes["v_player_multi_kills_aggregate"],
	name: string,
	/** An array relationship */
	objectives: Array<ModelTypes["player_objectives"]>,
	/** An aggregate relationship */
	objectives_aggregate: ModelTypes["player_objectives_aggregate"],
	/** An array relationship */
	opening_duels: Array<ModelTypes["v_player_opening_duels"]>,
	/** An aggregate relationship */
	opening_duels_aggregate: ModelTypes["v_player_opening_duels_aggregate"],
	/** An array relationship */
	owned_teams: Array<ModelTypes["teams"]>,
	/** An aggregate relationship */
	owned_teams_aggregate: ModelTypes["teams_aggregate"],
	/** An array relationship */
	player_lineup: Array<ModelTypes["match_lineup_players"]>,
	/** An aggregate relationship */
	player_lineup_aggregate: ModelTypes["match_lineup_players_aggregate"],
	/** An array relationship */
	player_unused_utilities: Array<ModelTypes["player_unused_utility"]>,
	/** An aggregate relationship */
	player_unused_utilities_aggregate: ModelTypes["player_unused_utility_aggregate"],
	profile_url?: string | undefined,
	steam_id: ModelTypes["bigint"],
	/** An array relationship */
	team_invites: Array<ModelTypes["team_invites"]>,
	/** An aggregate relationship */
	team_invites_aggregate: ModelTypes["team_invites_aggregate"],
	/** An array relationship */
	team_members: Array<ModelTypes["team_roster"]>,
	/** An aggregate relationship */
	team_members_aggregate: ModelTypes["team_roster_aggregate"],
	/** A computed field, executes function "get_player_teams" */
	teams?: Array<ModelTypes["teams"]> | undefined,
	/** An array relationship */
	tournament_organizers: Array<ModelTypes["tournament_organizers"]>,
	/** An aggregate relationship */
	tournament_organizers_aggregate: ModelTypes["tournament_organizers_aggregate"],
	/** An array relationship */
	tournament_rosters: Array<ModelTypes["tournament_roster"]>,
	/** An aggregate relationship */
	tournament_rosters_aggregate: ModelTypes["tournament_roster_aggregate"],
	/** An array relationship */
	tournaments: Array<ModelTypes["tournaments"]>,
	/** An aggregate relationship */
	tournaments_aggregate: ModelTypes["tournaments_aggregate"],
	updated_at?: ModelTypes["timestamptz"] | undefined,
	/** An array relationship */
	utility_thrown: Array<ModelTypes["player_utility"]>,
	/** An aggregate relationship */
	utility_thrown_aggregate: ModelTypes["player_utility_aggregate"]
};
	/** aggregated selection of "players" */
["players_aggregate"]: {
		aggregate?: ModelTypes["players_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["players"]>
};
	/** aggregate fields of "players" */
["players_aggregate_fields"]: {
		avg?: ModelTypes["players_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["players_max_fields"] | undefined,
	min?: ModelTypes["players_min_fields"] | undefined,
	stddev?: ModelTypes["players_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["players_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["players_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["players_sum_fields"] | undefined,
	var_pop?: ModelTypes["players_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["players_var_samp_fields"] | undefined,
	variance?: ModelTypes["players_variance_fields"] | undefined
};
	/** aggregate avg on columns */
["players_avg_fields"]: {
		steam_id?: number | undefined
};
	/** Boolean expression to filter rows from the table "players". All fields are combined with a logical 'AND'. */
["players_bool_exp"]: {
	_and?: Array<ModelTypes["players_bool_exp"]> | undefined,
	_not?: ModelTypes["players_bool_exp"] | undefined,
	_or?: Array<ModelTypes["players_bool_exp"]> | undefined,
	assists?: ModelTypes["player_assists_bool_exp"] | undefined,
	assists_aggregate?: ModelTypes["player_assists_aggregate_bool_exp"] | undefined,
	assited_by_players?: ModelTypes["player_assists_bool_exp"] | undefined,
	assited_by_players_aggregate?: ModelTypes["player_assists_aggregate_bool_exp"] | undefined,
	avatar_url?: ModelTypes["String_comparison_exp"] | undefined,
	created_at?: ModelTypes["timestamptz_comparison_exp"] | undefined,
	damage_dealt?: ModelTypes["player_damages_bool_exp"] | undefined,
	damage_dealt_aggregate?: ModelTypes["player_damages_aggregate_bool_exp"] | undefined,
	damage_taken?: ModelTypes["player_damages_bool_exp"] | undefined,
	damage_taken_aggregate?: ModelTypes["player_damages_aggregate_bool_exp"] | undefined,
	deaths?: ModelTypes["player_kills_bool_exp"] | undefined,
	deaths_aggregate?: ModelTypes["player_kills_aggregate_bool_exp"] | undefined,
	discord_id?: ModelTypes["String_comparison_exp"] | undefined,
	flashed_by_players?: ModelTypes["player_flashes_bool_exp"] | undefined,
	flashed_by_players_aggregate?: ModelTypes["player_flashes_aggregate_bool_exp"] | undefined,
	flashed_players?: ModelTypes["player_flashes_bool_exp"] | undefined,
	flashed_players_aggregate?: ModelTypes["player_flashes_aggregate_bool_exp"] | undefined,
	invited_players?: ModelTypes["team_invites_bool_exp"] | undefined,
	invited_players_aggregate?: ModelTypes["team_invites_aggregate_bool_exp"] | undefined,
	kills?: ModelTypes["player_kills_bool_exp"] | undefined,
	kills_aggregate?: ModelTypes["player_kills_aggregate_bool_exp"] | undefined,
	match_lineups?: ModelTypes["match_lineups_bool_exp"] | undefined,
	match_lineups_aggregate?: ModelTypes["match_lineups_aggregate_bool_exp"] | undefined,
	matches?: ModelTypes["matches_bool_exp"] | undefined,
	multi_kills?: ModelTypes["v_player_multi_kills_bool_exp"] | undefined,
	multi_kills_aggregate?: ModelTypes["v_player_multi_kills_aggregate_bool_exp"] | undefined,
	name?: ModelTypes["String_comparison_exp"] | undefined,
	objectives?: ModelTypes["player_objectives_bool_exp"] | undefined,
	objectives_aggregate?: ModelTypes["player_objectives_aggregate_bool_exp"] | undefined,
	opening_duels?: ModelTypes["v_player_opening_duels_bool_exp"] | undefined,
	opening_duels_aggregate?: ModelTypes["v_player_opening_duels_aggregate_bool_exp"] | undefined,
	owned_teams?: ModelTypes["teams_bool_exp"] | undefined,
	owned_teams_aggregate?: ModelTypes["teams_aggregate_bool_exp"] | undefined,
	player_lineup?: ModelTypes["match_lineup_players_bool_exp"] | undefined,
	player_lineup_aggregate?: ModelTypes["match_lineup_players_aggregate_bool_exp"] | undefined,
	player_unused_utilities?: ModelTypes["player_unused_utility_bool_exp"] | undefined,
	player_unused_utilities_aggregate?: ModelTypes["player_unused_utility_aggregate_bool_exp"] | undefined,
	profile_url?: ModelTypes["String_comparison_exp"] | undefined,
	steam_id?: ModelTypes["bigint_comparison_exp"] | undefined,
	team_invites?: ModelTypes["team_invites_bool_exp"] | undefined,
	team_invites_aggregate?: ModelTypes["team_invites_aggregate_bool_exp"] | undefined,
	team_members?: ModelTypes["team_roster_bool_exp"] | undefined,
	team_members_aggregate?: ModelTypes["team_roster_aggregate_bool_exp"] | undefined,
	teams?: ModelTypes["teams_bool_exp"] | undefined,
	tournament_organizers?: ModelTypes["tournament_organizers_bool_exp"] | undefined,
	tournament_organizers_aggregate?: ModelTypes["tournament_organizers_aggregate_bool_exp"] | undefined,
	tournament_rosters?: ModelTypes["tournament_roster_bool_exp"] | undefined,
	tournament_rosters_aggregate?: ModelTypes["tournament_roster_aggregate_bool_exp"] | undefined,
	tournaments?: ModelTypes["tournaments_bool_exp"] | undefined,
	tournaments_aggregate?: ModelTypes["tournaments_aggregate_bool_exp"] | undefined,
	updated_at?: ModelTypes["timestamptz_comparison_exp"] | undefined,
	utility_thrown?: ModelTypes["player_utility_bool_exp"] | undefined,
	utility_thrown_aggregate?: ModelTypes["player_utility_aggregate_bool_exp"] | undefined
};
	["players_constraint"]:players_constraint;
	/** input type for incrementing numeric columns in table "players" */
["players_inc_input"]: {
	steam_id?: ModelTypes["bigint"] | undefined
};
	/** input type for inserting data into table "players" */
["players_insert_input"]: {
	assists?: ModelTypes["player_assists_arr_rel_insert_input"] | undefined,
	assited_by_players?: ModelTypes["player_assists_arr_rel_insert_input"] | undefined,
	avatar_url?: string | undefined,
	created_at?: ModelTypes["timestamptz"] | undefined,
	damage_dealt?: ModelTypes["player_damages_arr_rel_insert_input"] | undefined,
	damage_taken?: ModelTypes["player_damages_arr_rel_insert_input"] | undefined,
	deaths?: ModelTypes["player_kills_arr_rel_insert_input"] | undefined,
	discord_id?: string | undefined,
	flashed_by_players?: ModelTypes["player_flashes_arr_rel_insert_input"] | undefined,
	flashed_players?: ModelTypes["player_flashes_arr_rel_insert_input"] | undefined,
	invited_players?: ModelTypes["team_invites_arr_rel_insert_input"] | undefined,
	kills?: ModelTypes["player_kills_arr_rel_insert_input"] | undefined,
	match_lineups?: ModelTypes["match_lineups_arr_rel_insert_input"] | undefined,
	multi_kills?: ModelTypes["v_player_multi_kills_arr_rel_insert_input"] | undefined,
	name?: string | undefined,
	objectives?: ModelTypes["player_objectives_arr_rel_insert_input"] | undefined,
	opening_duels?: ModelTypes["v_player_opening_duels_arr_rel_insert_input"] | undefined,
	owned_teams?: ModelTypes["teams_arr_rel_insert_input"] | undefined,
	player_lineup?: ModelTypes["match_lineup_players_arr_rel_insert_input"] | undefined,
	player_unused_utilities?: ModelTypes["player_unused_utility_arr_rel_insert_input"] | undefined,
	profile_url?: string | undefined,
	steam_id?: ModelTypes["bigint"] | undefined,
	team_invites?: ModelTypes["team_invites_arr_rel_insert_input"] | undefined,
	team_members?: ModelTypes["team_roster_arr_rel_insert_input"] | undefined,
	tournament_organizers?: ModelTypes["tournament_organizers_arr_rel_insert_input"] | undefined,
	tournament_rosters?: ModelTypes["tournament_roster_arr_rel_insert_input"] | undefined,
	tournaments?: ModelTypes["tournaments_arr_rel_insert_input"] | undefined,
	updated_at?: ModelTypes["timestamptz"] | undefined,
	utility_thrown?: ModelTypes["player_utility_arr_rel_insert_input"] | undefined
};
	/** aggregate max on columns */
["players_max_fields"]: {
		avatar_url?: string | undefined,
	created_at?: ModelTypes["timestamptz"] | undefined,
	discord_id?: string | undefined,
	name?: string | undefined,
	profile_url?: string | undefined,
	steam_id?: ModelTypes["bigint"] | undefined,
	updated_at?: ModelTypes["timestamptz"] | undefined
};
	/** aggregate min on columns */
["players_min_fields"]: {
		avatar_url?: string | undefined,
	created_at?: ModelTypes["timestamptz"] | undefined,
	discord_id?: string | undefined,
	name?: string | undefined,
	profile_url?: string | undefined,
	steam_id?: ModelTypes["bigint"] | undefined,
	updated_at?: ModelTypes["timestamptz"] | undefined
};
	/** response of any mutation on the table "players" */
["players_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["players"]>
};
	/** input type for inserting object relation for remote table "players" */
["players_obj_rel_insert_input"]: {
	data: ModelTypes["players_insert_input"],
	/** upsert condition */
	on_conflict?: ModelTypes["players_on_conflict"] | undefined
};
	/** on_conflict condition type for table "players" */
["players_on_conflict"]: {
	constraint: ModelTypes["players_constraint"],
	update_columns: Array<ModelTypes["players_update_column"]>,
	where?: ModelTypes["players_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "players". */
["players_order_by"]: {
	assists_aggregate?: ModelTypes["player_assists_aggregate_order_by"] | undefined,
	assited_by_players_aggregate?: ModelTypes["player_assists_aggregate_order_by"] | undefined,
	avatar_url?: ModelTypes["order_by"] | undefined,
	created_at?: ModelTypes["order_by"] | undefined,
	damage_dealt_aggregate?: ModelTypes["player_damages_aggregate_order_by"] | undefined,
	damage_taken_aggregate?: ModelTypes["player_damages_aggregate_order_by"] | undefined,
	deaths_aggregate?: ModelTypes["player_kills_aggregate_order_by"] | undefined,
	discord_id?: ModelTypes["order_by"] | undefined,
	flashed_by_players_aggregate?: ModelTypes["player_flashes_aggregate_order_by"] | undefined,
	flashed_players_aggregate?: ModelTypes["player_flashes_aggregate_order_by"] | undefined,
	invited_players_aggregate?: ModelTypes["team_invites_aggregate_order_by"] | undefined,
	kills_aggregate?: ModelTypes["player_kills_aggregate_order_by"] | undefined,
	match_lineups_aggregate?: ModelTypes["match_lineups_aggregate_order_by"] | undefined,
	matches_aggregate?: ModelTypes["matches_aggregate_order_by"] | undefined,
	multi_kills_aggregate?: ModelTypes["v_player_multi_kills_aggregate_order_by"] | undefined,
	name?: ModelTypes["order_by"] | undefined,
	objectives_aggregate?: ModelTypes["player_objectives_aggregate_order_by"] | undefined,
	opening_duels_aggregate?: ModelTypes["v_player_opening_duels_aggregate_order_by"] | undefined,
	owned_teams_aggregate?: ModelTypes["teams_aggregate_order_by"] | undefined,
	player_lineup_aggregate?: ModelTypes["match_lineup_players_aggregate_order_by"] | undefined,
	player_unused_utilities_aggregate?: ModelTypes["player_unused_utility_aggregate_order_by"] | undefined,
	profile_url?: ModelTypes["order_by"] | undefined,
	steam_id?: ModelTypes["order_by"] | undefined,
	team_invites_aggregate?: ModelTypes["team_invites_aggregate_order_by"] | undefined,
	team_members_aggregate?: ModelTypes["team_roster_aggregate_order_by"] | undefined,
	teams_aggregate?: ModelTypes["teams_aggregate_order_by"] | undefined,
	tournament_organizers_aggregate?: ModelTypes["tournament_organizers_aggregate_order_by"] | undefined,
	tournament_rosters_aggregate?: ModelTypes["tournament_roster_aggregate_order_by"] | undefined,
	tournaments_aggregate?: ModelTypes["tournaments_aggregate_order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined,
	utility_thrown_aggregate?: ModelTypes["player_utility_aggregate_order_by"] | undefined
};
	/** primary key columns input for table: players */
["players_pk_columns_input"]: {
	steam_id: ModelTypes["bigint"]
};
	["players_select_column"]:players_select_column;
	/** input type for updating data in table "players" */
["players_set_input"]: {
	avatar_url?: string | undefined,
	created_at?: ModelTypes["timestamptz"] | undefined,
	discord_id?: string | undefined,
	name?: string | undefined,
	profile_url?: string | undefined,
	steam_id?: ModelTypes["bigint"] | undefined,
	updated_at?: ModelTypes["timestamptz"] | undefined
};
	/** aggregate stddev on columns */
["players_stddev_fields"]: {
		steam_id?: number | undefined
};
	/** aggregate stddev_pop on columns */
["players_stddev_pop_fields"]: {
		steam_id?: number | undefined
};
	/** aggregate stddev_samp on columns */
["players_stddev_samp_fields"]: {
		steam_id?: number | undefined
};
	/** Streaming cursor of the table "players" */
["players_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["players_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["players_stream_cursor_value_input"]: {
	avatar_url?: string | undefined,
	created_at?: ModelTypes["timestamptz"] | undefined,
	discord_id?: string | undefined,
	name?: string | undefined,
	profile_url?: string | undefined,
	steam_id?: ModelTypes["bigint"] | undefined,
	updated_at?: ModelTypes["timestamptz"] | undefined
};
	/** aggregate sum on columns */
["players_sum_fields"]: {
		steam_id?: ModelTypes["bigint"] | undefined
};
	["players_update_column"]:players_update_column;
	["players_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["players_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["players_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["players_bool_exp"]
};
	/** aggregate var_pop on columns */
["players_var_pop_fields"]: {
		steam_id?: number | undefined
};
	/** aggregate var_samp on columns */
["players_var_samp_fields"]: {
		steam_id?: number | undefined
};
	/** aggregate variance on columns */
["players_variance_fields"]: {
		steam_id?: number | undefined
};
	["query_root"]: {
		/** fetch data from the table: "_map_pool" */
	_map_pool: Array<ModelTypes["_map_pool"]>,
	/** fetch aggregated fields from the table: "_map_pool" */
	_map_pool_aggregate: ModelTypes["_map_pool_aggregate"],
	/** fetch data from the table: "_map_pool" using primary key columns */
	_map_pool_by_pk?: ModelTypes["_map_pool"] | undefined,
	/** fetch data from the table: "e_match_map_status" */
	e_match_map_status: Array<ModelTypes["e_match_map_status"]>,
	/** fetch aggregated fields from the table: "e_match_map_status" */
	e_match_map_status_aggregate: ModelTypes["e_match_map_status_aggregate"],
	/** fetch data from the table: "e_match_map_status" using primary key columns */
	e_match_map_status_by_pk?: ModelTypes["e_match_map_status"] | undefined,
	/** fetch data from the table: "e_match_status" */
	e_match_status: Array<ModelTypes["e_match_status"]>,
	/** fetch aggregated fields from the table: "e_match_status" */
	e_match_status_aggregate: ModelTypes["e_match_status_aggregate"],
	/** fetch data from the table: "e_match_status" using primary key columns */
	e_match_status_by_pk?: ModelTypes["e_match_status"] | undefined,
	/** fetch data from the table: "e_match_types" */
	e_match_types: Array<ModelTypes["e_match_types"]>,
	/** fetch aggregated fields from the table: "e_match_types" */
	e_match_types_aggregate: ModelTypes["e_match_types_aggregate"],
	/** fetch data from the table: "e_match_types" using primary key columns */
	e_match_types_by_pk?: ModelTypes["e_match_types"] | undefined,
	/** fetch data from the table: "e_objective_types" */
	e_objective_types: Array<ModelTypes["e_objective_types"]>,
	/** fetch aggregated fields from the table: "e_objective_types" */
	e_objective_types_aggregate: ModelTypes["e_objective_types_aggregate"],
	/** fetch data from the table: "e_objective_types" using primary key columns */
	e_objective_types_by_pk?: ModelTypes["e_objective_types"] | undefined,
	/** fetch data from the table: "e_sides" */
	e_sides: Array<ModelTypes["e_sides"]>,
	/** fetch aggregated fields from the table: "e_sides" */
	e_sides_aggregate: ModelTypes["e_sides_aggregate"],
	/** fetch data from the table: "e_sides" using primary key columns */
	e_sides_by_pk?: ModelTypes["e_sides"] | undefined,
	/** fetch data from the table: "e_team_roles" */
	e_team_roles: Array<ModelTypes["e_team_roles"]>,
	/** fetch aggregated fields from the table: "e_team_roles" */
	e_team_roles_aggregate: ModelTypes["e_team_roles_aggregate"],
	/** fetch data from the table: "e_team_roles" using primary key columns */
	e_team_roles_by_pk?: ModelTypes["e_team_roles"] | undefined,
	/** fetch data from the table: "e_timeout_settings" */
	e_timeout_settings: Array<ModelTypes["e_timeout_settings"]>,
	/** fetch aggregated fields from the table: "e_timeout_settings" */
	e_timeout_settings_aggregate: ModelTypes["e_timeout_settings_aggregate"],
	/** fetch data from the table: "e_timeout_settings" using primary key columns */
	e_timeout_settings_by_pk?: ModelTypes["e_timeout_settings"] | undefined,
	/** fetch data from the table: "e_utility_types" */
	e_utility_types: Array<ModelTypes["e_utility_types"]>,
	/** fetch aggregated fields from the table: "e_utility_types" */
	e_utility_types_aggregate: ModelTypes["e_utility_types_aggregate"],
	/** fetch data from the table: "e_utility_types" using primary key columns */
	e_utility_types_by_pk?: ModelTypes["e_utility_types"] | undefined,
	/** fetch data from the table: "e_veto_pick_types" */
	e_veto_pick_types: Array<ModelTypes["e_veto_pick_types"]>,
	/** fetch aggregated fields from the table: "e_veto_pick_types" */
	e_veto_pick_types_aggregate: ModelTypes["e_veto_pick_types_aggregate"],
	/** fetch data from the table: "e_veto_pick_types" using primary key columns */
	e_veto_pick_types_by_pk?: ModelTypes["e_veto_pick_types"] | undefined,
	/** fetch data from the table: "map_pools" */
	map_pools: Array<ModelTypes["map_pools"]>,
	/** fetch aggregated fields from the table: "map_pools" */
	map_pools_aggregate: ModelTypes["map_pools_aggregate"],
	/** fetch data from the table: "map_pools" using primary key columns */
	map_pools_by_pk?: ModelTypes["map_pools"] | undefined,
	/** An array relationship */
	maps: Array<ModelTypes["maps"]>,
	/** An aggregate relationship */
	maps_aggregate: ModelTypes["maps_aggregate"],
	/** fetch data from the table: "maps" using primary key columns */
	maps_by_pk?: ModelTypes["maps"] | undefined,
	/** fetch data from the table: "match_lineup_players" */
	match_lineup_players: Array<ModelTypes["match_lineup_players"]>,
	/** fetch aggregated fields from the table: "match_lineup_players" */
	match_lineup_players_aggregate: ModelTypes["match_lineup_players_aggregate"],
	/** fetch data from the table: "match_lineup_players" using primary key columns */
	match_lineup_players_by_pk?: ModelTypes["match_lineup_players"] | undefined,
	/** An array relationship */
	match_lineups: Array<ModelTypes["match_lineups"]>,
	/** An aggregate relationship */
	match_lineups_aggregate: ModelTypes["match_lineups_aggregate"],
	/** fetch data from the table: "match_lineups" using primary key columns */
	match_lineups_by_pk?: ModelTypes["match_lineups"] | undefined,
	/** fetch data from the table: "match_map_demos" */
	match_map_demos: Array<ModelTypes["match_map_demos"]>,
	/** fetch aggregated fields from the table: "match_map_demos" */
	match_map_demos_aggregate: ModelTypes["match_map_demos_aggregate"],
	/** fetch data from the table: "match_map_demos" using primary key columns */
	match_map_demos_by_pk?: ModelTypes["match_map_demos"] | undefined,
	/** fetch data from the table: "match_map_rounds" */
	match_map_rounds: Array<ModelTypes["match_map_rounds"]>,
	/** fetch aggregated fields from the table: "match_map_rounds" */
	match_map_rounds_aggregate: ModelTypes["match_map_rounds_aggregate"],
	/** fetch data from the table: "match_map_rounds" using primary key columns */
	match_map_rounds_by_pk?: ModelTypes["match_map_rounds"] | undefined,
	/** An array relationship */
	match_maps: Array<ModelTypes["match_maps"]>,
	/** An aggregate relationship */
	match_maps_aggregate: ModelTypes["match_maps_aggregate"],
	/** fetch data from the table: "match_maps" using primary key columns */
	match_maps_by_pk?: ModelTypes["match_maps"] | undefined,
	/** An array relationship */
	match_veto_picks: Array<ModelTypes["match_veto_picks"]>,
	/** An aggregate relationship */
	match_veto_picks_aggregate: ModelTypes["match_veto_picks_aggregate"],
	/** fetch data from the table: "match_veto_picks" using primary key columns */
	match_veto_picks_by_pk?: ModelTypes["match_veto_picks"] | undefined,
	/** An array relationship */
	matches: Array<ModelTypes["matches"]>,
	/** An aggregate relationship */
	matches_aggregate: ModelTypes["matches_aggregate"],
	/** fetch data from the table: "matches" using primary key columns */
	matches_by_pk?: ModelTypes["matches"] | undefined,
	/** Gets Current User */
	me: ModelTypes["MeResponse"],
	/** An array relationship */
	player_assists: Array<ModelTypes["player_assists"]>,
	/** An aggregate relationship */
	player_assists_aggregate: ModelTypes["player_assists_aggregate"],
	/** fetch data from the table: "player_assists" using primary key columns */
	player_assists_by_pk?: ModelTypes["player_assists"] | undefined,
	/** An array relationship */
	player_damages: Array<ModelTypes["player_damages"]>,
	/** An aggregate relationship */
	player_damages_aggregate: ModelTypes["player_damages_aggregate"],
	/** fetch data from the table: "player_damages" using primary key columns */
	player_damages_by_pk?: ModelTypes["player_damages"] | undefined,
	/** An array relationship */
	player_flashes: Array<ModelTypes["player_flashes"]>,
	/** An aggregate relationship */
	player_flashes_aggregate: ModelTypes["player_flashes_aggregate"],
	/** fetch data from the table: "player_flashes" using primary key columns */
	player_flashes_by_pk?: ModelTypes["player_flashes"] | undefined,
	/** An array relationship */
	player_kills: Array<ModelTypes["player_kills"]>,
	/** An aggregate relationship */
	player_kills_aggregate: ModelTypes["player_kills_aggregate"],
	/** fetch data from the table: "player_kills" using primary key columns */
	player_kills_by_pk?: ModelTypes["player_kills"] | undefined,
	/** An array relationship */
	player_objectives: Array<ModelTypes["player_objectives"]>,
	/** An aggregate relationship */
	player_objectives_aggregate: ModelTypes["player_objectives_aggregate"],
	/** fetch data from the table: "player_objectives" using primary key columns */
	player_objectives_by_pk?: ModelTypes["player_objectives"] | undefined,
	/** fetch data from the table: "player_unused_utility" */
	player_unused_utility: Array<ModelTypes["player_unused_utility"]>,
	/** fetch aggregated fields from the table: "player_unused_utility" */
	player_unused_utility_aggregate: ModelTypes["player_unused_utility_aggregate"],
	/** fetch data from the table: "player_unused_utility" using primary key columns */
	player_unused_utility_by_pk?: ModelTypes["player_unused_utility"] | undefined,
	/** An array relationship */
	player_utility: Array<ModelTypes["player_utility"]>,
	/** An aggregate relationship */
	player_utility_aggregate: ModelTypes["player_utility_aggregate"],
	/** fetch data from the table: "player_utility" using primary key columns */
	player_utility_by_pk?: ModelTypes["player_utility"] | undefined,
	/** fetch data from the table: "players" */
	players: Array<ModelTypes["players"]>,
	/** fetch aggregated fields from the table: "players" */
	players_aggregate: ModelTypes["players_aggregate"],
	/** fetch data from the table: "players" using primary key columns */
	players_by_pk?: ModelTypes["players"] | undefined,
	/** fetch data from the table: "servers" */
	servers: Array<ModelTypes["servers"]>,
	/** fetch aggregated fields from the table: "servers" */
	servers_aggregate: ModelTypes["servers_aggregate"],
	/** fetch data from the table: "servers" using primary key columns */
	servers_by_pk?: ModelTypes["servers"] | undefined,
	/** An array relationship */
	team_invites: Array<ModelTypes["team_invites"]>,
	/** An aggregate relationship */
	team_invites_aggregate: ModelTypes["team_invites_aggregate"],
	/** fetch data from the table: "team_invites" using primary key columns */
	team_invites_by_pk?: ModelTypes["team_invites"] | undefined,
	/** fetch data from the table: "team_roster" */
	team_roster: Array<ModelTypes["team_roster"]>,
	/** fetch aggregated fields from the table: "team_roster" */
	team_roster_aggregate: ModelTypes["team_roster_aggregate"],
	/** fetch data from the table: "team_roster" using primary key columns */
	team_roster_by_pk?: ModelTypes["team_roster"] | undefined,
	/** fetch data from the table: "teams" */
	teams: Array<ModelTypes["teams"]>,
	/** fetch aggregated fields from the table: "teams" */
	teams_aggregate: ModelTypes["teams_aggregate"],
	/** fetch data from the table: "teams" using primary key columns */
	teams_by_pk?: ModelTypes["teams"] | undefined,
	/** An array relationship */
	tournament_organizers: Array<ModelTypes["tournament_organizers"]>,
	/** An aggregate relationship */
	tournament_organizers_aggregate: ModelTypes["tournament_organizers_aggregate"],
	/** fetch data from the table: "tournament_organizers" using primary key columns */
	tournament_organizers_by_pk?: ModelTypes["tournament_organizers"] | undefined,
	/** fetch data from the table: "tournament_roster" */
	tournament_roster: Array<ModelTypes["tournament_roster"]>,
	/** fetch aggregated fields from the table: "tournament_roster" */
	tournament_roster_aggregate: ModelTypes["tournament_roster_aggregate"],
	/** fetch data from the table: "tournament_roster" using primary key columns */
	tournament_roster_by_pk?: ModelTypes["tournament_roster"] | undefined,
	/** An array relationship */
	tournament_servers: Array<ModelTypes["tournament_servers"]>,
	/** An aggregate relationship */
	tournament_servers_aggregate: ModelTypes["tournament_servers_aggregate"],
	/** fetch data from the table: "tournament_servers" using primary key columns */
	tournament_servers_by_pk?: ModelTypes["tournament_servers"] | undefined,
	/** fetch data from the table: "tournament_stages" */
	tournament_stages: Array<ModelTypes["tournament_stages"]>,
	/** fetch aggregated fields from the table: "tournament_stages" */
	tournament_stages_aggregate: ModelTypes["tournament_stages_aggregate"],
	/** fetch data from the table: "tournament_stages" using primary key columns */
	tournament_stages_by_pk?: ModelTypes["tournament_stages"] | undefined,
	/** An array relationship */
	tournament_teams: Array<ModelTypes["tournament_teams"]>,
	/** An aggregate relationship */
	tournament_teams_aggregate: ModelTypes["tournament_teams_aggregate"],
	/** fetch data from the table: "tournament_teams" using primary key columns */
	tournament_teams_by_pk?: ModelTypes["tournament_teams"] | undefined,
	/** An array relationship */
	tournaments: Array<ModelTypes["tournaments"]>,
	/** An aggregate relationship */
	tournaments_aggregate: ModelTypes["tournaments_aggregate"],
	/** fetch data from the table: "tournaments" using primary key columns */
	tournaments_by_pk?: ModelTypes["tournaments"] | undefined,
	/** fetch data from the table: "v_match_captains" */
	v_match_captains: Array<ModelTypes["v_match_captains"]>,
	/** fetch aggregated fields from the table: "v_match_captains" */
	v_match_captains_aggregate: ModelTypes["v_match_captains_aggregate"],
	/** fetch data from the table: "v_player_arch_nemesis" */
	v_player_arch_nemesis: Array<ModelTypes["v_player_arch_nemesis"]>,
	/** fetch aggregated fields from the table: "v_player_arch_nemesis" */
	v_player_arch_nemesis_aggregate: ModelTypes["v_player_arch_nemesis_aggregate"],
	/** fetch data from the table: "v_player_damage" */
	v_player_damage: Array<ModelTypes["v_player_damage"]>,
	/** fetch aggregated fields from the table: "v_player_damage" */
	v_player_damage_aggregate: ModelTypes["v_player_damage_aggregate"],
	/** fetch data from the table: "v_player_killed_player_counts" */
	v_player_killed_player_counts: Array<ModelTypes["v_player_killed_player_counts"]>,
	/** fetch aggregated fields from the table: "v_player_killed_player_counts" */
	v_player_killed_player_counts_aggregate: ModelTypes["v_player_killed_player_counts_aggregate"],
	/** fetch data from the table: "v_player_match_kills" */
	v_player_match_kills: Array<ModelTypes["v_player_match_kills"]>,
	/** fetch aggregated fields from the table: "v_player_match_kills" */
	v_player_match_kills_aggregate: ModelTypes["v_player_match_kills_aggregate"],
	/** fetch data from the table: "v_player_multi_kills" */
	v_player_multi_kills: Array<ModelTypes["v_player_multi_kills"]>,
	/** fetch aggregated fields from the table: "v_player_multi_kills" */
	v_player_multi_kills_aggregate: ModelTypes["v_player_multi_kills_aggregate"],
	/** fetch data from the table: "v_player_opening_duels" */
	v_player_opening_duels: Array<ModelTypes["v_player_opening_duels"]>,
	/** fetch aggregated fields from the table: "v_player_opening_duels" */
	v_player_opening_duels_aggregate: ModelTypes["v_player_opening_duels_aggregate"],
	/** fetch data from the table: "v_pool_maps" */
	v_pool_maps: Array<ModelTypes["v_pool_maps"]>,
	/** fetch aggregated fields from the table: "v_pool_maps" */
	v_pool_maps_aggregate: ModelTypes["v_pool_maps_aggregate"]
};
	/** columns and relationships of "servers" */
["servers"]: {
		api_password: ModelTypes["uuid"],
	/** A computed field, executes function "get_server_current_match_id" */
	current_match_id?: string | undefined,
	enabled: boolean,
	host: string,
	id: ModelTypes["uuid"],
	label: string,
	/** An array relationship */
	matches: Array<ModelTypes["matches"]>,
	/** An aggregate relationship */
	matches_aggregate: ModelTypes["matches_aggregate"],
	on_demand: boolean,
	/** An object relationship */
	owner?: ModelTypes["players"] | undefined,
	player_steam_id?: ModelTypes["bigint"] | undefined,
	port: number,
	rcon_password: ModelTypes["bytea"],
	/** An array relationship */
	tournament_servers: Array<ModelTypes["tournament_servers"]>,
	/** An aggregate relationship */
	tournament_servers_aggregate: ModelTypes["tournament_servers_aggregate"],
	tv_port?: number | undefined
};
	/** aggregated selection of "servers" */
["servers_aggregate"]: {
		aggregate?: ModelTypes["servers_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["servers"]>
};
	/** aggregate fields of "servers" */
["servers_aggregate_fields"]: {
		avg?: ModelTypes["servers_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["servers_max_fields"] | undefined,
	min?: ModelTypes["servers_min_fields"] | undefined,
	stddev?: ModelTypes["servers_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["servers_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["servers_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["servers_sum_fields"] | undefined,
	var_pop?: ModelTypes["servers_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["servers_var_samp_fields"] | undefined,
	variance?: ModelTypes["servers_variance_fields"] | undefined
};
	/** aggregate avg on columns */
["servers_avg_fields"]: {
		player_steam_id?: number | undefined,
	port?: number | undefined,
	tv_port?: number | undefined
};
	/** Boolean expression to filter rows from the table "servers". All fields are combined with a logical 'AND'. */
["servers_bool_exp"]: {
	_and?: Array<ModelTypes["servers_bool_exp"]> | undefined,
	_not?: ModelTypes["servers_bool_exp"] | undefined,
	_or?: Array<ModelTypes["servers_bool_exp"]> | undefined,
	api_password?: ModelTypes["uuid_comparison_exp"] | undefined,
	current_match_id?: ModelTypes["String_comparison_exp"] | undefined,
	enabled?: ModelTypes["Boolean_comparison_exp"] | undefined,
	host?: ModelTypes["String_comparison_exp"] | undefined,
	id?: ModelTypes["uuid_comparison_exp"] | undefined,
	label?: ModelTypes["String_comparison_exp"] | undefined,
	matches?: ModelTypes["matches_bool_exp"] | undefined,
	matches_aggregate?: ModelTypes["matches_aggregate_bool_exp"] | undefined,
	on_demand?: ModelTypes["Boolean_comparison_exp"] | undefined,
	owner?: ModelTypes["players_bool_exp"] | undefined,
	player_steam_id?: ModelTypes["bigint_comparison_exp"] | undefined,
	port?: ModelTypes["Int_comparison_exp"] | undefined,
	rcon_password?: ModelTypes["bytea_comparison_exp"] | undefined,
	tournament_servers?: ModelTypes["tournament_servers_bool_exp"] | undefined,
	tournament_servers_aggregate?: ModelTypes["tournament_servers_aggregate_bool_exp"] | undefined,
	tv_port?: ModelTypes["Int_comparison_exp"] | undefined
};
	["servers_constraint"]:servers_constraint;
	/** input type for incrementing numeric columns in table "servers" */
["servers_inc_input"]: {
	player_steam_id?: ModelTypes["bigint"] | undefined,
	port?: number | undefined,
	tv_port?: number | undefined
};
	/** input type for inserting data into table "servers" */
["servers_insert_input"]: {
	api_password?: ModelTypes["uuid"] | undefined,
	enabled?: boolean | undefined,
	host?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	label?: string | undefined,
	matches?: ModelTypes["matches_arr_rel_insert_input"] | undefined,
	on_demand?: boolean | undefined,
	owner?: ModelTypes["players_obj_rel_insert_input"] | undefined,
	player_steam_id?: ModelTypes["bigint"] | undefined,
	port?: number | undefined,
	rcon_password?: ModelTypes["bytea"] | undefined,
	tournament_servers?: ModelTypes["tournament_servers_arr_rel_insert_input"] | undefined,
	tv_port?: number | undefined
};
	/** aggregate max on columns */
["servers_max_fields"]: {
		api_password?: ModelTypes["uuid"] | undefined,
	/** A computed field, executes function "get_server_current_match_id" */
	current_match_id?: string | undefined,
	host?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	label?: string | undefined,
	player_steam_id?: ModelTypes["bigint"] | undefined,
	port?: number | undefined,
	tv_port?: number | undefined
};
	/** aggregate min on columns */
["servers_min_fields"]: {
		api_password?: ModelTypes["uuid"] | undefined,
	/** A computed field, executes function "get_server_current_match_id" */
	current_match_id?: string | undefined,
	host?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	label?: string | undefined,
	player_steam_id?: ModelTypes["bigint"] | undefined,
	port?: number | undefined,
	tv_port?: number | undefined
};
	/** response of any mutation on the table "servers" */
["servers_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["servers"]>
};
	/** input type for inserting object relation for remote table "servers" */
["servers_obj_rel_insert_input"]: {
	data: ModelTypes["servers_insert_input"],
	/** upsert condition */
	on_conflict?: ModelTypes["servers_on_conflict"] | undefined
};
	/** on_conflict condition type for table "servers" */
["servers_on_conflict"]: {
	constraint: ModelTypes["servers_constraint"],
	update_columns: Array<ModelTypes["servers_update_column"]>,
	where?: ModelTypes["servers_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "servers". */
["servers_order_by"]: {
	api_password?: ModelTypes["order_by"] | undefined,
	current_match_id?: ModelTypes["order_by"] | undefined,
	enabled?: ModelTypes["order_by"] | undefined,
	host?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	label?: ModelTypes["order_by"] | undefined,
	matches_aggregate?: ModelTypes["matches_aggregate_order_by"] | undefined,
	on_demand?: ModelTypes["order_by"] | undefined,
	owner?: ModelTypes["players_order_by"] | undefined,
	player_steam_id?: ModelTypes["order_by"] | undefined,
	port?: ModelTypes["order_by"] | undefined,
	rcon_password?: ModelTypes["order_by"] | undefined,
	tournament_servers_aggregate?: ModelTypes["tournament_servers_aggregate_order_by"] | undefined,
	tv_port?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: servers */
["servers_pk_columns_input"]: {
	id: ModelTypes["uuid"]
};
	["servers_select_column"]:servers_select_column;
	/** input type for updating data in table "servers" */
["servers_set_input"]: {
	api_password?: ModelTypes["uuid"] | undefined,
	enabled?: boolean | undefined,
	host?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	label?: string | undefined,
	on_demand?: boolean | undefined,
	player_steam_id?: ModelTypes["bigint"] | undefined,
	port?: number | undefined,
	rcon_password?: ModelTypes["bytea"] | undefined,
	tv_port?: number | undefined
};
	/** aggregate stddev on columns */
["servers_stddev_fields"]: {
		player_steam_id?: number | undefined,
	port?: number | undefined,
	tv_port?: number | undefined
};
	/** aggregate stddev_pop on columns */
["servers_stddev_pop_fields"]: {
		player_steam_id?: number | undefined,
	port?: number | undefined,
	tv_port?: number | undefined
};
	/** aggregate stddev_samp on columns */
["servers_stddev_samp_fields"]: {
		player_steam_id?: number | undefined,
	port?: number | undefined,
	tv_port?: number | undefined
};
	/** Streaming cursor of the table "servers" */
["servers_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["servers_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["servers_stream_cursor_value_input"]: {
	api_password?: ModelTypes["uuid"] | undefined,
	enabled?: boolean | undefined,
	host?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	label?: string | undefined,
	on_demand?: boolean | undefined,
	player_steam_id?: ModelTypes["bigint"] | undefined,
	port?: number | undefined,
	rcon_password?: ModelTypes["bytea"] | undefined,
	tv_port?: number | undefined
};
	/** aggregate sum on columns */
["servers_sum_fields"]: {
		player_steam_id?: ModelTypes["bigint"] | undefined,
	port?: number | undefined,
	tv_port?: number | undefined
};
	["servers_update_column"]:servers_update_column;
	["servers_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["servers_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["servers_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["servers_bool_exp"]
};
	/** aggregate var_pop on columns */
["servers_var_pop_fields"]: {
		player_steam_id?: number | undefined,
	port?: number | undefined,
	tv_port?: number | undefined
};
	/** aggregate var_samp on columns */
["servers_var_samp_fields"]: {
		player_steam_id?: number | undefined,
	port?: number | undefined,
	tv_port?: number | undefined
};
	/** aggregate variance on columns */
["servers_variance_fields"]: {
		player_steam_id?: number | undefined,
	port?: number | undefined,
	tv_port?: number | undefined
};
	["subscription_root"]: {
		/** fetch data from the table: "_map_pool" */
	_map_pool: Array<ModelTypes["_map_pool"]>,
	/** fetch aggregated fields from the table: "_map_pool" */
	_map_pool_aggregate: ModelTypes["_map_pool_aggregate"],
	/** fetch data from the table: "_map_pool" using primary key columns */
	_map_pool_by_pk?: ModelTypes["_map_pool"] | undefined,
	/** fetch data from the table in a streaming manner: "_map_pool" */
	_map_pool_stream: Array<ModelTypes["_map_pool"]>,
	/** fetch data from the table: "e_match_map_status" */
	e_match_map_status: Array<ModelTypes["e_match_map_status"]>,
	/** fetch aggregated fields from the table: "e_match_map_status" */
	e_match_map_status_aggregate: ModelTypes["e_match_map_status_aggregate"],
	/** fetch data from the table: "e_match_map_status" using primary key columns */
	e_match_map_status_by_pk?: ModelTypes["e_match_map_status"] | undefined,
	/** fetch data from the table in a streaming manner: "e_match_map_status" */
	e_match_map_status_stream: Array<ModelTypes["e_match_map_status"]>,
	/** fetch data from the table: "e_match_status" */
	e_match_status: Array<ModelTypes["e_match_status"]>,
	/** fetch aggregated fields from the table: "e_match_status" */
	e_match_status_aggregate: ModelTypes["e_match_status_aggregate"],
	/** fetch data from the table: "e_match_status" using primary key columns */
	e_match_status_by_pk?: ModelTypes["e_match_status"] | undefined,
	/** fetch data from the table in a streaming manner: "e_match_status" */
	e_match_status_stream: Array<ModelTypes["e_match_status"]>,
	/** fetch data from the table: "e_match_types" */
	e_match_types: Array<ModelTypes["e_match_types"]>,
	/** fetch aggregated fields from the table: "e_match_types" */
	e_match_types_aggregate: ModelTypes["e_match_types_aggregate"],
	/** fetch data from the table: "e_match_types" using primary key columns */
	e_match_types_by_pk?: ModelTypes["e_match_types"] | undefined,
	/** fetch data from the table in a streaming manner: "e_match_types" */
	e_match_types_stream: Array<ModelTypes["e_match_types"]>,
	/** fetch data from the table: "e_objective_types" */
	e_objective_types: Array<ModelTypes["e_objective_types"]>,
	/** fetch aggregated fields from the table: "e_objective_types" */
	e_objective_types_aggregate: ModelTypes["e_objective_types_aggregate"],
	/** fetch data from the table: "e_objective_types" using primary key columns */
	e_objective_types_by_pk?: ModelTypes["e_objective_types"] | undefined,
	/** fetch data from the table in a streaming manner: "e_objective_types" */
	e_objective_types_stream: Array<ModelTypes["e_objective_types"]>,
	/** fetch data from the table: "e_sides" */
	e_sides: Array<ModelTypes["e_sides"]>,
	/** fetch aggregated fields from the table: "e_sides" */
	e_sides_aggregate: ModelTypes["e_sides_aggregate"],
	/** fetch data from the table: "e_sides" using primary key columns */
	e_sides_by_pk?: ModelTypes["e_sides"] | undefined,
	/** fetch data from the table in a streaming manner: "e_sides" */
	e_sides_stream: Array<ModelTypes["e_sides"]>,
	/** fetch data from the table: "e_team_roles" */
	e_team_roles: Array<ModelTypes["e_team_roles"]>,
	/** fetch aggregated fields from the table: "e_team_roles" */
	e_team_roles_aggregate: ModelTypes["e_team_roles_aggregate"],
	/** fetch data from the table: "e_team_roles" using primary key columns */
	e_team_roles_by_pk?: ModelTypes["e_team_roles"] | undefined,
	/** fetch data from the table in a streaming manner: "e_team_roles" */
	e_team_roles_stream: Array<ModelTypes["e_team_roles"]>,
	/** fetch data from the table: "e_timeout_settings" */
	e_timeout_settings: Array<ModelTypes["e_timeout_settings"]>,
	/** fetch aggregated fields from the table: "e_timeout_settings" */
	e_timeout_settings_aggregate: ModelTypes["e_timeout_settings_aggregate"],
	/** fetch data from the table: "e_timeout_settings" using primary key columns */
	e_timeout_settings_by_pk?: ModelTypes["e_timeout_settings"] | undefined,
	/** fetch data from the table in a streaming manner: "e_timeout_settings" */
	e_timeout_settings_stream: Array<ModelTypes["e_timeout_settings"]>,
	/** fetch data from the table: "e_utility_types" */
	e_utility_types: Array<ModelTypes["e_utility_types"]>,
	/** fetch aggregated fields from the table: "e_utility_types" */
	e_utility_types_aggregate: ModelTypes["e_utility_types_aggregate"],
	/** fetch data from the table: "e_utility_types" using primary key columns */
	e_utility_types_by_pk?: ModelTypes["e_utility_types"] | undefined,
	/** fetch data from the table in a streaming manner: "e_utility_types" */
	e_utility_types_stream: Array<ModelTypes["e_utility_types"]>,
	/** fetch data from the table: "e_veto_pick_types" */
	e_veto_pick_types: Array<ModelTypes["e_veto_pick_types"]>,
	/** fetch aggregated fields from the table: "e_veto_pick_types" */
	e_veto_pick_types_aggregate: ModelTypes["e_veto_pick_types_aggregate"],
	/** fetch data from the table: "e_veto_pick_types" using primary key columns */
	e_veto_pick_types_by_pk?: ModelTypes["e_veto_pick_types"] | undefined,
	/** fetch data from the table in a streaming manner: "e_veto_pick_types" */
	e_veto_pick_types_stream: Array<ModelTypes["e_veto_pick_types"]>,
	/** fetch data from the table: "map_pools" */
	map_pools: Array<ModelTypes["map_pools"]>,
	/** fetch aggregated fields from the table: "map_pools" */
	map_pools_aggregate: ModelTypes["map_pools_aggregate"],
	/** fetch data from the table: "map_pools" using primary key columns */
	map_pools_by_pk?: ModelTypes["map_pools"] | undefined,
	/** fetch data from the table in a streaming manner: "map_pools" */
	map_pools_stream: Array<ModelTypes["map_pools"]>,
	/** An array relationship */
	maps: Array<ModelTypes["maps"]>,
	/** An aggregate relationship */
	maps_aggregate: ModelTypes["maps_aggregate"],
	/** fetch data from the table: "maps" using primary key columns */
	maps_by_pk?: ModelTypes["maps"] | undefined,
	/** fetch data from the table in a streaming manner: "maps" */
	maps_stream: Array<ModelTypes["maps"]>,
	/** fetch data from the table: "match_lineup_players" */
	match_lineup_players: Array<ModelTypes["match_lineup_players"]>,
	/** fetch aggregated fields from the table: "match_lineup_players" */
	match_lineup_players_aggregate: ModelTypes["match_lineup_players_aggregate"],
	/** fetch data from the table: "match_lineup_players" using primary key columns */
	match_lineup_players_by_pk?: ModelTypes["match_lineup_players"] | undefined,
	/** fetch data from the table in a streaming manner: "match_lineup_players" */
	match_lineup_players_stream: Array<ModelTypes["match_lineup_players"]>,
	/** An array relationship */
	match_lineups: Array<ModelTypes["match_lineups"]>,
	/** An aggregate relationship */
	match_lineups_aggregate: ModelTypes["match_lineups_aggregate"],
	/** fetch data from the table: "match_lineups" using primary key columns */
	match_lineups_by_pk?: ModelTypes["match_lineups"] | undefined,
	/** fetch data from the table in a streaming manner: "match_lineups" */
	match_lineups_stream: Array<ModelTypes["match_lineups"]>,
	/** fetch data from the table: "match_map_demos" */
	match_map_demos: Array<ModelTypes["match_map_demos"]>,
	/** fetch aggregated fields from the table: "match_map_demos" */
	match_map_demos_aggregate: ModelTypes["match_map_demos_aggregate"],
	/** fetch data from the table: "match_map_demos" using primary key columns */
	match_map_demos_by_pk?: ModelTypes["match_map_demos"] | undefined,
	/** fetch data from the table in a streaming manner: "match_map_demos" */
	match_map_demos_stream: Array<ModelTypes["match_map_demos"]>,
	/** fetch data from the table: "match_map_rounds" */
	match_map_rounds: Array<ModelTypes["match_map_rounds"]>,
	/** fetch aggregated fields from the table: "match_map_rounds" */
	match_map_rounds_aggregate: ModelTypes["match_map_rounds_aggregate"],
	/** fetch data from the table: "match_map_rounds" using primary key columns */
	match_map_rounds_by_pk?: ModelTypes["match_map_rounds"] | undefined,
	/** fetch data from the table in a streaming manner: "match_map_rounds" */
	match_map_rounds_stream: Array<ModelTypes["match_map_rounds"]>,
	/** An array relationship */
	match_maps: Array<ModelTypes["match_maps"]>,
	/** An aggregate relationship */
	match_maps_aggregate: ModelTypes["match_maps_aggregate"],
	/** fetch data from the table: "match_maps" using primary key columns */
	match_maps_by_pk?: ModelTypes["match_maps"] | undefined,
	/** fetch data from the table in a streaming manner: "match_maps" */
	match_maps_stream: Array<ModelTypes["match_maps"]>,
	/** An array relationship */
	match_veto_picks: Array<ModelTypes["match_veto_picks"]>,
	/** An aggregate relationship */
	match_veto_picks_aggregate: ModelTypes["match_veto_picks_aggregate"],
	/** fetch data from the table: "match_veto_picks" using primary key columns */
	match_veto_picks_by_pk?: ModelTypes["match_veto_picks"] | undefined,
	/** fetch data from the table in a streaming manner: "match_veto_picks" */
	match_veto_picks_stream: Array<ModelTypes["match_veto_picks"]>,
	/** An array relationship */
	matches: Array<ModelTypes["matches"]>,
	/** An aggregate relationship */
	matches_aggregate: ModelTypes["matches_aggregate"],
	/** fetch data from the table: "matches" using primary key columns */
	matches_by_pk?: ModelTypes["matches"] | undefined,
	/** fetch data from the table in a streaming manner: "matches" */
	matches_stream: Array<ModelTypes["matches"]>,
	/** An array relationship */
	player_assists: Array<ModelTypes["player_assists"]>,
	/** An aggregate relationship */
	player_assists_aggregate: ModelTypes["player_assists_aggregate"],
	/** fetch data from the table: "player_assists" using primary key columns */
	player_assists_by_pk?: ModelTypes["player_assists"] | undefined,
	/** fetch data from the table in a streaming manner: "player_assists" */
	player_assists_stream: Array<ModelTypes["player_assists"]>,
	/** An array relationship */
	player_damages: Array<ModelTypes["player_damages"]>,
	/** An aggregate relationship */
	player_damages_aggregate: ModelTypes["player_damages_aggregate"],
	/** fetch data from the table: "player_damages" using primary key columns */
	player_damages_by_pk?: ModelTypes["player_damages"] | undefined,
	/** fetch data from the table in a streaming manner: "player_damages" */
	player_damages_stream: Array<ModelTypes["player_damages"]>,
	/** An array relationship */
	player_flashes: Array<ModelTypes["player_flashes"]>,
	/** An aggregate relationship */
	player_flashes_aggregate: ModelTypes["player_flashes_aggregate"],
	/** fetch data from the table: "player_flashes" using primary key columns */
	player_flashes_by_pk?: ModelTypes["player_flashes"] | undefined,
	/** fetch data from the table in a streaming manner: "player_flashes" */
	player_flashes_stream: Array<ModelTypes["player_flashes"]>,
	/** An array relationship */
	player_kills: Array<ModelTypes["player_kills"]>,
	/** An aggregate relationship */
	player_kills_aggregate: ModelTypes["player_kills_aggregate"],
	/** fetch data from the table: "player_kills" using primary key columns */
	player_kills_by_pk?: ModelTypes["player_kills"] | undefined,
	/** fetch data from the table in a streaming manner: "player_kills" */
	player_kills_stream: Array<ModelTypes["player_kills"]>,
	/** An array relationship */
	player_objectives: Array<ModelTypes["player_objectives"]>,
	/** An aggregate relationship */
	player_objectives_aggregate: ModelTypes["player_objectives_aggregate"],
	/** fetch data from the table: "player_objectives" using primary key columns */
	player_objectives_by_pk?: ModelTypes["player_objectives"] | undefined,
	/** fetch data from the table in a streaming manner: "player_objectives" */
	player_objectives_stream: Array<ModelTypes["player_objectives"]>,
	/** fetch data from the table: "player_unused_utility" */
	player_unused_utility: Array<ModelTypes["player_unused_utility"]>,
	/** fetch aggregated fields from the table: "player_unused_utility" */
	player_unused_utility_aggregate: ModelTypes["player_unused_utility_aggregate"],
	/** fetch data from the table: "player_unused_utility" using primary key columns */
	player_unused_utility_by_pk?: ModelTypes["player_unused_utility"] | undefined,
	/** fetch data from the table in a streaming manner: "player_unused_utility" */
	player_unused_utility_stream: Array<ModelTypes["player_unused_utility"]>,
	/** An array relationship */
	player_utility: Array<ModelTypes["player_utility"]>,
	/** An aggregate relationship */
	player_utility_aggregate: ModelTypes["player_utility_aggregate"],
	/** fetch data from the table: "player_utility" using primary key columns */
	player_utility_by_pk?: ModelTypes["player_utility"] | undefined,
	/** fetch data from the table in a streaming manner: "player_utility" */
	player_utility_stream: Array<ModelTypes["player_utility"]>,
	/** fetch data from the table: "players" */
	players: Array<ModelTypes["players"]>,
	/** fetch aggregated fields from the table: "players" */
	players_aggregate: ModelTypes["players_aggregate"],
	/** fetch data from the table: "players" using primary key columns */
	players_by_pk?: ModelTypes["players"] | undefined,
	/** fetch data from the table in a streaming manner: "players" */
	players_stream: Array<ModelTypes["players"]>,
	/** fetch data from the table: "servers" */
	servers: Array<ModelTypes["servers"]>,
	/** fetch aggregated fields from the table: "servers" */
	servers_aggregate: ModelTypes["servers_aggregate"],
	/** fetch data from the table: "servers" using primary key columns */
	servers_by_pk?: ModelTypes["servers"] | undefined,
	/** fetch data from the table in a streaming manner: "servers" */
	servers_stream: Array<ModelTypes["servers"]>,
	/** An array relationship */
	team_invites: Array<ModelTypes["team_invites"]>,
	/** An aggregate relationship */
	team_invites_aggregate: ModelTypes["team_invites_aggregate"],
	/** fetch data from the table: "team_invites" using primary key columns */
	team_invites_by_pk?: ModelTypes["team_invites"] | undefined,
	/** fetch data from the table in a streaming manner: "team_invites" */
	team_invites_stream: Array<ModelTypes["team_invites"]>,
	/** fetch data from the table: "team_roster" */
	team_roster: Array<ModelTypes["team_roster"]>,
	/** fetch aggregated fields from the table: "team_roster" */
	team_roster_aggregate: ModelTypes["team_roster_aggregate"],
	/** fetch data from the table: "team_roster" using primary key columns */
	team_roster_by_pk?: ModelTypes["team_roster"] | undefined,
	/** fetch data from the table in a streaming manner: "team_roster" */
	team_roster_stream: Array<ModelTypes["team_roster"]>,
	/** fetch data from the table: "teams" */
	teams: Array<ModelTypes["teams"]>,
	/** fetch aggregated fields from the table: "teams" */
	teams_aggregate: ModelTypes["teams_aggregate"],
	/** fetch data from the table: "teams" using primary key columns */
	teams_by_pk?: ModelTypes["teams"] | undefined,
	/** fetch data from the table in a streaming manner: "teams" */
	teams_stream: Array<ModelTypes["teams"]>,
	/** An array relationship */
	tournament_organizers: Array<ModelTypes["tournament_organizers"]>,
	/** An aggregate relationship */
	tournament_organizers_aggregate: ModelTypes["tournament_organizers_aggregate"],
	/** fetch data from the table: "tournament_organizers" using primary key columns */
	tournament_organizers_by_pk?: ModelTypes["tournament_organizers"] | undefined,
	/** fetch data from the table in a streaming manner: "tournament_organizers" */
	tournament_organizers_stream: Array<ModelTypes["tournament_organizers"]>,
	/** fetch data from the table: "tournament_roster" */
	tournament_roster: Array<ModelTypes["tournament_roster"]>,
	/** fetch aggregated fields from the table: "tournament_roster" */
	tournament_roster_aggregate: ModelTypes["tournament_roster_aggregate"],
	/** fetch data from the table: "tournament_roster" using primary key columns */
	tournament_roster_by_pk?: ModelTypes["tournament_roster"] | undefined,
	/** fetch data from the table in a streaming manner: "tournament_roster" */
	tournament_roster_stream: Array<ModelTypes["tournament_roster"]>,
	/** An array relationship */
	tournament_servers: Array<ModelTypes["tournament_servers"]>,
	/** An aggregate relationship */
	tournament_servers_aggregate: ModelTypes["tournament_servers_aggregate"],
	/** fetch data from the table: "tournament_servers" using primary key columns */
	tournament_servers_by_pk?: ModelTypes["tournament_servers"] | undefined,
	/** fetch data from the table in a streaming manner: "tournament_servers" */
	tournament_servers_stream: Array<ModelTypes["tournament_servers"]>,
	/** fetch data from the table: "tournament_stages" */
	tournament_stages: Array<ModelTypes["tournament_stages"]>,
	/** fetch aggregated fields from the table: "tournament_stages" */
	tournament_stages_aggregate: ModelTypes["tournament_stages_aggregate"],
	/** fetch data from the table: "tournament_stages" using primary key columns */
	tournament_stages_by_pk?: ModelTypes["tournament_stages"] | undefined,
	/** fetch data from the table in a streaming manner: "tournament_stages" */
	tournament_stages_stream: Array<ModelTypes["tournament_stages"]>,
	/** An array relationship */
	tournament_teams: Array<ModelTypes["tournament_teams"]>,
	/** An aggregate relationship */
	tournament_teams_aggregate: ModelTypes["tournament_teams_aggregate"],
	/** fetch data from the table: "tournament_teams" using primary key columns */
	tournament_teams_by_pk?: ModelTypes["tournament_teams"] | undefined,
	/** fetch data from the table in a streaming manner: "tournament_teams" */
	tournament_teams_stream: Array<ModelTypes["tournament_teams"]>,
	/** An array relationship */
	tournaments: Array<ModelTypes["tournaments"]>,
	/** An aggregate relationship */
	tournaments_aggregate: ModelTypes["tournaments_aggregate"],
	/** fetch data from the table: "tournaments" using primary key columns */
	tournaments_by_pk?: ModelTypes["tournaments"] | undefined,
	/** fetch data from the table in a streaming manner: "tournaments" */
	tournaments_stream: Array<ModelTypes["tournaments"]>,
	/** fetch data from the table: "v_match_captains" */
	v_match_captains: Array<ModelTypes["v_match_captains"]>,
	/** fetch aggregated fields from the table: "v_match_captains" */
	v_match_captains_aggregate: ModelTypes["v_match_captains_aggregate"],
	/** fetch data from the table in a streaming manner: "v_match_captains" */
	v_match_captains_stream: Array<ModelTypes["v_match_captains"]>,
	/** fetch data from the table: "v_player_arch_nemesis" */
	v_player_arch_nemesis: Array<ModelTypes["v_player_arch_nemesis"]>,
	/** fetch aggregated fields from the table: "v_player_arch_nemesis" */
	v_player_arch_nemesis_aggregate: ModelTypes["v_player_arch_nemesis_aggregate"],
	/** fetch data from the table in a streaming manner: "v_player_arch_nemesis" */
	v_player_arch_nemesis_stream: Array<ModelTypes["v_player_arch_nemesis"]>,
	/** fetch data from the table: "v_player_damage" */
	v_player_damage: Array<ModelTypes["v_player_damage"]>,
	/** fetch aggregated fields from the table: "v_player_damage" */
	v_player_damage_aggregate: ModelTypes["v_player_damage_aggregate"],
	/** fetch data from the table in a streaming manner: "v_player_damage" */
	v_player_damage_stream: Array<ModelTypes["v_player_damage"]>,
	/** fetch data from the table: "v_player_killed_player_counts" */
	v_player_killed_player_counts: Array<ModelTypes["v_player_killed_player_counts"]>,
	/** fetch aggregated fields from the table: "v_player_killed_player_counts" */
	v_player_killed_player_counts_aggregate: ModelTypes["v_player_killed_player_counts_aggregate"],
	/** fetch data from the table in a streaming manner: "v_player_killed_player_counts" */
	v_player_killed_player_counts_stream: Array<ModelTypes["v_player_killed_player_counts"]>,
	/** fetch data from the table: "v_player_match_kills" */
	v_player_match_kills: Array<ModelTypes["v_player_match_kills"]>,
	/** fetch aggregated fields from the table: "v_player_match_kills" */
	v_player_match_kills_aggregate: ModelTypes["v_player_match_kills_aggregate"],
	/** fetch data from the table in a streaming manner: "v_player_match_kills" */
	v_player_match_kills_stream: Array<ModelTypes["v_player_match_kills"]>,
	/** fetch data from the table: "v_player_multi_kills" */
	v_player_multi_kills: Array<ModelTypes["v_player_multi_kills"]>,
	/** fetch aggregated fields from the table: "v_player_multi_kills" */
	v_player_multi_kills_aggregate: ModelTypes["v_player_multi_kills_aggregate"],
	/** fetch data from the table in a streaming manner: "v_player_multi_kills" */
	v_player_multi_kills_stream: Array<ModelTypes["v_player_multi_kills"]>,
	/** fetch data from the table: "v_player_opening_duels" */
	v_player_opening_duels: Array<ModelTypes["v_player_opening_duels"]>,
	/** fetch aggregated fields from the table: "v_player_opening_duels" */
	v_player_opening_duels_aggregate: ModelTypes["v_player_opening_duels_aggregate"],
	/** fetch data from the table in a streaming manner: "v_player_opening_duels" */
	v_player_opening_duels_stream: Array<ModelTypes["v_player_opening_duels"]>,
	/** fetch data from the table: "v_pool_maps" */
	v_pool_maps: Array<ModelTypes["v_pool_maps"]>,
	/** fetch aggregated fields from the table: "v_pool_maps" */
	v_pool_maps_aggregate: ModelTypes["v_pool_maps_aggregate"],
	/** fetch data from the table in a streaming manner: "v_pool_maps" */
	v_pool_maps_stream: Array<ModelTypes["v_pool_maps"]>
};
	/** columns and relationships of "team_invites" */
["team_invites"]: {
		created_at: ModelTypes["timestamptz"],
	id: ModelTypes["uuid"],
	/** An object relationship */
	invited_by: ModelTypes["players"],
	invited_by_player_steam_id: ModelTypes["bigint"],
	/** An object relationship */
	player: ModelTypes["players"],
	steam_id: ModelTypes["bigint"],
	/** An object relationship */
	team: ModelTypes["teams"],
	team_id: ModelTypes["uuid"]
};
	/** aggregated selection of "team_invites" */
["team_invites_aggregate"]: {
		aggregate?: ModelTypes["team_invites_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["team_invites"]>
};
	["team_invites_aggregate_bool_exp"]: {
	count?: ModelTypes["team_invites_aggregate_bool_exp_count"] | undefined
};
	["team_invites_aggregate_bool_exp_count"]: {
	arguments?: Array<ModelTypes["team_invites_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: ModelTypes["team_invites_bool_exp"] | undefined,
	predicate: ModelTypes["Int_comparison_exp"]
};
	/** aggregate fields of "team_invites" */
["team_invites_aggregate_fields"]: {
		avg?: ModelTypes["team_invites_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["team_invites_max_fields"] | undefined,
	min?: ModelTypes["team_invites_min_fields"] | undefined,
	stddev?: ModelTypes["team_invites_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["team_invites_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["team_invites_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["team_invites_sum_fields"] | undefined,
	var_pop?: ModelTypes["team_invites_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["team_invites_var_samp_fields"] | undefined,
	variance?: ModelTypes["team_invites_variance_fields"] | undefined
};
	/** order by aggregate values of table "team_invites" */
["team_invites_aggregate_order_by"]: {
	avg?: ModelTypes["team_invites_avg_order_by"] | undefined,
	count?: ModelTypes["order_by"] | undefined,
	max?: ModelTypes["team_invites_max_order_by"] | undefined,
	min?: ModelTypes["team_invites_min_order_by"] | undefined,
	stddev?: ModelTypes["team_invites_stddev_order_by"] | undefined,
	stddev_pop?: ModelTypes["team_invites_stddev_pop_order_by"] | undefined,
	stddev_samp?: ModelTypes["team_invites_stddev_samp_order_by"] | undefined,
	sum?: ModelTypes["team_invites_sum_order_by"] | undefined,
	var_pop?: ModelTypes["team_invites_var_pop_order_by"] | undefined,
	var_samp?: ModelTypes["team_invites_var_samp_order_by"] | undefined,
	variance?: ModelTypes["team_invites_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "team_invites" */
["team_invites_arr_rel_insert_input"]: {
	data: Array<ModelTypes["team_invites_insert_input"]>,
	/** upsert condition */
	on_conflict?: ModelTypes["team_invites_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["team_invites_avg_fields"]: {
		invited_by_player_steam_id?: number | undefined,
	steam_id?: number | undefined
};
	/** order by avg() on columns of table "team_invites" */
["team_invites_avg_order_by"]: {
	invited_by_player_steam_id?: ModelTypes["order_by"] | undefined,
	steam_id?: ModelTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "team_invites". All fields are combined with a logical 'AND'. */
["team_invites_bool_exp"]: {
	_and?: Array<ModelTypes["team_invites_bool_exp"]> | undefined,
	_not?: ModelTypes["team_invites_bool_exp"] | undefined,
	_or?: Array<ModelTypes["team_invites_bool_exp"]> | undefined,
	created_at?: ModelTypes["timestamptz_comparison_exp"] | undefined,
	id?: ModelTypes["uuid_comparison_exp"] | undefined,
	invited_by?: ModelTypes["players_bool_exp"] | undefined,
	invited_by_player_steam_id?: ModelTypes["bigint_comparison_exp"] | undefined,
	player?: ModelTypes["players_bool_exp"] | undefined,
	steam_id?: ModelTypes["bigint_comparison_exp"] | undefined,
	team?: ModelTypes["teams_bool_exp"] | undefined,
	team_id?: ModelTypes["uuid_comparison_exp"] | undefined
};
	["team_invites_constraint"]:team_invites_constraint;
	/** input type for incrementing numeric columns in table "team_invites" */
["team_invites_inc_input"]: {
	invited_by_player_steam_id?: ModelTypes["bigint"] | undefined,
	steam_id?: ModelTypes["bigint"] | undefined
};
	/** input type for inserting data into table "team_invites" */
["team_invites_insert_input"]: {
	created_at?: ModelTypes["timestamptz"] | undefined,
	id?: ModelTypes["uuid"] | undefined,
	invited_by?: ModelTypes["players_obj_rel_insert_input"] | undefined,
	invited_by_player_steam_id?: ModelTypes["bigint"] | undefined,
	player?: ModelTypes["players_obj_rel_insert_input"] | undefined,
	steam_id?: ModelTypes["bigint"] | undefined,
	team?: ModelTypes["teams_obj_rel_insert_input"] | undefined,
	team_id?: ModelTypes["uuid"] | undefined
};
	/** aggregate max on columns */
["team_invites_max_fields"]: {
		created_at?: ModelTypes["timestamptz"] | undefined,
	id?: ModelTypes["uuid"] | undefined,
	invited_by_player_steam_id?: ModelTypes["bigint"] | undefined,
	steam_id?: ModelTypes["bigint"] | undefined,
	team_id?: ModelTypes["uuid"] | undefined
};
	/** order by max() on columns of table "team_invites" */
["team_invites_max_order_by"]: {
	created_at?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	invited_by_player_steam_id?: ModelTypes["order_by"] | undefined,
	steam_id?: ModelTypes["order_by"] | undefined,
	team_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["team_invites_min_fields"]: {
		created_at?: ModelTypes["timestamptz"] | undefined,
	id?: ModelTypes["uuid"] | undefined,
	invited_by_player_steam_id?: ModelTypes["bigint"] | undefined,
	steam_id?: ModelTypes["bigint"] | undefined,
	team_id?: ModelTypes["uuid"] | undefined
};
	/** order by min() on columns of table "team_invites" */
["team_invites_min_order_by"]: {
	created_at?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	invited_by_player_steam_id?: ModelTypes["order_by"] | undefined,
	steam_id?: ModelTypes["order_by"] | undefined,
	team_id?: ModelTypes["order_by"] | undefined
};
	/** response of any mutation on the table "team_invites" */
["team_invites_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["team_invites"]>
};
	/** on_conflict condition type for table "team_invites" */
["team_invites_on_conflict"]: {
	constraint: ModelTypes["team_invites_constraint"],
	update_columns: Array<ModelTypes["team_invites_update_column"]>,
	where?: ModelTypes["team_invites_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "team_invites". */
["team_invites_order_by"]: {
	created_at?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	invited_by?: ModelTypes["players_order_by"] | undefined,
	invited_by_player_steam_id?: ModelTypes["order_by"] | undefined,
	player?: ModelTypes["players_order_by"] | undefined,
	steam_id?: ModelTypes["order_by"] | undefined,
	team?: ModelTypes["teams_order_by"] | undefined,
	team_id?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: team_invites */
["team_invites_pk_columns_input"]: {
	id: ModelTypes["uuid"]
};
	["team_invites_select_column"]:team_invites_select_column;
	/** input type for updating data in table "team_invites" */
["team_invites_set_input"]: {
	created_at?: ModelTypes["timestamptz"] | undefined,
	id?: ModelTypes["uuid"] | undefined,
	invited_by_player_steam_id?: ModelTypes["bigint"] | undefined,
	steam_id?: ModelTypes["bigint"] | undefined,
	team_id?: ModelTypes["uuid"] | undefined
};
	/** aggregate stddev on columns */
["team_invites_stddev_fields"]: {
		invited_by_player_steam_id?: number | undefined,
	steam_id?: number | undefined
};
	/** order by stddev() on columns of table "team_invites" */
["team_invites_stddev_order_by"]: {
	invited_by_player_steam_id?: ModelTypes["order_by"] | undefined,
	steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["team_invites_stddev_pop_fields"]: {
		invited_by_player_steam_id?: number | undefined,
	steam_id?: number | undefined
};
	/** order by stddev_pop() on columns of table "team_invites" */
["team_invites_stddev_pop_order_by"]: {
	invited_by_player_steam_id?: ModelTypes["order_by"] | undefined,
	steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["team_invites_stddev_samp_fields"]: {
		invited_by_player_steam_id?: number | undefined,
	steam_id?: number | undefined
};
	/** order by stddev_samp() on columns of table "team_invites" */
["team_invites_stddev_samp_order_by"]: {
	invited_by_player_steam_id?: ModelTypes["order_by"] | undefined,
	steam_id?: ModelTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "team_invites" */
["team_invites_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["team_invites_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["team_invites_stream_cursor_value_input"]: {
	created_at?: ModelTypes["timestamptz"] | undefined,
	id?: ModelTypes["uuid"] | undefined,
	invited_by_player_steam_id?: ModelTypes["bigint"] | undefined,
	steam_id?: ModelTypes["bigint"] | undefined,
	team_id?: ModelTypes["uuid"] | undefined
};
	/** aggregate sum on columns */
["team_invites_sum_fields"]: {
		invited_by_player_steam_id?: ModelTypes["bigint"] | undefined,
	steam_id?: ModelTypes["bigint"] | undefined
};
	/** order by sum() on columns of table "team_invites" */
["team_invites_sum_order_by"]: {
	invited_by_player_steam_id?: ModelTypes["order_by"] | undefined,
	steam_id?: ModelTypes["order_by"] | undefined
};
	["team_invites_update_column"]:team_invites_update_column;
	["team_invites_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["team_invites_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["team_invites_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["team_invites_bool_exp"]
};
	/** aggregate var_pop on columns */
["team_invites_var_pop_fields"]: {
		invited_by_player_steam_id?: number | undefined,
	steam_id?: number | undefined
};
	/** order by var_pop() on columns of table "team_invites" */
["team_invites_var_pop_order_by"]: {
	invited_by_player_steam_id?: ModelTypes["order_by"] | undefined,
	steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["team_invites_var_samp_fields"]: {
		invited_by_player_steam_id?: number | undefined,
	steam_id?: number | undefined
};
	/** order by var_samp() on columns of table "team_invites" */
["team_invites_var_samp_order_by"]: {
	invited_by_player_steam_id?: ModelTypes["order_by"] | undefined,
	steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["team_invites_variance_fields"]: {
		invited_by_player_steam_id?: number | undefined,
	steam_id?: number | undefined
};
	/** order by variance() on columns of table "team_invites" */
["team_invites_variance_order_by"]: {
	invited_by_player_steam_id?: ModelTypes["order_by"] | undefined,
	steam_id?: ModelTypes["order_by"] | undefined
};
	/** columns and relationships of "team_roster" */
["team_roster"]: {
		/** An object relationship */
	player: ModelTypes["players"],
	player_steam_id: ModelTypes["bigint"],
	role: ModelTypes["e_team_roles_enum"],
	/** An object relationship */
	team: ModelTypes["teams"],
	team_id: ModelTypes["uuid"]
};
	/** aggregated selection of "team_roster" */
["team_roster_aggregate"]: {
		aggregate?: ModelTypes["team_roster_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["team_roster"]>
};
	["team_roster_aggregate_bool_exp"]: {
	count?: ModelTypes["team_roster_aggregate_bool_exp_count"] | undefined
};
	["team_roster_aggregate_bool_exp_count"]: {
	arguments?: Array<ModelTypes["team_roster_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: ModelTypes["team_roster_bool_exp"] | undefined,
	predicate: ModelTypes["Int_comparison_exp"]
};
	/** aggregate fields of "team_roster" */
["team_roster_aggregate_fields"]: {
		avg?: ModelTypes["team_roster_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["team_roster_max_fields"] | undefined,
	min?: ModelTypes["team_roster_min_fields"] | undefined,
	stddev?: ModelTypes["team_roster_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["team_roster_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["team_roster_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["team_roster_sum_fields"] | undefined,
	var_pop?: ModelTypes["team_roster_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["team_roster_var_samp_fields"] | undefined,
	variance?: ModelTypes["team_roster_variance_fields"] | undefined
};
	/** order by aggregate values of table "team_roster" */
["team_roster_aggregate_order_by"]: {
	avg?: ModelTypes["team_roster_avg_order_by"] | undefined,
	count?: ModelTypes["order_by"] | undefined,
	max?: ModelTypes["team_roster_max_order_by"] | undefined,
	min?: ModelTypes["team_roster_min_order_by"] | undefined,
	stddev?: ModelTypes["team_roster_stddev_order_by"] | undefined,
	stddev_pop?: ModelTypes["team_roster_stddev_pop_order_by"] | undefined,
	stddev_samp?: ModelTypes["team_roster_stddev_samp_order_by"] | undefined,
	sum?: ModelTypes["team_roster_sum_order_by"] | undefined,
	var_pop?: ModelTypes["team_roster_var_pop_order_by"] | undefined,
	var_samp?: ModelTypes["team_roster_var_samp_order_by"] | undefined,
	variance?: ModelTypes["team_roster_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "team_roster" */
["team_roster_arr_rel_insert_input"]: {
	data: Array<ModelTypes["team_roster_insert_input"]>,
	/** upsert condition */
	on_conflict?: ModelTypes["team_roster_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["team_roster_avg_fields"]: {
		player_steam_id?: number | undefined
};
	/** order by avg() on columns of table "team_roster" */
["team_roster_avg_order_by"]: {
	player_steam_id?: ModelTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "team_roster". All fields are combined with a logical 'AND'. */
["team_roster_bool_exp"]: {
	_and?: Array<ModelTypes["team_roster_bool_exp"]> | undefined,
	_not?: ModelTypes["team_roster_bool_exp"] | undefined,
	_or?: Array<ModelTypes["team_roster_bool_exp"]> | undefined,
	player?: ModelTypes["players_bool_exp"] | undefined,
	player_steam_id?: ModelTypes["bigint_comparison_exp"] | undefined,
	role?: ModelTypes["e_team_roles_enum_comparison_exp"] | undefined,
	team?: ModelTypes["teams_bool_exp"] | undefined,
	team_id?: ModelTypes["uuid_comparison_exp"] | undefined
};
	["team_roster_constraint"]:team_roster_constraint;
	/** input type for incrementing numeric columns in table "team_roster" */
["team_roster_inc_input"]: {
	player_steam_id?: ModelTypes["bigint"] | undefined
};
	/** input type for inserting data into table "team_roster" */
["team_roster_insert_input"]: {
	player?: ModelTypes["players_obj_rel_insert_input"] | undefined,
	player_steam_id?: ModelTypes["bigint"] | undefined,
	role?: ModelTypes["e_team_roles_enum"] | undefined,
	team?: ModelTypes["teams_obj_rel_insert_input"] | undefined,
	team_id?: ModelTypes["uuid"] | undefined
};
	/** aggregate max on columns */
["team_roster_max_fields"]: {
		player_steam_id?: ModelTypes["bigint"] | undefined,
	team_id?: ModelTypes["uuid"] | undefined
};
	/** order by max() on columns of table "team_roster" */
["team_roster_max_order_by"]: {
	player_steam_id?: ModelTypes["order_by"] | undefined,
	team_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["team_roster_min_fields"]: {
		player_steam_id?: ModelTypes["bigint"] | undefined,
	team_id?: ModelTypes["uuid"] | undefined
};
	/** order by min() on columns of table "team_roster" */
["team_roster_min_order_by"]: {
	player_steam_id?: ModelTypes["order_by"] | undefined,
	team_id?: ModelTypes["order_by"] | undefined
};
	/** response of any mutation on the table "team_roster" */
["team_roster_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["team_roster"]>
};
	/** on_conflict condition type for table "team_roster" */
["team_roster_on_conflict"]: {
	constraint: ModelTypes["team_roster_constraint"],
	update_columns: Array<ModelTypes["team_roster_update_column"]>,
	where?: ModelTypes["team_roster_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "team_roster". */
["team_roster_order_by"]: {
	player?: ModelTypes["players_order_by"] | undefined,
	player_steam_id?: ModelTypes["order_by"] | undefined,
	role?: ModelTypes["order_by"] | undefined,
	team?: ModelTypes["teams_order_by"] | undefined,
	team_id?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: team_roster */
["team_roster_pk_columns_input"]: {
	player_steam_id: ModelTypes["bigint"],
	team_id: ModelTypes["uuid"]
};
	["team_roster_select_column"]:team_roster_select_column;
	/** input type for updating data in table "team_roster" */
["team_roster_set_input"]: {
	player_steam_id?: ModelTypes["bigint"] | undefined,
	role?: ModelTypes["e_team_roles_enum"] | undefined,
	team_id?: ModelTypes["uuid"] | undefined
};
	/** aggregate stddev on columns */
["team_roster_stddev_fields"]: {
		player_steam_id?: number | undefined
};
	/** order by stddev() on columns of table "team_roster" */
["team_roster_stddev_order_by"]: {
	player_steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["team_roster_stddev_pop_fields"]: {
		player_steam_id?: number | undefined
};
	/** order by stddev_pop() on columns of table "team_roster" */
["team_roster_stddev_pop_order_by"]: {
	player_steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["team_roster_stddev_samp_fields"]: {
		player_steam_id?: number | undefined
};
	/** order by stddev_samp() on columns of table "team_roster" */
["team_roster_stddev_samp_order_by"]: {
	player_steam_id?: ModelTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "team_roster" */
["team_roster_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["team_roster_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["team_roster_stream_cursor_value_input"]: {
	player_steam_id?: ModelTypes["bigint"] | undefined,
	role?: ModelTypes["e_team_roles_enum"] | undefined,
	team_id?: ModelTypes["uuid"] | undefined
};
	/** aggregate sum on columns */
["team_roster_sum_fields"]: {
		player_steam_id?: ModelTypes["bigint"] | undefined
};
	/** order by sum() on columns of table "team_roster" */
["team_roster_sum_order_by"]: {
	player_steam_id?: ModelTypes["order_by"] | undefined
};
	["team_roster_update_column"]:team_roster_update_column;
	["team_roster_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["team_roster_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["team_roster_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["team_roster_bool_exp"]
};
	/** aggregate var_pop on columns */
["team_roster_var_pop_fields"]: {
		player_steam_id?: number | undefined
};
	/** order by var_pop() on columns of table "team_roster" */
["team_roster_var_pop_order_by"]: {
	player_steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["team_roster_var_samp_fields"]: {
		player_steam_id?: number | undefined
};
	/** order by var_samp() on columns of table "team_roster" */
["team_roster_var_samp_order_by"]: {
	player_steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["team_roster_variance_fields"]: {
		player_steam_id?: number | undefined
};
	/** order by variance() on columns of table "team_roster" */
["team_roster_variance_order_by"]: {
	player_steam_id?: ModelTypes["order_by"] | undefined
};
	/** columns and relationships of "teams" */
["teams"]: {
		id: ModelTypes["uuid"],
	/** An array relationship */
	invites: Array<ModelTypes["team_invites"]>,
	/** An aggregate relationship */
	invites_aggregate: ModelTypes["team_invites_aggregate"],
	/** An array relationship */
	match_lineups: Array<ModelTypes["match_lineups"]>,
	/** An aggregate relationship */
	match_lineups_aggregate: ModelTypes["match_lineups_aggregate"],
	/** A computed field, executes function "get_team_matches" */
	matches?: Array<ModelTypes["matches"]> | undefined,
	name: string,
	/** An object relationship */
	owner: ModelTypes["players"],
	owner_steam_id: ModelTypes["bigint"],
	/** An array relationship */
	roster: Array<ModelTypes["team_roster"]>,
	/** An aggregate relationship */
	roster_aggregate: ModelTypes["team_roster_aggregate"],
	short_name: string,
	/** An array relationship */
	tournament_rosters: Array<ModelTypes["tournament_roster"]>,
	/** An aggregate relationship */
	tournament_rosters_aggregate: ModelTypes["tournament_roster_aggregate"],
	/** An array relationship */
	tournament_teams: Array<ModelTypes["tournament_teams"]>,
	/** An aggregate relationship */
	tournament_teams_aggregate: ModelTypes["tournament_teams_aggregate"]
};
	/** aggregated selection of "teams" */
["teams_aggregate"]: {
		aggregate?: ModelTypes["teams_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["teams"]>
};
	["teams_aggregate_bool_exp"]: {
	count?: ModelTypes["teams_aggregate_bool_exp_count"] | undefined
};
	["teams_aggregate_bool_exp_count"]: {
	arguments?: Array<ModelTypes["teams_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: ModelTypes["teams_bool_exp"] | undefined,
	predicate: ModelTypes["Int_comparison_exp"]
};
	/** aggregate fields of "teams" */
["teams_aggregate_fields"]: {
		avg?: ModelTypes["teams_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["teams_max_fields"] | undefined,
	min?: ModelTypes["teams_min_fields"] | undefined,
	stddev?: ModelTypes["teams_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["teams_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["teams_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["teams_sum_fields"] | undefined,
	var_pop?: ModelTypes["teams_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["teams_var_samp_fields"] | undefined,
	variance?: ModelTypes["teams_variance_fields"] | undefined
};
	/** order by aggregate values of table "teams" */
["teams_aggregate_order_by"]: {
	avg?: ModelTypes["teams_avg_order_by"] | undefined,
	count?: ModelTypes["order_by"] | undefined,
	max?: ModelTypes["teams_max_order_by"] | undefined,
	min?: ModelTypes["teams_min_order_by"] | undefined,
	stddev?: ModelTypes["teams_stddev_order_by"] | undefined,
	stddev_pop?: ModelTypes["teams_stddev_pop_order_by"] | undefined,
	stddev_samp?: ModelTypes["teams_stddev_samp_order_by"] | undefined,
	sum?: ModelTypes["teams_sum_order_by"] | undefined,
	var_pop?: ModelTypes["teams_var_pop_order_by"] | undefined,
	var_samp?: ModelTypes["teams_var_samp_order_by"] | undefined,
	variance?: ModelTypes["teams_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "teams" */
["teams_arr_rel_insert_input"]: {
	data: Array<ModelTypes["teams_insert_input"]>,
	/** upsert condition */
	on_conflict?: ModelTypes["teams_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["teams_avg_fields"]: {
		owner_steam_id?: number | undefined
};
	/** order by avg() on columns of table "teams" */
["teams_avg_order_by"]: {
	owner_steam_id?: ModelTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "teams". All fields are combined with a logical 'AND'. */
["teams_bool_exp"]: {
	_and?: Array<ModelTypes["teams_bool_exp"]> | undefined,
	_not?: ModelTypes["teams_bool_exp"] | undefined,
	_or?: Array<ModelTypes["teams_bool_exp"]> | undefined,
	id?: ModelTypes["uuid_comparison_exp"] | undefined,
	invites?: ModelTypes["team_invites_bool_exp"] | undefined,
	invites_aggregate?: ModelTypes["team_invites_aggregate_bool_exp"] | undefined,
	match_lineups?: ModelTypes["match_lineups_bool_exp"] | undefined,
	match_lineups_aggregate?: ModelTypes["match_lineups_aggregate_bool_exp"] | undefined,
	matches?: ModelTypes["matches_bool_exp"] | undefined,
	name?: ModelTypes["String_comparison_exp"] | undefined,
	owner?: ModelTypes["players_bool_exp"] | undefined,
	owner_steam_id?: ModelTypes["bigint_comparison_exp"] | undefined,
	roster?: ModelTypes["team_roster_bool_exp"] | undefined,
	roster_aggregate?: ModelTypes["team_roster_aggregate_bool_exp"] | undefined,
	short_name?: ModelTypes["String_comparison_exp"] | undefined,
	tournament_rosters?: ModelTypes["tournament_roster_bool_exp"] | undefined,
	tournament_rosters_aggregate?: ModelTypes["tournament_roster_aggregate_bool_exp"] | undefined,
	tournament_teams?: ModelTypes["tournament_teams_bool_exp"] | undefined,
	tournament_teams_aggregate?: ModelTypes["tournament_teams_aggregate_bool_exp"] | undefined
};
	["teams_constraint"]:teams_constraint;
	/** input type for incrementing numeric columns in table "teams" */
["teams_inc_input"]: {
	owner_steam_id?: ModelTypes["bigint"] | undefined
};
	/** input type for inserting data into table "teams" */
["teams_insert_input"]: {
	id?: ModelTypes["uuid"] | undefined,
	invites?: ModelTypes["team_invites_arr_rel_insert_input"] | undefined,
	match_lineups?: ModelTypes["match_lineups_arr_rel_insert_input"] | undefined,
	name?: string | undefined,
	owner?: ModelTypes["players_obj_rel_insert_input"] | undefined,
	owner_steam_id?: ModelTypes["bigint"] | undefined,
	roster?: ModelTypes["team_roster_arr_rel_insert_input"] | undefined,
	short_name?: string | undefined,
	tournament_rosters?: ModelTypes["tournament_roster_arr_rel_insert_input"] | undefined,
	tournament_teams?: ModelTypes["tournament_teams_arr_rel_insert_input"] | undefined
};
	/** aggregate max on columns */
["teams_max_fields"]: {
		id?: ModelTypes["uuid"] | undefined,
	name?: string | undefined,
	owner_steam_id?: ModelTypes["bigint"] | undefined,
	short_name?: string | undefined
};
	/** order by max() on columns of table "teams" */
["teams_max_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	name?: ModelTypes["order_by"] | undefined,
	owner_steam_id?: ModelTypes["order_by"] | undefined,
	short_name?: ModelTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["teams_min_fields"]: {
		id?: ModelTypes["uuid"] | undefined,
	name?: string | undefined,
	owner_steam_id?: ModelTypes["bigint"] | undefined,
	short_name?: string | undefined
};
	/** order by min() on columns of table "teams" */
["teams_min_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	name?: ModelTypes["order_by"] | undefined,
	owner_steam_id?: ModelTypes["order_by"] | undefined,
	short_name?: ModelTypes["order_by"] | undefined
};
	/** response of any mutation on the table "teams" */
["teams_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["teams"]>
};
	/** input type for inserting object relation for remote table "teams" */
["teams_obj_rel_insert_input"]: {
	data: ModelTypes["teams_insert_input"],
	/** upsert condition */
	on_conflict?: ModelTypes["teams_on_conflict"] | undefined
};
	/** on_conflict condition type for table "teams" */
["teams_on_conflict"]: {
	constraint: ModelTypes["teams_constraint"],
	update_columns: Array<ModelTypes["teams_update_column"]>,
	where?: ModelTypes["teams_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "teams". */
["teams_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	invites_aggregate?: ModelTypes["team_invites_aggregate_order_by"] | undefined,
	match_lineups_aggregate?: ModelTypes["match_lineups_aggregate_order_by"] | undefined,
	matches_aggregate?: ModelTypes["matches_aggregate_order_by"] | undefined,
	name?: ModelTypes["order_by"] | undefined,
	owner?: ModelTypes["players_order_by"] | undefined,
	owner_steam_id?: ModelTypes["order_by"] | undefined,
	roster_aggregate?: ModelTypes["team_roster_aggregate_order_by"] | undefined,
	short_name?: ModelTypes["order_by"] | undefined,
	tournament_rosters_aggregate?: ModelTypes["tournament_roster_aggregate_order_by"] | undefined,
	tournament_teams_aggregate?: ModelTypes["tournament_teams_aggregate_order_by"] | undefined
};
	/** primary key columns input for table: teams */
["teams_pk_columns_input"]: {
	id: ModelTypes["uuid"]
};
	["teams_select_column"]:teams_select_column;
	/** input type for updating data in table "teams" */
["teams_set_input"]: {
	id?: ModelTypes["uuid"] | undefined,
	name?: string | undefined,
	owner_steam_id?: ModelTypes["bigint"] | undefined,
	short_name?: string | undefined
};
	/** aggregate stddev on columns */
["teams_stddev_fields"]: {
		owner_steam_id?: number | undefined
};
	/** order by stddev() on columns of table "teams" */
["teams_stddev_order_by"]: {
	owner_steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["teams_stddev_pop_fields"]: {
		owner_steam_id?: number | undefined
};
	/** order by stddev_pop() on columns of table "teams" */
["teams_stddev_pop_order_by"]: {
	owner_steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["teams_stddev_samp_fields"]: {
		owner_steam_id?: number | undefined
};
	/** order by stddev_samp() on columns of table "teams" */
["teams_stddev_samp_order_by"]: {
	owner_steam_id?: ModelTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "teams" */
["teams_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["teams_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["teams_stream_cursor_value_input"]: {
	id?: ModelTypes["uuid"] | undefined,
	name?: string | undefined,
	owner_steam_id?: ModelTypes["bigint"] | undefined,
	short_name?: string | undefined
};
	/** aggregate sum on columns */
["teams_sum_fields"]: {
		owner_steam_id?: ModelTypes["bigint"] | undefined
};
	/** order by sum() on columns of table "teams" */
["teams_sum_order_by"]: {
	owner_steam_id?: ModelTypes["order_by"] | undefined
};
	["teams_update_column"]:teams_update_column;
	["teams_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["teams_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["teams_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["teams_bool_exp"]
};
	/** aggregate var_pop on columns */
["teams_var_pop_fields"]: {
		owner_steam_id?: number | undefined
};
	/** order by var_pop() on columns of table "teams" */
["teams_var_pop_order_by"]: {
	owner_steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["teams_var_samp_fields"]: {
		owner_steam_id?: number | undefined
};
	/** order by var_samp() on columns of table "teams" */
["teams_var_samp_order_by"]: {
	owner_steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["teams_variance_fields"]: {
		owner_steam_id?: number | undefined
};
	/** order by variance() on columns of table "teams" */
["teams_variance_order_by"]: {
	owner_steam_id?: ModelTypes["order_by"] | undefined
};
	["timestamptz"]:any;
	/** Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'. */
["timestamptz_comparison_exp"]: {
	_eq?: ModelTypes["timestamptz"] | undefined,
	_gt?: ModelTypes["timestamptz"] | undefined,
	_gte?: ModelTypes["timestamptz"] | undefined,
	_in?: Array<ModelTypes["timestamptz"]> | undefined,
	_is_null?: boolean | undefined,
	_lt?: ModelTypes["timestamptz"] | undefined,
	_lte?: ModelTypes["timestamptz"] | undefined,
	_neq?: ModelTypes["timestamptz"] | undefined,
	_nin?: Array<ModelTypes["timestamptz"]> | undefined
};
	/** columns and relationships of "tournament_organizers" */
["tournament_organizers"]: {
		/** An object relationship */
	organizer: ModelTypes["players"],
	role: string,
	steam_id: ModelTypes["bigint"],
	/** An object relationship */
	tournament: ModelTypes["tournaments"],
	tournament_id: ModelTypes["uuid"]
};
	/** aggregated selection of "tournament_organizers" */
["tournament_organizers_aggregate"]: {
		aggregate?: ModelTypes["tournament_organizers_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["tournament_organizers"]>
};
	["tournament_organizers_aggregate_bool_exp"]: {
	count?: ModelTypes["tournament_organizers_aggregate_bool_exp_count"] | undefined
};
	["tournament_organizers_aggregate_bool_exp_count"]: {
	arguments?: Array<ModelTypes["tournament_organizers_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: ModelTypes["tournament_organizers_bool_exp"] | undefined,
	predicate: ModelTypes["Int_comparison_exp"]
};
	/** aggregate fields of "tournament_organizers" */
["tournament_organizers_aggregate_fields"]: {
		avg?: ModelTypes["tournament_organizers_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["tournament_organizers_max_fields"] | undefined,
	min?: ModelTypes["tournament_organizers_min_fields"] | undefined,
	stddev?: ModelTypes["tournament_organizers_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["tournament_organizers_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["tournament_organizers_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["tournament_organizers_sum_fields"] | undefined,
	var_pop?: ModelTypes["tournament_organizers_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["tournament_organizers_var_samp_fields"] | undefined,
	variance?: ModelTypes["tournament_organizers_variance_fields"] | undefined
};
	/** order by aggregate values of table "tournament_organizers" */
["tournament_organizers_aggregate_order_by"]: {
	avg?: ModelTypes["tournament_organizers_avg_order_by"] | undefined,
	count?: ModelTypes["order_by"] | undefined,
	max?: ModelTypes["tournament_organizers_max_order_by"] | undefined,
	min?: ModelTypes["tournament_organizers_min_order_by"] | undefined,
	stddev?: ModelTypes["tournament_organizers_stddev_order_by"] | undefined,
	stddev_pop?: ModelTypes["tournament_organizers_stddev_pop_order_by"] | undefined,
	stddev_samp?: ModelTypes["tournament_organizers_stddev_samp_order_by"] | undefined,
	sum?: ModelTypes["tournament_organizers_sum_order_by"] | undefined,
	var_pop?: ModelTypes["tournament_organizers_var_pop_order_by"] | undefined,
	var_samp?: ModelTypes["tournament_organizers_var_samp_order_by"] | undefined,
	variance?: ModelTypes["tournament_organizers_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "tournament_organizers" */
["tournament_organizers_arr_rel_insert_input"]: {
	data: Array<ModelTypes["tournament_organizers_insert_input"]>,
	/** upsert condition */
	on_conflict?: ModelTypes["tournament_organizers_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["tournament_organizers_avg_fields"]: {
		steam_id?: number | undefined
};
	/** order by avg() on columns of table "tournament_organizers" */
["tournament_organizers_avg_order_by"]: {
	steam_id?: ModelTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "tournament_organizers". All fields are combined with a logical 'AND'. */
["tournament_organizers_bool_exp"]: {
	_and?: Array<ModelTypes["tournament_organizers_bool_exp"]> | undefined,
	_not?: ModelTypes["tournament_organizers_bool_exp"] | undefined,
	_or?: Array<ModelTypes["tournament_organizers_bool_exp"]> | undefined,
	organizer?: ModelTypes["players_bool_exp"] | undefined,
	role?: ModelTypes["String_comparison_exp"] | undefined,
	steam_id?: ModelTypes["bigint_comparison_exp"] | undefined,
	tournament?: ModelTypes["tournaments_bool_exp"] | undefined,
	tournament_id?: ModelTypes["uuid_comparison_exp"] | undefined
};
	["tournament_organizers_constraint"]:tournament_organizers_constraint;
	/** input type for incrementing numeric columns in table "tournament_organizers" */
["tournament_organizers_inc_input"]: {
	steam_id?: ModelTypes["bigint"] | undefined
};
	/** input type for inserting data into table "tournament_organizers" */
["tournament_organizers_insert_input"]: {
	organizer?: ModelTypes["players_obj_rel_insert_input"] | undefined,
	role?: string | undefined,
	steam_id?: ModelTypes["bigint"] | undefined,
	tournament?: ModelTypes["tournaments_obj_rel_insert_input"] | undefined,
	tournament_id?: ModelTypes["uuid"] | undefined
};
	/** aggregate max on columns */
["tournament_organizers_max_fields"]: {
		role?: string | undefined,
	steam_id?: ModelTypes["bigint"] | undefined,
	tournament_id?: ModelTypes["uuid"] | undefined
};
	/** order by max() on columns of table "tournament_organizers" */
["tournament_organizers_max_order_by"]: {
	role?: ModelTypes["order_by"] | undefined,
	steam_id?: ModelTypes["order_by"] | undefined,
	tournament_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["tournament_organizers_min_fields"]: {
		role?: string | undefined,
	steam_id?: ModelTypes["bigint"] | undefined,
	tournament_id?: ModelTypes["uuid"] | undefined
};
	/** order by min() on columns of table "tournament_organizers" */
["tournament_organizers_min_order_by"]: {
	role?: ModelTypes["order_by"] | undefined,
	steam_id?: ModelTypes["order_by"] | undefined,
	tournament_id?: ModelTypes["order_by"] | undefined
};
	/** response of any mutation on the table "tournament_organizers" */
["tournament_organizers_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["tournament_organizers"]>
};
	/** on_conflict condition type for table "tournament_organizers" */
["tournament_organizers_on_conflict"]: {
	constraint: ModelTypes["tournament_organizers_constraint"],
	update_columns: Array<ModelTypes["tournament_organizers_update_column"]>,
	where?: ModelTypes["tournament_organizers_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "tournament_organizers". */
["tournament_organizers_order_by"]: {
	organizer?: ModelTypes["players_order_by"] | undefined,
	role?: ModelTypes["order_by"] | undefined,
	steam_id?: ModelTypes["order_by"] | undefined,
	tournament?: ModelTypes["tournaments_order_by"] | undefined,
	tournament_id?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: tournament_organizers */
["tournament_organizers_pk_columns_input"]: {
	steam_id: ModelTypes["bigint"],
	tournament_id: ModelTypes["uuid"]
};
	["tournament_organizers_select_column"]:tournament_organizers_select_column;
	/** input type for updating data in table "tournament_organizers" */
["tournament_organizers_set_input"]: {
	role?: string | undefined,
	steam_id?: ModelTypes["bigint"] | undefined,
	tournament_id?: ModelTypes["uuid"] | undefined
};
	/** aggregate stddev on columns */
["tournament_organizers_stddev_fields"]: {
		steam_id?: number | undefined
};
	/** order by stddev() on columns of table "tournament_organizers" */
["tournament_organizers_stddev_order_by"]: {
	steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["tournament_organizers_stddev_pop_fields"]: {
		steam_id?: number | undefined
};
	/** order by stddev_pop() on columns of table "tournament_organizers" */
["tournament_organizers_stddev_pop_order_by"]: {
	steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["tournament_organizers_stddev_samp_fields"]: {
		steam_id?: number | undefined
};
	/** order by stddev_samp() on columns of table "tournament_organizers" */
["tournament_organizers_stddev_samp_order_by"]: {
	steam_id?: ModelTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "tournament_organizers" */
["tournament_organizers_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["tournament_organizers_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["tournament_organizers_stream_cursor_value_input"]: {
	role?: string | undefined,
	steam_id?: ModelTypes["bigint"] | undefined,
	tournament_id?: ModelTypes["uuid"] | undefined
};
	/** aggregate sum on columns */
["tournament_organizers_sum_fields"]: {
		steam_id?: ModelTypes["bigint"] | undefined
};
	/** order by sum() on columns of table "tournament_organizers" */
["tournament_organizers_sum_order_by"]: {
	steam_id?: ModelTypes["order_by"] | undefined
};
	["tournament_organizers_update_column"]:tournament_organizers_update_column;
	["tournament_organizers_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["tournament_organizers_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["tournament_organizers_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["tournament_organizers_bool_exp"]
};
	/** aggregate var_pop on columns */
["tournament_organizers_var_pop_fields"]: {
		steam_id?: number | undefined
};
	/** order by var_pop() on columns of table "tournament_organizers" */
["tournament_organizers_var_pop_order_by"]: {
	steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["tournament_organizers_var_samp_fields"]: {
		steam_id?: number | undefined
};
	/** order by var_samp() on columns of table "tournament_organizers" */
["tournament_organizers_var_samp_order_by"]: {
	steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["tournament_organizers_variance_fields"]: {
		steam_id?: number | undefined
};
	/** order by variance() on columns of table "tournament_organizers" */
["tournament_organizers_variance_order_by"]: {
	steam_id?: ModelTypes["order_by"] | undefined
};
	/** columns and relationships of "tournament_roster" */
["tournament_roster"]: {
		id: ModelTypes["uuid"],
	/** An object relationship */
	player: ModelTypes["players"],
	player_steam_id: ModelTypes["bigint"],
	/** An object relationship */
	team: ModelTypes["teams"],
	team_id: ModelTypes["uuid"],
	/** An object relationship */
	tournament: ModelTypes["tournaments"],
	tournament_id: ModelTypes["uuid"],
	type: string
};
	/** aggregated selection of "tournament_roster" */
["tournament_roster_aggregate"]: {
		aggregate?: ModelTypes["tournament_roster_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["tournament_roster"]>
};
	["tournament_roster_aggregate_bool_exp"]: {
	count?: ModelTypes["tournament_roster_aggregate_bool_exp_count"] | undefined
};
	["tournament_roster_aggregate_bool_exp_count"]: {
	arguments?: Array<ModelTypes["tournament_roster_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: ModelTypes["tournament_roster_bool_exp"] | undefined,
	predicate: ModelTypes["Int_comparison_exp"]
};
	/** aggregate fields of "tournament_roster" */
["tournament_roster_aggregate_fields"]: {
		avg?: ModelTypes["tournament_roster_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["tournament_roster_max_fields"] | undefined,
	min?: ModelTypes["tournament_roster_min_fields"] | undefined,
	stddev?: ModelTypes["tournament_roster_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["tournament_roster_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["tournament_roster_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["tournament_roster_sum_fields"] | undefined,
	var_pop?: ModelTypes["tournament_roster_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["tournament_roster_var_samp_fields"] | undefined,
	variance?: ModelTypes["tournament_roster_variance_fields"] | undefined
};
	/** order by aggregate values of table "tournament_roster" */
["tournament_roster_aggregate_order_by"]: {
	avg?: ModelTypes["tournament_roster_avg_order_by"] | undefined,
	count?: ModelTypes["order_by"] | undefined,
	max?: ModelTypes["tournament_roster_max_order_by"] | undefined,
	min?: ModelTypes["tournament_roster_min_order_by"] | undefined,
	stddev?: ModelTypes["tournament_roster_stddev_order_by"] | undefined,
	stddev_pop?: ModelTypes["tournament_roster_stddev_pop_order_by"] | undefined,
	stddev_samp?: ModelTypes["tournament_roster_stddev_samp_order_by"] | undefined,
	sum?: ModelTypes["tournament_roster_sum_order_by"] | undefined,
	var_pop?: ModelTypes["tournament_roster_var_pop_order_by"] | undefined,
	var_samp?: ModelTypes["tournament_roster_var_samp_order_by"] | undefined,
	variance?: ModelTypes["tournament_roster_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "tournament_roster" */
["tournament_roster_arr_rel_insert_input"]: {
	data: Array<ModelTypes["tournament_roster_insert_input"]>,
	/** upsert condition */
	on_conflict?: ModelTypes["tournament_roster_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["tournament_roster_avg_fields"]: {
		player_steam_id?: number | undefined
};
	/** order by avg() on columns of table "tournament_roster" */
["tournament_roster_avg_order_by"]: {
	player_steam_id?: ModelTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "tournament_roster". All fields are combined with a logical 'AND'. */
["tournament_roster_bool_exp"]: {
	_and?: Array<ModelTypes["tournament_roster_bool_exp"]> | undefined,
	_not?: ModelTypes["tournament_roster_bool_exp"] | undefined,
	_or?: Array<ModelTypes["tournament_roster_bool_exp"]> | undefined,
	id?: ModelTypes["uuid_comparison_exp"] | undefined,
	player?: ModelTypes["players_bool_exp"] | undefined,
	player_steam_id?: ModelTypes["bigint_comparison_exp"] | undefined,
	team?: ModelTypes["teams_bool_exp"] | undefined,
	team_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	tournament?: ModelTypes["tournaments_bool_exp"] | undefined,
	tournament_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	type?: ModelTypes["String_comparison_exp"] | undefined
};
	["tournament_roster_constraint"]:tournament_roster_constraint;
	/** input type for incrementing numeric columns in table "tournament_roster" */
["tournament_roster_inc_input"]: {
	player_steam_id?: ModelTypes["bigint"] | undefined
};
	/** input type for inserting data into table "tournament_roster" */
["tournament_roster_insert_input"]: {
	id?: ModelTypes["uuid"] | undefined,
	player?: ModelTypes["players_obj_rel_insert_input"] | undefined,
	player_steam_id?: ModelTypes["bigint"] | undefined,
	team?: ModelTypes["teams_obj_rel_insert_input"] | undefined,
	team_id?: ModelTypes["uuid"] | undefined,
	tournament?: ModelTypes["tournaments_obj_rel_insert_input"] | undefined,
	tournament_id?: ModelTypes["uuid"] | undefined,
	type?: string | undefined
};
	/** aggregate max on columns */
["tournament_roster_max_fields"]: {
		id?: ModelTypes["uuid"] | undefined,
	player_steam_id?: ModelTypes["bigint"] | undefined,
	team_id?: ModelTypes["uuid"] | undefined,
	tournament_id?: ModelTypes["uuid"] | undefined,
	type?: string | undefined
};
	/** order by max() on columns of table "tournament_roster" */
["tournament_roster_max_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	player_steam_id?: ModelTypes["order_by"] | undefined,
	team_id?: ModelTypes["order_by"] | undefined,
	tournament_id?: ModelTypes["order_by"] | undefined,
	type?: ModelTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["tournament_roster_min_fields"]: {
		id?: ModelTypes["uuid"] | undefined,
	player_steam_id?: ModelTypes["bigint"] | undefined,
	team_id?: ModelTypes["uuid"] | undefined,
	tournament_id?: ModelTypes["uuid"] | undefined,
	type?: string | undefined
};
	/** order by min() on columns of table "tournament_roster" */
["tournament_roster_min_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	player_steam_id?: ModelTypes["order_by"] | undefined,
	team_id?: ModelTypes["order_by"] | undefined,
	tournament_id?: ModelTypes["order_by"] | undefined,
	type?: ModelTypes["order_by"] | undefined
};
	/** response of any mutation on the table "tournament_roster" */
["tournament_roster_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["tournament_roster"]>
};
	/** on_conflict condition type for table "tournament_roster" */
["tournament_roster_on_conflict"]: {
	constraint: ModelTypes["tournament_roster_constraint"],
	update_columns: Array<ModelTypes["tournament_roster_update_column"]>,
	where?: ModelTypes["tournament_roster_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "tournament_roster". */
["tournament_roster_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	player?: ModelTypes["players_order_by"] | undefined,
	player_steam_id?: ModelTypes["order_by"] | undefined,
	team?: ModelTypes["teams_order_by"] | undefined,
	team_id?: ModelTypes["order_by"] | undefined,
	tournament?: ModelTypes["tournaments_order_by"] | undefined,
	tournament_id?: ModelTypes["order_by"] | undefined,
	type?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: tournament_roster */
["tournament_roster_pk_columns_input"]: {
	id: ModelTypes["uuid"]
};
	["tournament_roster_select_column"]:tournament_roster_select_column;
	/** input type for updating data in table "tournament_roster" */
["tournament_roster_set_input"]: {
	id?: ModelTypes["uuid"] | undefined,
	player_steam_id?: ModelTypes["bigint"] | undefined,
	team_id?: ModelTypes["uuid"] | undefined,
	tournament_id?: ModelTypes["uuid"] | undefined,
	type?: string | undefined
};
	/** aggregate stddev on columns */
["tournament_roster_stddev_fields"]: {
		player_steam_id?: number | undefined
};
	/** order by stddev() on columns of table "tournament_roster" */
["tournament_roster_stddev_order_by"]: {
	player_steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["tournament_roster_stddev_pop_fields"]: {
		player_steam_id?: number | undefined
};
	/** order by stddev_pop() on columns of table "tournament_roster" */
["tournament_roster_stddev_pop_order_by"]: {
	player_steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["tournament_roster_stddev_samp_fields"]: {
		player_steam_id?: number | undefined
};
	/** order by stddev_samp() on columns of table "tournament_roster" */
["tournament_roster_stddev_samp_order_by"]: {
	player_steam_id?: ModelTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "tournament_roster" */
["tournament_roster_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["tournament_roster_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["tournament_roster_stream_cursor_value_input"]: {
	id?: ModelTypes["uuid"] | undefined,
	player_steam_id?: ModelTypes["bigint"] | undefined,
	team_id?: ModelTypes["uuid"] | undefined,
	tournament_id?: ModelTypes["uuid"] | undefined,
	type?: string | undefined
};
	/** aggregate sum on columns */
["tournament_roster_sum_fields"]: {
		player_steam_id?: ModelTypes["bigint"] | undefined
};
	/** order by sum() on columns of table "tournament_roster" */
["tournament_roster_sum_order_by"]: {
	player_steam_id?: ModelTypes["order_by"] | undefined
};
	["tournament_roster_update_column"]:tournament_roster_update_column;
	["tournament_roster_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["tournament_roster_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["tournament_roster_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["tournament_roster_bool_exp"]
};
	/** aggregate var_pop on columns */
["tournament_roster_var_pop_fields"]: {
		player_steam_id?: number | undefined
};
	/** order by var_pop() on columns of table "tournament_roster" */
["tournament_roster_var_pop_order_by"]: {
	player_steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["tournament_roster_var_samp_fields"]: {
		player_steam_id?: number | undefined
};
	/** order by var_samp() on columns of table "tournament_roster" */
["tournament_roster_var_samp_order_by"]: {
	player_steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["tournament_roster_variance_fields"]: {
		player_steam_id?: number | undefined
};
	/** order by variance() on columns of table "tournament_roster" */
["tournament_roster_variance_order_by"]: {
	player_steam_id?: ModelTypes["order_by"] | undefined
};
	/** columns and relationships of "tournament_servers" */
["tournament_servers"]: {
		id: ModelTypes["uuid"],
	/** An object relationship */
	server: ModelTypes["servers"],
	server_id: ModelTypes["uuid"],
	/** An object relationship */
	tournament: ModelTypes["tournaments"],
	tournament_id: ModelTypes["uuid"]
};
	/** aggregated selection of "tournament_servers" */
["tournament_servers_aggregate"]: {
		aggregate?: ModelTypes["tournament_servers_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["tournament_servers"]>
};
	["tournament_servers_aggregate_bool_exp"]: {
	count?: ModelTypes["tournament_servers_aggregate_bool_exp_count"] | undefined
};
	["tournament_servers_aggregate_bool_exp_count"]: {
	arguments?: Array<ModelTypes["tournament_servers_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: ModelTypes["tournament_servers_bool_exp"] | undefined,
	predicate: ModelTypes["Int_comparison_exp"]
};
	/** aggregate fields of "tournament_servers" */
["tournament_servers_aggregate_fields"]: {
		count: number,
	max?: ModelTypes["tournament_servers_max_fields"] | undefined,
	min?: ModelTypes["tournament_servers_min_fields"] | undefined
};
	/** order by aggregate values of table "tournament_servers" */
["tournament_servers_aggregate_order_by"]: {
	count?: ModelTypes["order_by"] | undefined,
	max?: ModelTypes["tournament_servers_max_order_by"] | undefined,
	min?: ModelTypes["tournament_servers_min_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "tournament_servers" */
["tournament_servers_arr_rel_insert_input"]: {
	data: Array<ModelTypes["tournament_servers_insert_input"]>,
	/** upsert condition */
	on_conflict?: ModelTypes["tournament_servers_on_conflict"] | undefined
};
	/** Boolean expression to filter rows from the table "tournament_servers". All fields are combined with a logical 'AND'. */
["tournament_servers_bool_exp"]: {
	_and?: Array<ModelTypes["tournament_servers_bool_exp"]> | undefined,
	_not?: ModelTypes["tournament_servers_bool_exp"] | undefined,
	_or?: Array<ModelTypes["tournament_servers_bool_exp"]> | undefined,
	id?: ModelTypes["uuid_comparison_exp"] | undefined,
	server?: ModelTypes["servers_bool_exp"] | undefined,
	server_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	tournament?: ModelTypes["tournaments_bool_exp"] | undefined,
	tournament_id?: ModelTypes["uuid_comparison_exp"] | undefined
};
	["tournament_servers_constraint"]:tournament_servers_constraint;
	/** input type for inserting data into table "tournament_servers" */
["tournament_servers_insert_input"]: {
	id?: ModelTypes["uuid"] | undefined,
	server?: ModelTypes["servers_obj_rel_insert_input"] | undefined,
	server_id?: ModelTypes["uuid"] | undefined,
	tournament?: ModelTypes["tournaments_obj_rel_insert_input"] | undefined,
	tournament_id?: ModelTypes["uuid"] | undefined
};
	/** aggregate max on columns */
["tournament_servers_max_fields"]: {
		id?: ModelTypes["uuid"] | undefined,
	server_id?: ModelTypes["uuid"] | undefined,
	tournament_id?: ModelTypes["uuid"] | undefined
};
	/** order by max() on columns of table "tournament_servers" */
["tournament_servers_max_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	server_id?: ModelTypes["order_by"] | undefined,
	tournament_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["tournament_servers_min_fields"]: {
		id?: ModelTypes["uuid"] | undefined,
	server_id?: ModelTypes["uuid"] | undefined,
	tournament_id?: ModelTypes["uuid"] | undefined
};
	/** order by min() on columns of table "tournament_servers" */
["tournament_servers_min_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	server_id?: ModelTypes["order_by"] | undefined,
	tournament_id?: ModelTypes["order_by"] | undefined
};
	/** response of any mutation on the table "tournament_servers" */
["tournament_servers_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["tournament_servers"]>
};
	/** on_conflict condition type for table "tournament_servers" */
["tournament_servers_on_conflict"]: {
	constraint: ModelTypes["tournament_servers_constraint"],
	update_columns: Array<ModelTypes["tournament_servers_update_column"]>,
	where?: ModelTypes["tournament_servers_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "tournament_servers". */
["tournament_servers_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	server?: ModelTypes["servers_order_by"] | undefined,
	server_id?: ModelTypes["order_by"] | undefined,
	tournament?: ModelTypes["tournaments_order_by"] | undefined,
	tournament_id?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: tournament_servers */
["tournament_servers_pk_columns_input"]: {
	id: ModelTypes["uuid"]
};
	["tournament_servers_select_column"]:tournament_servers_select_column;
	/** input type for updating data in table "tournament_servers" */
["tournament_servers_set_input"]: {
	id?: ModelTypes["uuid"] | undefined,
	server_id?: ModelTypes["uuid"] | undefined,
	tournament_id?: ModelTypes["uuid"] | undefined
};
	/** Streaming cursor of the table "tournament_servers" */
["tournament_servers_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["tournament_servers_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["tournament_servers_stream_cursor_value_input"]: {
	id?: ModelTypes["uuid"] | undefined,
	server_id?: ModelTypes["uuid"] | undefined,
	tournament_id?: ModelTypes["uuid"] | undefined
};
	["tournament_servers_update_column"]:tournament_servers_update_column;
	["tournament_servers_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["tournament_servers_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["tournament_servers_bool_exp"]
};
	/** columns and relationships of "tournament_stages" */
["tournament_stages"]: {
		id: ModelTypes["uuid"],
	order: number,
	settings: ModelTypes["jsonb"],
	/** An object relationship */
	tournament: ModelTypes["tournaments"],
	tournament_id: ModelTypes["uuid"],
	type: string
};
	/** aggregated selection of "tournament_stages" */
["tournament_stages_aggregate"]: {
		aggregate?: ModelTypes["tournament_stages_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["tournament_stages"]>
};
	["tournament_stages_aggregate_bool_exp"]: {
	count?: ModelTypes["tournament_stages_aggregate_bool_exp_count"] | undefined
};
	["tournament_stages_aggregate_bool_exp_count"]: {
	arguments?: Array<ModelTypes["tournament_stages_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: ModelTypes["tournament_stages_bool_exp"] | undefined,
	predicate: ModelTypes["Int_comparison_exp"]
};
	/** aggregate fields of "tournament_stages" */
["tournament_stages_aggregate_fields"]: {
		avg?: ModelTypes["tournament_stages_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["tournament_stages_max_fields"] | undefined,
	min?: ModelTypes["tournament_stages_min_fields"] | undefined,
	stddev?: ModelTypes["tournament_stages_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["tournament_stages_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["tournament_stages_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["tournament_stages_sum_fields"] | undefined,
	var_pop?: ModelTypes["tournament_stages_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["tournament_stages_var_samp_fields"] | undefined,
	variance?: ModelTypes["tournament_stages_variance_fields"] | undefined
};
	/** order by aggregate values of table "tournament_stages" */
["tournament_stages_aggregate_order_by"]: {
	avg?: ModelTypes["tournament_stages_avg_order_by"] | undefined,
	count?: ModelTypes["order_by"] | undefined,
	max?: ModelTypes["tournament_stages_max_order_by"] | undefined,
	min?: ModelTypes["tournament_stages_min_order_by"] | undefined,
	stddev?: ModelTypes["tournament_stages_stddev_order_by"] | undefined,
	stddev_pop?: ModelTypes["tournament_stages_stddev_pop_order_by"] | undefined,
	stddev_samp?: ModelTypes["tournament_stages_stddev_samp_order_by"] | undefined,
	sum?: ModelTypes["tournament_stages_sum_order_by"] | undefined,
	var_pop?: ModelTypes["tournament_stages_var_pop_order_by"] | undefined,
	var_samp?: ModelTypes["tournament_stages_var_samp_order_by"] | undefined,
	variance?: ModelTypes["tournament_stages_variance_order_by"] | undefined
};
	/** append existing jsonb value of filtered columns with new jsonb value */
["tournament_stages_append_input"]: {
	settings?: ModelTypes["jsonb"] | undefined
};
	/** input type for inserting array relation for remote table "tournament_stages" */
["tournament_stages_arr_rel_insert_input"]: {
	data: Array<ModelTypes["tournament_stages_insert_input"]>,
	/** upsert condition */
	on_conflict?: ModelTypes["tournament_stages_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["tournament_stages_avg_fields"]: {
		order?: number | undefined
};
	/** order by avg() on columns of table "tournament_stages" */
["tournament_stages_avg_order_by"]: {
	order?: ModelTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "tournament_stages". All fields are combined with a logical 'AND'. */
["tournament_stages_bool_exp"]: {
	_and?: Array<ModelTypes["tournament_stages_bool_exp"]> | undefined,
	_not?: ModelTypes["tournament_stages_bool_exp"] | undefined,
	_or?: Array<ModelTypes["tournament_stages_bool_exp"]> | undefined,
	id?: ModelTypes["uuid_comparison_exp"] | undefined,
	order?: ModelTypes["Int_comparison_exp"] | undefined,
	settings?: ModelTypes["jsonb_comparison_exp"] | undefined,
	tournament?: ModelTypes["tournaments_bool_exp"] | undefined,
	tournament_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	type?: ModelTypes["String_comparison_exp"] | undefined
};
	["tournament_stages_constraint"]:tournament_stages_constraint;
	/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
["tournament_stages_delete_at_path_input"]: {
	settings?: Array<string> | undefined
};
	/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
["tournament_stages_delete_elem_input"]: {
	settings?: number | undefined
};
	/** delete key/value pair or string element. key/value pairs are matched based on their key value */
["tournament_stages_delete_key_input"]: {
	settings?: string | undefined
};
	/** input type for incrementing numeric columns in table "tournament_stages" */
["tournament_stages_inc_input"]: {
	order?: number | undefined
};
	/** input type for inserting data into table "tournament_stages" */
["tournament_stages_insert_input"]: {
	id?: ModelTypes["uuid"] | undefined,
	order?: number | undefined,
	settings?: ModelTypes["jsonb"] | undefined,
	tournament?: ModelTypes["tournaments_obj_rel_insert_input"] | undefined,
	tournament_id?: ModelTypes["uuid"] | undefined,
	type?: string | undefined
};
	/** aggregate max on columns */
["tournament_stages_max_fields"]: {
		id?: ModelTypes["uuid"] | undefined,
	order?: number | undefined,
	tournament_id?: ModelTypes["uuid"] | undefined,
	type?: string | undefined
};
	/** order by max() on columns of table "tournament_stages" */
["tournament_stages_max_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	order?: ModelTypes["order_by"] | undefined,
	tournament_id?: ModelTypes["order_by"] | undefined,
	type?: ModelTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["tournament_stages_min_fields"]: {
		id?: ModelTypes["uuid"] | undefined,
	order?: number | undefined,
	tournament_id?: ModelTypes["uuid"] | undefined,
	type?: string | undefined
};
	/** order by min() on columns of table "tournament_stages" */
["tournament_stages_min_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	order?: ModelTypes["order_by"] | undefined,
	tournament_id?: ModelTypes["order_by"] | undefined,
	type?: ModelTypes["order_by"] | undefined
};
	/** response of any mutation on the table "tournament_stages" */
["tournament_stages_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["tournament_stages"]>
};
	/** on_conflict condition type for table "tournament_stages" */
["tournament_stages_on_conflict"]: {
	constraint: ModelTypes["tournament_stages_constraint"],
	update_columns: Array<ModelTypes["tournament_stages_update_column"]>,
	where?: ModelTypes["tournament_stages_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "tournament_stages". */
["tournament_stages_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	order?: ModelTypes["order_by"] | undefined,
	settings?: ModelTypes["order_by"] | undefined,
	tournament?: ModelTypes["tournaments_order_by"] | undefined,
	tournament_id?: ModelTypes["order_by"] | undefined,
	type?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: tournament_stages */
["tournament_stages_pk_columns_input"]: {
	id: ModelTypes["uuid"]
};
	/** prepend existing jsonb value of filtered columns with new jsonb value */
["tournament_stages_prepend_input"]: {
	settings?: ModelTypes["jsonb"] | undefined
};
	["tournament_stages_select_column"]:tournament_stages_select_column;
	/** input type for updating data in table "tournament_stages" */
["tournament_stages_set_input"]: {
	id?: ModelTypes["uuid"] | undefined,
	order?: number | undefined,
	settings?: ModelTypes["jsonb"] | undefined,
	tournament_id?: ModelTypes["uuid"] | undefined,
	type?: string | undefined
};
	/** aggregate stddev on columns */
["tournament_stages_stddev_fields"]: {
		order?: number | undefined
};
	/** order by stddev() on columns of table "tournament_stages" */
["tournament_stages_stddev_order_by"]: {
	order?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["tournament_stages_stddev_pop_fields"]: {
		order?: number | undefined
};
	/** order by stddev_pop() on columns of table "tournament_stages" */
["tournament_stages_stddev_pop_order_by"]: {
	order?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["tournament_stages_stddev_samp_fields"]: {
		order?: number | undefined
};
	/** order by stddev_samp() on columns of table "tournament_stages" */
["tournament_stages_stddev_samp_order_by"]: {
	order?: ModelTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "tournament_stages" */
["tournament_stages_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["tournament_stages_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["tournament_stages_stream_cursor_value_input"]: {
	id?: ModelTypes["uuid"] | undefined,
	order?: number | undefined,
	settings?: ModelTypes["jsonb"] | undefined,
	tournament_id?: ModelTypes["uuid"] | undefined,
	type?: string | undefined
};
	/** aggregate sum on columns */
["tournament_stages_sum_fields"]: {
		order?: number | undefined
};
	/** order by sum() on columns of table "tournament_stages" */
["tournament_stages_sum_order_by"]: {
	order?: ModelTypes["order_by"] | undefined
};
	["tournament_stages_update_column"]:tournament_stages_update_column;
	["tournament_stages_updates"]: {
	/** append existing jsonb value of filtered columns with new jsonb value */
	_append?: ModelTypes["tournament_stages_append_input"] | undefined,
	/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
	_delete_at_path?: ModelTypes["tournament_stages_delete_at_path_input"] | undefined,
	/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
	_delete_elem?: ModelTypes["tournament_stages_delete_elem_input"] | undefined,
	/** delete key/value pair or string element. key/value pairs are matched based on their key value */
	_delete_key?: ModelTypes["tournament_stages_delete_key_input"] | undefined,
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["tournament_stages_inc_input"] | undefined,
	/** prepend existing jsonb value of filtered columns with new jsonb value */
	_prepend?: ModelTypes["tournament_stages_prepend_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["tournament_stages_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["tournament_stages_bool_exp"]
};
	/** aggregate var_pop on columns */
["tournament_stages_var_pop_fields"]: {
		order?: number | undefined
};
	/** order by var_pop() on columns of table "tournament_stages" */
["tournament_stages_var_pop_order_by"]: {
	order?: ModelTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["tournament_stages_var_samp_fields"]: {
		order?: number | undefined
};
	/** order by var_samp() on columns of table "tournament_stages" */
["tournament_stages_var_samp_order_by"]: {
	order?: ModelTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["tournament_stages_variance_fields"]: {
		order?: number | undefined
};
	/** order by variance() on columns of table "tournament_stages" */
["tournament_stages_variance_order_by"]: {
	order?: ModelTypes["order_by"] | undefined
};
	/** columns and relationships of "tournament_teams" */
["tournament_teams"]: {
		id: ModelTypes["uuid"],
	/** An object relationship */
	team: ModelTypes["teams"],
	team_id: ModelTypes["uuid"],
	/** An object relationship */
	tournament: ModelTypes["tournaments"],
	tournament_id: ModelTypes["uuid"]
};
	/** aggregated selection of "tournament_teams" */
["tournament_teams_aggregate"]: {
		aggregate?: ModelTypes["tournament_teams_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["tournament_teams"]>
};
	["tournament_teams_aggregate_bool_exp"]: {
	count?: ModelTypes["tournament_teams_aggregate_bool_exp_count"] | undefined
};
	["tournament_teams_aggregate_bool_exp_count"]: {
	arguments?: Array<ModelTypes["tournament_teams_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: ModelTypes["tournament_teams_bool_exp"] | undefined,
	predicate: ModelTypes["Int_comparison_exp"]
};
	/** aggregate fields of "tournament_teams" */
["tournament_teams_aggregate_fields"]: {
		count: number,
	max?: ModelTypes["tournament_teams_max_fields"] | undefined,
	min?: ModelTypes["tournament_teams_min_fields"] | undefined
};
	/** order by aggregate values of table "tournament_teams" */
["tournament_teams_aggregate_order_by"]: {
	count?: ModelTypes["order_by"] | undefined,
	max?: ModelTypes["tournament_teams_max_order_by"] | undefined,
	min?: ModelTypes["tournament_teams_min_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "tournament_teams" */
["tournament_teams_arr_rel_insert_input"]: {
	data: Array<ModelTypes["tournament_teams_insert_input"]>,
	/** upsert condition */
	on_conflict?: ModelTypes["tournament_teams_on_conflict"] | undefined
};
	/** Boolean expression to filter rows from the table "tournament_teams". All fields are combined with a logical 'AND'. */
["tournament_teams_bool_exp"]: {
	_and?: Array<ModelTypes["tournament_teams_bool_exp"]> | undefined,
	_not?: ModelTypes["tournament_teams_bool_exp"] | undefined,
	_or?: Array<ModelTypes["tournament_teams_bool_exp"]> | undefined,
	id?: ModelTypes["uuid_comparison_exp"] | undefined,
	team?: ModelTypes["teams_bool_exp"] | undefined,
	team_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	tournament?: ModelTypes["tournaments_bool_exp"] | undefined,
	tournament_id?: ModelTypes["uuid_comparison_exp"] | undefined
};
	["tournament_teams_constraint"]:tournament_teams_constraint;
	/** input type for inserting data into table "tournament_teams" */
["tournament_teams_insert_input"]: {
	id?: ModelTypes["uuid"] | undefined,
	team?: ModelTypes["teams_obj_rel_insert_input"] | undefined,
	team_id?: ModelTypes["uuid"] | undefined,
	tournament?: ModelTypes["tournaments_obj_rel_insert_input"] | undefined,
	tournament_id?: ModelTypes["uuid"] | undefined
};
	/** aggregate max on columns */
["tournament_teams_max_fields"]: {
		id?: ModelTypes["uuid"] | undefined,
	team_id?: ModelTypes["uuid"] | undefined,
	tournament_id?: ModelTypes["uuid"] | undefined
};
	/** order by max() on columns of table "tournament_teams" */
["tournament_teams_max_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	team_id?: ModelTypes["order_by"] | undefined,
	tournament_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["tournament_teams_min_fields"]: {
		id?: ModelTypes["uuid"] | undefined,
	team_id?: ModelTypes["uuid"] | undefined,
	tournament_id?: ModelTypes["uuid"] | undefined
};
	/** order by min() on columns of table "tournament_teams" */
["tournament_teams_min_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	team_id?: ModelTypes["order_by"] | undefined,
	tournament_id?: ModelTypes["order_by"] | undefined
};
	/** response of any mutation on the table "tournament_teams" */
["tournament_teams_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["tournament_teams"]>
};
	/** on_conflict condition type for table "tournament_teams" */
["tournament_teams_on_conflict"]: {
	constraint: ModelTypes["tournament_teams_constraint"],
	update_columns: Array<ModelTypes["tournament_teams_update_column"]>,
	where?: ModelTypes["tournament_teams_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "tournament_teams". */
["tournament_teams_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	team?: ModelTypes["teams_order_by"] | undefined,
	team_id?: ModelTypes["order_by"] | undefined,
	tournament?: ModelTypes["tournaments_order_by"] | undefined,
	tournament_id?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: tournament_teams */
["tournament_teams_pk_columns_input"]: {
	id: ModelTypes["uuid"]
};
	["tournament_teams_select_column"]:tournament_teams_select_column;
	/** input type for updating data in table "tournament_teams" */
["tournament_teams_set_input"]: {
	id?: ModelTypes["uuid"] | undefined,
	team_id?: ModelTypes["uuid"] | undefined,
	tournament_id?: ModelTypes["uuid"] | undefined
};
	/** Streaming cursor of the table "tournament_teams" */
["tournament_teams_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["tournament_teams_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["tournament_teams_stream_cursor_value_input"]: {
	id?: ModelTypes["uuid"] | undefined,
	team_id?: ModelTypes["uuid"] | undefined,
	tournament_id?: ModelTypes["uuid"] | undefined
};
	["tournament_teams_update_column"]:tournament_teams_update_column;
	["tournament_teams_updates"]: {
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["tournament_teams_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["tournament_teams_bool_exp"]
};
	/** columns and relationships of "tournaments" */
["tournaments"]: {
		/** An object relationship */
	admin: ModelTypes["players"],
	description?: string | undefined,
	id: ModelTypes["uuid"],
	name: string,
	organizer_steam_id: ModelTypes["bigint"],
	/** An array relationship */
	organizers: Array<ModelTypes["tournament_organizers"]>,
	/** An aggregate relationship */
	organizers_aggregate: ModelTypes["tournament_organizers_aggregate"],
	/** An array relationship */
	rosters: Array<ModelTypes["tournament_roster"]>,
	/** An aggregate relationship */
	rosters_aggregate: ModelTypes["tournament_roster_aggregate"],
	/** An array relationship */
	servers: Array<ModelTypes["tournament_servers"]>,
	/** An aggregate relationship */
	servers_aggregate: ModelTypes["tournament_servers_aggregate"],
	/** An array relationship */
	stages: Array<ModelTypes["tournament_stages"]>,
	/** An aggregate relationship */
	stages_aggregate: ModelTypes["tournament_stages_aggregate"],
	start: ModelTypes["timestamptz"],
	status: string,
	/** An array relationship */
	teams: Array<ModelTypes["tournament_teams"]>,
	/** An aggregate relationship */
	teams_aggregate: ModelTypes["tournament_teams_aggregate"],
	type: string
};
	/** aggregated selection of "tournaments" */
["tournaments_aggregate"]: {
		aggregate?: ModelTypes["tournaments_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["tournaments"]>
};
	["tournaments_aggregate_bool_exp"]: {
	count?: ModelTypes["tournaments_aggregate_bool_exp_count"] | undefined
};
	["tournaments_aggregate_bool_exp_count"]: {
	arguments?: Array<ModelTypes["tournaments_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: ModelTypes["tournaments_bool_exp"] | undefined,
	predicate: ModelTypes["Int_comparison_exp"]
};
	/** aggregate fields of "tournaments" */
["tournaments_aggregate_fields"]: {
		avg?: ModelTypes["tournaments_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["tournaments_max_fields"] | undefined,
	min?: ModelTypes["tournaments_min_fields"] | undefined,
	stddev?: ModelTypes["tournaments_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["tournaments_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["tournaments_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["tournaments_sum_fields"] | undefined,
	var_pop?: ModelTypes["tournaments_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["tournaments_var_samp_fields"] | undefined,
	variance?: ModelTypes["tournaments_variance_fields"] | undefined
};
	/** order by aggregate values of table "tournaments" */
["tournaments_aggregate_order_by"]: {
	avg?: ModelTypes["tournaments_avg_order_by"] | undefined,
	count?: ModelTypes["order_by"] | undefined,
	max?: ModelTypes["tournaments_max_order_by"] | undefined,
	min?: ModelTypes["tournaments_min_order_by"] | undefined,
	stddev?: ModelTypes["tournaments_stddev_order_by"] | undefined,
	stddev_pop?: ModelTypes["tournaments_stddev_pop_order_by"] | undefined,
	stddev_samp?: ModelTypes["tournaments_stddev_samp_order_by"] | undefined,
	sum?: ModelTypes["tournaments_sum_order_by"] | undefined,
	var_pop?: ModelTypes["tournaments_var_pop_order_by"] | undefined,
	var_samp?: ModelTypes["tournaments_var_samp_order_by"] | undefined,
	variance?: ModelTypes["tournaments_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "tournaments" */
["tournaments_arr_rel_insert_input"]: {
	data: Array<ModelTypes["tournaments_insert_input"]>,
	/** upsert condition */
	on_conflict?: ModelTypes["tournaments_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["tournaments_avg_fields"]: {
		organizer_steam_id?: number | undefined
};
	/** order by avg() on columns of table "tournaments" */
["tournaments_avg_order_by"]: {
	organizer_steam_id?: ModelTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "tournaments". All fields are combined with a logical 'AND'. */
["tournaments_bool_exp"]: {
	_and?: Array<ModelTypes["tournaments_bool_exp"]> | undefined,
	_not?: ModelTypes["tournaments_bool_exp"] | undefined,
	_or?: Array<ModelTypes["tournaments_bool_exp"]> | undefined,
	admin?: ModelTypes["players_bool_exp"] | undefined,
	description?: ModelTypes["String_comparison_exp"] | undefined,
	id?: ModelTypes["uuid_comparison_exp"] | undefined,
	name?: ModelTypes["String_comparison_exp"] | undefined,
	organizer_steam_id?: ModelTypes["bigint_comparison_exp"] | undefined,
	organizers?: ModelTypes["tournament_organizers_bool_exp"] | undefined,
	organizers_aggregate?: ModelTypes["tournament_organizers_aggregate_bool_exp"] | undefined,
	rosters?: ModelTypes["tournament_roster_bool_exp"] | undefined,
	rosters_aggregate?: ModelTypes["tournament_roster_aggregate_bool_exp"] | undefined,
	servers?: ModelTypes["tournament_servers_bool_exp"] | undefined,
	servers_aggregate?: ModelTypes["tournament_servers_aggregate_bool_exp"] | undefined,
	stages?: ModelTypes["tournament_stages_bool_exp"] | undefined,
	stages_aggregate?: ModelTypes["tournament_stages_aggregate_bool_exp"] | undefined,
	start?: ModelTypes["timestamptz_comparison_exp"] | undefined,
	status?: ModelTypes["String_comparison_exp"] | undefined,
	teams?: ModelTypes["tournament_teams_bool_exp"] | undefined,
	teams_aggregate?: ModelTypes["tournament_teams_aggregate_bool_exp"] | undefined,
	type?: ModelTypes["String_comparison_exp"] | undefined
};
	["tournaments_constraint"]:tournaments_constraint;
	/** input type for incrementing numeric columns in table "tournaments" */
["tournaments_inc_input"]: {
	organizer_steam_id?: ModelTypes["bigint"] | undefined
};
	/** input type for inserting data into table "tournaments" */
["tournaments_insert_input"]: {
	admin?: ModelTypes["players_obj_rel_insert_input"] | undefined,
	description?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	name?: string | undefined,
	organizer_steam_id?: ModelTypes["bigint"] | undefined,
	organizers?: ModelTypes["tournament_organizers_arr_rel_insert_input"] | undefined,
	rosters?: ModelTypes["tournament_roster_arr_rel_insert_input"] | undefined,
	servers?: ModelTypes["tournament_servers_arr_rel_insert_input"] | undefined,
	stages?: ModelTypes["tournament_stages_arr_rel_insert_input"] | undefined,
	start?: ModelTypes["timestamptz"] | undefined,
	status?: string | undefined,
	teams?: ModelTypes["tournament_teams_arr_rel_insert_input"] | undefined,
	type?: string | undefined
};
	/** aggregate max on columns */
["tournaments_max_fields"]: {
		description?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	name?: string | undefined,
	organizer_steam_id?: ModelTypes["bigint"] | undefined,
	start?: ModelTypes["timestamptz"] | undefined,
	status?: string | undefined,
	type?: string | undefined
};
	/** order by max() on columns of table "tournaments" */
["tournaments_max_order_by"]: {
	description?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	name?: ModelTypes["order_by"] | undefined,
	organizer_steam_id?: ModelTypes["order_by"] | undefined,
	start?: ModelTypes["order_by"] | undefined,
	status?: ModelTypes["order_by"] | undefined,
	type?: ModelTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["tournaments_min_fields"]: {
		description?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	name?: string | undefined,
	organizer_steam_id?: ModelTypes["bigint"] | undefined,
	start?: ModelTypes["timestamptz"] | undefined,
	status?: string | undefined,
	type?: string | undefined
};
	/** order by min() on columns of table "tournaments" */
["tournaments_min_order_by"]: {
	description?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	name?: ModelTypes["order_by"] | undefined,
	organizer_steam_id?: ModelTypes["order_by"] | undefined,
	start?: ModelTypes["order_by"] | undefined,
	status?: ModelTypes["order_by"] | undefined,
	type?: ModelTypes["order_by"] | undefined
};
	/** response of any mutation on the table "tournaments" */
["tournaments_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["tournaments"]>
};
	/** input type for inserting object relation for remote table "tournaments" */
["tournaments_obj_rel_insert_input"]: {
	data: ModelTypes["tournaments_insert_input"],
	/** upsert condition */
	on_conflict?: ModelTypes["tournaments_on_conflict"] | undefined
};
	/** on_conflict condition type for table "tournaments" */
["tournaments_on_conflict"]: {
	constraint: ModelTypes["tournaments_constraint"],
	update_columns: Array<ModelTypes["tournaments_update_column"]>,
	where?: ModelTypes["tournaments_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "tournaments". */
["tournaments_order_by"]: {
	admin?: ModelTypes["players_order_by"] | undefined,
	description?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	name?: ModelTypes["order_by"] | undefined,
	organizer_steam_id?: ModelTypes["order_by"] | undefined,
	organizers_aggregate?: ModelTypes["tournament_organizers_aggregate_order_by"] | undefined,
	rosters_aggregate?: ModelTypes["tournament_roster_aggregate_order_by"] | undefined,
	servers_aggregate?: ModelTypes["tournament_servers_aggregate_order_by"] | undefined,
	stages_aggregate?: ModelTypes["tournament_stages_aggregate_order_by"] | undefined,
	start?: ModelTypes["order_by"] | undefined,
	status?: ModelTypes["order_by"] | undefined,
	teams_aggregate?: ModelTypes["tournament_teams_aggregate_order_by"] | undefined,
	type?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: tournaments */
["tournaments_pk_columns_input"]: {
	id: ModelTypes["uuid"]
};
	["tournaments_select_column"]:tournaments_select_column;
	/** input type for updating data in table "tournaments" */
["tournaments_set_input"]: {
	description?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	name?: string | undefined,
	organizer_steam_id?: ModelTypes["bigint"] | undefined,
	start?: ModelTypes["timestamptz"] | undefined,
	status?: string | undefined,
	type?: string | undefined
};
	/** aggregate stddev on columns */
["tournaments_stddev_fields"]: {
		organizer_steam_id?: number | undefined
};
	/** order by stddev() on columns of table "tournaments" */
["tournaments_stddev_order_by"]: {
	organizer_steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["tournaments_stddev_pop_fields"]: {
		organizer_steam_id?: number | undefined
};
	/** order by stddev_pop() on columns of table "tournaments" */
["tournaments_stddev_pop_order_by"]: {
	organizer_steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["tournaments_stddev_samp_fields"]: {
		organizer_steam_id?: number | undefined
};
	/** order by stddev_samp() on columns of table "tournaments" */
["tournaments_stddev_samp_order_by"]: {
	organizer_steam_id?: ModelTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "tournaments" */
["tournaments_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["tournaments_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["tournaments_stream_cursor_value_input"]: {
	description?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	name?: string | undefined,
	organizer_steam_id?: ModelTypes["bigint"] | undefined,
	start?: ModelTypes["timestamptz"] | undefined,
	status?: string | undefined,
	type?: string | undefined
};
	/** aggregate sum on columns */
["tournaments_sum_fields"]: {
		organizer_steam_id?: ModelTypes["bigint"] | undefined
};
	/** order by sum() on columns of table "tournaments" */
["tournaments_sum_order_by"]: {
	organizer_steam_id?: ModelTypes["order_by"] | undefined
};
	["tournaments_update_column"]:tournaments_update_column;
	["tournaments_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["tournaments_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["tournaments_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["tournaments_bool_exp"]
};
	/** aggregate var_pop on columns */
["tournaments_var_pop_fields"]: {
		organizer_steam_id?: number | undefined
};
	/** order by var_pop() on columns of table "tournaments" */
["tournaments_var_pop_order_by"]: {
	organizer_steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["tournaments_var_samp_fields"]: {
		organizer_steam_id?: number | undefined
};
	/** order by var_samp() on columns of table "tournaments" */
["tournaments_var_samp_order_by"]: {
	organizer_steam_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["tournaments_variance_fields"]: {
		organizer_steam_id?: number | undefined
};
	/** order by variance() on columns of table "tournaments" */
["tournaments_variance_order_by"]: {
	organizer_steam_id?: ModelTypes["order_by"] | undefined
};
	["uuid"]:any;
	/** Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'. */
["uuid_comparison_exp"]: {
	_eq?: ModelTypes["uuid"] | undefined,
	_gt?: ModelTypes["uuid"] | undefined,
	_gte?: ModelTypes["uuid"] | undefined,
	_in?: Array<ModelTypes["uuid"]> | undefined,
	_is_null?: boolean | undefined,
	_lt?: ModelTypes["uuid"] | undefined,
	_lte?: ModelTypes["uuid"] | undefined,
	_neq?: ModelTypes["uuid"] | undefined,
	_nin?: Array<ModelTypes["uuid"]> | undefined
};
	/** columns and relationships of "v_match_captains" */
["v_match_captains"]: {
		captain?: boolean | undefined,
	discord_id?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	/** An object relationship */
	lineup?: ModelTypes["match_lineups"] | undefined,
	match_lineup_id?: ModelTypes["uuid"] | undefined,
	placeholder_name?: string | undefined,
	/** An object relationship */
	player?: ModelTypes["players"] | undefined,
	steam_id?: ModelTypes["bigint"] | undefined
};
	/** aggregated selection of "v_match_captains" */
["v_match_captains_aggregate"]: {
		aggregate?: ModelTypes["v_match_captains_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["v_match_captains"]>
};
	/** aggregate fields of "v_match_captains" */
["v_match_captains_aggregate_fields"]: {
		avg?: ModelTypes["v_match_captains_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["v_match_captains_max_fields"] | undefined,
	min?: ModelTypes["v_match_captains_min_fields"] | undefined,
	stddev?: ModelTypes["v_match_captains_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["v_match_captains_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["v_match_captains_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["v_match_captains_sum_fields"] | undefined,
	var_pop?: ModelTypes["v_match_captains_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["v_match_captains_var_samp_fields"] | undefined,
	variance?: ModelTypes["v_match_captains_variance_fields"] | undefined
};
	/** aggregate avg on columns */
["v_match_captains_avg_fields"]: {
		steam_id?: number | undefined
};
	/** Boolean expression to filter rows from the table "v_match_captains". All fields are combined with a logical 'AND'. */
["v_match_captains_bool_exp"]: {
	_and?: Array<ModelTypes["v_match_captains_bool_exp"]> | undefined,
	_not?: ModelTypes["v_match_captains_bool_exp"] | undefined,
	_or?: Array<ModelTypes["v_match_captains_bool_exp"]> | undefined,
	captain?: ModelTypes["Boolean_comparison_exp"] | undefined,
	discord_id?: ModelTypes["String_comparison_exp"] | undefined,
	id?: ModelTypes["uuid_comparison_exp"] | undefined,
	lineup?: ModelTypes["match_lineups_bool_exp"] | undefined,
	match_lineup_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	placeholder_name?: ModelTypes["String_comparison_exp"] | undefined,
	player?: ModelTypes["players_bool_exp"] | undefined,
	steam_id?: ModelTypes["bigint_comparison_exp"] | undefined
};
	/** input type for incrementing numeric columns in table "v_match_captains" */
["v_match_captains_inc_input"]: {
	steam_id?: ModelTypes["bigint"] | undefined
};
	/** input type for inserting data into table "v_match_captains" */
["v_match_captains_insert_input"]: {
	captain?: boolean | undefined,
	discord_id?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	lineup?: ModelTypes["match_lineups_obj_rel_insert_input"] | undefined,
	match_lineup_id?: ModelTypes["uuid"] | undefined,
	placeholder_name?: string | undefined,
	player?: ModelTypes["players_obj_rel_insert_input"] | undefined,
	steam_id?: ModelTypes["bigint"] | undefined
};
	/** aggregate max on columns */
["v_match_captains_max_fields"]: {
		discord_id?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match_lineup_id?: ModelTypes["uuid"] | undefined,
	placeholder_name?: string | undefined,
	steam_id?: ModelTypes["bigint"] | undefined
};
	/** aggregate min on columns */
["v_match_captains_min_fields"]: {
		discord_id?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match_lineup_id?: ModelTypes["uuid"] | undefined,
	placeholder_name?: string | undefined,
	steam_id?: ModelTypes["bigint"] | undefined
};
	/** response of any mutation on the table "v_match_captains" */
["v_match_captains_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["v_match_captains"]>
};
	/** input type for inserting object relation for remote table "v_match_captains" */
["v_match_captains_obj_rel_insert_input"]: {
	data: ModelTypes["v_match_captains_insert_input"]
};
	/** Ordering options when selecting data from "v_match_captains". */
["v_match_captains_order_by"]: {
	captain?: ModelTypes["order_by"] | undefined,
	discord_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	lineup?: ModelTypes["match_lineups_order_by"] | undefined,
	match_lineup_id?: ModelTypes["order_by"] | undefined,
	placeholder_name?: ModelTypes["order_by"] | undefined,
	player?: ModelTypes["players_order_by"] | undefined,
	steam_id?: ModelTypes["order_by"] | undefined
};
	["v_match_captains_select_column"]:v_match_captains_select_column;
	/** input type for updating data in table "v_match_captains" */
["v_match_captains_set_input"]: {
	captain?: boolean | undefined,
	discord_id?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match_lineup_id?: ModelTypes["uuid"] | undefined,
	placeholder_name?: string | undefined,
	steam_id?: ModelTypes["bigint"] | undefined
};
	/** aggregate stddev on columns */
["v_match_captains_stddev_fields"]: {
		steam_id?: number | undefined
};
	/** aggregate stddev_pop on columns */
["v_match_captains_stddev_pop_fields"]: {
		steam_id?: number | undefined
};
	/** aggregate stddev_samp on columns */
["v_match_captains_stddev_samp_fields"]: {
		steam_id?: number | undefined
};
	/** Streaming cursor of the table "v_match_captains" */
["v_match_captains_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["v_match_captains_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["v_match_captains_stream_cursor_value_input"]: {
	captain?: boolean | undefined,
	discord_id?: string | undefined,
	id?: ModelTypes["uuid"] | undefined,
	match_lineup_id?: ModelTypes["uuid"] | undefined,
	placeholder_name?: string | undefined,
	steam_id?: ModelTypes["bigint"] | undefined
};
	/** aggregate sum on columns */
["v_match_captains_sum_fields"]: {
		steam_id?: ModelTypes["bigint"] | undefined
};
	["v_match_captains_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["v_match_captains_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["v_match_captains_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["v_match_captains_bool_exp"]
};
	/** aggregate var_pop on columns */
["v_match_captains_var_pop_fields"]: {
		steam_id?: number | undefined
};
	/** aggregate var_samp on columns */
["v_match_captains_var_samp_fields"]: {
		steam_id?: number | undefined
};
	/** aggregate variance on columns */
["v_match_captains_variance_fields"]: {
		steam_id?: number | undefined
};
	/** columns and relationships of "v_player_arch_nemesis" */
["v_player_arch_nemesis"]: {
		attacker_id?: ModelTypes["bigint"] | undefined,
	kill_count?: ModelTypes["bigint"] | undefined,
	/** An object relationship */
	nemsis?: ModelTypes["players"] | undefined,
	/** An object relationship */
	player?: ModelTypes["players"] | undefined,
	victim_id?: ModelTypes["bigint"] | undefined
};
	/** aggregated selection of "v_player_arch_nemesis" */
["v_player_arch_nemesis_aggregate"]: {
		aggregate?: ModelTypes["v_player_arch_nemesis_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["v_player_arch_nemesis"]>
};
	/** aggregate fields of "v_player_arch_nemesis" */
["v_player_arch_nemesis_aggregate_fields"]: {
		avg?: ModelTypes["v_player_arch_nemesis_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["v_player_arch_nemesis_max_fields"] | undefined,
	min?: ModelTypes["v_player_arch_nemesis_min_fields"] | undefined,
	stddev?: ModelTypes["v_player_arch_nemesis_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["v_player_arch_nemesis_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["v_player_arch_nemesis_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["v_player_arch_nemesis_sum_fields"] | undefined,
	var_pop?: ModelTypes["v_player_arch_nemesis_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["v_player_arch_nemesis_var_samp_fields"] | undefined,
	variance?: ModelTypes["v_player_arch_nemesis_variance_fields"] | undefined
};
	/** aggregate avg on columns */
["v_player_arch_nemesis_avg_fields"]: {
		attacker_id?: number | undefined,
	kill_count?: number | undefined,
	victim_id?: number | undefined
};
	/** Boolean expression to filter rows from the table "v_player_arch_nemesis". All fields are combined with a logical 'AND'. */
["v_player_arch_nemesis_bool_exp"]: {
	_and?: Array<ModelTypes["v_player_arch_nemesis_bool_exp"]> | undefined,
	_not?: ModelTypes["v_player_arch_nemesis_bool_exp"] | undefined,
	_or?: Array<ModelTypes["v_player_arch_nemesis_bool_exp"]> | undefined,
	attacker_id?: ModelTypes["bigint_comparison_exp"] | undefined,
	kill_count?: ModelTypes["bigint_comparison_exp"] | undefined,
	nemsis?: ModelTypes["players_bool_exp"] | undefined,
	player?: ModelTypes["players_bool_exp"] | undefined,
	victim_id?: ModelTypes["bigint_comparison_exp"] | undefined
};
	/** aggregate max on columns */
["v_player_arch_nemesis_max_fields"]: {
		attacker_id?: ModelTypes["bigint"] | undefined,
	kill_count?: ModelTypes["bigint"] | undefined,
	victim_id?: ModelTypes["bigint"] | undefined
};
	/** aggregate min on columns */
["v_player_arch_nemesis_min_fields"]: {
		attacker_id?: ModelTypes["bigint"] | undefined,
	kill_count?: ModelTypes["bigint"] | undefined,
	victim_id?: ModelTypes["bigint"] | undefined
};
	/** Ordering options when selecting data from "v_player_arch_nemesis". */
["v_player_arch_nemesis_order_by"]: {
	attacker_id?: ModelTypes["order_by"] | undefined,
	kill_count?: ModelTypes["order_by"] | undefined,
	nemsis?: ModelTypes["players_order_by"] | undefined,
	player?: ModelTypes["players_order_by"] | undefined,
	victim_id?: ModelTypes["order_by"] | undefined
};
	["v_player_arch_nemesis_select_column"]:v_player_arch_nemesis_select_column;
	/** aggregate stddev on columns */
["v_player_arch_nemesis_stddev_fields"]: {
		attacker_id?: number | undefined,
	kill_count?: number | undefined,
	victim_id?: number | undefined
};
	/** aggregate stddev_pop on columns */
["v_player_arch_nemesis_stddev_pop_fields"]: {
		attacker_id?: number | undefined,
	kill_count?: number | undefined,
	victim_id?: number | undefined
};
	/** aggregate stddev_samp on columns */
["v_player_arch_nemesis_stddev_samp_fields"]: {
		attacker_id?: number | undefined,
	kill_count?: number | undefined,
	victim_id?: number | undefined
};
	/** Streaming cursor of the table "v_player_arch_nemesis" */
["v_player_arch_nemesis_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["v_player_arch_nemesis_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["v_player_arch_nemesis_stream_cursor_value_input"]: {
	attacker_id?: ModelTypes["bigint"] | undefined,
	kill_count?: ModelTypes["bigint"] | undefined,
	victim_id?: ModelTypes["bigint"] | undefined
};
	/** aggregate sum on columns */
["v_player_arch_nemesis_sum_fields"]: {
		attacker_id?: ModelTypes["bigint"] | undefined,
	kill_count?: ModelTypes["bigint"] | undefined,
	victim_id?: ModelTypes["bigint"] | undefined
};
	/** aggregate var_pop on columns */
["v_player_arch_nemesis_var_pop_fields"]: {
		attacker_id?: number | undefined,
	kill_count?: number | undefined,
	victim_id?: number | undefined
};
	/** aggregate var_samp on columns */
["v_player_arch_nemesis_var_samp_fields"]: {
		attacker_id?: number | undefined,
	kill_count?: number | undefined,
	victim_id?: number | undefined
};
	/** aggregate variance on columns */
["v_player_arch_nemesis_variance_fields"]: {
		attacker_id?: number | undefined,
	kill_count?: number | undefined,
	victim_id?: number | undefined
};
	/** columns and relationships of "v_player_damage" */
["v_player_damage"]: {
		avg_damage_per_round?: ModelTypes["bigint"] | undefined,
	/** An object relationship */
	player?: ModelTypes["players"] | undefined,
	player_steam_id?: ModelTypes["bigint"] | undefined,
	total_damage?: ModelTypes["bigint"] | undefined,
	total_rounds?: ModelTypes["bigint"] | undefined
};
	/** aggregated selection of "v_player_damage" */
["v_player_damage_aggregate"]: {
		aggregate?: ModelTypes["v_player_damage_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["v_player_damage"]>
};
	/** aggregate fields of "v_player_damage" */
["v_player_damage_aggregate_fields"]: {
		avg?: ModelTypes["v_player_damage_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["v_player_damage_max_fields"] | undefined,
	min?: ModelTypes["v_player_damage_min_fields"] | undefined,
	stddev?: ModelTypes["v_player_damage_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["v_player_damage_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["v_player_damage_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["v_player_damage_sum_fields"] | undefined,
	var_pop?: ModelTypes["v_player_damage_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["v_player_damage_var_samp_fields"] | undefined,
	variance?: ModelTypes["v_player_damage_variance_fields"] | undefined
};
	/** aggregate avg on columns */
["v_player_damage_avg_fields"]: {
		avg_damage_per_round?: number | undefined,
	player_steam_id?: number | undefined,
	total_damage?: number | undefined,
	total_rounds?: number | undefined
};
	/** Boolean expression to filter rows from the table "v_player_damage". All fields are combined with a logical 'AND'. */
["v_player_damage_bool_exp"]: {
	_and?: Array<ModelTypes["v_player_damage_bool_exp"]> | undefined,
	_not?: ModelTypes["v_player_damage_bool_exp"] | undefined,
	_or?: Array<ModelTypes["v_player_damage_bool_exp"]> | undefined,
	avg_damage_per_round?: ModelTypes["bigint_comparison_exp"] | undefined,
	player?: ModelTypes["players_bool_exp"] | undefined,
	player_steam_id?: ModelTypes["bigint_comparison_exp"] | undefined,
	total_damage?: ModelTypes["bigint_comparison_exp"] | undefined,
	total_rounds?: ModelTypes["bigint_comparison_exp"] | undefined
};
	/** aggregate max on columns */
["v_player_damage_max_fields"]: {
		avg_damage_per_round?: ModelTypes["bigint"] | undefined,
	player_steam_id?: ModelTypes["bigint"] | undefined,
	total_damage?: ModelTypes["bigint"] | undefined,
	total_rounds?: ModelTypes["bigint"] | undefined
};
	/** aggregate min on columns */
["v_player_damage_min_fields"]: {
		avg_damage_per_round?: ModelTypes["bigint"] | undefined,
	player_steam_id?: ModelTypes["bigint"] | undefined,
	total_damage?: ModelTypes["bigint"] | undefined,
	total_rounds?: ModelTypes["bigint"] | undefined
};
	/** Ordering options when selecting data from "v_player_damage". */
["v_player_damage_order_by"]: {
	avg_damage_per_round?: ModelTypes["order_by"] | undefined,
	player?: ModelTypes["players_order_by"] | undefined,
	player_steam_id?: ModelTypes["order_by"] | undefined,
	total_damage?: ModelTypes["order_by"] | undefined,
	total_rounds?: ModelTypes["order_by"] | undefined
};
	["v_player_damage_select_column"]:v_player_damage_select_column;
	/** aggregate stddev on columns */
["v_player_damage_stddev_fields"]: {
		avg_damage_per_round?: number | undefined,
	player_steam_id?: number | undefined,
	total_damage?: number | undefined,
	total_rounds?: number | undefined
};
	/** aggregate stddev_pop on columns */
["v_player_damage_stddev_pop_fields"]: {
		avg_damage_per_round?: number | undefined,
	player_steam_id?: number | undefined,
	total_damage?: number | undefined,
	total_rounds?: number | undefined
};
	/** aggregate stddev_samp on columns */
["v_player_damage_stddev_samp_fields"]: {
		avg_damage_per_round?: number | undefined,
	player_steam_id?: number | undefined,
	total_damage?: number | undefined,
	total_rounds?: number | undefined
};
	/** Streaming cursor of the table "v_player_damage" */
["v_player_damage_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["v_player_damage_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["v_player_damage_stream_cursor_value_input"]: {
	avg_damage_per_round?: ModelTypes["bigint"] | undefined,
	player_steam_id?: ModelTypes["bigint"] | undefined,
	total_damage?: ModelTypes["bigint"] | undefined,
	total_rounds?: ModelTypes["bigint"] | undefined
};
	/** aggregate sum on columns */
["v_player_damage_sum_fields"]: {
		avg_damage_per_round?: ModelTypes["bigint"] | undefined,
	player_steam_id?: ModelTypes["bigint"] | undefined,
	total_damage?: ModelTypes["bigint"] | undefined,
	total_rounds?: ModelTypes["bigint"] | undefined
};
	/** aggregate var_pop on columns */
["v_player_damage_var_pop_fields"]: {
		avg_damage_per_round?: number | undefined,
	player_steam_id?: number | undefined,
	total_damage?: number | undefined,
	total_rounds?: number | undefined
};
	/** aggregate var_samp on columns */
["v_player_damage_var_samp_fields"]: {
		avg_damage_per_round?: number | undefined,
	player_steam_id?: number | undefined,
	total_damage?: number | undefined,
	total_rounds?: number | undefined
};
	/** aggregate variance on columns */
["v_player_damage_variance_fields"]: {
		avg_damage_per_round?: number | undefined,
	player_steam_id?: number | undefined,
	total_damage?: number | undefined,
	total_rounds?: number | undefined
};
	/** columns and relationships of "v_player_killed_player_counts" */
["v_player_killed_player_counts"]: {
		kill_count?: ModelTypes["bigint"] | undefined,
	player_id?: ModelTypes["bigint"] | undefined,
	victim_id?: ModelTypes["bigint"] | undefined
};
	/** aggregated selection of "v_player_killed_player_counts" */
["v_player_killed_player_counts_aggregate"]: {
		aggregate?: ModelTypes["v_player_killed_player_counts_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["v_player_killed_player_counts"]>
};
	/** aggregate fields of "v_player_killed_player_counts" */
["v_player_killed_player_counts_aggregate_fields"]: {
		avg?: ModelTypes["v_player_killed_player_counts_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["v_player_killed_player_counts_max_fields"] | undefined,
	min?: ModelTypes["v_player_killed_player_counts_min_fields"] | undefined,
	stddev?: ModelTypes["v_player_killed_player_counts_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["v_player_killed_player_counts_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["v_player_killed_player_counts_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["v_player_killed_player_counts_sum_fields"] | undefined,
	var_pop?: ModelTypes["v_player_killed_player_counts_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["v_player_killed_player_counts_var_samp_fields"] | undefined,
	variance?: ModelTypes["v_player_killed_player_counts_variance_fields"] | undefined
};
	/** aggregate avg on columns */
["v_player_killed_player_counts_avg_fields"]: {
		kill_count?: number | undefined,
	player_id?: number | undefined,
	victim_id?: number | undefined
};
	/** Boolean expression to filter rows from the table "v_player_killed_player_counts". All fields are combined with a logical 'AND'. */
["v_player_killed_player_counts_bool_exp"]: {
	_and?: Array<ModelTypes["v_player_killed_player_counts_bool_exp"]> | undefined,
	_not?: ModelTypes["v_player_killed_player_counts_bool_exp"] | undefined,
	_or?: Array<ModelTypes["v_player_killed_player_counts_bool_exp"]> | undefined,
	kill_count?: ModelTypes["bigint_comparison_exp"] | undefined,
	player_id?: ModelTypes["bigint_comparison_exp"] | undefined,
	victim_id?: ModelTypes["bigint_comparison_exp"] | undefined
};
	/** aggregate max on columns */
["v_player_killed_player_counts_max_fields"]: {
		kill_count?: ModelTypes["bigint"] | undefined,
	player_id?: ModelTypes["bigint"] | undefined,
	victim_id?: ModelTypes["bigint"] | undefined
};
	/** aggregate min on columns */
["v_player_killed_player_counts_min_fields"]: {
		kill_count?: ModelTypes["bigint"] | undefined,
	player_id?: ModelTypes["bigint"] | undefined,
	victim_id?: ModelTypes["bigint"] | undefined
};
	/** Ordering options when selecting data from "v_player_killed_player_counts". */
["v_player_killed_player_counts_order_by"]: {
	kill_count?: ModelTypes["order_by"] | undefined,
	player_id?: ModelTypes["order_by"] | undefined,
	victim_id?: ModelTypes["order_by"] | undefined
};
	["v_player_killed_player_counts_select_column"]:v_player_killed_player_counts_select_column;
	/** aggregate stddev on columns */
["v_player_killed_player_counts_stddev_fields"]: {
		kill_count?: number | undefined,
	player_id?: number | undefined,
	victim_id?: number | undefined
};
	/** aggregate stddev_pop on columns */
["v_player_killed_player_counts_stddev_pop_fields"]: {
		kill_count?: number | undefined,
	player_id?: number | undefined,
	victim_id?: number | undefined
};
	/** aggregate stddev_samp on columns */
["v_player_killed_player_counts_stddev_samp_fields"]: {
		kill_count?: number | undefined,
	player_id?: number | undefined,
	victim_id?: number | undefined
};
	/** Streaming cursor of the table "v_player_killed_player_counts" */
["v_player_killed_player_counts_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["v_player_killed_player_counts_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["v_player_killed_player_counts_stream_cursor_value_input"]: {
	kill_count?: ModelTypes["bigint"] | undefined,
	player_id?: ModelTypes["bigint"] | undefined,
	victim_id?: ModelTypes["bigint"] | undefined
};
	/** aggregate sum on columns */
["v_player_killed_player_counts_sum_fields"]: {
		kill_count?: ModelTypes["bigint"] | undefined,
	player_id?: ModelTypes["bigint"] | undefined,
	victim_id?: ModelTypes["bigint"] | undefined
};
	/** aggregate var_pop on columns */
["v_player_killed_player_counts_var_pop_fields"]: {
		kill_count?: number | undefined,
	player_id?: number | undefined,
	victim_id?: number | undefined
};
	/** aggregate var_samp on columns */
["v_player_killed_player_counts_var_samp_fields"]: {
		kill_count?: number | undefined,
	player_id?: number | undefined,
	victim_id?: number | undefined
};
	/** aggregate variance on columns */
["v_player_killed_player_counts_variance_fields"]: {
		kill_count?: number | undefined,
	player_id?: number | undefined,
	victim_id?: number | undefined
};
	/** columns and relationships of "v_player_match_kills" */
["v_player_match_kills"]: {
		avg_kills_per_game?: ModelTypes["bigint"] | undefined,
	kills?: ModelTypes["bigint"] | undefined,
	/** An object relationship */
	player?: ModelTypes["players"] | undefined,
	player_steam_id?: ModelTypes["bigint"] | undefined,
	total_matches?: ModelTypes["bigint"] | undefined
};
	/** aggregated selection of "v_player_match_kills" */
["v_player_match_kills_aggregate"]: {
		aggregate?: ModelTypes["v_player_match_kills_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["v_player_match_kills"]>
};
	/** aggregate fields of "v_player_match_kills" */
["v_player_match_kills_aggregate_fields"]: {
		avg?: ModelTypes["v_player_match_kills_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["v_player_match_kills_max_fields"] | undefined,
	min?: ModelTypes["v_player_match_kills_min_fields"] | undefined,
	stddev?: ModelTypes["v_player_match_kills_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["v_player_match_kills_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["v_player_match_kills_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["v_player_match_kills_sum_fields"] | undefined,
	var_pop?: ModelTypes["v_player_match_kills_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["v_player_match_kills_var_samp_fields"] | undefined,
	variance?: ModelTypes["v_player_match_kills_variance_fields"] | undefined
};
	/** aggregate avg on columns */
["v_player_match_kills_avg_fields"]: {
		avg_kills_per_game?: number | undefined,
	kills?: number | undefined,
	player_steam_id?: number | undefined,
	total_matches?: number | undefined
};
	/** Boolean expression to filter rows from the table "v_player_match_kills". All fields are combined with a logical 'AND'. */
["v_player_match_kills_bool_exp"]: {
	_and?: Array<ModelTypes["v_player_match_kills_bool_exp"]> | undefined,
	_not?: ModelTypes["v_player_match_kills_bool_exp"] | undefined,
	_or?: Array<ModelTypes["v_player_match_kills_bool_exp"]> | undefined,
	avg_kills_per_game?: ModelTypes["bigint_comparison_exp"] | undefined,
	kills?: ModelTypes["bigint_comparison_exp"] | undefined,
	player?: ModelTypes["players_bool_exp"] | undefined,
	player_steam_id?: ModelTypes["bigint_comparison_exp"] | undefined,
	total_matches?: ModelTypes["bigint_comparison_exp"] | undefined
};
	/** aggregate max on columns */
["v_player_match_kills_max_fields"]: {
		avg_kills_per_game?: ModelTypes["bigint"] | undefined,
	kills?: ModelTypes["bigint"] | undefined,
	player_steam_id?: ModelTypes["bigint"] | undefined,
	total_matches?: ModelTypes["bigint"] | undefined
};
	/** aggregate min on columns */
["v_player_match_kills_min_fields"]: {
		avg_kills_per_game?: ModelTypes["bigint"] | undefined,
	kills?: ModelTypes["bigint"] | undefined,
	player_steam_id?: ModelTypes["bigint"] | undefined,
	total_matches?: ModelTypes["bigint"] | undefined
};
	/** Ordering options when selecting data from "v_player_match_kills". */
["v_player_match_kills_order_by"]: {
	avg_kills_per_game?: ModelTypes["order_by"] | undefined,
	kills?: ModelTypes["order_by"] | undefined,
	player?: ModelTypes["players_order_by"] | undefined,
	player_steam_id?: ModelTypes["order_by"] | undefined,
	total_matches?: ModelTypes["order_by"] | undefined
};
	["v_player_match_kills_select_column"]:v_player_match_kills_select_column;
	/** aggregate stddev on columns */
["v_player_match_kills_stddev_fields"]: {
		avg_kills_per_game?: number | undefined,
	kills?: number | undefined,
	player_steam_id?: number | undefined,
	total_matches?: number | undefined
};
	/** aggregate stddev_pop on columns */
["v_player_match_kills_stddev_pop_fields"]: {
		avg_kills_per_game?: number | undefined,
	kills?: number | undefined,
	player_steam_id?: number | undefined,
	total_matches?: number | undefined
};
	/** aggregate stddev_samp on columns */
["v_player_match_kills_stddev_samp_fields"]: {
		avg_kills_per_game?: number | undefined,
	kills?: number | undefined,
	player_steam_id?: number | undefined,
	total_matches?: number | undefined
};
	/** Streaming cursor of the table "v_player_match_kills" */
["v_player_match_kills_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["v_player_match_kills_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["v_player_match_kills_stream_cursor_value_input"]: {
	avg_kills_per_game?: ModelTypes["bigint"] | undefined,
	kills?: ModelTypes["bigint"] | undefined,
	player_steam_id?: ModelTypes["bigint"] | undefined,
	total_matches?: ModelTypes["bigint"] | undefined
};
	/** aggregate sum on columns */
["v_player_match_kills_sum_fields"]: {
		avg_kills_per_game?: ModelTypes["bigint"] | undefined,
	kills?: ModelTypes["bigint"] | undefined,
	player_steam_id?: ModelTypes["bigint"] | undefined,
	total_matches?: ModelTypes["bigint"] | undefined
};
	/** aggregate var_pop on columns */
["v_player_match_kills_var_pop_fields"]: {
		avg_kills_per_game?: number | undefined,
	kills?: number | undefined,
	player_steam_id?: number | undefined,
	total_matches?: number | undefined
};
	/** aggregate var_samp on columns */
["v_player_match_kills_var_samp_fields"]: {
		avg_kills_per_game?: number | undefined,
	kills?: number | undefined,
	player_steam_id?: number | undefined,
	total_matches?: number | undefined
};
	/** aggregate variance on columns */
["v_player_match_kills_variance_fields"]: {
		avg_kills_per_game?: number | undefined,
	kills?: number | undefined,
	player_steam_id?: number | undefined,
	total_matches?: number | undefined
};
	/** columns and relationships of "v_player_multi_kills" */
["v_player_multi_kills"]: {
		attacker_steam_id?: ModelTypes["bigint"] | undefined,
	kills?: ModelTypes["bigint"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	round?: number | undefined
};
	/** aggregated selection of "v_player_multi_kills" */
["v_player_multi_kills_aggregate"]: {
		aggregate?: ModelTypes["v_player_multi_kills_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["v_player_multi_kills"]>
};
	["v_player_multi_kills_aggregate_bool_exp"]: {
	count?: ModelTypes["v_player_multi_kills_aggregate_bool_exp_count"] | undefined
};
	["v_player_multi_kills_aggregate_bool_exp_count"]: {
	arguments?: Array<ModelTypes["v_player_multi_kills_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: ModelTypes["v_player_multi_kills_bool_exp"] | undefined,
	predicate: ModelTypes["Int_comparison_exp"]
};
	/** aggregate fields of "v_player_multi_kills" */
["v_player_multi_kills_aggregate_fields"]: {
		avg?: ModelTypes["v_player_multi_kills_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["v_player_multi_kills_max_fields"] | undefined,
	min?: ModelTypes["v_player_multi_kills_min_fields"] | undefined,
	stddev?: ModelTypes["v_player_multi_kills_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["v_player_multi_kills_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["v_player_multi_kills_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["v_player_multi_kills_sum_fields"] | undefined,
	var_pop?: ModelTypes["v_player_multi_kills_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["v_player_multi_kills_var_samp_fields"] | undefined,
	variance?: ModelTypes["v_player_multi_kills_variance_fields"] | undefined
};
	/** order by aggregate values of table "v_player_multi_kills" */
["v_player_multi_kills_aggregate_order_by"]: {
	avg?: ModelTypes["v_player_multi_kills_avg_order_by"] | undefined,
	count?: ModelTypes["order_by"] | undefined,
	max?: ModelTypes["v_player_multi_kills_max_order_by"] | undefined,
	min?: ModelTypes["v_player_multi_kills_min_order_by"] | undefined,
	stddev?: ModelTypes["v_player_multi_kills_stddev_order_by"] | undefined,
	stddev_pop?: ModelTypes["v_player_multi_kills_stddev_pop_order_by"] | undefined,
	stddev_samp?: ModelTypes["v_player_multi_kills_stddev_samp_order_by"] | undefined,
	sum?: ModelTypes["v_player_multi_kills_sum_order_by"] | undefined,
	var_pop?: ModelTypes["v_player_multi_kills_var_pop_order_by"] | undefined,
	var_samp?: ModelTypes["v_player_multi_kills_var_samp_order_by"] | undefined,
	variance?: ModelTypes["v_player_multi_kills_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "v_player_multi_kills" */
["v_player_multi_kills_arr_rel_insert_input"]: {
	data: Array<ModelTypes["v_player_multi_kills_insert_input"]>
};
	/** aggregate avg on columns */
["v_player_multi_kills_avg_fields"]: {
		attacker_steam_id?: number | undefined,
	kills?: number | undefined,
	round?: number | undefined
};
	/** order by avg() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_avg_order_by"]: {
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	kills?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "v_player_multi_kills". All fields are combined with a logical 'AND'. */
["v_player_multi_kills_bool_exp"]: {
	_and?: Array<ModelTypes["v_player_multi_kills_bool_exp"]> | undefined,
	_not?: ModelTypes["v_player_multi_kills_bool_exp"] | undefined,
	_or?: Array<ModelTypes["v_player_multi_kills_bool_exp"]> | undefined,
	attacker_steam_id?: ModelTypes["bigint_comparison_exp"] | undefined,
	kills?: ModelTypes["bigint_comparison_exp"] | undefined,
	match_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	round?: ModelTypes["Int_comparison_exp"] | undefined
};
	/** input type for inserting data into table "v_player_multi_kills" */
["v_player_multi_kills_insert_input"]: {
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	kills?: ModelTypes["bigint"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	round?: number | undefined
};
	/** aggregate max on columns */
["v_player_multi_kills_max_fields"]: {
		attacker_steam_id?: ModelTypes["bigint"] | undefined,
	kills?: ModelTypes["bigint"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	round?: number | undefined
};
	/** order by max() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_max_order_by"]: {
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	kills?: ModelTypes["order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["v_player_multi_kills_min_fields"]: {
		attacker_steam_id?: ModelTypes["bigint"] | undefined,
	kills?: ModelTypes["bigint"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	round?: number | undefined
};
	/** order by min() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_min_order_by"]: {
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	kills?: ModelTypes["order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** Ordering options when selecting data from "v_player_multi_kills". */
["v_player_multi_kills_order_by"]: {
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	kills?: ModelTypes["order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	["v_player_multi_kills_select_column"]:v_player_multi_kills_select_column;
	/** aggregate stddev on columns */
["v_player_multi_kills_stddev_fields"]: {
		attacker_steam_id?: number | undefined,
	kills?: number | undefined,
	round?: number | undefined
};
	/** order by stddev() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_stddev_order_by"]: {
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	kills?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["v_player_multi_kills_stddev_pop_fields"]: {
		attacker_steam_id?: number | undefined,
	kills?: number | undefined,
	round?: number | undefined
};
	/** order by stddev_pop() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_stddev_pop_order_by"]: {
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	kills?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["v_player_multi_kills_stddev_samp_fields"]: {
		attacker_steam_id?: number | undefined,
	kills?: number | undefined,
	round?: number | undefined
};
	/** order by stddev_samp() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_stddev_samp_order_by"]: {
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	kills?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "v_player_multi_kills" */
["v_player_multi_kills_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["v_player_multi_kills_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["v_player_multi_kills_stream_cursor_value_input"]: {
	attacker_steam_id?: ModelTypes["bigint"] | undefined,
	kills?: ModelTypes["bigint"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	round?: number | undefined
};
	/** aggregate sum on columns */
["v_player_multi_kills_sum_fields"]: {
		attacker_steam_id?: ModelTypes["bigint"] | undefined,
	kills?: ModelTypes["bigint"] | undefined,
	round?: number | undefined
};
	/** order by sum() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_sum_order_by"]: {
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	kills?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** aggregate var_pop on columns */
["v_player_multi_kills_var_pop_fields"]: {
		attacker_steam_id?: number | undefined,
	kills?: number | undefined,
	round?: number | undefined
};
	/** order by var_pop() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_var_pop_order_by"]: {
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	kills?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["v_player_multi_kills_var_samp_fields"]: {
		attacker_steam_id?: number | undefined,
	kills?: number | undefined,
	round?: number | undefined
};
	/** order by var_samp() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_var_samp_order_by"]: {
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	kills?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["v_player_multi_kills_variance_fields"]: {
		attacker_steam_id?: number | undefined,
	kills?: number | undefined,
	round?: number | undefined
};
	/** order by variance() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_variance_order_by"]: {
	attacker_steam_id?: ModelTypes["order_by"] | undefined,
	kills?: ModelTypes["order_by"] | undefined,
	round?: ModelTypes["order_by"] | undefined
};
	/** columns and relationships of "v_player_opening_duels" */
["v_player_opening_duels"]: {
		attempts?: ModelTypes["bigint"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	steam_id?: ModelTypes["bigint"] | undefined,
	successes?: ModelTypes["bigint"] | undefined
};
	/** aggregated selection of "v_player_opening_duels" */
["v_player_opening_duels_aggregate"]: {
		aggregate?: ModelTypes["v_player_opening_duels_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["v_player_opening_duels"]>
};
	["v_player_opening_duels_aggregate_bool_exp"]: {
	count?: ModelTypes["v_player_opening_duels_aggregate_bool_exp_count"] | undefined
};
	["v_player_opening_duels_aggregate_bool_exp_count"]: {
	arguments?: Array<ModelTypes["v_player_opening_duels_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: ModelTypes["v_player_opening_duels_bool_exp"] | undefined,
	predicate: ModelTypes["Int_comparison_exp"]
};
	/** aggregate fields of "v_player_opening_duels" */
["v_player_opening_duels_aggregate_fields"]: {
		avg?: ModelTypes["v_player_opening_duels_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["v_player_opening_duels_max_fields"] | undefined,
	min?: ModelTypes["v_player_opening_duels_min_fields"] | undefined,
	stddev?: ModelTypes["v_player_opening_duels_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["v_player_opening_duels_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["v_player_opening_duels_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["v_player_opening_duels_sum_fields"] | undefined,
	var_pop?: ModelTypes["v_player_opening_duels_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["v_player_opening_duels_var_samp_fields"] | undefined,
	variance?: ModelTypes["v_player_opening_duels_variance_fields"] | undefined
};
	/** order by aggregate values of table "v_player_opening_duels" */
["v_player_opening_duels_aggregate_order_by"]: {
	avg?: ModelTypes["v_player_opening_duels_avg_order_by"] | undefined,
	count?: ModelTypes["order_by"] | undefined,
	max?: ModelTypes["v_player_opening_duels_max_order_by"] | undefined,
	min?: ModelTypes["v_player_opening_duels_min_order_by"] | undefined,
	stddev?: ModelTypes["v_player_opening_duels_stddev_order_by"] | undefined,
	stddev_pop?: ModelTypes["v_player_opening_duels_stddev_pop_order_by"] | undefined,
	stddev_samp?: ModelTypes["v_player_opening_duels_stddev_samp_order_by"] | undefined,
	sum?: ModelTypes["v_player_opening_duels_sum_order_by"] | undefined,
	var_pop?: ModelTypes["v_player_opening_duels_var_pop_order_by"] | undefined,
	var_samp?: ModelTypes["v_player_opening_duels_var_samp_order_by"] | undefined,
	variance?: ModelTypes["v_player_opening_duels_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "v_player_opening_duels" */
["v_player_opening_duels_arr_rel_insert_input"]: {
	data: Array<ModelTypes["v_player_opening_duels_insert_input"]>
};
	/** aggregate avg on columns */
["v_player_opening_duels_avg_fields"]: {
		attempts?: number | undefined,
	steam_id?: number | undefined,
	successes?: number | undefined
};
	/** order by avg() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_avg_order_by"]: {
	attempts?: ModelTypes["order_by"] | undefined,
	steam_id?: ModelTypes["order_by"] | undefined,
	successes?: ModelTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "v_player_opening_duels". All fields are combined with a logical 'AND'. */
["v_player_opening_duels_bool_exp"]: {
	_and?: Array<ModelTypes["v_player_opening_duels_bool_exp"]> | undefined,
	_not?: ModelTypes["v_player_opening_duels_bool_exp"] | undefined,
	_or?: Array<ModelTypes["v_player_opening_duels_bool_exp"]> | undefined,
	attempts?: ModelTypes["bigint_comparison_exp"] | undefined,
	match_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	match_map_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	steam_id?: ModelTypes["bigint_comparison_exp"] | undefined,
	successes?: ModelTypes["bigint_comparison_exp"] | undefined
};
	/** input type for inserting data into table "v_player_opening_duels" */
["v_player_opening_duels_insert_input"]: {
	attempts?: ModelTypes["bigint"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	steam_id?: ModelTypes["bigint"] | undefined,
	successes?: ModelTypes["bigint"] | undefined
};
	/** aggregate max on columns */
["v_player_opening_duels_max_fields"]: {
		attempts?: ModelTypes["bigint"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	steam_id?: ModelTypes["bigint"] | undefined,
	successes?: ModelTypes["bigint"] | undefined
};
	/** order by max() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_max_order_by"]: {
	attempts?: ModelTypes["order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	match_map_id?: ModelTypes["order_by"] | undefined,
	steam_id?: ModelTypes["order_by"] | undefined,
	successes?: ModelTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["v_player_opening_duels_min_fields"]: {
		attempts?: ModelTypes["bigint"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	steam_id?: ModelTypes["bigint"] | undefined,
	successes?: ModelTypes["bigint"] | undefined
};
	/** order by min() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_min_order_by"]: {
	attempts?: ModelTypes["order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	match_map_id?: ModelTypes["order_by"] | undefined,
	steam_id?: ModelTypes["order_by"] | undefined,
	successes?: ModelTypes["order_by"] | undefined
};
	/** Ordering options when selecting data from "v_player_opening_duels". */
["v_player_opening_duels_order_by"]: {
	attempts?: ModelTypes["order_by"] | undefined,
	match_id?: ModelTypes["order_by"] | undefined,
	match_map_id?: ModelTypes["order_by"] | undefined,
	steam_id?: ModelTypes["order_by"] | undefined,
	successes?: ModelTypes["order_by"] | undefined
};
	["v_player_opening_duels_select_column"]:v_player_opening_duels_select_column;
	/** aggregate stddev on columns */
["v_player_opening_duels_stddev_fields"]: {
		attempts?: number | undefined,
	steam_id?: number | undefined,
	successes?: number | undefined
};
	/** order by stddev() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_stddev_order_by"]: {
	attempts?: ModelTypes["order_by"] | undefined,
	steam_id?: ModelTypes["order_by"] | undefined,
	successes?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["v_player_opening_duels_stddev_pop_fields"]: {
		attempts?: number | undefined,
	steam_id?: number | undefined,
	successes?: number | undefined
};
	/** order by stddev_pop() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_stddev_pop_order_by"]: {
	attempts?: ModelTypes["order_by"] | undefined,
	steam_id?: ModelTypes["order_by"] | undefined,
	successes?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["v_player_opening_duels_stddev_samp_fields"]: {
		attempts?: number | undefined,
	steam_id?: number | undefined,
	successes?: number | undefined
};
	/** order by stddev_samp() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_stddev_samp_order_by"]: {
	attempts?: ModelTypes["order_by"] | undefined,
	steam_id?: ModelTypes["order_by"] | undefined,
	successes?: ModelTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "v_player_opening_duels" */
["v_player_opening_duels_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["v_player_opening_duels_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["v_player_opening_duels_stream_cursor_value_input"]: {
	attempts?: ModelTypes["bigint"] | undefined,
	match_id?: ModelTypes["uuid"] | undefined,
	match_map_id?: ModelTypes["uuid"] | undefined,
	steam_id?: ModelTypes["bigint"] | undefined,
	successes?: ModelTypes["bigint"] | undefined
};
	/** aggregate sum on columns */
["v_player_opening_duels_sum_fields"]: {
		attempts?: ModelTypes["bigint"] | undefined,
	steam_id?: ModelTypes["bigint"] | undefined,
	successes?: ModelTypes["bigint"] | undefined
};
	/** order by sum() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_sum_order_by"]: {
	attempts?: ModelTypes["order_by"] | undefined,
	steam_id?: ModelTypes["order_by"] | undefined,
	successes?: ModelTypes["order_by"] | undefined
};
	/** aggregate var_pop on columns */
["v_player_opening_duels_var_pop_fields"]: {
		attempts?: number | undefined,
	steam_id?: number | undefined,
	successes?: number | undefined
};
	/** order by var_pop() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_var_pop_order_by"]: {
	attempts?: ModelTypes["order_by"] | undefined,
	steam_id?: ModelTypes["order_by"] | undefined,
	successes?: ModelTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["v_player_opening_duels_var_samp_fields"]: {
		attempts?: number | undefined,
	steam_id?: number | undefined,
	successes?: number | undefined
};
	/** order by var_samp() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_var_samp_order_by"]: {
	attempts?: ModelTypes["order_by"] | undefined,
	steam_id?: ModelTypes["order_by"] | undefined,
	successes?: ModelTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["v_player_opening_duels_variance_fields"]: {
		attempts?: number | undefined,
	steam_id?: number | undefined,
	successes?: number | undefined
};
	/** order by variance() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_variance_order_by"]: {
	attempts?: ModelTypes["order_by"] | undefined,
	steam_id?: ModelTypes["order_by"] | undefined,
	successes?: ModelTypes["order_by"] | undefined
};
	/** columns and relationships of "v_pool_maps" */
["v_pool_maps"]: {
		active_pool?: boolean | undefined,
	id?: ModelTypes["uuid"] | undefined,
	/** An object relationship */
	map_pool?: ModelTypes["map_pools"] | undefined,
	map_pool_id?: ModelTypes["uuid"] | undefined,
	name?: string | undefined,
	type?: string | undefined,
	workshop_map_id?: string | undefined
};
	/** aggregated selection of "v_pool_maps" */
["v_pool_maps_aggregate"]: {
		aggregate?: ModelTypes["v_pool_maps_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["v_pool_maps"]>
};
	["v_pool_maps_aggregate_bool_exp"]: {
	bool_and?: ModelTypes["v_pool_maps_aggregate_bool_exp_bool_and"] | undefined,
	bool_or?: ModelTypes["v_pool_maps_aggregate_bool_exp_bool_or"] | undefined,
	count?: ModelTypes["v_pool_maps_aggregate_bool_exp_count"] | undefined
};
	["v_pool_maps_aggregate_bool_exp_bool_and"]: {
	arguments: ModelTypes["v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_and_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: ModelTypes["v_pool_maps_bool_exp"] | undefined,
	predicate: ModelTypes["Boolean_comparison_exp"]
};
	["v_pool_maps_aggregate_bool_exp_bool_or"]: {
	arguments: ModelTypes["v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_or_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: ModelTypes["v_pool_maps_bool_exp"] | undefined,
	predicate: ModelTypes["Boolean_comparison_exp"]
};
	["v_pool_maps_aggregate_bool_exp_count"]: {
	arguments?: Array<ModelTypes["v_pool_maps_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: ModelTypes["v_pool_maps_bool_exp"] | undefined,
	predicate: ModelTypes["Int_comparison_exp"]
};
	/** aggregate fields of "v_pool_maps" */
["v_pool_maps_aggregate_fields"]: {
		count: number,
	max?: ModelTypes["v_pool_maps_max_fields"] | undefined,
	min?: ModelTypes["v_pool_maps_min_fields"] | undefined
};
	/** order by aggregate values of table "v_pool_maps" */
["v_pool_maps_aggregate_order_by"]: {
	count?: ModelTypes["order_by"] | undefined,
	max?: ModelTypes["v_pool_maps_max_order_by"] | undefined,
	min?: ModelTypes["v_pool_maps_min_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "v_pool_maps" */
["v_pool_maps_arr_rel_insert_input"]: {
	data: Array<ModelTypes["v_pool_maps_insert_input"]>
};
	/** Boolean expression to filter rows from the table "v_pool_maps". All fields are combined with a logical 'AND'. */
["v_pool_maps_bool_exp"]: {
	_and?: Array<ModelTypes["v_pool_maps_bool_exp"]> | undefined,
	_not?: ModelTypes["v_pool_maps_bool_exp"] | undefined,
	_or?: Array<ModelTypes["v_pool_maps_bool_exp"]> | undefined,
	active_pool?: ModelTypes["Boolean_comparison_exp"] | undefined,
	id?: ModelTypes["uuid_comparison_exp"] | undefined,
	map_pool?: ModelTypes["map_pools_bool_exp"] | undefined,
	map_pool_id?: ModelTypes["uuid_comparison_exp"] | undefined,
	name?: ModelTypes["String_comparison_exp"] | undefined,
	type?: ModelTypes["String_comparison_exp"] | undefined,
	workshop_map_id?: ModelTypes["String_comparison_exp"] | undefined
};
	/** input type for inserting data into table "v_pool_maps" */
["v_pool_maps_insert_input"]: {
	active_pool?: boolean | undefined,
	id?: ModelTypes["uuid"] | undefined,
	map_pool?: ModelTypes["map_pools_obj_rel_insert_input"] | undefined,
	map_pool_id?: ModelTypes["uuid"] | undefined,
	name?: string | undefined,
	type?: string | undefined,
	workshop_map_id?: string | undefined
};
	/** aggregate max on columns */
["v_pool_maps_max_fields"]: {
		id?: ModelTypes["uuid"] | undefined,
	map_pool_id?: ModelTypes["uuid"] | undefined,
	name?: string | undefined,
	type?: string | undefined,
	workshop_map_id?: string | undefined
};
	/** order by max() on columns of table "v_pool_maps" */
["v_pool_maps_max_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	map_pool_id?: ModelTypes["order_by"] | undefined,
	name?: ModelTypes["order_by"] | undefined,
	type?: ModelTypes["order_by"] | undefined,
	workshop_map_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["v_pool_maps_min_fields"]: {
		id?: ModelTypes["uuid"] | undefined,
	map_pool_id?: ModelTypes["uuid"] | undefined,
	name?: string | undefined,
	type?: string | undefined,
	workshop_map_id?: string | undefined
};
	/** order by min() on columns of table "v_pool_maps" */
["v_pool_maps_min_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	map_pool_id?: ModelTypes["order_by"] | undefined,
	name?: ModelTypes["order_by"] | undefined,
	type?: ModelTypes["order_by"] | undefined,
	workshop_map_id?: ModelTypes["order_by"] | undefined
};
	/** response of any mutation on the table "v_pool_maps" */
["v_pool_maps_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["v_pool_maps"]>
};
	/** Ordering options when selecting data from "v_pool_maps". */
["v_pool_maps_order_by"]: {
	active_pool?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	map_pool?: ModelTypes["map_pools_order_by"] | undefined,
	map_pool_id?: ModelTypes["order_by"] | undefined,
	name?: ModelTypes["order_by"] | undefined,
	type?: ModelTypes["order_by"] | undefined,
	workshop_map_id?: ModelTypes["order_by"] | undefined
};
	["v_pool_maps_select_column"]:v_pool_maps_select_column;
	["v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_and_arguments_columns"]:v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_and_arguments_columns;
	["v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_or_arguments_columns"]:v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_or_arguments_columns;
	/** Streaming cursor of the table "v_pool_maps" */
["v_pool_maps_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["v_pool_maps_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["v_pool_maps_stream_cursor_value_input"]: {
	active_pool?: boolean | undefined,
	id?: ModelTypes["uuid"] | undefined,
	map_pool_id?: ModelTypes["uuid"] | undefined,
	name?: string | undefined,
	type?: string | undefined,
	workshop_map_id?: string | undefined
}
    }

export type GraphQLTypes = {
    /** Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'. */
["Boolean_comparison_exp"]: {
		_eq?: boolean | undefined,
	_gt?: boolean | undefined,
	_gte?: boolean | undefined,
	_in?: Array<boolean> | undefined,
	_is_null?: boolean | undefined,
	_lt?: boolean | undefined,
	_lte?: boolean | undefined,
	_neq?: boolean | undefined,
	_nin?: Array<boolean> | undefined
};
	/** Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'. */
["Int_comparison_exp"]: {
		_eq?: number | undefined,
	_gt?: number | undefined,
	_gte?: number | undefined,
	_in?: Array<number> | undefined,
	_is_null?: boolean | undefined,
	_lt?: number | undefined,
	_lte?: number | undefined,
	_neq?: number | undefined,
	_nin?: Array<number> | undefined
};
	["MeResponse"]: {
	__typename: "MeResponse",
	avatar_url: string,
	discord_id?: string | undefined,
	name: string,
	player?: GraphQLTypes["players"] | undefined,
	profile_url?: string | undefined,
	steam_id: string
};
	/** Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'. */
["String_comparison_exp"]: {
		_eq?: string | undefined,
	_gt?: string | undefined,
	_gte?: string | undefined,
	/** does the column match the given case-insensitive pattern */
	_ilike?: string | undefined,
	_in?: Array<string> | undefined,
	/** does the column match the given POSIX regular expression, case insensitive */
	_iregex?: string | undefined,
	_is_null?: boolean | undefined,
	/** does the column match the given pattern */
	_like?: string | undefined,
	_lt?: string | undefined,
	_lte?: string | undefined,
	_neq?: string | undefined,
	/** does the column NOT match the given case-insensitive pattern */
	_nilike?: string | undefined,
	_nin?: Array<string> | undefined,
	/** does the column NOT match the given POSIX regular expression, case insensitive */
	_niregex?: string | undefined,
	/** does the column NOT match the given pattern */
	_nlike?: string | undefined,
	/** does the column NOT match the given POSIX regular expression, case sensitive */
	_nregex?: string | undefined,
	/** does the column NOT match the given SQL regular expression */
	_nsimilar?: string | undefined,
	/** does the column match the given POSIX regular expression, case sensitive */
	_regex?: string | undefined,
	/** does the column match the given SQL regular expression */
	_similar?: string | undefined
};
	["SuccessOutput"]: {
	__typename: "SuccessOutput",
	success: boolean
};
	/** columns and relationships of "_map_pool" */
["_map_pool"]: {
	__typename: "_map_pool",
	map_id: GraphQLTypes["uuid"],
	map_pool_id: GraphQLTypes["uuid"]
};
	/** aggregated selection of "_map_pool" */
["_map_pool_aggregate"]: {
	__typename: "_map_pool_aggregate",
	aggregate?: GraphQLTypes["_map_pool_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["_map_pool"]>
};
	/** aggregate fields of "_map_pool" */
["_map_pool_aggregate_fields"]: {
	__typename: "_map_pool_aggregate_fields",
	count: number,
	max?: GraphQLTypes["_map_pool_max_fields"] | undefined,
	min?: GraphQLTypes["_map_pool_min_fields"] | undefined
};
	/** Boolean expression to filter rows from the table "_map_pool". All fields are combined with a logical 'AND'. */
["_map_pool_bool_exp"]: {
		_and?: Array<GraphQLTypes["_map_pool_bool_exp"]> | undefined,
	_not?: GraphQLTypes["_map_pool_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["_map_pool_bool_exp"]> | undefined,
	map_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	map_pool_id?: GraphQLTypes["uuid_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "_map_pool" */
["_map_pool_constraint"]: _map_pool_constraint;
	/** input type for inserting data into table "_map_pool" */
["_map_pool_insert_input"]: {
		map_id?: GraphQLTypes["uuid"] | undefined,
	map_pool_id?: GraphQLTypes["uuid"] | undefined
};
	/** aggregate max on columns */
["_map_pool_max_fields"]: {
	__typename: "_map_pool_max_fields",
	map_id?: GraphQLTypes["uuid"] | undefined,
	map_pool_id?: GraphQLTypes["uuid"] | undefined
};
	/** aggregate min on columns */
["_map_pool_min_fields"]: {
	__typename: "_map_pool_min_fields",
	map_id?: GraphQLTypes["uuid"] | undefined,
	map_pool_id?: GraphQLTypes["uuid"] | undefined
};
	/** response of any mutation on the table "_map_pool" */
["_map_pool_mutation_response"]: {
	__typename: "_map_pool_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["_map_pool"]>
};
	/** on_conflict condition type for table "_map_pool" */
["_map_pool_on_conflict"]: {
		constraint: GraphQLTypes["_map_pool_constraint"],
	update_columns: Array<GraphQLTypes["_map_pool_update_column"]>,
	where?: GraphQLTypes["_map_pool_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "_map_pool". */
["_map_pool_order_by"]: {
		map_id?: GraphQLTypes["order_by"] | undefined,
	map_pool_id?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: _map_pool */
["_map_pool_pk_columns_input"]: {
		map_id: GraphQLTypes["uuid"],
	map_pool_id: GraphQLTypes["uuid"]
};
	/** select columns of table "_map_pool" */
["_map_pool_select_column"]: _map_pool_select_column;
	/** input type for updating data in table "_map_pool" */
["_map_pool_set_input"]: {
		map_id?: GraphQLTypes["uuid"] | undefined,
	map_pool_id?: GraphQLTypes["uuid"] | undefined
};
	/** Streaming cursor of the table "_map_pool" */
["_map_pool_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["_map_pool_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["_map_pool_stream_cursor_value_input"]: {
		map_id?: GraphQLTypes["uuid"] | undefined,
	map_pool_id?: GraphQLTypes["uuid"] | undefined
};
	/** update columns of table "_map_pool" */
["_map_pool_update_column"]: _map_pool_update_column;
	["_map_pool_updates"]: {
		/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["_map_pool_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["_map_pool_bool_exp"]
};
	["bigint"]: "scalar" & { name: "bigint" };
	/** Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'. */
["bigint_comparison_exp"]: {
		_eq?: GraphQLTypes["bigint"] | undefined,
	_gt?: GraphQLTypes["bigint"] | undefined,
	_gte?: GraphQLTypes["bigint"] | undefined,
	_in?: Array<GraphQLTypes["bigint"]> | undefined,
	_is_null?: boolean | undefined,
	_lt?: GraphQLTypes["bigint"] | undefined,
	_lte?: GraphQLTypes["bigint"] | undefined,
	_neq?: GraphQLTypes["bigint"] | undefined,
	_nin?: Array<GraphQLTypes["bigint"]> | undefined
};
	["bytea"]: "scalar" & { name: "bytea" };
	/** Boolean expression to compare columns of type "bytea". All fields are combined with logical 'AND'. */
["bytea_comparison_exp"]: {
		_eq?: GraphQLTypes["bytea"] | undefined,
	_gt?: GraphQLTypes["bytea"] | undefined,
	_gte?: GraphQLTypes["bytea"] | undefined,
	_in?: Array<GraphQLTypes["bytea"]> | undefined,
	_is_null?: boolean | undefined,
	_lt?: GraphQLTypes["bytea"] | undefined,
	_lte?: GraphQLTypes["bytea"] | undefined,
	_neq?: GraphQLTypes["bytea"] | undefined,
	_nin?: Array<GraphQLTypes["bytea"]> | undefined
};
	/** ordering argument of a cursor */
["cursor_ordering"]: cursor_ordering;
	["date"]: "scalar" & { name: "date" };
	/** Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'. */
["date_comparison_exp"]: {
		_eq?: GraphQLTypes["date"] | undefined,
	_gt?: GraphQLTypes["date"] | undefined,
	_gte?: GraphQLTypes["date"] | undefined,
	_in?: Array<GraphQLTypes["date"]> | undefined,
	_is_null?: boolean | undefined,
	_lt?: GraphQLTypes["date"] | undefined,
	_lte?: GraphQLTypes["date"] | undefined,
	_neq?: GraphQLTypes["date"] | undefined,
	_nin?: Array<GraphQLTypes["date"]> | undefined
};
	/** columns and relationships of "e_match_map_status" */
["e_match_map_status"]: {
	__typename: "e_match_map_status",
	description: string,
	value: string
};
	/** aggregated selection of "e_match_map_status" */
["e_match_map_status_aggregate"]: {
	__typename: "e_match_map_status_aggregate",
	aggregate?: GraphQLTypes["e_match_map_status_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["e_match_map_status"]>
};
	/** aggregate fields of "e_match_map_status" */
["e_match_map_status_aggregate_fields"]: {
	__typename: "e_match_map_status_aggregate_fields",
	count: number,
	max?: GraphQLTypes["e_match_map_status_max_fields"] | undefined,
	min?: GraphQLTypes["e_match_map_status_min_fields"] | undefined
};
	/** Boolean expression to filter rows from the table "e_match_map_status". All fields are combined with a logical 'AND'. */
["e_match_map_status_bool_exp"]: {
		_and?: Array<GraphQLTypes["e_match_map_status_bool_exp"]> | undefined,
	_not?: GraphQLTypes["e_match_map_status_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["e_match_map_status_bool_exp"]> | undefined,
	description?: GraphQLTypes["String_comparison_exp"] | undefined,
	value?: GraphQLTypes["String_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "e_match_map_status" */
["e_match_map_status_constraint"]: e_match_map_status_constraint;
	["e_match_map_status_enum"]: e_match_map_status_enum;
	/** Boolean expression to compare columns of type "e_match_map_status_enum". All fields are combined with logical 'AND'. */
["e_match_map_status_enum_comparison_exp"]: {
		_eq?: GraphQLTypes["e_match_map_status_enum"] | undefined,
	_in?: Array<GraphQLTypes["e_match_map_status_enum"]> | undefined,
	_is_null?: boolean | undefined,
	_neq?: GraphQLTypes["e_match_map_status_enum"] | undefined,
	_nin?: Array<GraphQLTypes["e_match_map_status_enum"]> | undefined
};
	/** input type for inserting data into table "e_match_map_status" */
["e_match_map_status_insert_input"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** aggregate max on columns */
["e_match_map_status_max_fields"]: {
	__typename: "e_match_map_status_max_fields",
	description?: string | undefined,
	value?: string | undefined
};
	/** aggregate min on columns */
["e_match_map_status_min_fields"]: {
	__typename: "e_match_map_status_min_fields",
	description?: string | undefined,
	value?: string | undefined
};
	/** response of any mutation on the table "e_match_map_status" */
["e_match_map_status_mutation_response"]: {
	__typename: "e_match_map_status_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["e_match_map_status"]>
};
	/** input type for inserting object relation for remote table "e_match_map_status" */
["e_match_map_status_obj_rel_insert_input"]: {
		data: GraphQLTypes["e_match_map_status_insert_input"],
	/** upsert condition */
	on_conflict?: GraphQLTypes["e_match_map_status_on_conflict"] | undefined
};
	/** on_conflict condition type for table "e_match_map_status" */
["e_match_map_status_on_conflict"]: {
		constraint: GraphQLTypes["e_match_map_status_constraint"],
	update_columns: Array<GraphQLTypes["e_match_map_status_update_column"]>,
	where?: GraphQLTypes["e_match_map_status_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "e_match_map_status". */
["e_match_map_status_order_by"]: {
		description?: GraphQLTypes["order_by"] | undefined,
	value?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: e_match_map_status */
["e_match_map_status_pk_columns_input"]: {
		value: string
};
	/** select columns of table "e_match_map_status" */
["e_match_map_status_select_column"]: e_match_map_status_select_column;
	/** input type for updating data in table "e_match_map_status" */
["e_match_map_status_set_input"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** Streaming cursor of the table "e_match_map_status" */
["e_match_map_status_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["e_match_map_status_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["e_match_map_status_stream_cursor_value_input"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** update columns of table "e_match_map_status" */
["e_match_map_status_update_column"]: e_match_map_status_update_column;
	["e_match_map_status_updates"]: {
		/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["e_match_map_status_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["e_match_map_status_bool_exp"]
};
	/** columns and relationships of "e_match_status" */
["e_match_status"]: {
	__typename: "e_match_status",
	description: string,
	/** An array relationship */
	matches: Array<GraphQLTypes["matches"]>,
	/** An aggregate relationship */
	matches_aggregate: GraphQLTypes["matches_aggregate"],
	value: string
};
	/** aggregated selection of "e_match_status" */
["e_match_status_aggregate"]: {
	__typename: "e_match_status_aggregate",
	aggregate?: GraphQLTypes["e_match_status_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["e_match_status"]>
};
	/** aggregate fields of "e_match_status" */
["e_match_status_aggregate_fields"]: {
	__typename: "e_match_status_aggregate_fields",
	count: number,
	max?: GraphQLTypes["e_match_status_max_fields"] | undefined,
	min?: GraphQLTypes["e_match_status_min_fields"] | undefined
};
	/** Boolean expression to filter rows from the table "e_match_status". All fields are combined with a logical 'AND'. */
["e_match_status_bool_exp"]: {
		_and?: Array<GraphQLTypes["e_match_status_bool_exp"]> | undefined,
	_not?: GraphQLTypes["e_match_status_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["e_match_status_bool_exp"]> | undefined,
	description?: GraphQLTypes["String_comparison_exp"] | undefined,
	matches?: GraphQLTypes["matches_bool_exp"] | undefined,
	matches_aggregate?: GraphQLTypes["matches_aggregate_bool_exp"] | undefined,
	value?: GraphQLTypes["String_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "e_match_status" */
["e_match_status_constraint"]: e_match_status_constraint;
	["e_match_status_enum"]: e_match_status_enum;
	/** Boolean expression to compare columns of type "e_match_status_enum". All fields are combined with logical 'AND'. */
["e_match_status_enum_comparison_exp"]: {
		_eq?: GraphQLTypes["e_match_status_enum"] | undefined,
	_in?: Array<GraphQLTypes["e_match_status_enum"]> | undefined,
	_is_null?: boolean | undefined,
	_neq?: GraphQLTypes["e_match_status_enum"] | undefined,
	_nin?: Array<GraphQLTypes["e_match_status_enum"]> | undefined
};
	/** input type for inserting data into table "e_match_status" */
["e_match_status_insert_input"]: {
		description?: string | undefined,
	matches?: GraphQLTypes["matches_arr_rel_insert_input"] | undefined,
	value?: string | undefined
};
	/** aggregate max on columns */
["e_match_status_max_fields"]: {
	__typename: "e_match_status_max_fields",
	description?: string | undefined,
	value?: string | undefined
};
	/** aggregate min on columns */
["e_match_status_min_fields"]: {
	__typename: "e_match_status_min_fields",
	description?: string | undefined,
	value?: string | undefined
};
	/** response of any mutation on the table "e_match_status" */
["e_match_status_mutation_response"]: {
	__typename: "e_match_status_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["e_match_status"]>
};
	/** input type for inserting object relation for remote table "e_match_status" */
["e_match_status_obj_rel_insert_input"]: {
		data: GraphQLTypes["e_match_status_insert_input"],
	/** upsert condition */
	on_conflict?: GraphQLTypes["e_match_status_on_conflict"] | undefined
};
	/** on_conflict condition type for table "e_match_status" */
["e_match_status_on_conflict"]: {
		constraint: GraphQLTypes["e_match_status_constraint"],
	update_columns: Array<GraphQLTypes["e_match_status_update_column"]>,
	where?: GraphQLTypes["e_match_status_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "e_match_status". */
["e_match_status_order_by"]: {
		description?: GraphQLTypes["order_by"] | undefined,
	matches_aggregate?: GraphQLTypes["matches_aggregate_order_by"] | undefined,
	value?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: e_match_status */
["e_match_status_pk_columns_input"]: {
		value: string
};
	/** select columns of table "e_match_status" */
["e_match_status_select_column"]: e_match_status_select_column;
	/** input type for updating data in table "e_match_status" */
["e_match_status_set_input"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** Streaming cursor of the table "e_match_status" */
["e_match_status_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["e_match_status_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["e_match_status_stream_cursor_value_input"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** update columns of table "e_match_status" */
["e_match_status_update_column"]: e_match_status_update_column;
	["e_match_status_updates"]: {
		/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["e_match_status_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["e_match_status_bool_exp"]
};
	/** columns and relationships of "e_match_types" */
["e_match_types"]: {
	__typename: "e_match_types",
	description: string,
	/** An array relationship */
	maps: Array<GraphQLTypes["maps"]>,
	/** An aggregate relationship */
	maps_aggregate: GraphQLTypes["maps_aggregate"],
	/** An array relationship */
	matches: Array<GraphQLTypes["matches"]>,
	/** An aggregate relationship */
	matches_aggregate: GraphQLTypes["matches_aggregate"],
	value: string
};
	/** aggregated selection of "e_match_types" */
["e_match_types_aggregate"]: {
	__typename: "e_match_types_aggregate",
	aggregate?: GraphQLTypes["e_match_types_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["e_match_types"]>
};
	/** aggregate fields of "e_match_types" */
["e_match_types_aggregate_fields"]: {
	__typename: "e_match_types_aggregate_fields",
	count: number,
	max?: GraphQLTypes["e_match_types_max_fields"] | undefined,
	min?: GraphQLTypes["e_match_types_min_fields"] | undefined
};
	/** Boolean expression to filter rows from the table "e_match_types". All fields are combined with a logical 'AND'. */
["e_match_types_bool_exp"]: {
		_and?: Array<GraphQLTypes["e_match_types_bool_exp"]> | undefined,
	_not?: GraphQLTypes["e_match_types_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["e_match_types_bool_exp"]> | undefined,
	description?: GraphQLTypes["String_comparison_exp"] | undefined,
	maps?: GraphQLTypes["maps_bool_exp"] | undefined,
	maps_aggregate?: GraphQLTypes["maps_aggregate_bool_exp"] | undefined,
	matches?: GraphQLTypes["matches_bool_exp"] | undefined,
	matches_aggregate?: GraphQLTypes["matches_aggregate_bool_exp"] | undefined,
	value?: GraphQLTypes["String_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "e_match_types" */
["e_match_types_constraint"]: e_match_types_constraint;
	["e_match_types_enum"]: e_match_types_enum;
	/** Boolean expression to compare columns of type "e_match_types_enum". All fields are combined with logical 'AND'. */
["e_match_types_enum_comparison_exp"]: {
		_eq?: GraphQLTypes["e_match_types_enum"] | undefined,
	_in?: Array<GraphQLTypes["e_match_types_enum"]> | undefined,
	_is_null?: boolean | undefined,
	_neq?: GraphQLTypes["e_match_types_enum"] | undefined,
	_nin?: Array<GraphQLTypes["e_match_types_enum"]> | undefined
};
	/** input type for inserting data into table "e_match_types" */
["e_match_types_insert_input"]: {
		description?: string | undefined,
	maps?: GraphQLTypes["maps_arr_rel_insert_input"] | undefined,
	matches?: GraphQLTypes["matches_arr_rel_insert_input"] | undefined,
	value?: string | undefined
};
	/** aggregate max on columns */
["e_match_types_max_fields"]: {
	__typename: "e_match_types_max_fields",
	description?: string | undefined,
	value?: string | undefined
};
	/** aggregate min on columns */
["e_match_types_min_fields"]: {
	__typename: "e_match_types_min_fields",
	description?: string | undefined,
	value?: string | undefined
};
	/** response of any mutation on the table "e_match_types" */
["e_match_types_mutation_response"]: {
	__typename: "e_match_types_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["e_match_types"]>
};
	/** input type for inserting object relation for remote table "e_match_types" */
["e_match_types_obj_rel_insert_input"]: {
		data: GraphQLTypes["e_match_types_insert_input"],
	/** upsert condition */
	on_conflict?: GraphQLTypes["e_match_types_on_conflict"] | undefined
};
	/** on_conflict condition type for table "e_match_types" */
["e_match_types_on_conflict"]: {
		constraint: GraphQLTypes["e_match_types_constraint"],
	update_columns: Array<GraphQLTypes["e_match_types_update_column"]>,
	where?: GraphQLTypes["e_match_types_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "e_match_types". */
["e_match_types_order_by"]: {
		description?: GraphQLTypes["order_by"] | undefined,
	maps_aggregate?: GraphQLTypes["maps_aggregate_order_by"] | undefined,
	matches_aggregate?: GraphQLTypes["matches_aggregate_order_by"] | undefined,
	value?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: e_match_types */
["e_match_types_pk_columns_input"]: {
		value: string
};
	/** select columns of table "e_match_types" */
["e_match_types_select_column"]: e_match_types_select_column;
	/** input type for updating data in table "e_match_types" */
["e_match_types_set_input"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** Streaming cursor of the table "e_match_types" */
["e_match_types_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["e_match_types_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["e_match_types_stream_cursor_value_input"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** update columns of table "e_match_types" */
["e_match_types_update_column"]: e_match_types_update_column;
	["e_match_types_updates"]: {
		/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["e_match_types_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["e_match_types_bool_exp"]
};
	/** columns and relationships of "e_objective_types" */
["e_objective_types"]: {
	__typename: "e_objective_types",
	description: string,
	value: string
};
	/** aggregated selection of "e_objective_types" */
["e_objective_types_aggregate"]: {
	__typename: "e_objective_types_aggregate",
	aggregate?: GraphQLTypes["e_objective_types_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["e_objective_types"]>
};
	/** aggregate fields of "e_objective_types" */
["e_objective_types_aggregate_fields"]: {
	__typename: "e_objective_types_aggregate_fields",
	count: number,
	max?: GraphQLTypes["e_objective_types_max_fields"] | undefined,
	min?: GraphQLTypes["e_objective_types_min_fields"] | undefined
};
	/** Boolean expression to filter rows from the table "e_objective_types". All fields are combined with a logical 'AND'. */
["e_objective_types_bool_exp"]: {
		_and?: Array<GraphQLTypes["e_objective_types_bool_exp"]> | undefined,
	_not?: GraphQLTypes["e_objective_types_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["e_objective_types_bool_exp"]> | undefined,
	description?: GraphQLTypes["String_comparison_exp"] | undefined,
	value?: GraphQLTypes["String_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "e_objective_types" */
["e_objective_types_constraint"]: e_objective_types_constraint;
	["e_objective_types_enum"]: e_objective_types_enum;
	/** Boolean expression to compare columns of type "e_objective_types_enum". All fields are combined with logical 'AND'. */
["e_objective_types_enum_comparison_exp"]: {
		_eq?: GraphQLTypes["e_objective_types_enum"] | undefined,
	_in?: Array<GraphQLTypes["e_objective_types_enum"]> | undefined,
	_is_null?: boolean | undefined,
	_neq?: GraphQLTypes["e_objective_types_enum"] | undefined,
	_nin?: Array<GraphQLTypes["e_objective_types_enum"]> | undefined
};
	/** input type for inserting data into table "e_objective_types" */
["e_objective_types_insert_input"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** aggregate max on columns */
["e_objective_types_max_fields"]: {
	__typename: "e_objective_types_max_fields",
	description?: string | undefined,
	value?: string | undefined
};
	/** aggregate min on columns */
["e_objective_types_min_fields"]: {
	__typename: "e_objective_types_min_fields",
	description?: string | undefined,
	value?: string | undefined
};
	/** response of any mutation on the table "e_objective_types" */
["e_objective_types_mutation_response"]: {
	__typename: "e_objective_types_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["e_objective_types"]>
};
	/** on_conflict condition type for table "e_objective_types" */
["e_objective_types_on_conflict"]: {
		constraint: GraphQLTypes["e_objective_types_constraint"],
	update_columns: Array<GraphQLTypes["e_objective_types_update_column"]>,
	where?: GraphQLTypes["e_objective_types_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "e_objective_types". */
["e_objective_types_order_by"]: {
		description?: GraphQLTypes["order_by"] | undefined,
	value?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: e_objective_types */
["e_objective_types_pk_columns_input"]: {
		value: string
};
	/** select columns of table "e_objective_types" */
["e_objective_types_select_column"]: e_objective_types_select_column;
	/** input type for updating data in table "e_objective_types" */
["e_objective_types_set_input"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** Streaming cursor of the table "e_objective_types" */
["e_objective_types_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["e_objective_types_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["e_objective_types_stream_cursor_value_input"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** update columns of table "e_objective_types" */
["e_objective_types_update_column"]: e_objective_types_update_column;
	["e_objective_types_updates"]: {
		/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["e_objective_types_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["e_objective_types_bool_exp"]
};
	/** columns and relationships of "e_sides" */
["e_sides"]: {
	__typename: "e_sides",
	description: string,
	/** An array relationship */
	match_map_lineup_1: Array<GraphQLTypes["match_maps"]>,
	/** An aggregate relationship */
	match_map_lineup_1_aggregate: GraphQLTypes["match_maps_aggregate"],
	/** An array relationship */
	match_map_lineup_2: Array<GraphQLTypes["match_maps"]>,
	/** An aggregate relationship */
	match_map_lineup_2_aggregate: GraphQLTypes["match_maps_aggregate"],
	value: string
};
	/** aggregated selection of "e_sides" */
["e_sides_aggregate"]: {
	__typename: "e_sides_aggregate",
	aggregate?: GraphQLTypes["e_sides_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["e_sides"]>
};
	/** aggregate fields of "e_sides" */
["e_sides_aggregate_fields"]: {
	__typename: "e_sides_aggregate_fields",
	count: number,
	max?: GraphQLTypes["e_sides_max_fields"] | undefined,
	min?: GraphQLTypes["e_sides_min_fields"] | undefined
};
	/** Boolean expression to filter rows from the table "e_sides". All fields are combined with a logical 'AND'. */
["e_sides_bool_exp"]: {
		_and?: Array<GraphQLTypes["e_sides_bool_exp"]> | undefined,
	_not?: GraphQLTypes["e_sides_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["e_sides_bool_exp"]> | undefined,
	description?: GraphQLTypes["String_comparison_exp"] | undefined,
	match_map_lineup_1?: GraphQLTypes["match_maps_bool_exp"] | undefined,
	match_map_lineup_1_aggregate?: GraphQLTypes["match_maps_aggregate_bool_exp"] | undefined,
	match_map_lineup_2?: GraphQLTypes["match_maps_bool_exp"] | undefined,
	match_map_lineup_2_aggregate?: GraphQLTypes["match_maps_aggregate_bool_exp"] | undefined,
	value?: GraphQLTypes["String_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "e_sides" */
["e_sides_constraint"]: e_sides_constraint;
	["e_sides_enum"]: e_sides_enum;
	/** Boolean expression to compare columns of type "e_sides_enum". All fields are combined with logical 'AND'. */
["e_sides_enum_comparison_exp"]: {
		_eq?: GraphQLTypes["e_sides_enum"] | undefined,
	_in?: Array<GraphQLTypes["e_sides_enum"]> | undefined,
	_is_null?: boolean | undefined,
	_neq?: GraphQLTypes["e_sides_enum"] | undefined,
	_nin?: Array<GraphQLTypes["e_sides_enum"]> | undefined
};
	/** input type for inserting data into table "e_sides" */
["e_sides_insert_input"]: {
		description?: string | undefined,
	match_map_lineup_1?: GraphQLTypes["match_maps_arr_rel_insert_input"] | undefined,
	match_map_lineup_2?: GraphQLTypes["match_maps_arr_rel_insert_input"] | undefined,
	value?: string | undefined
};
	/** aggregate max on columns */
["e_sides_max_fields"]: {
	__typename: "e_sides_max_fields",
	description?: string | undefined,
	value?: string | undefined
};
	/** aggregate min on columns */
["e_sides_min_fields"]: {
	__typename: "e_sides_min_fields",
	description?: string | undefined,
	value?: string | undefined
};
	/** response of any mutation on the table "e_sides" */
["e_sides_mutation_response"]: {
	__typename: "e_sides_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["e_sides"]>
};
	/** on_conflict condition type for table "e_sides" */
["e_sides_on_conflict"]: {
		constraint: GraphQLTypes["e_sides_constraint"],
	update_columns: Array<GraphQLTypes["e_sides_update_column"]>,
	where?: GraphQLTypes["e_sides_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "e_sides". */
["e_sides_order_by"]: {
		description?: GraphQLTypes["order_by"] | undefined,
	match_map_lineup_1_aggregate?: GraphQLTypes["match_maps_aggregate_order_by"] | undefined,
	match_map_lineup_2_aggregate?: GraphQLTypes["match_maps_aggregate_order_by"] | undefined,
	value?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: e_sides */
["e_sides_pk_columns_input"]: {
		value: string
};
	/** select columns of table "e_sides" */
["e_sides_select_column"]: e_sides_select_column;
	/** input type for updating data in table "e_sides" */
["e_sides_set_input"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** Streaming cursor of the table "e_sides" */
["e_sides_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["e_sides_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["e_sides_stream_cursor_value_input"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** update columns of table "e_sides" */
["e_sides_update_column"]: e_sides_update_column;
	["e_sides_updates"]: {
		/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["e_sides_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["e_sides_bool_exp"]
};
	/** columns and relationships of "e_team_roles" */
["e_team_roles"]: {
	__typename: "e_team_roles",
	description: string,
	value: string
};
	/** aggregated selection of "e_team_roles" */
["e_team_roles_aggregate"]: {
	__typename: "e_team_roles_aggregate",
	aggregate?: GraphQLTypes["e_team_roles_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["e_team_roles"]>
};
	/** aggregate fields of "e_team_roles" */
["e_team_roles_aggregate_fields"]: {
	__typename: "e_team_roles_aggregate_fields",
	count: number,
	max?: GraphQLTypes["e_team_roles_max_fields"] | undefined,
	min?: GraphQLTypes["e_team_roles_min_fields"] | undefined
};
	/** Boolean expression to filter rows from the table "e_team_roles". All fields are combined with a logical 'AND'. */
["e_team_roles_bool_exp"]: {
		_and?: Array<GraphQLTypes["e_team_roles_bool_exp"]> | undefined,
	_not?: GraphQLTypes["e_team_roles_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["e_team_roles_bool_exp"]> | undefined,
	description?: GraphQLTypes["String_comparison_exp"] | undefined,
	value?: GraphQLTypes["String_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "e_team_roles" */
["e_team_roles_constraint"]: e_team_roles_constraint;
	["e_team_roles_enum"]: e_team_roles_enum;
	/** Boolean expression to compare columns of type "e_team_roles_enum". All fields are combined with logical 'AND'. */
["e_team_roles_enum_comparison_exp"]: {
		_eq?: GraphQLTypes["e_team_roles_enum"] | undefined,
	_in?: Array<GraphQLTypes["e_team_roles_enum"]> | undefined,
	_is_null?: boolean | undefined,
	_neq?: GraphQLTypes["e_team_roles_enum"] | undefined,
	_nin?: Array<GraphQLTypes["e_team_roles_enum"]> | undefined
};
	/** input type for inserting data into table "e_team_roles" */
["e_team_roles_insert_input"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** aggregate max on columns */
["e_team_roles_max_fields"]: {
	__typename: "e_team_roles_max_fields",
	description?: string | undefined,
	value?: string | undefined
};
	/** aggregate min on columns */
["e_team_roles_min_fields"]: {
	__typename: "e_team_roles_min_fields",
	description?: string | undefined,
	value?: string | undefined
};
	/** response of any mutation on the table "e_team_roles" */
["e_team_roles_mutation_response"]: {
	__typename: "e_team_roles_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["e_team_roles"]>
};
	/** on_conflict condition type for table "e_team_roles" */
["e_team_roles_on_conflict"]: {
		constraint: GraphQLTypes["e_team_roles_constraint"],
	update_columns: Array<GraphQLTypes["e_team_roles_update_column"]>,
	where?: GraphQLTypes["e_team_roles_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "e_team_roles". */
["e_team_roles_order_by"]: {
		description?: GraphQLTypes["order_by"] | undefined,
	value?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: e_team_roles */
["e_team_roles_pk_columns_input"]: {
		value: string
};
	/** select columns of table "e_team_roles" */
["e_team_roles_select_column"]: e_team_roles_select_column;
	/** input type for updating data in table "e_team_roles" */
["e_team_roles_set_input"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** Streaming cursor of the table "e_team_roles" */
["e_team_roles_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["e_team_roles_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["e_team_roles_stream_cursor_value_input"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** update columns of table "e_team_roles" */
["e_team_roles_update_column"]: e_team_roles_update_column;
	["e_team_roles_updates"]: {
		/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["e_team_roles_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["e_team_roles_bool_exp"]
};
	/** columns and relationships of "e_timeout_settings" */
["e_timeout_settings"]: {
	__typename: "e_timeout_settings",
	description: string,
	value: string
};
	/** aggregated selection of "e_timeout_settings" */
["e_timeout_settings_aggregate"]: {
	__typename: "e_timeout_settings_aggregate",
	aggregate?: GraphQLTypes["e_timeout_settings_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["e_timeout_settings"]>
};
	/** aggregate fields of "e_timeout_settings" */
["e_timeout_settings_aggregate_fields"]: {
	__typename: "e_timeout_settings_aggregate_fields",
	count: number,
	max?: GraphQLTypes["e_timeout_settings_max_fields"] | undefined,
	min?: GraphQLTypes["e_timeout_settings_min_fields"] | undefined
};
	/** Boolean expression to filter rows from the table "e_timeout_settings". All fields are combined with a logical 'AND'. */
["e_timeout_settings_bool_exp"]: {
		_and?: Array<GraphQLTypes["e_timeout_settings_bool_exp"]> | undefined,
	_not?: GraphQLTypes["e_timeout_settings_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["e_timeout_settings_bool_exp"]> | undefined,
	description?: GraphQLTypes["String_comparison_exp"] | undefined,
	value?: GraphQLTypes["String_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "e_timeout_settings" */
["e_timeout_settings_constraint"]: e_timeout_settings_constraint;
	["e_timeout_settings_enum"]: e_timeout_settings_enum;
	/** Boolean expression to compare columns of type "e_timeout_settings_enum". All fields are combined with logical 'AND'. */
["e_timeout_settings_enum_comparison_exp"]: {
		_eq?: GraphQLTypes["e_timeout_settings_enum"] | undefined,
	_in?: Array<GraphQLTypes["e_timeout_settings_enum"]> | undefined,
	_is_null?: boolean | undefined,
	_neq?: GraphQLTypes["e_timeout_settings_enum"] | undefined,
	_nin?: Array<GraphQLTypes["e_timeout_settings_enum"]> | undefined
};
	/** input type for inserting data into table "e_timeout_settings" */
["e_timeout_settings_insert_input"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** aggregate max on columns */
["e_timeout_settings_max_fields"]: {
	__typename: "e_timeout_settings_max_fields",
	description?: string | undefined,
	value?: string | undefined
};
	/** aggregate min on columns */
["e_timeout_settings_min_fields"]: {
	__typename: "e_timeout_settings_min_fields",
	description?: string | undefined,
	value?: string | undefined
};
	/** response of any mutation on the table "e_timeout_settings" */
["e_timeout_settings_mutation_response"]: {
	__typename: "e_timeout_settings_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["e_timeout_settings"]>
};
	/** on_conflict condition type for table "e_timeout_settings" */
["e_timeout_settings_on_conflict"]: {
		constraint: GraphQLTypes["e_timeout_settings_constraint"],
	update_columns: Array<GraphQLTypes["e_timeout_settings_update_column"]>,
	where?: GraphQLTypes["e_timeout_settings_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "e_timeout_settings". */
["e_timeout_settings_order_by"]: {
		description?: GraphQLTypes["order_by"] | undefined,
	value?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: e_timeout_settings */
["e_timeout_settings_pk_columns_input"]: {
		value: string
};
	/** select columns of table "e_timeout_settings" */
["e_timeout_settings_select_column"]: e_timeout_settings_select_column;
	/** input type for updating data in table "e_timeout_settings" */
["e_timeout_settings_set_input"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** Streaming cursor of the table "e_timeout_settings" */
["e_timeout_settings_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["e_timeout_settings_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["e_timeout_settings_stream_cursor_value_input"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** update columns of table "e_timeout_settings" */
["e_timeout_settings_update_column"]: e_timeout_settings_update_column;
	["e_timeout_settings_updates"]: {
		/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["e_timeout_settings_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["e_timeout_settings_bool_exp"]
};
	/** columns and relationships of "e_utility_types" */
["e_utility_types"]: {
	__typename: "e_utility_types",
	description: string,
	value: string
};
	/** aggregated selection of "e_utility_types" */
["e_utility_types_aggregate"]: {
	__typename: "e_utility_types_aggregate",
	aggregate?: GraphQLTypes["e_utility_types_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["e_utility_types"]>
};
	/** aggregate fields of "e_utility_types" */
["e_utility_types_aggregate_fields"]: {
	__typename: "e_utility_types_aggregate_fields",
	count: number,
	max?: GraphQLTypes["e_utility_types_max_fields"] | undefined,
	min?: GraphQLTypes["e_utility_types_min_fields"] | undefined
};
	/** Boolean expression to filter rows from the table "e_utility_types". All fields are combined with a logical 'AND'. */
["e_utility_types_bool_exp"]: {
		_and?: Array<GraphQLTypes["e_utility_types_bool_exp"]> | undefined,
	_not?: GraphQLTypes["e_utility_types_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["e_utility_types_bool_exp"]> | undefined,
	description?: GraphQLTypes["String_comparison_exp"] | undefined,
	value?: GraphQLTypes["String_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "e_utility_types" */
["e_utility_types_constraint"]: e_utility_types_constraint;
	["e_utility_types_enum"]: e_utility_types_enum;
	/** Boolean expression to compare columns of type "e_utility_types_enum". All fields are combined with logical 'AND'. */
["e_utility_types_enum_comparison_exp"]: {
		_eq?: GraphQLTypes["e_utility_types_enum"] | undefined,
	_in?: Array<GraphQLTypes["e_utility_types_enum"]> | undefined,
	_is_null?: boolean | undefined,
	_neq?: GraphQLTypes["e_utility_types_enum"] | undefined,
	_nin?: Array<GraphQLTypes["e_utility_types_enum"]> | undefined
};
	/** input type for inserting data into table "e_utility_types" */
["e_utility_types_insert_input"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** aggregate max on columns */
["e_utility_types_max_fields"]: {
	__typename: "e_utility_types_max_fields",
	description?: string | undefined,
	value?: string | undefined
};
	/** aggregate min on columns */
["e_utility_types_min_fields"]: {
	__typename: "e_utility_types_min_fields",
	description?: string | undefined,
	value?: string | undefined
};
	/** response of any mutation on the table "e_utility_types" */
["e_utility_types_mutation_response"]: {
	__typename: "e_utility_types_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["e_utility_types"]>
};
	/** on_conflict condition type for table "e_utility_types" */
["e_utility_types_on_conflict"]: {
		constraint: GraphQLTypes["e_utility_types_constraint"],
	update_columns: Array<GraphQLTypes["e_utility_types_update_column"]>,
	where?: GraphQLTypes["e_utility_types_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "e_utility_types". */
["e_utility_types_order_by"]: {
		description?: GraphQLTypes["order_by"] | undefined,
	value?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: e_utility_types */
["e_utility_types_pk_columns_input"]: {
		value: string
};
	/** select columns of table "e_utility_types" */
["e_utility_types_select_column"]: e_utility_types_select_column;
	/** input type for updating data in table "e_utility_types" */
["e_utility_types_set_input"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** Streaming cursor of the table "e_utility_types" */
["e_utility_types_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["e_utility_types_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["e_utility_types_stream_cursor_value_input"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** update columns of table "e_utility_types" */
["e_utility_types_update_column"]: e_utility_types_update_column;
	["e_utility_types_updates"]: {
		/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["e_utility_types_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["e_utility_types_bool_exp"]
};
	/** columns and relationships of "e_veto_pick_types" */
["e_veto_pick_types"]: {
	__typename: "e_veto_pick_types",
	description: string,
	value: string
};
	/** aggregated selection of "e_veto_pick_types" */
["e_veto_pick_types_aggregate"]: {
	__typename: "e_veto_pick_types_aggregate",
	aggregate?: GraphQLTypes["e_veto_pick_types_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["e_veto_pick_types"]>
};
	/** aggregate fields of "e_veto_pick_types" */
["e_veto_pick_types_aggregate_fields"]: {
	__typename: "e_veto_pick_types_aggregate_fields",
	count: number,
	max?: GraphQLTypes["e_veto_pick_types_max_fields"] | undefined,
	min?: GraphQLTypes["e_veto_pick_types_min_fields"] | undefined
};
	/** Boolean expression to filter rows from the table "e_veto_pick_types". All fields are combined with a logical 'AND'. */
["e_veto_pick_types_bool_exp"]: {
		_and?: Array<GraphQLTypes["e_veto_pick_types_bool_exp"]> | undefined,
	_not?: GraphQLTypes["e_veto_pick_types_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["e_veto_pick_types_bool_exp"]> | undefined,
	description?: GraphQLTypes["String_comparison_exp"] | undefined,
	value?: GraphQLTypes["String_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "e_veto_pick_types" */
["e_veto_pick_types_constraint"]: e_veto_pick_types_constraint;
	["e_veto_pick_types_enum"]: e_veto_pick_types_enum;
	/** Boolean expression to compare columns of type "e_veto_pick_types_enum". All fields are combined with logical 'AND'. */
["e_veto_pick_types_enum_comparison_exp"]: {
		_eq?: GraphQLTypes["e_veto_pick_types_enum"] | undefined,
	_in?: Array<GraphQLTypes["e_veto_pick_types_enum"]> | undefined,
	_is_null?: boolean | undefined,
	_neq?: GraphQLTypes["e_veto_pick_types_enum"] | undefined,
	_nin?: Array<GraphQLTypes["e_veto_pick_types_enum"]> | undefined
};
	/** input type for inserting data into table "e_veto_pick_types" */
["e_veto_pick_types_insert_input"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** aggregate max on columns */
["e_veto_pick_types_max_fields"]: {
	__typename: "e_veto_pick_types_max_fields",
	description?: string | undefined,
	value?: string | undefined
};
	/** aggregate min on columns */
["e_veto_pick_types_min_fields"]: {
	__typename: "e_veto_pick_types_min_fields",
	description?: string | undefined,
	value?: string | undefined
};
	/** response of any mutation on the table "e_veto_pick_types" */
["e_veto_pick_types_mutation_response"]: {
	__typename: "e_veto_pick_types_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["e_veto_pick_types"]>
};
	/** on_conflict condition type for table "e_veto_pick_types" */
["e_veto_pick_types_on_conflict"]: {
		constraint: GraphQLTypes["e_veto_pick_types_constraint"],
	update_columns: Array<GraphQLTypes["e_veto_pick_types_update_column"]>,
	where?: GraphQLTypes["e_veto_pick_types_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "e_veto_pick_types". */
["e_veto_pick_types_order_by"]: {
		description?: GraphQLTypes["order_by"] | undefined,
	value?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: e_veto_pick_types */
["e_veto_pick_types_pk_columns_input"]: {
		value: string
};
	/** select columns of table "e_veto_pick_types" */
["e_veto_pick_types_select_column"]: e_veto_pick_types_select_column;
	/** input type for updating data in table "e_veto_pick_types" */
["e_veto_pick_types_set_input"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** Streaming cursor of the table "e_veto_pick_types" */
["e_veto_pick_types_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["e_veto_pick_types_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["e_veto_pick_types_stream_cursor_value_input"]: {
		description?: string | undefined,
	value?: string | undefined
};
	/** update columns of table "e_veto_pick_types" */
["e_veto_pick_types_update_column"]: e_veto_pick_types_update_column;
	["e_veto_pick_types_updates"]: {
		/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["e_veto_pick_types_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["e_veto_pick_types_bool_exp"]
};
	["jsonb"]: "scalar" & { name: "jsonb" };
	["jsonb_cast_exp"]: {
		String?: GraphQLTypes["String_comparison_exp"] | undefined
};
	/** Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'. */
["jsonb_comparison_exp"]: {
		_cast?: GraphQLTypes["jsonb_cast_exp"] | undefined,
	/** is the column contained in the given json value */
	_contained_in?: GraphQLTypes["jsonb"] | undefined,
	/** does the column contain the given json value at the top level */
	_contains?: GraphQLTypes["jsonb"] | undefined,
	_eq?: GraphQLTypes["jsonb"] | undefined,
	_gt?: GraphQLTypes["jsonb"] | undefined,
	_gte?: GraphQLTypes["jsonb"] | undefined,
	/** does the string exist as a top-level key in the column */
	_has_key?: string | undefined,
	/** do all of these strings exist as top-level keys in the column */
	_has_keys_all?: Array<string> | undefined,
	/** do any of these strings exist as top-level keys in the column */
	_has_keys_any?: Array<string> | undefined,
	_in?: Array<GraphQLTypes["jsonb"]> | undefined,
	_is_null?: boolean | undefined,
	_lt?: GraphQLTypes["jsonb"] | undefined,
	_lte?: GraphQLTypes["jsonb"] | undefined,
	_neq?: GraphQLTypes["jsonb"] | undefined,
	_nin?: Array<GraphQLTypes["jsonb"]> | undefined
};
	/** columns and relationships of "map_pools" */
["map_pools"]: {
	__typename: "map_pools",
	enabled: boolean,
	id: GraphQLTypes["uuid"],
	label?: string | undefined,
	/** An array relationship */
	maps: Array<GraphQLTypes["v_pool_maps"]>,
	/** An aggregate relationship */
	maps_aggregate: GraphQLTypes["v_pool_maps_aggregate"],
	/** An array relationship */
	matches: Array<GraphQLTypes["matches"]>,
	/** An aggregate relationship */
	matches_aggregate: GraphQLTypes["matches_aggregate"],
	owner_steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** aggregated selection of "map_pools" */
["map_pools_aggregate"]: {
	__typename: "map_pools_aggregate",
	aggregate?: GraphQLTypes["map_pools_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["map_pools"]>
};
	/** aggregate fields of "map_pools" */
["map_pools_aggregate_fields"]: {
	__typename: "map_pools_aggregate_fields",
	avg?: GraphQLTypes["map_pools_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["map_pools_max_fields"] | undefined,
	min?: GraphQLTypes["map_pools_min_fields"] | undefined,
	stddev?: GraphQLTypes["map_pools_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["map_pools_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["map_pools_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["map_pools_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["map_pools_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["map_pools_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["map_pools_variance_fields"] | undefined
};
	/** aggregate avg on columns */
["map_pools_avg_fields"]: {
	__typename: "map_pools_avg_fields",
	owner_steam_id?: number | undefined
};
	/** Boolean expression to filter rows from the table "map_pools". All fields are combined with a logical 'AND'. */
["map_pools_bool_exp"]: {
		_and?: Array<GraphQLTypes["map_pools_bool_exp"]> | undefined,
	_not?: GraphQLTypes["map_pools_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["map_pools_bool_exp"]> | undefined,
	enabled?: GraphQLTypes["Boolean_comparison_exp"] | undefined,
	id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	label?: GraphQLTypes["String_comparison_exp"] | undefined,
	maps?: GraphQLTypes["v_pool_maps_bool_exp"] | undefined,
	maps_aggregate?: GraphQLTypes["v_pool_maps_aggregate_bool_exp"] | undefined,
	matches?: GraphQLTypes["matches_bool_exp"] | undefined,
	matches_aggregate?: GraphQLTypes["matches_aggregate_bool_exp"] | undefined,
	owner_steam_id?: GraphQLTypes["bigint_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "map_pools" */
["map_pools_constraint"]: map_pools_constraint;
	/** input type for incrementing numeric columns in table "map_pools" */
["map_pools_inc_input"]: {
		owner_steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** input type for inserting data into table "map_pools" */
["map_pools_insert_input"]: {
		enabled?: boolean | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	label?: string | undefined,
	maps?: GraphQLTypes["v_pool_maps_arr_rel_insert_input"] | undefined,
	matches?: GraphQLTypes["matches_arr_rel_insert_input"] | undefined,
	owner_steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** aggregate max on columns */
["map_pools_max_fields"]: {
	__typename: "map_pools_max_fields",
	id?: GraphQLTypes["uuid"] | undefined,
	label?: string | undefined,
	owner_steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** aggregate min on columns */
["map_pools_min_fields"]: {
	__typename: "map_pools_min_fields",
	id?: GraphQLTypes["uuid"] | undefined,
	label?: string | undefined,
	owner_steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** response of any mutation on the table "map_pools" */
["map_pools_mutation_response"]: {
	__typename: "map_pools_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["map_pools"]>
};
	/** input type for inserting object relation for remote table "map_pools" */
["map_pools_obj_rel_insert_input"]: {
		data: GraphQLTypes["map_pools_insert_input"],
	/** upsert condition */
	on_conflict?: GraphQLTypes["map_pools_on_conflict"] | undefined
};
	/** on_conflict condition type for table "map_pools" */
["map_pools_on_conflict"]: {
		constraint: GraphQLTypes["map_pools_constraint"],
	update_columns: Array<GraphQLTypes["map_pools_update_column"]>,
	where?: GraphQLTypes["map_pools_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "map_pools". */
["map_pools_order_by"]: {
		enabled?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	label?: GraphQLTypes["order_by"] | undefined,
	maps_aggregate?: GraphQLTypes["v_pool_maps_aggregate_order_by"] | undefined,
	matches_aggregate?: GraphQLTypes["matches_aggregate_order_by"] | undefined,
	owner_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: map_pools */
["map_pools_pk_columns_input"]: {
		id: GraphQLTypes["uuid"]
};
	/** select columns of table "map_pools" */
["map_pools_select_column"]: map_pools_select_column;
	/** input type for updating data in table "map_pools" */
["map_pools_set_input"]: {
		enabled?: boolean | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	label?: string | undefined,
	owner_steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** aggregate stddev on columns */
["map_pools_stddev_fields"]: {
	__typename: "map_pools_stddev_fields",
	owner_steam_id?: number | undefined
};
	/** aggregate stddev_pop on columns */
["map_pools_stddev_pop_fields"]: {
	__typename: "map_pools_stddev_pop_fields",
	owner_steam_id?: number | undefined
};
	/** aggregate stddev_samp on columns */
["map_pools_stddev_samp_fields"]: {
	__typename: "map_pools_stddev_samp_fields",
	owner_steam_id?: number | undefined
};
	/** Streaming cursor of the table "map_pools" */
["map_pools_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["map_pools_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["map_pools_stream_cursor_value_input"]: {
		enabled?: boolean | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	label?: string | undefined,
	owner_steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** aggregate sum on columns */
["map_pools_sum_fields"]: {
	__typename: "map_pools_sum_fields",
	owner_steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** update columns of table "map_pools" */
["map_pools_update_column"]: map_pools_update_column;
	["map_pools_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["map_pools_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["map_pools_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["map_pools_bool_exp"]
};
	/** aggregate var_pop on columns */
["map_pools_var_pop_fields"]: {
	__typename: "map_pools_var_pop_fields",
	owner_steam_id?: number | undefined
};
	/** aggregate var_samp on columns */
["map_pools_var_samp_fields"]: {
	__typename: "map_pools_var_samp_fields",
	owner_steam_id?: number | undefined
};
	/** aggregate variance on columns */
["map_pools_variance_fields"]: {
	__typename: "map_pools_variance_fields",
	owner_steam_id?: number | undefined
};
	/** columns and relationships of "maps" */
["maps"]: {
	__typename: "maps",
	active_pool: boolean,
	/** An object relationship */
	e_match_type: GraphQLTypes["e_match_types"],
	id: GraphQLTypes["uuid"],
	/** An array relationship */
	match_maps: Array<GraphQLTypes["match_maps"]>,
	/** An aggregate relationship */
	match_maps_aggregate: GraphQLTypes["match_maps_aggregate"],
	/** An array relationship */
	match_veto_picks: Array<GraphQLTypes["match_veto_picks"]>,
	/** An aggregate relationship */
	match_veto_picks_aggregate: GraphQLTypes["match_veto_picks_aggregate"],
	name: string,
	type: GraphQLTypes["e_match_types_enum"],
	workshop_map_id?: string | undefined
};
	/** aggregated selection of "maps" */
["maps_aggregate"]: {
	__typename: "maps_aggregate",
	aggregate?: GraphQLTypes["maps_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["maps"]>
};
	["maps_aggregate_bool_exp"]: {
		bool_and?: GraphQLTypes["maps_aggregate_bool_exp_bool_and"] | undefined,
	bool_or?: GraphQLTypes["maps_aggregate_bool_exp_bool_or"] | undefined,
	count?: GraphQLTypes["maps_aggregate_bool_exp_count"] | undefined
};
	["maps_aggregate_bool_exp_bool_and"]: {
		arguments: GraphQLTypes["maps_select_column_maps_aggregate_bool_exp_bool_and_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["maps_bool_exp"] | undefined,
	predicate: GraphQLTypes["Boolean_comparison_exp"]
};
	["maps_aggregate_bool_exp_bool_or"]: {
		arguments: GraphQLTypes["maps_select_column_maps_aggregate_bool_exp_bool_or_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["maps_bool_exp"] | undefined,
	predicate: GraphQLTypes["Boolean_comparison_exp"]
};
	["maps_aggregate_bool_exp_count"]: {
		arguments?: Array<GraphQLTypes["maps_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["maps_bool_exp"] | undefined,
	predicate: GraphQLTypes["Int_comparison_exp"]
};
	/** aggregate fields of "maps" */
["maps_aggregate_fields"]: {
	__typename: "maps_aggregate_fields",
	count: number,
	max?: GraphQLTypes["maps_max_fields"] | undefined,
	min?: GraphQLTypes["maps_min_fields"] | undefined
};
	/** order by aggregate values of table "maps" */
["maps_aggregate_order_by"]: {
		count?: GraphQLTypes["order_by"] | undefined,
	max?: GraphQLTypes["maps_max_order_by"] | undefined,
	min?: GraphQLTypes["maps_min_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "maps" */
["maps_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["maps_insert_input"]>,
	/** upsert condition */
	on_conflict?: GraphQLTypes["maps_on_conflict"] | undefined
};
	/** Boolean expression to filter rows from the table "maps". All fields are combined with a logical 'AND'. */
["maps_bool_exp"]: {
		_and?: Array<GraphQLTypes["maps_bool_exp"]> | undefined,
	_not?: GraphQLTypes["maps_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["maps_bool_exp"]> | undefined,
	active_pool?: GraphQLTypes["Boolean_comparison_exp"] | undefined,
	e_match_type?: GraphQLTypes["e_match_types_bool_exp"] | undefined,
	id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	match_maps?: GraphQLTypes["match_maps_bool_exp"] | undefined,
	match_maps_aggregate?: GraphQLTypes["match_maps_aggregate_bool_exp"] | undefined,
	match_veto_picks?: GraphQLTypes["match_veto_picks_bool_exp"] | undefined,
	match_veto_picks_aggregate?: GraphQLTypes["match_veto_picks_aggregate_bool_exp"] | undefined,
	name?: GraphQLTypes["String_comparison_exp"] | undefined,
	type?: GraphQLTypes["e_match_types_enum_comparison_exp"] | undefined,
	workshop_map_id?: GraphQLTypes["String_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "maps" */
["maps_constraint"]: maps_constraint;
	/** input type for inserting data into table "maps" */
["maps_insert_input"]: {
		active_pool?: boolean | undefined,
	e_match_type?: GraphQLTypes["e_match_types_obj_rel_insert_input"] | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match_maps?: GraphQLTypes["match_maps_arr_rel_insert_input"] | undefined,
	match_veto_picks?: GraphQLTypes["match_veto_picks_arr_rel_insert_input"] | undefined,
	name?: string | undefined,
	type?: GraphQLTypes["e_match_types_enum"] | undefined,
	workshop_map_id?: string | undefined
};
	/** aggregate max on columns */
["maps_max_fields"]: {
	__typename: "maps_max_fields",
	id?: GraphQLTypes["uuid"] | undefined,
	name?: string | undefined,
	workshop_map_id?: string | undefined
};
	/** order by max() on columns of table "maps" */
["maps_max_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	name?: GraphQLTypes["order_by"] | undefined,
	workshop_map_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["maps_min_fields"]: {
	__typename: "maps_min_fields",
	id?: GraphQLTypes["uuid"] | undefined,
	name?: string | undefined,
	workshop_map_id?: string | undefined
};
	/** order by min() on columns of table "maps" */
["maps_min_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	name?: GraphQLTypes["order_by"] | undefined,
	workshop_map_id?: GraphQLTypes["order_by"] | undefined
};
	/** response of any mutation on the table "maps" */
["maps_mutation_response"]: {
	__typename: "maps_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["maps"]>
};
	/** input type for inserting object relation for remote table "maps" */
["maps_obj_rel_insert_input"]: {
		data: GraphQLTypes["maps_insert_input"],
	/** upsert condition */
	on_conflict?: GraphQLTypes["maps_on_conflict"] | undefined
};
	/** on_conflict condition type for table "maps" */
["maps_on_conflict"]: {
		constraint: GraphQLTypes["maps_constraint"],
	update_columns: Array<GraphQLTypes["maps_update_column"]>,
	where?: GraphQLTypes["maps_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "maps". */
["maps_order_by"]: {
		active_pool?: GraphQLTypes["order_by"] | undefined,
	e_match_type?: GraphQLTypes["e_match_types_order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	match_maps_aggregate?: GraphQLTypes["match_maps_aggregate_order_by"] | undefined,
	match_veto_picks_aggregate?: GraphQLTypes["match_veto_picks_aggregate_order_by"] | undefined,
	name?: GraphQLTypes["order_by"] | undefined,
	type?: GraphQLTypes["order_by"] | undefined,
	workshop_map_id?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: maps */
["maps_pk_columns_input"]: {
		id: GraphQLTypes["uuid"]
};
	/** select columns of table "maps" */
["maps_select_column"]: maps_select_column;
	/** select "maps_aggregate_bool_exp_bool_and_arguments_columns" columns of table "maps" */
["maps_select_column_maps_aggregate_bool_exp_bool_and_arguments_columns"]: maps_select_column_maps_aggregate_bool_exp_bool_and_arguments_columns;
	/** select "maps_aggregate_bool_exp_bool_or_arguments_columns" columns of table "maps" */
["maps_select_column_maps_aggregate_bool_exp_bool_or_arguments_columns"]: maps_select_column_maps_aggregate_bool_exp_bool_or_arguments_columns;
	/** input type for updating data in table "maps" */
["maps_set_input"]: {
		active_pool?: boolean | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	name?: string | undefined,
	type?: GraphQLTypes["e_match_types_enum"] | undefined,
	workshop_map_id?: string | undefined
};
	/** Streaming cursor of the table "maps" */
["maps_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["maps_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["maps_stream_cursor_value_input"]: {
		active_pool?: boolean | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	name?: string | undefined,
	type?: GraphQLTypes["e_match_types_enum"] | undefined,
	workshop_map_id?: string | undefined
};
	/** update columns of table "maps" */
["maps_update_column"]: maps_update_column;
	["maps_updates"]: {
		/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["maps_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["maps_bool_exp"]
};
	/** relational table for assigning a players to a match and lineup */
["match_lineup_players"]: {
	__typename: "match_lineup_players",
	captain: boolean,
	discord_id?: string | undefined,
	id: GraphQLTypes["uuid"],
	/** An object relationship */
	lineup: GraphQLTypes["match_lineups"],
	match_lineup_id: GraphQLTypes["uuid"],
	placeholder_name?: string | undefined,
	/** An object relationship */
	player?: GraphQLTypes["players"] | undefined,
	steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** aggregated selection of "match_lineup_players" */
["match_lineup_players_aggregate"]: {
	__typename: "match_lineup_players_aggregate",
	aggregate?: GraphQLTypes["match_lineup_players_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["match_lineup_players"]>
};
	["match_lineup_players_aggregate_bool_exp"]: {
		bool_and?: GraphQLTypes["match_lineup_players_aggregate_bool_exp_bool_and"] | undefined,
	bool_or?: GraphQLTypes["match_lineup_players_aggregate_bool_exp_bool_or"] | undefined,
	count?: GraphQLTypes["match_lineup_players_aggregate_bool_exp_count"] | undefined
};
	["match_lineup_players_aggregate_bool_exp_bool_and"]: {
		arguments: GraphQLTypes["match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_and_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["match_lineup_players_bool_exp"] | undefined,
	predicate: GraphQLTypes["Boolean_comparison_exp"]
};
	["match_lineup_players_aggregate_bool_exp_bool_or"]: {
		arguments: GraphQLTypes["match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_or_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["match_lineup_players_bool_exp"] | undefined,
	predicate: GraphQLTypes["Boolean_comparison_exp"]
};
	["match_lineup_players_aggregate_bool_exp_count"]: {
		arguments?: Array<GraphQLTypes["match_lineup_players_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["match_lineup_players_bool_exp"] | undefined,
	predicate: GraphQLTypes["Int_comparison_exp"]
};
	/** aggregate fields of "match_lineup_players" */
["match_lineup_players_aggregate_fields"]: {
	__typename: "match_lineup_players_aggregate_fields",
	avg?: GraphQLTypes["match_lineup_players_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["match_lineup_players_max_fields"] | undefined,
	min?: GraphQLTypes["match_lineup_players_min_fields"] | undefined,
	stddev?: GraphQLTypes["match_lineup_players_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["match_lineup_players_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["match_lineup_players_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["match_lineup_players_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["match_lineup_players_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["match_lineup_players_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["match_lineup_players_variance_fields"] | undefined
};
	/** order by aggregate values of table "match_lineup_players" */
["match_lineup_players_aggregate_order_by"]: {
		avg?: GraphQLTypes["match_lineup_players_avg_order_by"] | undefined,
	count?: GraphQLTypes["order_by"] | undefined,
	max?: GraphQLTypes["match_lineup_players_max_order_by"] | undefined,
	min?: GraphQLTypes["match_lineup_players_min_order_by"] | undefined,
	stddev?: GraphQLTypes["match_lineup_players_stddev_order_by"] | undefined,
	stddev_pop?: GraphQLTypes["match_lineup_players_stddev_pop_order_by"] | undefined,
	stddev_samp?: GraphQLTypes["match_lineup_players_stddev_samp_order_by"] | undefined,
	sum?: GraphQLTypes["match_lineup_players_sum_order_by"] | undefined,
	var_pop?: GraphQLTypes["match_lineup_players_var_pop_order_by"] | undefined,
	var_samp?: GraphQLTypes["match_lineup_players_var_samp_order_by"] | undefined,
	variance?: GraphQLTypes["match_lineup_players_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "match_lineup_players" */
["match_lineup_players_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["match_lineup_players_insert_input"]>,
	/** upsert condition */
	on_conflict?: GraphQLTypes["match_lineup_players_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["match_lineup_players_avg_fields"]: {
	__typename: "match_lineup_players_avg_fields",
	steam_id?: number | undefined
};
	/** order by avg() on columns of table "match_lineup_players" */
["match_lineup_players_avg_order_by"]: {
		steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "match_lineup_players". All fields are combined with a logical 'AND'. */
["match_lineup_players_bool_exp"]: {
		_and?: Array<GraphQLTypes["match_lineup_players_bool_exp"]> | undefined,
	_not?: GraphQLTypes["match_lineup_players_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["match_lineup_players_bool_exp"]> | undefined,
	captain?: GraphQLTypes["Boolean_comparison_exp"] | undefined,
	discord_id?: GraphQLTypes["String_comparison_exp"] | undefined,
	id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	lineup?: GraphQLTypes["match_lineups_bool_exp"] | undefined,
	match_lineup_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	placeholder_name?: GraphQLTypes["String_comparison_exp"] | undefined,
	player?: GraphQLTypes["players_bool_exp"] | undefined,
	steam_id?: GraphQLTypes["bigint_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "match_lineup_players" */
["match_lineup_players_constraint"]: match_lineup_players_constraint;
	/** input type for incrementing numeric columns in table "match_lineup_players" */
["match_lineup_players_inc_input"]: {
		steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** input type for inserting data into table "match_lineup_players" */
["match_lineup_players_insert_input"]: {
		captain?: boolean | undefined,
	discord_id?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	lineup?: GraphQLTypes["match_lineups_obj_rel_insert_input"] | undefined,
	match_lineup_id?: GraphQLTypes["uuid"] | undefined,
	placeholder_name?: string | undefined,
	player?: GraphQLTypes["players_obj_rel_insert_input"] | undefined,
	steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** aggregate max on columns */
["match_lineup_players_max_fields"]: {
	__typename: "match_lineup_players_max_fields",
	discord_id?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match_lineup_id?: GraphQLTypes["uuid"] | undefined,
	placeholder_name?: string | undefined,
	steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** order by max() on columns of table "match_lineup_players" */
["match_lineup_players_max_order_by"]: {
		discord_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	match_lineup_id?: GraphQLTypes["order_by"] | undefined,
	placeholder_name?: GraphQLTypes["order_by"] | undefined,
	steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["match_lineup_players_min_fields"]: {
	__typename: "match_lineup_players_min_fields",
	discord_id?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match_lineup_id?: GraphQLTypes["uuid"] | undefined,
	placeholder_name?: string | undefined,
	steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** order by min() on columns of table "match_lineup_players" */
["match_lineup_players_min_order_by"]: {
		discord_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	match_lineup_id?: GraphQLTypes["order_by"] | undefined,
	placeholder_name?: GraphQLTypes["order_by"] | undefined,
	steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** response of any mutation on the table "match_lineup_players" */
["match_lineup_players_mutation_response"]: {
	__typename: "match_lineup_players_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["match_lineup_players"]>
};
	/** on_conflict condition type for table "match_lineup_players" */
["match_lineup_players_on_conflict"]: {
		constraint: GraphQLTypes["match_lineup_players_constraint"],
	update_columns: Array<GraphQLTypes["match_lineup_players_update_column"]>,
	where?: GraphQLTypes["match_lineup_players_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "match_lineup_players". */
["match_lineup_players_order_by"]: {
		captain?: GraphQLTypes["order_by"] | undefined,
	discord_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	lineup?: GraphQLTypes["match_lineups_order_by"] | undefined,
	match_lineup_id?: GraphQLTypes["order_by"] | undefined,
	placeholder_name?: GraphQLTypes["order_by"] | undefined,
	player?: GraphQLTypes["players_order_by"] | undefined,
	steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: match_lineup_players */
["match_lineup_players_pk_columns_input"]: {
		id: GraphQLTypes["uuid"]
};
	/** select columns of table "match_lineup_players" */
["match_lineup_players_select_column"]: match_lineup_players_select_column;
	/** select "match_lineup_players_aggregate_bool_exp_bool_and_arguments_columns" columns of table "match_lineup_players" */
["match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_and_arguments_columns"]: match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_and_arguments_columns;
	/** select "match_lineup_players_aggregate_bool_exp_bool_or_arguments_columns" columns of table "match_lineup_players" */
["match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_or_arguments_columns"]: match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_or_arguments_columns;
	/** input type for updating data in table "match_lineup_players" */
["match_lineup_players_set_input"]: {
		captain?: boolean | undefined,
	discord_id?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match_lineup_id?: GraphQLTypes["uuid"] | undefined,
	placeholder_name?: string | undefined,
	steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** aggregate stddev on columns */
["match_lineup_players_stddev_fields"]: {
	__typename: "match_lineup_players_stddev_fields",
	steam_id?: number | undefined
};
	/** order by stddev() on columns of table "match_lineup_players" */
["match_lineup_players_stddev_order_by"]: {
		steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["match_lineup_players_stddev_pop_fields"]: {
	__typename: "match_lineup_players_stddev_pop_fields",
	steam_id?: number | undefined
};
	/** order by stddev_pop() on columns of table "match_lineup_players" */
["match_lineup_players_stddev_pop_order_by"]: {
		steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["match_lineup_players_stddev_samp_fields"]: {
	__typename: "match_lineup_players_stddev_samp_fields",
	steam_id?: number | undefined
};
	/** order by stddev_samp() on columns of table "match_lineup_players" */
["match_lineup_players_stddev_samp_order_by"]: {
		steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "match_lineup_players" */
["match_lineup_players_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["match_lineup_players_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["match_lineup_players_stream_cursor_value_input"]: {
		captain?: boolean | undefined,
	discord_id?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match_lineup_id?: GraphQLTypes["uuid"] | undefined,
	placeholder_name?: string | undefined,
	steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** aggregate sum on columns */
["match_lineup_players_sum_fields"]: {
	__typename: "match_lineup_players_sum_fields",
	steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** order by sum() on columns of table "match_lineup_players" */
["match_lineup_players_sum_order_by"]: {
		steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** update columns of table "match_lineup_players" */
["match_lineup_players_update_column"]: match_lineup_players_update_column;
	["match_lineup_players_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["match_lineup_players_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["match_lineup_players_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["match_lineup_players_bool_exp"]
};
	/** aggregate var_pop on columns */
["match_lineup_players_var_pop_fields"]: {
	__typename: "match_lineup_players_var_pop_fields",
	steam_id?: number | undefined
};
	/** order by var_pop() on columns of table "match_lineup_players" */
["match_lineup_players_var_pop_order_by"]: {
		steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["match_lineup_players_var_samp_fields"]: {
	__typename: "match_lineup_players_var_samp_fields",
	steam_id?: number | undefined
};
	/** order by var_samp() on columns of table "match_lineup_players" */
["match_lineup_players_var_samp_order_by"]: {
		steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["match_lineup_players_variance_fields"]: {
	__typename: "match_lineup_players_variance_fields",
	steam_id?: number | undefined
};
	/** order by variance() on columns of table "match_lineup_players" */
["match_lineup_players_variance_order_by"]: {
		steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** relational table for assigning a team to a match and lineup */
["match_lineups"]: {
	__typename: "match_lineups",
	/** An object relationship */
	captain?: GraphQLTypes["v_match_captains"] | undefined,
	/** An object relationship */
	coach?: GraphQLTypes["players"] | undefined,
	coach_steam_id?: GraphQLTypes["bigint"] | undefined,
	id: GraphQLTypes["uuid"],
	/** An array relationship */
	lineup_players: Array<GraphQLTypes["match_lineup_players"]>,
	/** An aggregate relationship */
	lineup_players_aggregate: GraphQLTypes["match_lineup_players_aggregate"],
	/** An object relationship */
	match: GraphQLTypes["matches"],
	match_id: GraphQLTypes["uuid"],
	/** An array relationship */
	match_veto_picks: Array<GraphQLTypes["match_veto_picks"]>,
	/** An aggregate relationship */
	match_veto_picks_aggregate: GraphQLTypes["match_veto_picks_aggregate"],
	/** A computed field, executes function "get_team_name" */
	name?: string | undefined,
	/** An object relationship */
	player?: GraphQLTypes["players"] | undefined,
	/** An object relationship */
	team?: GraphQLTypes["teams"] | undefined,
	team_id?: GraphQLTypes["uuid"] | undefined
};
	/** aggregated selection of "match_lineups" */
["match_lineups_aggregate"]: {
	__typename: "match_lineups_aggregate",
	aggregate?: GraphQLTypes["match_lineups_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["match_lineups"]>
};
	["match_lineups_aggregate_bool_exp"]: {
		count?: GraphQLTypes["match_lineups_aggregate_bool_exp_count"] | undefined
};
	["match_lineups_aggregate_bool_exp_count"]: {
		arguments?: Array<GraphQLTypes["match_lineups_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["match_lineups_bool_exp"] | undefined,
	predicate: GraphQLTypes["Int_comparison_exp"]
};
	/** aggregate fields of "match_lineups" */
["match_lineups_aggregate_fields"]: {
	__typename: "match_lineups_aggregate_fields",
	avg?: GraphQLTypes["match_lineups_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["match_lineups_max_fields"] | undefined,
	min?: GraphQLTypes["match_lineups_min_fields"] | undefined,
	stddev?: GraphQLTypes["match_lineups_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["match_lineups_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["match_lineups_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["match_lineups_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["match_lineups_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["match_lineups_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["match_lineups_variance_fields"] | undefined
};
	/** order by aggregate values of table "match_lineups" */
["match_lineups_aggregate_order_by"]: {
		avg?: GraphQLTypes["match_lineups_avg_order_by"] | undefined,
	count?: GraphQLTypes["order_by"] | undefined,
	max?: GraphQLTypes["match_lineups_max_order_by"] | undefined,
	min?: GraphQLTypes["match_lineups_min_order_by"] | undefined,
	stddev?: GraphQLTypes["match_lineups_stddev_order_by"] | undefined,
	stddev_pop?: GraphQLTypes["match_lineups_stddev_pop_order_by"] | undefined,
	stddev_samp?: GraphQLTypes["match_lineups_stddev_samp_order_by"] | undefined,
	sum?: GraphQLTypes["match_lineups_sum_order_by"] | undefined,
	var_pop?: GraphQLTypes["match_lineups_var_pop_order_by"] | undefined,
	var_samp?: GraphQLTypes["match_lineups_var_samp_order_by"] | undefined,
	variance?: GraphQLTypes["match_lineups_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "match_lineups" */
["match_lineups_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["match_lineups_insert_input"]>,
	/** upsert condition */
	on_conflict?: GraphQLTypes["match_lineups_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["match_lineups_avg_fields"]: {
	__typename: "match_lineups_avg_fields",
	coach_steam_id?: number | undefined
};
	/** order by avg() on columns of table "match_lineups" */
["match_lineups_avg_order_by"]: {
		coach_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "match_lineups". All fields are combined with a logical 'AND'. */
["match_lineups_bool_exp"]: {
		_and?: Array<GraphQLTypes["match_lineups_bool_exp"]> | undefined,
	_not?: GraphQLTypes["match_lineups_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["match_lineups_bool_exp"]> | undefined,
	captain?: GraphQLTypes["v_match_captains_bool_exp"] | undefined,
	coach?: GraphQLTypes["players_bool_exp"] | undefined,
	coach_steam_id?: GraphQLTypes["bigint_comparison_exp"] | undefined,
	id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	lineup_players?: GraphQLTypes["match_lineup_players_bool_exp"] | undefined,
	lineup_players_aggregate?: GraphQLTypes["match_lineup_players_aggregate_bool_exp"] | undefined,
	match?: GraphQLTypes["matches_bool_exp"] | undefined,
	match_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	match_veto_picks?: GraphQLTypes["match_veto_picks_bool_exp"] | undefined,
	match_veto_picks_aggregate?: GraphQLTypes["match_veto_picks_aggregate_bool_exp"] | undefined,
	name?: GraphQLTypes["String_comparison_exp"] | undefined,
	player?: GraphQLTypes["players_bool_exp"] | undefined,
	team?: GraphQLTypes["teams_bool_exp"] | undefined,
	team_id?: GraphQLTypes["uuid_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "match_lineups" */
["match_lineups_constraint"]: match_lineups_constraint;
	/** input type for incrementing numeric columns in table "match_lineups" */
["match_lineups_inc_input"]: {
		coach_steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** input type for inserting data into table "match_lineups" */
["match_lineups_insert_input"]: {
		captain?: GraphQLTypes["v_match_captains_obj_rel_insert_input"] | undefined,
	coach?: GraphQLTypes["players_obj_rel_insert_input"] | undefined,
	coach_steam_id?: GraphQLTypes["bigint"] | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	lineup_players?: GraphQLTypes["match_lineup_players_arr_rel_insert_input"] | undefined,
	match?: GraphQLTypes["matches_obj_rel_insert_input"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_veto_picks?: GraphQLTypes["match_veto_picks_arr_rel_insert_input"] | undefined,
	player?: GraphQLTypes["players_obj_rel_insert_input"] | undefined,
	team?: GraphQLTypes["teams_obj_rel_insert_input"] | undefined,
	team_id?: GraphQLTypes["uuid"] | undefined
};
	/** aggregate max on columns */
["match_lineups_max_fields"]: {
	__typename: "match_lineups_max_fields",
	coach_steam_id?: GraphQLTypes["bigint"] | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	/** A computed field, executes function "get_team_name" */
	name?: string | undefined,
	team_id?: GraphQLTypes["uuid"] | undefined
};
	/** order by max() on columns of table "match_lineups" */
["match_lineups_max_order_by"]: {
		coach_steam_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	team_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["match_lineups_min_fields"]: {
	__typename: "match_lineups_min_fields",
	coach_steam_id?: GraphQLTypes["bigint"] | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	/** A computed field, executes function "get_team_name" */
	name?: string | undefined,
	team_id?: GraphQLTypes["uuid"] | undefined
};
	/** order by min() on columns of table "match_lineups" */
["match_lineups_min_order_by"]: {
		coach_steam_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	team_id?: GraphQLTypes["order_by"] | undefined
};
	/** response of any mutation on the table "match_lineups" */
["match_lineups_mutation_response"]: {
	__typename: "match_lineups_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["match_lineups"]>
};
	/** input type for inserting object relation for remote table "match_lineups" */
["match_lineups_obj_rel_insert_input"]: {
		data: GraphQLTypes["match_lineups_insert_input"],
	/** upsert condition */
	on_conflict?: GraphQLTypes["match_lineups_on_conflict"] | undefined
};
	/** on_conflict condition type for table "match_lineups" */
["match_lineups_on_conflict"]: {
		constraint: GraphQLTypes["match_lineups_constraint"],
	update_columns: Array<GraphQLTypes["match_lineups_update_column"]>,
	where?: GraphQLTypes["match_lineups_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "match_lineups". */
["match_lineups_order_by"]: {
		captain?: GraphQLTypes["v_match_captains_order_by"] | undefined,
	coach?: GraphQLTypes["players_order_by"] | undefined,
	coach_steam_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	lineup_players_aggregate?: GraphQLTypes["match_lineup_players_aggregate_order_by"] | undefined,
	match?: GraphQLTypes["matches_order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	match_veto_picks_aggregate?: GraphQLTypes["match_veto_picks_aggregate_order_by"] | undefined,
	name?: GraphQLTypes["order_by"] | undefined,
	player?: GraphQLTypes["players_order_by"] | undefined,
	team?: GraphQLTypes["teams_order_by"] | undefined,
	team_id?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: match_lineups */
["match_lineups_pk_columns_input"]: {
		id: GraphQLTypes["uuid"]
};
	/** select columns of table "match_lineups" */
["match_lineups_select_column"]: match_lineups_select_column;
	/** input type for updating data in table "match_lineups" */
["match_lineups_set_input"]: {
		coach_steam_id?: GraphQLTypes["bigint"] | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	team_id?: GraphQLTypes["uuid"] | undefined
};
	/** aggregate stddev on columns */
["match_lineups_stddev_fields"]: {
	__typename: "match_lineups_stddev_fields",
	coach_steam_id?: number | undefined
};
	/** order by stddev() on columns of table "match_lineups" */
["match_lineups_stddev_order_by"]: {
		coach_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["match_lineups_stddev_pop_fields"]: {
	__typename: "match_lineups_stddev_pop_fields",
	coach_steam_id?: number | undefined
};
	/** order by stddev_pop() on columns of table "match_lineups" */
["match_lineups_stddev_pop_order_by"]: {
		coach_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["match_lineups_stddev_samp_fields"]: {
	__typename: "match_lineups_stddev_samp_fields",
	coach_steam_id?: number | undefined
};
	/** order by stddev_samp() on columns of table "match_lineups" */
["match_lineups_stddev_samp_order_by"]: {
		coach_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "match_lineups" */
["match_lineups_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["match_lineups_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["match_lineups_stream_cursor_value_input"]: {
		coach_steam_id?: GraphQLTypes["bigint"] | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	team_id?: GraphQLTypes["uuid"] | undefined
};
	/** aggregate sum on columns */
["match_lineups_sum_fields"]: {
	__typename: "match_lineups_sum_fields",
	coach_steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** order by sum() on columns of table "match_lineups" */
["match_lineups_sum_order_by"]: {
		coach_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** update columns of table "match_lineups" */
["match_lineups_update_column"]: match_lineups_update_column;
	["match_lineups_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["match_lineups_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["match_lineups_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["match_lineups_bool_exp"]
};
	/** aggregate var_pop on columns */
["match_lineups_var_pop_fields"]: {
	__typename: "match_lineups_var_pop_fields",
	coach_steam_id?: number | undefined
};
	/** order by var_pop() on columns of table "match_lineups" */
["match_lineups_var_pop_order_by"]: {
		coach_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["match_lineups_var_samp_fields"]: {
	__typename: "match_lineups_var_samp_fields",
	coach_steam_id?: number | undefined
};
	/** order by var_samp() on columns of table "match_lineups" */
["match_lineups_var_samp_order_by"]: {
		coach_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["match_lineups_variance_fields"]: {
	__typename: "match_lineups_variance_fields",
	coach_steam_id?: number | undefined
};
	/** order by variance() on columns of table "match_lineups" */
["match_lineups_variance_order_by"]: {
		coach_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** columns and relationships of "match_map_demos" */
["match_map_demos"]: {
	__typename: "match_map_demos",
	file: string,
	id: GraphQLTypes["uuid"],
	match_id: GraphQLTypes["uuid"],
	match_map_id: GraphQLTypes["uuid"],
	size: number
};
	/** aggregated selection of "match_map_demos" */
["match_map_demos_aggregate"]: {
	__typename: "match_map_demos_aggregate",
	aggregate?: GraphQLTypes["match_map_demos_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["match_map_demos"]>
};
	/** aggregate fields of "match_map_demos" */
["match_map_demos_aggregate_fields"]: {
	__typename: "match_map_demos_aggregate_fields",
	avg?: GraphQLTypes["match_map_demos_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["match_map_demos_max_fields"] | undefined,
	min?: GraphQLTypes["match_map_demos_min_fields"] | undefined,
	stddev?: GraphQLTypes["match_map_demos_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["match_map_demos_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["match_map_demos_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["match_map_demos_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["match_map_demos_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["match_map_demos_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["match_map_demos_variance_fields"] | undefined
};
	/** aggregate avg on columns */
["match_map_demos_avg_fields"]: {
	__typename: "match_map_demos_avg_fields",
	size?: number | undefined
};
	/** Boolean expression to filter rows from the table "match_map_demos". All fields are combined with a logical 'AND'. */
["match_map_demos_bool_exp"]: {
		_and?: Array<GraphQLTypes["match_map_demos_bool_exp"]> | undefined,
	_not?: GraphQLTypes["match_map_demos_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["match_map_demos_bool_exp"]> | undefined,
	file?: GraphQLTypes["String_comparison_exp"] | undefined,
	id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	match_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	match_map_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	size?: GraphQLTypes["Int_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "match_map_demos" */
["match_map_demos_constraint"]: match_map_demos_constraint;
	/** input type for incrementing numeric columns in table "match_map_demos" */
["match_map_demos_inc_input"]: {
		size?: number | undefined
};
	/** input type for inserting data into table "match_map_demos" */
["match_map_demos_insert_input"]: {
		file?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	size?: number | undefined
};
	/** aggregate max on columns */
["match_map_demos_max_fields"]: {
	__typename: "match_map_demos_max_fields",
	file?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	size?: number | undefined
};
	/** aggregate min on columns */
["match_map_demos_min_fields"]: {
	__typename: "match_map_demos_min_fields",
	file?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	size?: number | undefined
};
	/** response of any mutation on the table "match_map_demos" */
["match_map_demos_mutation_response"]: {
	__typename: "match_map_demos_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["match_map_demos"]>
};
	/** on_conflict condition type for table "match_map_demos" */
["match_map_demos_on_conflict"]: {
		constraint: GraphQLTypes["match_map_demos_constraint"],
	update_columns: Array<GraphQLTypes["match_map_demos_update_column"]>,
	where?: GraphQLTypes["match_map_demos_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "match_map_demos". */
["match_map_demos_order_by"]: {
		file?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	match_map_id?: GraphQLTypes["order_by"] | undefined,
	size?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: match_map_demos */
["match_map_demos_pk_columns_input"]: {
		id: GraphQLTypes["uuid"]
};
	/** select columns of table "match_map_demos" */
["match_map_demos_select_column"]: match_map_demos_select_column;
	/** input type for updating data in table "match_map_demos" */
["match_map_demos_set_input"]: {
		file?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	size?: number | undefined
};
	/** aggregate stddev on columns */
["match_map_demos_stddev_fields"]: {
	__typename: "match_map_demos_stddev_fields",
	size?: number | undefined
};
	/** aggregate stddev_pop on columns */
["match_map_demos_stddev_pop_fields"]: {
	__typename: "match_map_demos_stddev_pop_fields",
	size?: number | undefined
};
	/** aggregate stddev_samp on columns */
["match_map_demos_stddev_samp_fields"]: {
	__typename: "match_map_demos_stddev_samp_fields",
	size?: number | undefined
};
	/** Streaming cursor of the table "match_map_demos" */
["match_map_demos_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["match_map_demos_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["match_map_demos_stream_cursor_value_input"]: {
		file?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	size?: number | undefined
};
	/** aggregate sum on columns */
["match_map_demos_sum_fields"]: {
	__typename: "match_map_demos_sum_fields",
	size?: number | undefined
};
	/** update columns of table "match_map_demos" */
["match_map_demos_update_column"]: match_map_demos_update_column;
	["match_map_demos_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["match_map_demos_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["match_map_demos_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["match_map_demos_bool_exp"]
};
	/** aggregate var_pop on columns */
["match_map_demos_var_pop_fields"]: {
	__typename: "match_map_demos_var_pop_fields",
	size?: number | undefined
};
	/** aggregate var_samp on columns */
["match_map_demos_var_samp_fields"]: {
	__typename: "match_map_demos_var_samp_fields",
	size?: number | undefined
};
	/** aggregate variance on columns */
["match_map_demos_variance_fields"]: {
	__typename: "match_map_demos_variance_fields",
	size?: number | undefined
};
	/** columns and relationships of "match_map_rounds" */
["match_map_rounds"]: {
	__typename: "match_map_rounds",
	backup_file?: string | undefined,
	id: GraphQLTypes["uuid"],
	/** An array relationship */
	kills: Array<GraphQLTypes["player_kills"]>,
	/** An aggregate relationship */
	kills_aggregate: GraphQLTypes["player_kills_aggregate"],
	lineup_1_money: number,
	lineup_1_score: number,
	lineup_1_timeouts_available: number,
	lineup_2_money: number,
	lineup_2_score: number,
	lineup_2_timeouts_available: number,
	/** An object relationship */
	match_map: GraphQLTypes["match_maps"],
	match_map_id: GraphQLTypes["uuid"],
	round: number,
	time: GraphQLTypes["timestamptz"]
};
	/** aggregated selection of "match_map_rounds" */
["match_map_rounds_aggregate"]: {
	__typename: "match_map_rounds_aggregate",
	aggregate?: GraphQLTypes["match_map_rounds_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["match_map_rounds"]>
};
	["match_map_rounds_aggregate_bool_exp"]: {
		count?: GraphQLTypes["match_map_rounds_aggregate_bool_exp_count"] | undefined
};
	["match_map_rounds_aggregate_bool_exp_count"]: {
		arguments?: Array<GraphQLTypes["match_map_rounds_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["match_map_rounds_bool_exp"] | undefined,
	predicate: GraphQLTypes["Int_comparison_exp"]
};
	/** aggregate fields of "match_map_rounds" */
["match_map_rounds_aggregate_fields"]: {
	__typename: "match_map_rounds_aggregate_fields",
	avg?: GraphQLTypes["match_map_rounds_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["match_map_rounds_max_fields"] | undefined,
	min?: GraphQLTypes["match_map_rounds_min_fields"] | undefined,
	stddev?: GraphQLTypes["match_map_rounds_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["match_map_rounds_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["match_map_rounds_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["match_map_rounds_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["match_map_rounds_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["match_map_rounds_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["match_map_rounds_variance_fields"] | undefined
};
	/** order by aggregate values of table "match_map_rounds" */
["match_map_rounds_aggregate_order_by"]: {
		avg?: GraphQLTypes["match_map_rounds_avg_order_by"] | undefined,
	count?: GraphQLTypes["order_by"] | undefined,
	max?: GraphQLTypes["match_map_rounds_max_order_by"] | undefined,
	min?: GraphQLTypes["match_map_rounds_min_order_by"] | undefined,
	stddev?: GraphQLTypes["match_map_rounds_stddev_order_by"] | undefined,
	stddev_pop?: GraphQLTypes["match_map_rounds_stddev_pop_order_by"] | undefined,
	stddev_samp?: GraphQLTypes["match_map_rounds_stddev_samp_order_by"] | undefined,
	sum?: GraphQLTypes["match_map_rounds_sum_order_by"] | undefined,
	var_pop?: GraphQLTypes["match_map_rounds_var_pop_order_by"] | undefined,
	var_samp?: GraphQLTypes["match_map_rounds_var_samp_order_by"] | undefined,
	variance?: GraphQLTypes["match_map_rounds_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "match_map_rounds" */
["match_map_rounds_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["match_map_rounds_insert_input"]>,
	/** upsert condition */
	on_conflict?: GraphQLTypes["match_map_rounds_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["match_map_rounds_avg_fields"]: {
	__typename: "match_map_rounds_avg_fields",
	lineup_1_money?: number | undefined,
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	lineup_2_money?: number | undefined,
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	round?: number | undefined
};
	/** order by avg() on columns of table "match_map_rounds" */
["match_map_rounds_avg_order_by"]: {
		lineup_1_money?: GraphQLTypes["order_by"] | undefined,
	lineup_1_score?: GraphQLTypes["order_by"] | undefined,
	lineup_1_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	lineup_2_money?: GraphQLTypes["order_by"] | undefined,
	lineup_2_score?: GraphQLTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "match_map_rounds". All fields are combined with a logical 'AND'. */
["match_map_rounds_bool_exp"]: {
		_and?: Array<GraphQLTypes["match_map_rounds_bool_exp"]> | undefined,
	_not?: GraphQLTypes["match_map_rounds_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["match_map_rounds_bool_exp"]> | undefined,
	backup_file?: GraphQLTypes["String_comparison_exp"] | undefined,
	id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	kills?: GraphQLTypes["player_kills_bool_exp"] | undefined,
	kills_aggregate?: GraphQLTypes["player_kills_aggregate_bool_exp"] | undefined,
	lineup_1_money?: GraphQLTypes["Int_comparison_exp"] | undefined,
	lineup_1_score?: GraphQLTypes["Int_comparison_exp"] | undefined,
	lineup_1_timeouts_available?: GraphQLTypes["Int_comparison_exp"] | undefined,
	lineup_2_money?: GraphQLTypes["Int_comparison_exp"] | undefined,
	lineup_2_score?: GraphQLTypes["Int_comparison_exp"] | undefined,
	lineup_2_timeouts_available?: GraphQLTypes["Int_comparison_exp"] | undefined,
	match_map?: GraphQLTypes["match_maps_bool_exp"] | undefined,
	match_map_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	round?: GraphQLTypes["Int_comparison_exp"] | undefined,
	time?: GraphQLTypes["timestamptz_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "match_map_rounds" */
["match_map_rounds_constraint"]: match_map_rounds_constraint;
	/** input type for incrementing numeric columns in table "match_map_rounds" */
["match_map_rounds_inc_input"]: {
		lineup_1_money?: number | undefined,
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	lineup_2_money?: number | undefined,
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	round?: number | undefined
};
	/** input type for inserting data into table "match_map_rounds" */
["match_map_rounds_insert_input"]: {
		backup_file?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	kills?: GraphQLTypes["player_kills_arr_rel_insert_input"] | undefined,
	lineup_1_money?: number | undefined,
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	lineup_2_money?: number | undefined,
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	match_map?: GraphQLTypes["match_maps_obj_rel_insert_input"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	round?: number | undefined,
	time?: GraphQLTypes["timestamptz"] | undefined
};
	/** aggregate max on columns */
["match_map_rounds_max_fields"]: {
	__typename: "match_map_rounds_max_fields",
	backup_file?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	lineup_1_money?: number | undefined,
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	lineup_2_money?: number | undefined,
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	round?: number | undefined,
	time?: GraphQLTypes["timestamptz"] | undefined
};
	/** order by max() on columns of table "match_map_rounds" */
["match_map_rounds_max_order_by"]: {
		backup_file?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	lineup_1_money?: GraphQLTypes["order_by"] | undefined,
	lineup_1_score?: GraphQLTypes["order_by"] | undefined,
	lineup_1_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	lineup_2_money?: GraphQLTypes["order_by"] | undefined,
	lineup_2_score?: GraphQLTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	match_map_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined,
	time?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["match_map_rounds_min_fields"]: {
	__typename: "match_map_rounds_min_fields",
	backup_file?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	lineup_1_money?: number | undefined,
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	lineup_2_money?: number | undefined,
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	round?: number | undefined,
	time?: GraphQLTypes["timestamptz"] | undefined
};
	/** order by min() on columns of table "match_map_rounds" */
["match_map_rounds_min_order_by"]: {
		backup_file?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	lineup_1_money?: GraphQLTypes["order_by"] | undefined,
	lineup_1_score?: GraphQLTypes["order_by"] | undefined,
	lineup_1_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	lineup_2_money?: GraphQLTypes["order_by"] | undefined,
	lineup_2_score?: GraphQLTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	match_map_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined,
	time?: GraphQLTypes["order_by"] | undefined
};
	/** response of any mutation on the table "match_map_rounds" */
["match_map_rounds_mutation_response"]: {
	__typename: "match_map_rounds_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["match_map_rounds"]>
};
	/** on_conflict condition type for table "match_map_rounds" */
["match_map_rounds_on_conflict"]: {
		constraint: GraphQLTypes["match_map_rounds_constraint"],
	update_columns: Array<GraphQLTypes["match_map_rounds_update_column"]>,
	where?: GraphQLTypes["match_map_rounds_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "match_map_rounds". */
["match_map_rounds_order_by"]: {
		backup_file?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	kills_aggregate?: GraphQLTypes["player_kills_aggregate_order_by"] | undefined,
	lineup_1_money?: GraphQLTypes["order_by"] | undefined,
	lineup_1_score?: GraphQLTypes["order_by"] | undefined,
	lineup_1_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	lineup_2_money?: GraphQLTypes["order_by"] | undefined,
	lineup_2_score?: GraphQLTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	match_map?: GraphQLTypes["match_maps_order_by"] | undefined,
	match_map_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined,
	time?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: match_map_rounds */
["match_map_rounds_pk_columns_input"]: {
		id: GraphQLTypes["uuid"]
};
	/** select columns of table "match_map_rounds" */
["match_map_rounds_select_column"]: match_map_rounds_select_column;
	/** input type for updating data in table "match_map_rounds" */
["match_map_rounds_set_input"]: {
		backup_file?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	lineup_1_money?: number | undefined,
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	lineup_2_money?: number | undefined,
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	round?: number | undefined,
	time?: GraphQLTypes["timestamptz"] | undefined
};
	/** aggregate stddev on columns */
["match_map_rounds_stddev_fields"]: {
	__typename: "match_map_rounds_stddev_fields",
	lineup_1_money?: number | undefined,
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	lineup_2_money?: number | undefined,
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	round?: number | undefined
};
	/** order by stddev() on columns of table "match_map_rounds" */
["match_map_rounds_stddev_order_by"]: {
		lineup_1_money?: GraphQLTypes["order_by"] | undefined,
	lineup_1_score?: GraphQLTypes["order_by"] | undefined,
	lineup_1_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	lineup_2_money?: GraphQLTypes["order_by"] | undefined,
	lineup_2_score?: GraphQLTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["match_map_rounds_stddev_pop_fields"]: {
	__typename: "match_map_rounds_stddev_pop_fields",
	lineup_1_money?: number | undefined,
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	lineup_2_money?: number | undefined,
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	round?: number | undefined
};
	/** order by stddev_pop() on columns of table "match_map_rounds" */
["match_map_rounds_stddev_pop_order_by"]: {
		lineup_1_money?: GraphQLTypes["order_by"] | undefined,
	lineup_1_score?: GraphQLTypes["order_by"] | undefined,
	lineup_1_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	lineup_2_money?: GraphQLTypes["order_by"] | undefined,
	lineup_2_score?: GraphQLTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["match_map_rounds_stddev_samp_fields"]: {
	__typename: "match_map_rounds_stddev_samp_fields",
	lineup_1_money?: number | undefined,
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	lineup_2_money?: number | undefined,
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	round?: number | undefined
};
	/** order by stddev_samp() on columns of table "match_map_rounds" */
["match_map_rounds_stddev_samp_order_by"]: {
		lineup_1_money?: GraphQLTypes["order_by"] | undefined,
	lineup_1_score?: GraphQLTypes["order_by"] | undefined,
	lineup_1_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	lineup_2_money?: GraphQLTypes["order_by"] | undefined,
	lineup_2_score?: GraphQLTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "match_map_rounds" */
["match_map_rounds_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["match_map_rounds_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["match_map_rounds_stream_cursor_value_input"]: {
		backup_file?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	lineup_1_money?: number | undefined,
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	lineup_2_money?: number | undefined,
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	round?: number | undefined,
	time?: GraphQLTypes["timestamptz"] | undefined
};
	/** aggregate sum on columns */
["match_map_rounds_sum_fields"]: {
	__typename: "match_map_rounds_sum_fields",
	lineup_1_money?: number | undefined,
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	lineup_2_money?: number | undefined,
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	round?: number | undefined
};
	/** order by sum() on columns of table "match_map_rounds" */
["match_map_rounds_sum_order_by"]: {
		lineup_1_money?: GraphQLTypes["order_by"] | undefined,
	lineup_1_score?: GraphQLTypes["order_by"] | undefined,
	lineup_1_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	lineup_2_money?: GraphQLTypes["order_by"] | undefined,
	lineup_2_score?: GraphQLTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** update columns of table "match_map_rounds" */
["match_map_rounds_update_column"]: match_map_rounds_update_column;
	["match_map_rounds_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["match_map_rounds_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["match_map_rounds_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["match_map_rounds_bool_exp"]
};
	/** aggregate var_pop on columns */
["match_map_rounds_var_pop_fields"]: {
	__typename: "match_map_rounds_var_pop_fields",
	lineup_1_money?: number | undefined,
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	lineup_2_money?: number | undefined,
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	round?: number | undefined
};
	/** order by var_pop() on columns of table "match_map_rounds" */
["match_map_rounds_var_pop_order_by"]: {
		lineup_1_money?: GraphQLTypes["order_by"] | undefined,
	lineup_1_score?: GraphQLTypes["order_by"] | undefined,
	lineup_1_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	lineup_2_money?: GraphQLTypes["order_by"] | undefined,
	lineup_2_score?: GraphQLTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["match_map_rounds_var_samp_fields"]: {
	__typename: "match_map_rounds_var_samp_fields",
	lineup_1_money?: number | undefined,
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	lineup_2_money?: number | undefined,
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	round?: number | undefined
};
	/** order by var_samp() on columns of table "match_map_rounds" */
["match_map_rounds_var_samp_order_by"]: {
		lineup_1_money?: GraphQLTypes["order_by"] | undefined,
	lineup_1_score?: GraphQLTypes["order_by"] | undefined,
	lineup_1_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	lineup_2_money?: GraphQLTypes["order_by"] | undefined,
	lineup_2_score?: GraphQLTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["match_map_rounds_variance_fields"]: {
	__typename: "match_map_rounds_variance_fields",
	lineup_1_money?: number | undefined,
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	lineup_2_money?: number | undefined,
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	round?: number | undefined
};
	/** order by variance() on columns of table "match_map_rounds" */
["match_map_rounds_variance_order_by"]: {
		lineup_1_money?: GraphQLTypes["order_by"] | undefined,
	lineup_1_score?: GraphQLTypes["order_by"] | undefined,
	lineup_1_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	lineup_2_money?: GraphQLTypes["order_by"] | undefined,
	lineup_2_score?: GraphQLTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** columns and relationships of "match_maps" */
["match_maps"]: {
	__typename: "match_maps",
	created_at: GraphQLTypes["timestamptz"],
	/** An object relationship */
	e_match_map_status: GraphQLTypes["e_match_map_status"],
	/** An array relationship */
	flashes: Array<GraphQLTypes["player_flashes"]>,
	/** An aggregate relationship */
	flashes_aggregate: GraphQLTypes["player_flashes_aggregate"],
	id: GraphQLTypes["uuid"],
	/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?: number | undefined,
	lineup_1_side: GraphQLTypes["e_sides_enum"],
	lineup_1_timeouts_available: number,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?: number | undefined,
	lineup_2_side?: GraphQLTypes["e_sides_enum"] | undefined,
	lineup_2_timeouts_available: number,
	/** An object relationship */
	map: GraphQLTypes["maps"],
	map_id: GraphQLTypes["uuid"],
	/** An object relationship */
	match: GraphQLTypes["matches"],
	match_id: GraphQLTypes["uuid"],
	/** An array relationship */
	objectives: Array<GraphQLTypes["player_objectives"]>,
	/** An aggregate relationship */
	objectives_aggregate: GraphQLTypes["player_objectives_aggregate"],
	order: number,
	/** An array relationship */
	player_assists: Array<GraphQLTypes["player_assists"]>,
	/** An aggregate relationship */
	player_assists_aggregate: GraphQLTypes["player_assists_aggregate"],
	/** An array relationship */
	player_damages: Array<GraphQLTypes["player_damages"]>,
	/** An aggregate relationship */
	player_damages_aggregate: GraphQLTypes["player_damages_aggregate"],
	/** An array relationship */
	player_kills: Array<GraphQLTypes["player_kills"]>,
	/** An aggregate relationship */
	player_kills_aggregate: GraphQLTypes["player_kills_aggregate"],
	/** An array relationship */
	player_unused_utilities: Array<GraphQLTypes["player_unused_utility"]>,
	/** An aggregate relationship */
	player_unused_utilities_aggregate: GraphQLTypes["player_unused_utility_aggregate"],
	/** An array relationship */
	rounds: Array<GraphQLTypes["match_map_rounds"]>,
	/** An aggregate relationship */
	rounds_aggregate: GraphQLTypes["match_map_rounds_aggregate"],
	status: GraphQLTypes["e_match_map_status_enum"],
	/** An array relationship */
	utility: Array<GraphQLTypes["player_utility"]>,
	/** An aggregate relationship */
	utility_aggregate: GraphQLTypes["player_utility_aggregate"],
	/** An array relationship */
	vetos: Array<GraphQLTypes["match_veto_picks"]>,
	/** An aggregate relationship */
	vetos_aggregate: GraphQLTypes["match_veto_picks_aggregate"]
};
	/** aggregated selection of "match_maps" */
["match_maps_aggregate"]: {
	__typename: "match_maps_aggregate",
	aggregate?: GraphQLTypes["match_maps_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["match_maps"]>
};
	["match_maps_aggregate_bool_exp"]: {
		count?: GraphQLTypes["match_maps_aggregate_bool_exp_count"] | undefined
};
	["match_maps_aggregate_bool_exp_count"]: {
		arguments?: Array<GraphQLTypes["match_maps_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["match_maps_bool_exp"] | undefined,
	predicate: GraphQLTypes["Int_comparison_exp"]
};
	/** aggregate fields of "match_maps" */
["match_maps_aggregate_fields"]: {
	__typename: "match_maps_aggregate_fields",
	avg?: GraphQLTypes["match_maps_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["match_maps_max_fields"] | undefined,
	min?: GraphQLTypes["match_maps_min_fields"] | undefined,
	stddev?: GraphQLTypes["match_maps_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["match_maps_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["match_maps_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["match_maps_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["match_maps_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["match_maps_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["match_maps_variance_fields"] | undefined
};
	/** order by aggregate values of table "match_maps" */
["match_maps_aggregate_order_by"]: {
		avg?: GraphQLTypes["match_maps_avg_order_by"] | undefined,
	count?: GraphQLTypes["order_by"] | undefined,
	max?: GraphQLTypes["match_maps_max_order_by"] | undefined,
	min?: GraphQLTypes["match_maps_min_order_by"] | undefined,
	stddev?: GraphQLTypes["match_maps_stddev_order_by"] | undefined,
	stddev_pop?: GraphQLTypes["match_maps_stddev_pop_order_by"] | undefined,
	stddev_samp?: GraphQLTypes["match_maps_stddev_samp_order_by"] | undefined,
	sum?: GraphQLTypes["match_maps_sum_order_by"] | undefined,
	var_pop?: GraphQLTypes["match_maps_var_pop_order_by"] | undefined,
	var_samp?: GraphQLTypes["match_maps_var_samp_order_by"] | undefined,
	variance?: GraphQLTypes["match_maps_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "match_maps" */
["match_maps_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["match_maps_insert_input"]>,
	/** upsert condition */
	on_conflict?: GraphQLTypes["match_maps_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["match_maps_avg_fields"]: {
	__typename: "match_maps_avg_fields",
	/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	order?: number | undefined
};
	/** order by avg() on columns of table "match_maps" */
["match_maps_avg_order_by"]: {
		lineup_1_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	order?: GraphQLTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "match_maps". All fields are combined with a logical 'AND'. */
["match_maps_bool_exp"]: {
		_and?: Array<GraphQLTypes["match_maps_bool_exp"]> | undefined,
	_not?: GraphQLTypes["match_maps_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["match_maps_bool_exp"]> | undefined,
	created_at?: GraphQLTypes["timestamptz_comparison_exp"] | undefined,
	e_match_map_status?: GraphQLTypes["e_match_map_status_bool_exp"] | undefined,
	flashes?: GraphQLTypes["player_flashes_bool_exp"] | undefined,
	flashes_aggregate?: GraphQLTypes["player_flashes_aggregate_bool_exp"] | undefined,
	id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	lineup_1_score?: GraphQLTypes["Int_comparison_exp"] | undefined,
	lineup_1_side?: GraphQLTypes["e_sides_enum_comparison_exp"] | undefined,
	lineup_1_timeouts_available?: GraphQLTypes["Int_comparison_exp"] | undefined,
	lineup_2_score?: GraphQLTypes["Int_comparison_exp"] | undefined,
	lineup_2_side?: GraphQLTypes["e_sides_enum_comparison_exp"] | undefined,
	lineup_2_timeouts_available?: GraphQLTypes["Int_comparison_exp"] | undefined,
	map?: GraphQLTypes["maps_bool_exp"] | undefined,
	map_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	match?: GraphQLTypes["matches_bool_exp"] | undefined,
	match_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	objectives?: GraphQLTypes["player_objectives_bool_exp"] | undefined,
	objectives_aggregate?: GraphQLTypes["player_objectives_aggregate_bool_exp"] | undefined,
	order?: GraphQLTypes["Int_comparison_exp"] | undefined,
	player_assists?: GraphQLTypes["player_assists_bool_exp"] | undefined,
	player_assists_aggregate?: GraphQLTypes["player_assists_aggregate_bool_exp"] | undefined,
	player_damages?: GraphQLTypes["player_damages_bool_exp"] | undefined,
	player_damages_aggregate?: GraphQLTypes["player_damages_aggregate_bool_exp"] | undefined,
	player_kills?: GraphQLTypes["player_kills_bool_exp"] | undefined,
	player_kills_aggregate?: GraphQLTypes["player_kills_aggregate_bool_exp"] | undefined,
	player_unused_utilities?: GraphQLTypes["player_unused_utility_bool_exp"] | undefined,
	player_unused_utilities_aggregate?: GraphQLTypes["player_unused_utility_aggregate_bool_exp"] | undefined,
	rounds?: GraphQLTypes["match_map_rounds_bool_exp"] | undefined,
	rounds_aggregate?: GraphQLTypes["match_map_rounds_aggregate_bool_exp"] | undefined,
	status?: GraphQLTypes["e_match_map_status_enum_comparison_exp"] | undefined,
	utility?: GraphQLTypes["player_utility_bool_exp"] | undefined,
	utility_aggregate?: GraphQLTypes["player_utility_aggregate_bool_exp"] | undefined,
	vetos?: GraphQLTypes["match_veto_picks_bool_exp"] | undefined,
	vetos_aggregate?: GraphQLTypes["match_veto_picks_aggregate_bool_exp"] | undefined
};
	/** unique or primary key constraints on table "match_maps" */
["match_maps_constraint"]: match_maps_constraint;
	/** input type for incrementing numeric columns in table "match_maps" */
["match_maps_inc_input"]: {
		lineup_1_timeouts_available?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	order?: number | undefined
};
	/** input type for inserting data into table "match_maps" */
["match_maps_insert_input"]: {
		created_at?: GraphQLTypes["timestamptz"] | undefined,
	e_match_map_status?: GraphQLTypes["e_match_map_status_obj_rel_insert_input"] | undefined,
	flashes?: GraphQLTypes["player_flashes_arr_rel_insert_input"] | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	lineup_1_side?: GraphQLTypes["e_sides_enum"] | undefined,
	lineup_1_timeouts_available?: number | undefined,
	lineup_2_side?: GraphQLTypes["e_sides_enum"] | undefined,
	lineup_2_timeouts_available?: number | undefined,
	map?: GraphQLTypes["maps_obj_rel_insert_input"] | undefined,
	map_id?: GraphQLTypes["uuid"] | undefined,
	match?: GraphQLTypes["matches_obj_rel_insert_input"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	objectives?: GraphQLTypes["player_objectives_arr_rel_insert_input"] | undefined,
	order?: number | undefined,
	player_assists?: GraphQLTypes["player_assists_arr_rel_insert_input"] | undefined,
	player_damages?: GraphQLTypes["player_damages_arr_rel_insert_input"] | undefined,
	player_kills?: GraphQLTypes["player_kills_arr_rel_insert_input"] | undefined,
	player_unused_utilities?: GraphQLTypes["player_unused_utility_arr_rel_insert_input"] | undefined,
	rounds?: GraphQLTypes["match_map_rounds_arr_rel_insert_input"] | undefined,
	status?: GraphQLTypes["e_match_map_status_enum"] | undefined,
	utility?: GraphQLTypes["player_utility_arr_rel_insert_input"] | undefined,
	vetos?: GraphQLTypes["match_veto_picks_arr_rel_insert_input"] | undefined
};
	/** aggregate max on columns */
["match_maps_max_fields"]: {
	__typename: "match_maps_max_fields",
	created_at?: GraphQLTypes["timestamptz"] | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	map_id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	order?: number | undefined
};
	/** order by max() on columns of table "match_maps" */
["match_maps_max_order_by"]: {
		created_at?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	lineup_1_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	map_id?: GraphQLTypes["order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	order?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["match_maps_min_fields"]: {
	__typename: "match_maps_min_fields",
	created_at?: GraphQLTypes["timestamptz"] | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	map_id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	order?: number | undefined
};
	/** order by min() on columns of table "match_maps" */
["match_maps_min_order_by"]: {
		created_at?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	lineup_1_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	map_id?: GraphQLTypes["order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	order?: GraphQLTypes["order_by"] | undefined
};
	/** response of any mutation on the table "match_maps" */
["match_maps_mutation_response"]: {
	__typename: "match_maps_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["match_maps"]>
};
	/** input type for inserting object relation for remote table "match_maps" */
["match_maps_obj_rel_insert_input"]: {
		data: GraphQLTypes["match_maps_insert_input"],
	/** upsert condition */
	on_conflict?: GraphQLTypes["match_maps_on_conflict"] | undefined
};
	/** on_conflict condition type for table "match_maps" */
["match_maps_on_conflict"]: {
		constraint: GraphQLTypes["match_maps_constraint"],
	update_columns: Array<GraphQLTypes["match_maps_update_column"]>,
	where?: GraphQLTypes["match_maps_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "match_maps". */
["match_maps_order_by"]: {
		created_at?: GraphQLTypes["order_by"] | undefined,
	e_match_map_status?: GraphQLTypes["e_match_map_status_order_by"] | undefined,
	flashes_aggregate?: GraphQLTypes["player_flashes_aggregate_order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	lineup_1_score?: GraphQLTypes["order_by"] | undefined,
	lineup_1_side?: GraphQLTypes["order_by"] | undefined,
	lineup_1_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	lineup_2_score?: GraphQLTypes["order_by"] | undefined,
	lineup_2_side?: GraphQLTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	map?: GraphQLTypes["maps_order_by"] | undefined,
	map_id?: GraphQLTypes["order_by"] | undefined,
	match?: GraphQLTypes["matches_order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	objectives_aggregate?: GraphQLTypes["player_objectives_aggregate_order_by"] | undefined,
	order?: GraphQLTypes["order_by"] | undefined,
	player_assists_aggregate?: GraphQLTypes["player_assists_aggregate_order_by"] | undefined,
	player_damages_aggregate?: GraphQLTypes["player_damages_aggregate_order_by"] | undefined,
	player_kills_aggregate?: GraphQLTypes["player_kills_aggregate_order_by"] | undefined,
	player_unused_utilities_aggregate?: GraphQLTypes["player_unused_utility_aggregate_order_by"] | undefined,
	rounds_aggregate?: GraphQLTypes["match_map_rounds_aggregate_order_by"] | undefined,
	status?: GraphQLTypes["order_by"] | undefined,
	utility_aggregate?: GraphQLTypes["player_utility_aggregate_order_by"] | undefined,
	vetos_aggregate?: GraphQLTypes["match_veto_picks_aggregate_order_by"] | undefined
};
	/** primary key columns input for table: match_maps */
["match_maps_pk_columns_input"]: {
		id: GraphQLTypes["uuid"]
};
	/** select columns of table "match_maps" */
["match_maps_select_column"]: match_maps_select_column;
	/** input type for updating data in table "match_maps" */
["match_maps_set_input"]: {
		created_at?: GraphQLTypes["timestamptz"] | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	lineup_1_side?: GraphQLTypes["e_sides_enum"] | undefined,
	lineup_1_timeouts_available?: number | undefined,
	lineup_2_side?: GraphQLTypes["e_sides_enum"] | undefined,
	lineup_2_timeouts_available?: number | undefined,
	map_id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	order?: number | undefined,
	status?: GraphQLTypes["e_match_map_status_enum"] | undefined
};
	/** aggregate stddev on columns */
["match_maps_stddev_fields"]: {
	__typename: "match_maps_stddev_fields",
	/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	order?: number | undefined
};
	/** order by stddev() on columns of table "match_maps" */
["match_maps_stddev_order_by"]: {
		lineup_1_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	order?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["match_maps_stddev_pop_fields"]: {
	__typename: "match_maps_stddev_pop_fields",
	/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	order?: number | undefined
};
	/** order by stddev_pop() on columns of table "match_maps" */
["match_maps_stddev_pop_order_by"]: {
		lineup_1_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	order?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["match_maps_stddev_samp_fields"]: {
	__typename: "match_maps_stddev_samp_fields",
	/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	order?: number | undefined
};
	/** order by stddev_samp() on columns of table "match_maps" */
["match_maps_stddev_samp_order_by"]: {
		lineup_1_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	order?: GraphQLTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "match_maps" */
["match_maps_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["match_maps_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["match_maps_stream_cursor_value_input"]: {
		created_at?: GraphQLTypes["timestamptz"] | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	lineup_1_side?: GraphQLTypes["e_sides_enum"] | undefined,
	lineup_1_timeouts_available?: number | undefined,
	lineup_2_side?: GraphQLTypes["e_sides_enum"] | undefined,
	lineup_2_timeouts_available?: number | undefined,
	map_id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	order?: number | undefined,
	status?: GraphQLTypes["e_match_map_status_enum"] | undefined
};
	/** aggregate sum on columns */
["match_maps_sum_fields"]: {
	__typename: "match_maps_sum_fields",
	/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	order?: number | undefined
};
	/** order by sum() on columns of table "match_maps" */
["match_maps_sum_order_by"]: {
		lineup_1_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	order?: GraphQLTypes["order_by"] | undefined
};
	/** update columns of table "match_maps" */
["match_maps_update_column"]: match_maps_update_column;
	["match_maps_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["match_maps_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["match_maps_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["match_maps_bool_exp"]
};
	/** aggregate var_pop on columns */
["match_maps_var_pop_fields"]: {
	__typename: "match_maps_var_pop_fields",
	/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	order?: number | undefined
};
	/** order by var_pop() on columns of table "match_maps" */
["match_maps_var_pop_order_by"]: {
		lineup_1_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	order?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["match_maps_var_samp_fields"]: {
	__typename: "match_maps_var_samp_fields",
	/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	order?: number | undefined
};
	/** order by var_samp() on columns of table "match_maps" */
["match_maps_var_samp_order_by"]: {
		lineup_1_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	order?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["match_maps_variance_fields"]: {
	__typename: "match_maps_variance_fields",
	/** A computed field, executes function "lineup_1_score" */
	lineup_1_score?: number | undefined,
	lineup_1_timeouts_available?: number | undefined,
	/** A computed field, executes function "lineup_2_score" */
	lineup_2_score?: number | undefined,
	lineup_2_timeouts_available?: number | undefined,
	order?: number | undefined
};
	/** order by variance() on columns of table "match_maps" */
["match_maps_variance_order_by"]: {
		lineup_1_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	lineup_2_timeouts_available?: GraphQLTypes["order_by"] | undefined,
	order?: GraphQLTypes["order_by"] | undefined
};
	/** columns and relationships of "match_veto_picks" */
["match_veto_picks"]: {
	__typename: "match_veto_picks",
	created_at: GraphQLTypes["timestamptz"],
	id: GraphQLTypes["uuid"],
	/** An object relationship */
	map: GraphQLTypes["maps"],
	map_id: GraphQLTypes["uuid"],
	/** An object relationship */
	match: GraphQLTypes["matches"],
	match_id: GraphQLTypes["uuid"],
	/** An object relationship */
	match_lineup: GraphQLTypes["match_lineups"],
	match_lineup_id: GraphQLTypes["uuid"],
	side?: string | undefined,
	type: GraphQLTypes["e_veto_pick_types_enum"]
};
	/** aggregated selection of "match_veto_picks" */
["match_veto_picks_aggregate"]: {
	__typename: "match_veto_picks_aggregate",
	aggregate?: GraphQLTypes["match_veto_picks_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["match_veto_picks"]>
};
	["match_veto_picks_aggregate_bool_exp"]: {
		count?: GraphQLTypes["match_veto_picks_aggregate_bool_exp_count"] | undefined
};
	["match_veto_picks_aggregate_bool_exp_count"]: {
		arguments?: Array<GraphQLTypes["match_veto_picks_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["match_veto_picks_bool_exp"] | undefined,
	predicate: GraphQLTypes["Int_comparison_exp"]
};
	/** aggregate fields of "match_veto_picks" */
["match_veto_picks_aggregate_fields"]: {
	__typename: "match_veto_picks_aggregate_fields",
	count: number,
	max?: GraphQLTypes["match_veto_picks_max_fields"] | undefined,
	min?: GraphQLTypes["match_veto_picks_min_fields"] | undefined
};
	/** order by aggregate values of table "match_veto_picks" */
["match_veto_picks_aggregate_order_by"]: {
		count?: GraphQLTypes["order_by"] | undefined,
	max?: GraphQLTypes["match_veto_picks_max_order_by"] | undefined,
	min?: GraphQLTypes["match_veto_picks_min_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "match_veto_picks" */
["match_veto_picks_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["match_veto_picks_insert_input"]>,
	/** upsert condition */
	on_conflict?: GraphQLTypes["match_veto_picks_on_conflict"] | undefined
};
	/** Boolean expression to filter rows from the table "match_veto_picks". All fields are combined with a logical 'AND'. */
["match_veto_picks_bool_exp"]: {
		_and?: Array<GraphQLTypes["match_veto_picks_bool_exp"]> | undefined,
	_not?: GraphQLTypes["match_veto_picks_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["match_veto_picks_bool_exp"]> | undefined,
	created_at?: GraphQLTypes["timestamptz_comparison_exp"] | undefined,
	id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	map?: GraphQLTypes["maps_bool_exp"] | undefined,
	map_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	match?: GraphQLTypes["matches_bool_exp"] | undefined,
	match_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	match_lineup?: GraphQLTypes["match_lineups_bool_exp"] | undefined,
	match_lineup_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	side?: GraphQLTypes["String_comparison_exp"] | undefined,
	type?: GraphQLTypes["e_veto_pick_types_enum_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "match_veto_picks" */
["match_veto_picks_constraint"]: match_veto_picks_constraint;
	/** input type for inserting data into table "match_veto_picks" */
["match_veto_picks_insert_input"]: {
		created_at?: GraphQLTypes["timestamptz"] | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	map?: GraphQLTypes["maps_obj_rel_insert_input"] | undefined,
	map_id?: GraphQLTypes["uuid"] | undefined,
	match?: GraphQLTypes["matches_obj_rel_insert_input"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_lineup?: GraphQLTypes["match_lineups_obj_rel_insert_input"] | undefined,
	match_lineup_id?: GraphQLTypes["uuid"] | undefined,
	side?: string | undefined,
	type?: GraphQLTypes["e_veto_pick_types_enum"] | undefined
};
	/** aggregate max on columns */
["match_veto_picks_max_fields"]: {
	__typename: "match_veto_picks_max_fields",
	created_at?: GraphQLTypes["timestamptz"] | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	map_id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_lineup_id?: GraphQLTypes["uuid"] | undefined,
	side?: string | undefined
};
	/** order by max() on columns of table "match_veto_picks" */
["match_veto_picks_max_order_by"]: {
		created_at?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	map_id?: GraphQLTypes["order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	match_lineup_id?: GraphQLTypes["order_by"] | undefined,
	side?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["match_veto_picks_min_fields"]: {
	__typename: "match_veto_picks_min_fields",
	created_at?: GraphQLTypes["timestamptz"] | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	map_id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_lineup_id?: GraphQLTypes["uuid"] | undefined,
	side?: string | undefined
};
	/** order by min() on columns of table "match_veto_picks" */
["match_veto_picks_min_order_by"]: {
		created_at?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	map_id?: GraphQLTypes["order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	match_lineup_id?: GraphQLTypes["order_by"] | undefined,
	side?: GraphQLTypes["order_by"] | undefined
};
	/** response of any mutation on the table "match_veto_picks" */
["match_veto_picks_mutation_response"]: {
	__typename: "match_veto_picks_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["match_veto_picks"]>
};
	/** on_conflict condition type for table "match_veto_picks" */
["match_veto_picks_on_conflict"]: {
		constraint: GraphQLTypes["match_veto_picks_constraint"],
	update_columns: Array<GraphQLTypes["match_veto_picks_update_column"]>,
	where?: GraphQLTypes["match_veto_picks_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "match_veto_picks". */
["match_veto_picks_order_by"]: {
		created_at?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	map?: GraphQLTypes["maps_order_by"] | undefined,
	map_id?: GraphQLTypes["order_by"] | undefined,
	match?: GraphQLTypes["matches_order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	match_lineup?: GraphQLTypes["match_lineups_order_by"] | undefined,
	match_lineup_id?: GraphQLTypes["order_by"] | undefined,
	side?: GraphQLTypes["order_by"] | undefined,
	type?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: match_veto_picks */
["match_veto_picks_pk_columns_input"]: {
		id: GraphQLTypes["uuid"]
};
	/** select columns of table "match_veto_picks" */
["match_veto_picks_select_column"]: match_veto_picks_select_column;
	/** input type for updating data in table "match_veto_picks" */
["match_veto_picks_set_input"]: {
		created_at?: GraphQLTypes["timestamptz"] | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	map_id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_lineup_id?: GraphQLTypes["uuid"] | undefined,
	side?: string | undefined,
	type?: GraphQLTypes["e_veto_pick_types_enum"] | undefined
};
	/** Streaming cursor of the table "match_veto_picks" */
["match_veto_picks_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["match_veto_picks_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["match_veto_picks_stream_cursor_value_input"]: {
		created_at?: GraphQLTypes["timestamptz"] | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	map_id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_lineup_id?: GraphQLTypes["uuid"] | undefined,
	side?: string | undefined,
	type?: GraphQLTypes["e_veto_pick_types_enum"] | undefined
};
	/** update columns of table "match_veto_picks" */
["match_veto_picks_update_column"]: match_veto_picks_update_column;
	["match_veto_picks_updates"]: {
		/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["match_veto_picks_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["match_veto_picks_bool_exp"]
};
	/** columns and relationships of "matches" */
["matches"]: {
	__typename: "matches",
	best_of: number,
	coaches: boolean,
	/** A computed field, executes function "get_match_connection_link" */
	connection_link?: string | undefined,
	/** A computed field, executes function "get_match_connection_string" */
	connection_string?: string | undefined,
	created_at: GraphQLTypes["timestamptz"],
	/** A computed field, executes function "get_current_match_map" */
	current_match_map_id?: GraphQLTypes["uuid"] | undefined,
	/** An object relationship */
	e_match_status: GraphQLTypes["e_match_status"],
	/** An object relationship */
	e_match_type: GraphQLTypes["e_match_types"],
	id: GraphQLTypes["uuid"],
	/** A computed field, executes function "is_match_server_available" */
	is_match_server_available?: boolean | undefined,
	knife_round: boolean,
	label?: string | undefined,
	/** A computed field, executes function "get_match_lineup_1_id" */
	lineup_1_id?: string | undefined,
	/** A computed field, executes function "get_match_lineup_2_id" */
	lineup_2_id?: string | undefined,
	/** An array relationship */
	lineups: Array<GraphQLTypes["match_lineups"]>,
	/** An aggregate relationship */
	lineups_aggregate: GraphQLTypes["match_lineups_aggregate"],
	/** An object relationship */
	map_pool?: GraphQLTypes["map_pools"] | undefined,
	map_veto: boolean,
	/** An array relationship */
	match_maps: Array<GraphQLTypes["match_maps"]>,
	/** An aggregate relationship */
	match_maps_aggregate: GraphQLTypes["match_maps_aggregate"],
	match_pool_id?: GraphQLTypes["uuid"] | undefined,
	mr: number,
	number_of_substitutes: number,
	/** An object relationship */
	organizer?: GraphQLTypes["players"] | undefined,
	organizer_steam_id?: GraphQLTypes["bigint"] | undefined,
	overtime: boolean,
	password: string,
	/** An array relationship */
	player_assists: Array<GraphQLTypes["player_assists"]>,
	/** An aggregate relationship */
	player_assists_aggregate: GraphQLTypes["player_assists_aggregate"],
	/** An array relationship */
	player_damages: Array<GraphQLTypes["player_damages"]>,
	/** An aggregate relationship */
	player_damages_aggregate: GraphQLTypes["player_damages_aggregate"],
	/** An array relationship */
	player_flashes: Array<GraphQLTypes["player_flashes"]>,
	/** An aggregate relationship */
	player_flashes_aggregate: GraphQLTypes["player_flashes_aggregate"],
	/** An array relationship */
	player_kills: Array<GraphQLTypes["player_kills"]>,
	/** An aggregate relationship */
	player_kills_aggregate: GraphQLTypes["player_kills_aggregate"],
	/** An array relationship */
	player_objectives: Array<GraphQLTypes["player_objectives"]>,
	/** An aggregate relationship */
	player_objectives_aggregate: GraphQLTypes["player_objectives_aggregate"],
	/** An array relationship */
	player_unused_utilities: Array<GraphQLTypes["player_unused_utility"]>,
	/** An aggregate relationship */
	player_unused_utilities_aggregate: GraphQLTypes["player_unused_utility_aggregate"],
	/** An array relationship */
	player_utility: Array<GraphQLTypes["player_utility"]>,
	/** An aggregate relationship */
	player_utility_aggregate: GraphQLTypes["player_utility_aggregate"],
	scheduled_at?: GraphQLTypes["date"] | undefined,
	/** An object relationship */
	server?: GraphQLTypes["servers"] | undefined,
	server_id?: GraphQLTypes["uuid"] | undefined,
	status: GraphQLTypes["e_match_status_enum"],
	/** A computed field, executes function "get_match_teams" */
	teams?: Array<GraphQLTypes["teams"]> | undefined,
	tech_timeout_setting: GraphQLTypes["e_timeout_settings_enum"],
	timeout_setting: GraphQLTypes["e_timeout_settings_enum"],
	/** A computed field, executes function "get_match_tv_connection_link" */
	tv_connection_link?: string | undefined,
	/** A computed field, executes function "get_match_tv_connection_string" */
	tv_connection_string?: string | undefined,
	type: GraphQLTypes["e_match_types_enum"],
	updated_at: GraphQLTypes["timestamptz"],
	/** A computed field, executes function "get_veto_picking_lineup_id" */
	veto_picking_lineup_id?: GraphQLTypes["uuid"] | undefined,
	/** An array relationship */
	veto_picks: Array<GraphQLTypes["match_veto_picks"]>,
	/** An aggregate relationship */
	veto_picks_aggregate: GraphQLTypes["match_veto_picks_aggregate"]
};
	/** aggregated selection of "matches" */
["matches_aggregate"]: {
	__typename: "matches_aggregate",
	aggregate?: GraphQLTypes["matches_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["matches"]>
};
	["matches_aggregate_bool_exp"]: {
		bool_and?: GraphQLTypes["matches_aggregate_bool_exp_bool_and"] | undefined,
	bool_or?: GraphQLTypes["matches_aggregate_bool_exp_bool_or"] | undefined,
	count?: GraphQLTypes["matches_aggregate_bool_exp_count"] | undefined
};
	["matches_aggregate_bool_exp_bool_and"]: {
		arguments: GraphQLTypes["matches_select_column_matches_aggregate_bool_exp_bool_and_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["matches_bool_exp"] | undefined,
	predicate: GraphQLTypes["Boolean_comparison_exp"]
};
	["matches_aggregate_bool_exp_bool_or"]: {
		arguments: GraphQLTypes["matches_select_column_matches_aggregate_bool_exp_bool_or_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["matches_bool_exp"] | undefined,
	predicate: GraphQLTypes["Boolean_comparison_exp"]
};
	["matches_aggregate_bool_exp_count"]: {
		arguments?: Array<GraphQLTypes["matches_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["matches_bool_exp"] | undefined,
	predicate: GraphQLTypes["Int_comparison_exp"]
};
	/** aggregate fields of "matches" */
["matches_aggregate_fields"]: {
	__typename: "matches_aggregate_fields",
	avg?: GraphQLTypes["matches_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["matches_max_fields"] | undefined,
	min?: GraphQLTypes["matches_min_fields"] | undefined,
	stddev?: GraphQLTypes["matches_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["matches_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["matches_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["matches_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["matches_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["matches_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["matches_variance_fields"] | undefined
};
	/** order by aggregate values of table "matches" */
["matches_aggregate_order_by"]: {
		avg?: GraphQLTypes["matches_avg_order_by"] | undefined,
	count?: GraphQLTypes["order_by"] | undefined,
	max?: GraphQLTypes["matches_max_order_by"] | undefined,
	min?: GraphQLTypes["matches_min_order_by"] | undefined,
	stddev?: GraphQLTypes["matches_stddev_order_by"] | undefined,
	stddev_pop?: GraphQLTypes["matches_stddev_pop_order_by"] | undefined,
	stddev_samp?: GraphQLTypes["matches_stddev_samp_order_by"] | undefined,
	sum?: GraphQLTypes["matches_sum_order_by"] | undefined,
	var_pop?: GraphQLTypes["matches_var_pop_order_by"] | undefined,
	var_samp?: GraphQLTypes["matches_var_samp_order_by"] | undefined,
	variance?: GraphQLTypes["matches_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "matches" */
["matches_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["matches_insert_input"]>,
	/** upsert condition */
	on_conflict?: GraphQLTypes["matches_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["matches_avg_fields"]: {
	__typename: "matches_avg_fields",
	best_of?: number | undefined,
	mr?: number | undefined,
	number_of_substitutes?: number | undefined,
	organizer_steam_id?: number | undefined
};
	/** order by avg() on columns of table "matches" */
["matches_avg_order_by"]: {
		best_of?: GraphQLTypes["order_by"] | undefined,
	mr?: GraphQLTypes["order_by"] | undefined,
	number_of_substitutes?: GraphQLTypes["order_by"] | undefined,
	organizer_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "matches". All fields are combined with a logical 'AND'. */
["matches_bool_exp"]: {
		_and?: Array<GraphQLTypes["matches_bool_exp"]> | undefined,
	_not?: GraphQLTypes["matches_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["matches_bool_exp"]> | undefined,
	best_of?: GraphQLTypes["Int_comparison_exp"] | undefined,
	coaches?: GraphQLTypes["Boolean_comparison_exp"] | undefined,
	connection_link?: GraphQLTypes["String_comparison_exp"] | undefined,
	connection_string?: GraphQLTypes["String_comparison_exp"] | undefined,
	created_at?: GraphQLTypes["timestamptz_comparison_exp"] | undefined,
	current_match_map_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	e_match_status?: GraphQLTypes["e_match_status_bool_exp"] | undefined,
	e_match_type?: GraphQLTypes["e_match_types_bool_exp"] | undefined,
	id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	is_match_server_available?: GraphQLTypes["Boolean_comparison_exp"] | undefined,
	knife_round?: GraphQLTypes["Boolean_comparison_exp"] | undefined,
	label?: GraphQLTypes["String_comparison_exp"] | undefined,
	lineup_1_id?: GraphQLTypes["String_comparison_exp"] | undefined,
	lineup_2_id?: GraphQLTypes["String_comparison_exp"] | undefined,
	lineups?: GraphQLTypes["match_lineups_bool_exp"] | undefined,
	lineups_aggregate?: GraphQLTypes["match_lineups_aggregate_bool_exp"] | undefined,
	map_pool?: GraphQLTypes["map_pools_bool_exp"] | undefined,
	map_veto?: GraphQLTypes["Boolean_comparison_exp"] | undefined,
	match_maps?: GraphQLTypes["match_maps_bool_exp"] | undefined,
	match_maps_aggregate?: GraphQLTypes["match_maps_aggregate_bool_exp"] | undefined,
	match_pool_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	mr?: GraphQLTypes["Int_comparison_exp"] | undefined,
	number_of_substitutes?: GraphQLTypes["Int_comparison_exp"] | undefined,
	organizer?: GraphQLTypes["players_bool_exp"] | undefined,
	organizer_steam_id?: GraphQLTypes["bigint_comparison_exp"] | undefined,
	overtime?: GraphQLTypes["Boolean_comparison_exp"] | undefined,
	password?: GraphQLTypes["String_comparison_exp"] | undefined,
	player_assists?: GraphQLTypes["player_assists_bool_exp"] | undefined,
	player_assists_aggregate?: GraphQLTypes["player_assists_aggregate_bool_exp"] | undefined,
	player_damages?: GraphQLTypes["player_damages_bool_exp"] | undefined,
	player_damages_aggregate?: GraphQLTypes["player_damages_aggregate_bool_exp"] | undefined,
	player_flashes?: GraphQLTypes["player_flashes_bool_exp"] | undefined,
	player_flashes_aggregate?: GraphQLTypes["player_flashes_aggregate_bool_exp"] | undefined,
	player_kills?: GraphQLTypes["player_kills_bool_exp"] | undefined,
	player_kills_aggregate?: GraphQLTypes["player_kills_aggregate_bool_exp"] | undefined,
	player_objectives?: GraphQLTypes["player_objectives_bool_exp"] | undefined,
	player_objectives_aggregate?: GraphQLTypes["player_objectives_aggregate_bool_exp"] | undefined,
	player_unused_utilities?: GraphQLTypes["player_unused_utility_bool_exp"] | undefined,
	player_unused_utilities_aggregate?: GraphQLTypes["player_unused_utility_aggregate_bool_exp"] | undefined,
	player_utility?: GraphQLTypes["player_utility_bool_exp"] | undefined,
	player_utility_aggregate?: GraphQLTypes["player_utility_aggregate_bool_exp"] | undefined,
	scheduled_at?: GraphQLTypes["date_comparison_exp"] | undefined,
	server?: GraphQLTypes["servers_bool_exp"] | undefined,
	server_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	status?: GraphQLTypes["e_match_status_enum_comparison_exp"] | undefined,
	teams?: GraphQLTypes["teams_bool_exp"] | undefined,
	tech_timeout_setting?: GraphQLTypes["e_timeout_settings_enum_comparison_exp"] | undefined,
	timeout_setting?: GraphQLTypes["e_timeout_settings_enum_comparison_exp"] | undefined,
	tv_connection_link?: GraphQLTypes["String_comparison_exp"] | undefined,
	tv_connection_string?: GraphQLTypes["String_comparison_exp"] | undefined,
	type?: GraphQLTypes["e_match_types_enum_comparison_exp"] | undefined,
	updated_at?: GraphQLTypes["timestamptz_comparison_exp"] | undefined,
	veto_picking_lineup_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	veto_picks?: GraphQLTypes["match_veto_picks_bool_exp"] | undefined,
	veto_picks_aggregate?: GraphQLTypes["match_veto_picks_aggregate_bool_exp"] | undefined
};
	/** unique or primary key constraints on table "matches" */
["matches_constraint"]: matches_constraint;
	/** input type for incrementing numeric columns in table "matches" */
["matches_inc_input"]: {
		best_of?: number | undefined,
	mr?: number | undefined,
	number_of_substitutes?: number | undefined,
	organizer_steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** input type for inserting data into table "matches" */
["matches_insert_input"]: {
		best_of?: number | undefined,
	coaches?: boolean | undefined,
	created_at?: GraphQLTypes["timestamptz"] | undefined,
	e_match_status?: GraphQLTypes["e_match_status_obj_rel_insert_input"] | undefined,
	e_match_type?: GraphQLTypes["e_match_types_obj_rel_insert_input"] | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	knife_round?: boolean | undefined,
	label?: string | undefined,
	lineups?: GraphQLTypes["match_lineups_arr_rel_insert_input"] | undefined,
	map_pool?: GraphQLTypes["map_pools_obj_rel_insert_input"] | undefined,
	map_veto?: boolean | undefined,
	match_maps?: GraphQLTypes["match_maps_arr_rel_insert_input"] | undefined,
	match_pool_id?: GraphQLTypes["uuid"] | undefined,
	mr?: number | undefined,
	number_of_substitutes?: number | undefined,
	organizer?: GraphQLTypes["players_obj_rel_insert_input"] | undefined,
	organizer_steam_id?: GraphQLTypes["bigint"] | undefined,
	overtime?: boolean | undefined,
	password?: string | undefined,
	player_assists?: GraphQLTypes["player_assists_arr_rel_insert_input"] | undefined,
	player_damages?: GraphQLTypes["player_damages_arr_rel_insert_input"] | undefined,
	player_flashes?: GraphQLTypes["player_flashes_arr_rel_insert_input"] | undefined,
	player_kills?: GraphQLTypes["player_kills_arr_rel_insert_input"] | undefined,
	player_objectives?: GraphQLTypes["player_objectives_arr_rel_insert_input"] | undefined,
	player_unused_utilities?: GraphQLTypes["player_unused_utility_arr_rel_insert_input"] | undefined,
	player_utility?: GraphQLTypes["player_utility_arr_rel_insert_input"] | undefined,
	scheduled_at?: GraphQLTypes["date"] | undefined,
	server?: GraphQLTypes["servers_obj_rel_insert_input"] | undefined,
	server_id?: GraphQLTypes["uuid"] | undefined,
	status?: GraphQLTypes["e_match_status_enum"] | undefined,
	tech_timeout_setting?: GraphQLTypes["e_timeout_settings_enum"] | undefined,
	timeout_setting?: GraphQLTypes["e_timeout_settings_enum"] | undefined,
	type?: GraphQLTypes["e_match_types_enum"] | undefined,
	updated_at?: GraphQLTypes["timestamptz"] | undefined,
	veto_picks?: GraphQLTypes["match_veto_picks_arr_rel_insert_input"] | undefined
};
	/** aggregate max on columns */
["matches_max_fields"]: {
	__typename: "matches_max_fields",
	best_of?: number | undefined,
	/** A computed field, executes function "get_match_connection_link" */
	connection_link?: string | undefined,
	/** A computed field, executes function "get_match_connection_string" */
	connection_string?: string | undefined,
	created_at?: GraphQLTypes["timestamptz"] | undefined,
	/** A computed field, executes function "get_current_match_map" */
	current_match_map_id?: GraphQLTypes["uuid"] | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	label?: string | undefined,
	/** A computed field, executes function "get_match_lineup_1_id" */
	lineup_1_id?: string | undefined,
	/** A computed field, executes function "get_match_lineup_2_id" */
	lineup_2_id?: string | undefined,
	match_pool_id?: GraphQLTypes["uuid"] | undefined,
	mr?: number | undefined,
	number_of_substitutes?: number | undefined,
	organizer_steam_id?: GraphQLTypes["bigint"] | undefined,
	password?: string | undefined,
	scheduled_at?: GraphQLTypes["date"] | undefined,
	server_id?: GraphQLTypes["uuid"] | undefined,
	/** A computed field, executes function "get_match_tv_connection_link" */
	tv_connection_link?: string | undefined,
	/** A computed field, executes function "get_match_tv_connection_string" */
	tv_connection_string?: string | undefined,
	updated_at?: GraphQLTypes["timestamptz"] | undefined,
	/** A computed field, executes function "get_veto_picking_lineup_id" */
	veto_picking_lineup_id?: GraphQLTypes["uuid"] | undefined
};
	/** order by max() on columns of table "matches" */
["matches_max_order_by"]: {
		best_of?: GraphQLTypes["order_by"] | undefined,
	created_at?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	label?: GraphQLTypes["order_by"] | undefined,
	match_pool_id?: GraphQLTypes["order_by"] | undefined,
	mr?: GraphQLTypes["order_by"] | undefined,
	number_of_substitutes?: GraphQLTypes["order_by"] | undefined,
	organizer_steam_id?: GraphQLTypes["order_by"] | undefined,
	password?: GraphQLTypes["order_by"] | undefined,
	scheduled_at?: GraphQLTypes["order_by"] | undefined,
	server_id?: GraphQLTypes["order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["matches_min_fields"]: {
	__typename: "matches_min_fields",
	best_of?: number | undefined,
	/** A computed field, executes function "get_match_connection_link" */
	connection_link?: string | undefined,
	/** A computed field, executes function "get_match_connection_string" */
	connection_string?: string | undefined,
	created_at?: GraphQLTypes["timestamptz"] | undefined,
	/** A computed field, executes function "get_current_match_map" */
	current_match_map_id?: GraphQLTypes["uuid"] | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	label?: string | undefined,
	/** A computed field, executes function "get_match_lineup_1_id" */
	lineup_1_id?: string | undefined,
	/** A computed field, executes function "get_match_lineup_2_id" */
	lineup_2_id?: string | undefined,
	match_pool_id?: GraphQLTypes["uuid"] | undefined,
	mr?: number | undefined,
	number_of_substitutes?: number | undefined,
	organizer_steam_id?: GraphQLTypes["bigint"] | undefined,
	password?: string | undefined,
	scheduled_at?: GraphQLTypes["date"] | undefined,
	server_id?: GraphQLTypes["uuid"] | undefined,
	/** A computed field, executes function "get_match_tv_connection_link" */
	tv_connection_link?: string | undefined,
	/** A computed field, executes function "get_match_tv_connection_string" */
	tv_connection_string?: string | undefined,
	updated_at?: GraphQLTypes["timestamptz"] | undefined,
	/** A computed field, executes function "get_veto_picking_lineup_id" */
	veto_picking_lineup_id?: GraphQLTypes["uuid"] | undefined
};
	/** order by min() on columns of table "matches" */
["matches_min_order_by"]: {
		best_of?: GraphQLTypes["order_by"] | undefined,
	created_at?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	label?: GraphQLTypes["order_by"] | undefined,
	match_pool_id?: GraphQLTypes["order_by"] | undefined,
	mr?: GraphQLTypes["order_by"] | undefined,
	number_of_substitutes?: GraphQLTypes["order_by"] | undefined,
	organizer_steam_id?: GraphQLTypes["order_by"] | undefined,
	password?: GraphQLTypes["order_by"] | undefined,
	scheduled_at?: GraphQLTypes["order_by"] | undefined,
	server_id?: GraphQLTypes["order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined
};
	/** response of any mutation on the table "matches" */
["matches_mutation_response"]: {
	__typename: "matches_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["matches"]>
};
	/** input type for inserting object relation for remote table "matches" */
["matches_obj_rel_insert_input"]: {
		data: GraphQLTypes["matches_insert_input"],
	/** upsert condition */
	on_conflict?: GraphQLTypes["matches_on_conflict"] | undefined
};
	/** on_conflict condition type for table "matches" */
["matches_on_conflict"]: {
		constraint: GraphQLTypes["matches_constraint"],
	update_columns: Array<GraphQLTypes["matches_update_column"]>,
	where?: GraphQLTypes["matches_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "matches". */
["matches_order_by"]: {
		best_of?: GraphQLTypes["order_by"] | undefined,
	coaches?: GraphQLTypes["order_by"] | undefined,
	connection_link?: GraphQLTypes["order_by"] | undefined,
	connection_string?: GraphQLTypes["order_by"] | undefined,
	created_at?: GraphQLTypes["order_by"] | undefined,
	current_match_map_id?: GraphQLTypes["order_by"] | undefined,
	e_match_status?: GraphQLTypes["e_match_status_order_by"] | undefined,
	e_match_type?: GraphQLTypes["e_match_types_order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	is_match_server_available?: GraphQLTypes["order_by"] | undefined,
	knife_round?: GraphQLTypes["order_by"] | undefined,
	label?: GraphQLTypes["order_by"] | undefined,
	lineup_1_id?: GraphQLTypes["order_by"] | undefined,
	lineup_2_id?: GraphQLTypes["order_by"] | undefined,
	lineups_aggregate?: GraphQLTypes["match_lineups_aggregate_order_by"] | undefined,
	map_pool?: GraphQLTypes["map_pools_order_by"] | undefined,
	map_veto?: GraphQLTypes["order_by"] | undefined,
	match_maps_aggregate?: GraphQLTypes["match_maps_aggregate_order_by"] | undefined,
	match_pool_id?: GraphQLTypes["order_by"] | undefined,
	mr?: GraphQLTypes["order_by"] | undefined,
	number_of_substitutes?: GraphQLTypes["order_by"] | undefined,
	organizer?: GraphQLTypes["players_order_by"] | undefined,
	organizer_steam_id?: GraphQLTypes["order_by"] | undefined,
	overtime?: GraphQLTypes["order_by"] | undefined,
	password?: GraphQLTypes["order_by"] | undefined,
	player_assists_aggregate?: GraphQLTypes["player_assists_aggregate_order_by"] | undefined,
	player_damages_aggregate?: GraphQLTypes["player_damages_aggregate_order_by"] | undefined,
	player_flashes_aggregate?: GraphQLTypes["player_flashes_aggregate_order_by"] | undefined,
	player_kills_aggregate?: GraphQLTypes["player_kills_aggregate_order_by"] | undefined,
	player_objectives_aggregate?: GraphQLTypes["player_objectives_aggregate_order_by"] | undefined,
	player_unused_utilities_aggregate?: GraphQLTypes["player_unused_utility_aggregate_order_by"] | undefined,
	player_utility_aggregate?: GraphQLTypes["player_utility_aggregate_order_by"] | undefined,
	scheduled_at?: GraphQLTypes["order_by"] | undefined,
	server?: GraphQLTypes["servers_order_by"] | undefined,
	server_id?: GraphQLTypes["order_by"] | undefined,
	status?: GraphQLTypes["order_by"] | undefined,
	teams_aggregate?: GraphQLTypes["teams_aggregate_order_by"] | undefined,
	tech_timeout_setting?: GraphQLTypes["order_by"] | undefined,
	timeout_setting?: GraphQLTypes["order_by"] | undefined,
	tv_connection_link?: GraphQLTypes["order_by"] | undefined,
	tv_connection_string?: GraphQLTypes["order_by"] | undefined,
	type?: GraphQLTypes["order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined,
	veto_picking_lineup_id?: GraphQLTypes["order_by"] | undefined,
	veto_picks_aggregate?: GraphQLTypes["match_veto_picks_aggregate_order_by"] | undefined
};
	/** primary key columns input for table: matches */
["matches_pk_columns_input"]: {
		id: GraphQLTypes["uuid"]
};
	/** select columns of table "matches" */
["matches_select_column"]: matches_select_column;
	/** select "matches_aggregate_bool_exp_bool_and_arguments_columns" columns of table "matches" */
["matches_select_column_matches_aggregate_bool_exp_bool_and_arguments_columns"]: matches_select_column_matches_aggregate_bool_exp_bool_and_arguments_columns;
	/** select "matches_aggregate_bool_exp_bool_or_arguments_columns" columns of table "matches" */
["matches_select_column_matches_aggregate_bool_exp_bool_or_arguments_columns"]: matches_select_column_matches_aggregate_bool_exp_bool_or_arguments_columns;
	/** input type for updating data in table "matches" */
["matches_set_input"]: {
		best_of?: number | undefined,
	coaches?: boolean | undefined,
	created_at?: GraphQLTypes["timestamptz"] | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	knife_round?: boolean | undefined,
	label?: string | undefined,
	map_veto?: boolean | undefined,
	match_pool_id?: GraphQLTypes["uuid"] | undefined,
	mr?: number | undefined,
	number_of_substitutes?: number | undefined,
	organizer_steam_id?: GraphQLTypes["bigint"] | undefined,
	overtime?: boolean | undefined,
	password?: string | undefined,
	scheduled_at?: GraphQLTypes["date"] | undefined,
	server_id?: GraphQLTypes["uuid"] | undefined,
	status?: GraphQLTypes["e_match_status_enum"] | undefined,
	tech_timeout_setting?: GraphQLTypes["e_timeout_settings_enum"] | undefined,
	timeout_setting?: GraphQLTypes["e_timeout_settings_enum"] | undefined,
	type?: GraphQLTypes["e_match_types_enum"] | undefined,
	updated_at?: GraphQLTypes["timestamptz"] | undefined
};
	/** aggregate stddev on columns */
["matches_stddev_fields"]: {
	__typename: "matches_stddev_fields",
	best_of?: number | undefined,
	mr?: number | undefined,
	number_of_substitutes?: number | undefined,
	organizer_steam_id?: number | undefined
};
	/** order by stddev() on columns of table "matches" */
["matches_stddev_order_by"]: {
		best_of?: GraphQLTypes["order_by"] | undefined,
	mr?: GraphQLTypes["order_by"] | undefined,
	number_of_substitutes?: GraphQLTypes["order_by"] | undefined,
	organizer_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["matches_stddev_pop_fields"]: {
	__typename: "matches_stddev_pop_fields",
	best_of?: number | undefined,
	mr?: number | undefined,
	number_of_substitutes?: number | undefined,
	organizer_steam_id?: number | undefined
};
	/** order by stddev_pop() on columns of table "matches" */
["matches_stddev_pop_order_by"]: {
		best_of?: GraphQLTypes["order_by"] | undefined,
	mr?: GraphQLTypes["order_by"] | undefined,
	number_of_substitutes?: GraphQLTypes["order_by"] | undefined,
	organizer_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["matches_stddev_samp_fields"]: {
	__typename: "matches_stddev_samp_fields",
	best_of?: number | undefined,
	mr?: number | undefined,
	number_of_substitutes?: number | undefined,
	organizer_steam_id?: number | undefined
};
	/** order by stddev_samp() on columns of table "matches" */
["matches_stddev_samp_order_by"]: {
		best_of?: GraphQLTypes["order_by"] | undefined,
	mr?: GraphQLTypes["order_by"] | undefined,
	number_of_substitutes?: GraphQLTypes["order_by"] | undefined,
	organizer_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "matches" */
["matches_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["matches_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["matches_stream_cursor_value_input"]: {
		best_of?: number | undefined,
	coaches?: boolean | undefined,
	created_at?: GraphQLTypes["timestamptz"] | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	knife_round?: boolean | undefined,
	label?: string | undefined,
	map_veto?: boolean | undefined,
	match_pool_id?: GraphQLTypes["uuid"] | undefined,
	mr?: number | undefined,
	number_of_substitutes?: number | undefined,
	organizer_steam_id?: GraphQLTypes["bigint"] | undefined,
	overtime?: boolean | undefined,
	password?: string | undefined,
	scheduled_at?: GraphQLTypes["date"] | undefined,
	server_id?: GraphQLTypes["uuid"] | undefined,
	status?: GraphQLTypes["e_match_status_enum"] | undefined,
	tech_timeout_setting?: GraphQLTypes["e_timeout_settings_enum"] | undefined,
	timeout_setting?: GraphQLTypes["e_timeout_settings_enum"] | undefined,
	type?: GraphQLTypes["e_match_types_enum"] | undefined,
	updated_at?: GraphQLTypes["timestamptz"] | undefined
};
	/** aggregate sum on columns */
["matches_sum_fields"]: {
	__typename: "matches_sum_fields",
	best_of?: number | undefined,
	mr?: number | undefined,
	number_of_substitutes?: number | undefined,
	organizer_steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** order by sum() on columns of table "matches" */
["matches_sum_order_by"]: {
		best_of?: GraphQLTypes["order_by"] | undefined,
	mr?: GraphQLTypes["order_by"] | undefined,
	number_of_substitutes?: GraphQLTypes["order_by"] | undefined,
	organizer_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** update columns of table "matches" */
["matches_update_column"]: matches_update_column;
	["matches_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["matches_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["matches_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["matches_bool_exp"]
};
	/** aggregate var_pop on columns */
["matches_var_pop_fields"]: {
	__typename: "matches_var_pop_fields",
	best_of?: number | undefined,
	mr?: number | undefined,
	number_of_substitutes?: number | undefined,
	organizer_steam_id?: number | undefined
};
	/** order by var_pop() on columns of table "matches" */
["matches_var_pop_order_by"]: {
		best_of?: GraphQLTypes["order_by"] | undefined,
	mr?: GraphQLTypes["order_by"] | undefined,
	number_of_substitutes?: GraphQLTypes["order_by"] | undefined,
	organizer_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["matches_var_samp_fields"]: {
	__typename: "matches_var_samp_fields",
	best_of?: number | undefined,
	mr?: number | undefined,
	number_of_substitutes?: number | undefined,
	organizer_steam_id?: number | undefined
};
	/** order by var_samp() on columns of table "matches" */
["matches_var_samp_order_by"]: {
		best_of?: GraphQLTypes["order_by"] | undefined,
	mr?: GraphQLTypes["order_by"] | undefined,
	number_of_substitutes?: GraphQLTypes["order_by"] | undefined,
	organizer_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["matches_variance_fields"]: {
	__typename: "matches_variance_fields",
	best_of?: number | undefined,
	mr?: number | undefined,
	number_of_substitutes?: number | undefined,
	organizer_steam_id?: number | undefined
};
	/** order by variance() on columns of table "matches" */
["matches_variance_order_by"]: {
		best_of?: GraphQLTypes["order_by"] | undefined,
	mr?: GraphQLTypes["order_by"] | undefined,
	number_of_substitutes?: GraphQLTypes["order_by"] | undefined,
	organizer_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** mutation root */
["mutation_root"]: {
	__typename: "mutation_root",
	/** accept team invite */
	acceptTeamInvite?: GraphQLTypes["SuccessOutput"] | undefined,
	/** cancelMatch */
	cancelMatch?: GraphQLTypes["SuccessOutput"] | undefined,
	/** delete data from the table: "_map_pool" */
	delete__map_pool?: GraphQLTypes["_map_pool_mutation_response"] | undefined,
	/** delete single row from the table: "_map_pool" */
	delete__map_pool_by_pk?: GraphQLTypes["_map_pool"] | undefined,
	/** delete data from the table: "e_match_map_status" */
	delete_e_match_map_status?: GraphQLTypes["e_match_map_status_mutation_response"] | undefined,
	/** delete single row from the table: "e_match_map_status" */
	delete_e_match_map_status_by_pk?: GraphQLTypes["e_match_map_status"] | undefined,
	/** delete data from the table: "e_match_status" */
	delete_e_match_status?: GraphQLTypes["e_match_status_mutation_response"] | undefined,
	/** delete single row from the table: "e_match_status" */
	delete_e_match_status_by_pk?: GraphQLTypes["e_match_status"] | undefined,
	/** delete data from the table: "e_match_types" */
	delete_e_match_types?: GraphQLTypes["e_match_types_mutation_response"] | undefined,
	/** delete single row from the table: "e_match_types" */
	delete_e_match_types_by_pk?: GraphQLTypes["e_match_types"] | undefined,
	/** delete data from the table: "e_objective_types" */
	delete_e_objective_types?: GraphQLTypes["e_objective_types_mutation_response"] | undefined,
	/** delete single row from the table: "e_objective_types" */
	delete_e_objective_types_by_pk?: GraphQLTypes["e_objective_types"] | undefined,
	/** delete data from the table: "e_sides" */
	delete_e_sides?: GraphQLTypes["e_sides_mutation_response"] | undefined,
	/** delete single row from the table: "e_sides" */
	delete_e_sides_by_pk?: GraphQLTypes["e_sides"] | undefined,
	/** delete data from the table: "e_team_roles" */
	delete_e_team_roles?: GraphQLTypes["e_team_roles_mutation_response"] | undefined,
	/** delete single row from the table: "e_team_roles" */
	delete_e_team_roles_by_pk?: GraphQLTypes["e_team_roles"] | undefined,
	/** delete data from the table: "e_timeout_settings" */
	delete_e_timeout_settings?: GraphQLTypes["e_timeout_settings_mutation_response"] | undefined,
	/** delete single row from the table: "e_timeout_settings" */
	delete_e_timeout_settings_by_pk?: GraphQLTypes["e_timeout_settings"] | undefined,
	/** delete data from the table: "e_utility_types" */
	delete_e_utility_types?: GraphQLTypes["e_utility_types_mutation_response"] | undefined,
	/** delete single row from the table: "e_utility_types" */
	delete_e_utility_types_by_pk?: GraphQLTypes["e_utility_types"] | undefined,
	/** delete data from the table: "e_veto_pick_types" */
	delete_e_veto_pick_types?: GraphQLTypes["e_veto_pick_types_mutation_response"] | undefined,
	/** delete single row from the table: "e_veto_pick_types" */
	delete_e_veto_pick_types_by_pk?: GraphQLTypes["e_veto_pick_types"] | undefined,
	/** delete data from the table: "map_pools" */
	delete_map_pools?: GraphQLTypes["map_pools_mutation_response"] | undefined,
	/** delete single row from the table: "map_pools" */
	delete_map_pools_by_pk?: GraphQLTypes["map_pools"] | undefined,
	/** delete data from the table: "maps" */
	delete_maps?: GraphQLTypes["maps_mutation_response"] | undefined,
	/** delete single row from the table: "maps" */
	delete_maps_by_pk?: GraphQLTypes["maps"] | undefined,
	/** delete data from the table: "match_lineup_players" */
	delete_match_lineup_players?: GraphQLTypes["match_lineup_players_mutation_response"] | undefined,
	/** delete single row from the table: "match_lineup_players" */
	delete_match_lineup_players_by_pk?: GraphQLTypes["match_lineup_players"] | undefined,
	/** delete data from the table: "match_lineups" */
	delete_match_lineups?: GraphQLTypes["match_lineups_mutation_response"] | undefined,
	/** delete single row from the table: "match_lineups" */
	delete_match_lineups_by_pk?: GraphQLTypes["match_lineups"] | undefined,
	/** delete data from the table: "match_map_demos" */
	delete_match_map_demos?: GraphQLTypes["match_map_demos_mutation_response"] | undefined,
	/** delete single row from the table: "match_map_demos" */
	delete_match_map_demos_by_pk?: GraphQLTypes["match_map_demos"] | undefined,
	/** delete data from the table: "match_map_rounds" */
	delete_match_map_rounds?: GraphQLTypes["match_map_rounds_mutation_response"] | undefined,
	/** delete single row from the table: "match_map_rounds" */
	delete_match_map_rounds_by_pk?: GraphQLTypes["match_map_rounds"] | undefined,
	/** delete data from the table: "match_maps" */
	delete_match_maps?: GraphQLTypes["match_maps_mutation_response"] | undefined,
	/** delete single row from the table: "match_maps" */
	delete_match_maps_by_pk?: GraphQLTypes["match_maps"] | undefined,
	/** delete data from the table: "match_veto_picks" */
	delete_match_veto_picks?: GraphQLTypes["match_veto_picks_mutation_response"] | undefined,
	/** delete single row from the table: "match_veto_picks" */
	delete_match_veto_picks_by_pk?: GraphQLTypes["match_veto_picks"] | undefined,
	/** delete data from the table: "matches" */
	delete_matches?: GraphQLTypes["matches_mutation_response"] | undefined,
	/** delete single row from the table: "matches" */
	delete_matches_by_pk?: GraphQLTypes["matches"] | undefined,
	/** delete data from the table: "player_assists" */
	delete_player_assists?: GraphQLTypes["player_assists_mutation_response"] | undefined,
	/** delete single row from the table: "player_assists" */
	delete_player_assists_by_pk?: GraphQLTypes["player_assists"] | undefined,
	/** delete data from the table: "player_damages" */
	delete_player_damages?: GraphQLTypes["player_damages_mutation_response"] | undefined,
	/** delete single row from the table: "player_damages" */
	delete_player_damages_by_pk?: GraphQLTypes["player_damages"] | undefined,
	/** delete data from the table: "player_flashes" */
	delete_player_flashes?: GraphQLTypes["player_flashes_mutation_response"] | undefined,
	/** delete single row from the table: "player_flashes" */
	delete_player_flashes_by_pk?: GraphQLTypes["player_flashes"] | undefined,
	/** delete data from the table: "player_kills" */
	delete_player_kills?: GraphQLTypes["player_kills_mutation_response"] | undefined,
	/** delete single row from the table: "player_kills" */
	delete_player_kills_by_pk?: GraphQLTypes["player_kills"] | undefined,
	/** delete data from the table: "player_objectives" */
	delete_player_objectives?: GraphQLTypes["player_objectives_mutation_response"] | undefined,
	/** delete single row from the table: "player_objectives" */
	delete_player_objectives_by_pk?: GraphQLTypes["player_objectives"] | undefined,
	/** delete data from the table: "player_unused_utility" */
	delete_player_unused_utility?: GraphQLTypes["player_unused_utility_mutation_response"] | undefined,
	/** delete single row from the table: "player_unused_utility" */
	delete_player_unused_utility_by_pk?: GraphQLTypes["player_unused_utility"] | undefined,
	/** delete data from the table: "player_utility" */
	delete_player_utility?: GraphQLTypes["player_utility_mutation_response"] | undefined,
	/** delete single row from the table: "player_utility" */
	delete_player_utility_by_pk?: GraphQLTypes["player_utility"] | undefined,
	/** delete data from the table: "players" */
	delete_players?: GraphQLTypes["players_mutation_response"] | undefined,
	/** delete single row from the table: "players" */
	delete_players_by_pk?: GraphQLTypes["players"] | undefined,
	/** delete data from the table: "servers" */
	delete_servers?: GraphQLTypes["servers_mutation_response"] | undefined,
	/** delete single row from the table: "servers" */
	delete_servers_by_pk?: GraphQLTypes["servers"] | undefined,
	/** delete data from the table: "team_invites" */
	delete_team_invites?: GraphQLTypes["team_invites_mutation_response"] | undefined,
	/** delete single row from the table: "team_invites" */
	delete_team_invites_by_pk?: GraphQLTypes["team_invites"] | undefined,
	/** delete data from the table: "team_roster" */
	delete_team_roster?: GraphQLTypes["team_roster_mutation_response"] | undefined,
	/** delete single row from the table: "team_roster" */
	delete_team_roster_by_pk?: GraphQLTypes["team_roster"] | undefined,
	/** delete data from the table: "teams" */
	delete_teams?: GraphQLTypes["teams_mutation_response"] | undefined,
	/** delete single row from the table: "teams" */
	delete_teams_by_pk?: GraphQLTypes["teams"] | undefined,
	/** delete data from the table: "tournament_organizers" */
	delete_tournament_organizers?: GraphQLTypes["tournament_organizers_mutation_response"] | undefined,
	/** delete single row from the table: "tournament_organizers" */
	delete_tournament_organizers_by_pk?: GraphQLTypes["tournament_organizers"] | undefined,
	/** delete data from the table: "tournament_roster" */
	delete_tournament_roster?: GraphQLTypes["tournament_roster_mutation_response"] | undefined,
	/** delete single row from the table: "tournament_roster" */
	delete_tournament_roster_by_pk?: GraphQLTypes["tournament_roster"] | undefined,
	/** delete data from the table: "tournament_servers" */
	delete_tournament_servers?: GraphQLTypes["tournament_servers_mutation_response"] | undefined,
	/** delete single row from the table: "tournament_servers" */
	delete_tournament_servers_by_pk?: GraphQLTypes["tournament_servers"] | undefined,
	/** delete data from the table: "tournament_stages" */
	delete_tournament_stages?: GraphQLTypes["tournament_stages_mutation_response"] | undefined,
	/** delete single row from the table: "tournament_stages" */
	delete_tournament_stages_by_pk?: GraphQLTypes["tournament_stages"] | undefined,
	/** delete data from the table: "tournament_teams" */
	delete_tournament_teams?: GraphQLTypes["tournament_teams_mutation_response"] | undefined,
	/** delete single row from the table: "tournament_teams" */
	delete_tournament_teams_by_pk?: GraphQLTypes["tournament_teams"] | undefined,
	/** delete data from the table: "tournaments" */
	delete_tournaments?: GraphQLTypes["tournaments_mutation_response"] | undefined,
	/** delete single row from the table: "tournaments" */
	delete_tournaments_by_pk?: GraphQLTypes["tournaments"] | undefined,
	/** delete data from the table: "v_match_captains" */
	delete_v_match_captains?: GraphQLTypes["v_match_captains_mutation_response"] | undefined,
	/** delete data from the table: "v_pool_maps" */
	delete_v_pool_maps?: GraphQLTypes["v_pool_maps_mutation_response"] | undefined,
	/** insert data into the table: "_map_pool" */
	insert__map_pool?: GraphQLTypes["_map_pool_mutation_response"] | undefined,
	/** insert a single row into the table: "_map_pool" */
	insert__map_pool_one?: GraphQLTypes["_map_pool"] | undefined,
	/** insert data into the table: "e_match_map_status" */
	insert_e_match_map_status?: GraphQLTypes["e_match_map_status_mutation_response"] | undefined,
	/** insert a single row into the table: "e_match_map_status" */
	insert_e_match_map_status_one?: GraphQLTypes["e_match_map_status"] | undefined,
	/** insert data into the table: "e_match_status" */
	insert_e_match_status?: GraphQLTypes["e_match_status_mutation_response"] | undefined,
	/** insert a single row into the table: "e_match_status" */
	insert_e_match_status_one?: GraphQLTypes["e_match_status"] | undefined,
	/** insert data into the table: "e_match_types" */
	insert_e_match_types?: GraphQLTypes["e_match_types_mutation_response"] | undefined,
	/** insert a single row into the table: "e_match_types" */
	insert_e_match_types_one?: GraphQLTypes["e_match_types"] | undefined,
	/** insert data into the table: "e_objective_types" */
	insert_e_objective_types?: GraphQLTypes["e_objective_types_mutation_response"] | undefined,
	/** insert a single row into the table: "e_objective_types" */
	insert_e_objective_types_one?: GraphQLTypes["e_objective_types"] | undefined,
	/** insert data into the table: "e_sides" */
	insert_e_sides?: GraphQLTypes["e_sides_mutation_response"] | undefined,
	/** insert a single row into the table: "e_sides" */
	insert_e_sides_one?: GraphQLTypes["e_sides"] | undefined,
	/** insert data into the table: "e_team_roles" */
	insert_e_team_roles?: GraphQLTypes["e_team_roles_mutation_response"] | undefined,
	/** insert a single row into the table: "e_team_roles" */
	insert_e_team_roles_one?: GraphQLTypes["e_team_roles"] | undefined,
	/** insert data into the table: "e_timeout_settings" */
	insert_e_timeout_settings?: GraphQLTypes["e_timeout_settings_mutation_response"] | undefined,
	/** insert a single row into the table: "e_timeout_settings" */
	insert_e_timeout_settings_one?: GraphQLTypes["e_timeout_settings"] | undefined,
	/** insert data into the table: "e_utility_types" */
	insert_e_utility_types?: GraphQLTypes["e_utility_types_mutation_response"] | undefined,
	/** insert a single row into the table: "e_utility_types" */
	insert_e_utility_types_one?: GraphQLTypes["e_utility_types"] | undefined,
	/** insert data into the table: "e_veto_pick_types" */
	insert_e_veto_pick_types?: GraphQLTypes["e_veto_pick_types_mutation_response"] | undefined,
	/** insert a single row into the table: "e_veto_pick_types" */
	insert_e_veto_pick_types_one?: GraphQLTypes["e_veto_pick_types"] | undefined,
	/** insert data into the table: "map_pools" */
	insert_map_pools?: GraphQLTypes["map_pools_mutation_response"] | undefined,
	/** insert a single row into the table: "map_pools" */
	insert_map_pools_one?: GraphQLTypes["map_pools"] | undefined,
	/** insert data into the table: "maps" */
	insert_maps?: GraphQLTypes["maps_mutation_response"] | undefined,
	/** insert a single row into the table: "maps" */
	insert_maps_one?: GraphQLTypes["maps"] | undefined,
	/** insert data into the table: "match_lineup_players" */
	insert_match_lineup_players?: GraphQLTypes["match_lineup_players_mutation_response"] | undefined,
	/** insert a single row into the table: "match_lineup_players" */
	insert_match_lineup_players_one?: GraphQLTypes["match_lineup_players"] | undefined,
	/** insert data into the table: "match_lineups" */
	insert_match_lineups?: GraphQLTypes["match_lineups_mutation_response"] | undefined,
	/** insert a single row into the table: "match_lineups" */
	insert_match_lineups_one?: GraphQLTypes["match_lineups"] | undefined,
	/** insert data into the table: "match_map_demos" */
	insert_match_map_demos?: GraphQLTypes["match_map_demos_mutation_response"] | undefined,
	/** insert a single row into the table: "match_map_demos" */
	insert_match_map_demos_one?: GraphQLTypes["match_map_demos"] | undefined,
	/** insert data into the table: "match_map_rounds" */
	insert_match_map_rounds?: GraphQLTypes["match_map_rounds_mutation_response"] | undefined,
	/** insert a single row into the table: "match_map_rounds" */
	insert_match_map_rounds_one?: GraphQLTypes["match_map_rounds"] | undefined,
	/** insert data into the table: "match_maps" */
	insert_match_maps?: GraphQLTypes["match_maps_mutation_response"] | undefined,
	/** insert a single row into the table: "match_maps" */
	insert_match_maps_one?: GraphQLTypes["match_maps"] | undefined,
	/** insert data into the table: "match_veto_picks" */
	insert_match_veto_picks?: GraphQLTypes["match_veto_picks_mutation_response"] | undefined,
	/** insert a single row into the table: "match_veto_picks" */
	insert_match_veto_picks_one?: GraphQLTypes["match_veto_picks"] | undefined,
	/** insert data into the table: "matches" */
	insert_matches?: GraphQLTypes["matches_mutation_response"] | undefined,
	/** insert a single row into the table: "matches" */
	insert_matches_one?: GraphQLTypes["matches"] | undefined,
	/** insert data into the table: "player_assists" */
	insert_player_assists?: GraphQLTypes["player_assists_mutation_response"] | undefined,
	/** insert a single row into the table: "player_assists" */
	insert_player_assists_one?: GraphQLTypes["player_assists"] | undefined,
	/** insert data into the table: "player_damages" */
	insert_player_damages?: GraphQLTypes["player_damages_mutation_response"] | undefined,
	/** insert a single row into the table: "player_damages" */
	insert_player_damages_one?: GraphQLTypes["player_damages"] | undefined,
	/** insert data into the table: "player_flashes" */
	insert_player_flashes?: GraphQLTypes["player_flashes_mutation_response"] | undefined,
	/** insert a single row into the table: "player_flashes" */
	insert_player_flashes_one?: GraphQLTypes["player_flashes"] | undefined,
	/** insert data into the table: "player_kills" */
	insert_player_kills?: GraphQLTypes["player_kills_mutation_response"] | undefined,
	/** insert a single row into the table: "player_kills" */
	insert_player_kills_one?: GraphQLTypes["player_kills"] | undefined,
	/** insert data into the table: "player_objectives" */
	insert_player_objectives?: GraphQLTypes["player_objectives_mutation_response"] | undefined,
	/** insert a single row into the table: "player_objectives" */
	insert_player_objectives_one?: GraphQLTypes["player_objectives"] | undefined,
	/** insert data into the table: "player_unused_utility" */
	insert_player_unused_utility?: GraphQLTypes["player_unused_utility_mutation_response"] | undefined,
	/** insert a single row into the table: "player_unused_utility" */
	insert_player_unused_utility_one?: GraphQLTypes["player_unused_utility"] | undefined,
	/** insert data into the table: "player_utility" */
	insert_player_utility?: GraphQLTypes["player_utility_mutation_response"] | undefined,
	/** insert a single row into the table: "player_utility" */
	insert_player_utility_one?: GraphQLTypes["player_utility"] | undefined,
	/** insert data into the table: "players" */
	insert_players?: GraphQLTypes["players_mutation_response"] | undefined,
	/** insert a single row into the table: "players" */
	insert_players_one?: GraphQLTypes["players"] | undefined,
	/** insert data into the table: "servers" */
	insert_servers?: GraphQLTypes["servers_mutation_response"] | undefined,
	/** insert a single row into the table: "servers" */
	insert_servers_one?: GraphQLTypes["servers"] | undefined,
	/** insert data into the table: "team_invites" */
	insert_team_invites?: GraphQLTypes["team_invites_mutation_response"] | undefined,
	/** insert a single row into the table: "team_invites" */
	insert_team_invites_one?: GraphQLTypes["team_invites"] | undefined,
	/** insert data into the table: "team_roster" */
	insert_team_roster?: GraphQLTypes["team_roster_mutation_response"] | undefined,
	/** insert a single row into the table: "team_roster" */
	insert_team_roster_one?: GraphQLTypes["team_roster"] | undefined,
	/** insert data into the table: "teams" */
	insert_teams?: GraphQLTypes["teams_mutation_response"] | undefined,
	/** insert a single row into the table: "teams" */
	insert_teams_one?: GraphQLTypes["teams"] | undefined,
	/** insert data into the table: "tournament_organizers" */
	insert_tournament_organizers?: GraphQLTypes["tournament_organizers_mutation_response"] | undefined,
	/** insert a single row into the table: "tournament_organizers" */
	insert_tournament_organizers_one?: GraphQLTypes["tournament_organizers"] | undefined,
	/** insert data into the table: "tournament_roster" */
	insert_tournament_roster?: GraphQLTypes["tournament_roster_mutation_response"] | undefined,
	/** insert a single row into the table: "tournament_roster" */
	insert_tournament_roster_one?: GraphQLTypes["tournament_roster"] | undefined,
	/** insert data into the table: "tournament_servers" */
	insert_tournament_servers?: GraphQLTypes["tournament_servers_mutation_response"] | undefined,
	/** insert a single row into the table: "tournament_servers" */
	insert_tournament_servers_one?: GraphQLTypes["tournament_servers"] | undefined,
	/** insert data into the table: "tournament_stages" */
	insert_tournament_stages?: GraphQLTypes["tournament_stages_mutation_response"] | undefined,
	/** insert a single row into the table: "tournament_stages" */
	insert_tournament_stages_one?: GraphQLTypes["tournament_stages"] | undefined,
	/** insert data into the table: "tournament_teams" */
	insert_tournament_teams?: GraphQLTypes["tournament_teams_mutation_response"] | undefined,
	/** insert a single row into the table: "tournament_teams" */
	insert_tournament_teams_one?: GraphQLTypes["tournament_teams"] | undefined,
	/** insert data into the table: "tournaments" */
	insert_tournaments?: GraphQLTypes["tournaments_mutation_response"] | undefined,
	/** insert a single row into the table: "tournaments" */
	insert_tournaments_one?: GraphQLTypes["tournaments"] | undefined,
	/** insert data into the table: "v_match_captains" */
	insert_v_match_captains?: GraphQLTypes["v_match_captains_mutation_response"] | undefined,
	/** insert a single row into the table: "v_match_captains" */
	insert_v_match_captains_one?: GraphQLTypes["v_match_captains"] | undefined,
	/** insert data into the table: "v_pool_maps" */
	insert_v_pool_maps?: GraphQLTypes["v_pool_maps_mutation_response"] | undefined,
	/** insert a single row into the table: "v_pool_maps" */
	insert_v_pool_maps_one?: GraphQLTypes["v_pool_maps"] | undefined,
	/** scheduleMatch */
	scheduleMatch?: GraphQLTypes["SuccessOutput"] | undefined,
	/** startMatch */
	startMatch?: GraphQLTypes["SuccessOutput"] | undefined,
	/** update data of the table: "_map_pool" */
	update__map_pool?: GraphQLTypes["_map_pool_mutation_response"] | undefined,
	/** update single row of the table: "_map_pool" */
	update__map_pool_by_pk?: GraphQLTypes["_map_pool"] | undefined,
	/** update multiples rows of table: "_map_pool" */
	update__map_pool_many?: Array<GraphQLTypes["_map_pool_mutation_response"] | undefined> | undefined,
	/** update data of the table: "e_match_map_status" */
	update_e_match_map_status?: GraphQLTypes["e_match_map_status_mutation_response"] | undefined,
	/** update single row of the table: "e_match_map_status" */
	update_e_match_map_status_by_pk?: GraphQLTypes["e_match_map_status"] | undefined,
	/** update multiples rows of table: "e_match_map_status" */
	update_e_match_map_status_many?: Array<GraphQLTypes["e_match_map_status_mutation_response"] | undefined> | undefined,
	/** update data of the table: "e_match_status" */
	update_e_match_status?: GraphQLTypes["e_match_status_mutation_response"] | undefined,
	/** update single row of the table: "e_match_status" */
	update_e_match_status_by_pk?: GraphQLTypes["e_match_status"] | undefined,
	/** update multiples rows of table: "e_match_status" */
	update_e_match_status_many?: Array<GraphQLTypes["e_match_status_mutation_response"] | undefined> | undefined,
	/** update data of the table: "e_match_types" */
	update_e_match_types?: GraphQLTypes["e_match_types_mutation_response"] | undefined,
	/** update single row of the table: "e_match_types" */
	update_e_match_types_by_pk?: GraphQLTypes["e_match_types"] | undefined,
	/** update multiples rows of table: "e_match_types" */
	update_e_match_types_many?: Array<GraphQLTypes["e_match_types_mutation_response"] | undefined> | undefined,
	/** update data of the table: "e_objective_types" */
	update_e_objective_types?: GraphQLTypes["e_objective_types_mutation_response"] | undefined,
	/** update single row of the table: "e_objective_types" */
	update_e_objective_types_by_pk?: GraphQLTypes["e_objective_types"] | undefined,
	/** update multiples rows of table: "e_objective_types" */
	update_e_objective_types_many?: Array<GraphQLTypes["e_objective_types_mutation_response"] | undefined> | undefined,
	/** update data of the table: "e_sides" */
	update_e_sides?: GraphQLTypes["e_sides_mutation_response"] | undefined,
	/** update single row of the table: "e_sides" */
	update_e_sides_by_pk?: GraphQLTypes["e_sides"] | undefined,
	/** update multiples rows of table: "e_sides" */
	update_e_sides_many?: Array<GraphQLTypes["e_sides_mutation_response"] | undefined> | undefined,
	/** update data of the table: "e_team_roles" */
	update_e_team_roles?: GraphQLTypes["e_team_roles_mutation_response"] | undefined,
	/** update single row of the table: "e_team_roles" */
	update_e_team_roles_by_pk?: GraphQLTypes["e_team_roles"] | undefined,
	/** update multiples rows of table: "e_team_roles" */
	update_e_team_roles_many?: Array<GraphQLTypes["e_team_roles_mutation_response"] | undefined> | undefined,
	/** update data of the table: "e_timeout_settings" */
	update_e_timeout_settings?: GraphQLTypes["e_timeout_settings_mutation_response"] | undefined,
	/** update single row of the table: "e_timeout_settings" */
	update_e_timeout_settings_by_pk?: GraphQLTypes["e_timeout_settings"] | undefined,
	/** update multiples rows of table: "e_timeout_settings" */
	update_e_timeout_settings_many?: Array<GraphQLTypes["e_timeout_settings_mutation_response"] | undefined> | undefined,
	/** update data of the table: "e_utility_types" */
	update_e_utility_types?: GraphQLTypes["e_utility_types_mutation_response"] | undefined,
	/** update single row of the table: "e_utility_types" */
	update_e_utility_types_by_pk?: GraphQLTypes["e_utility_types"] | undefined,
	/** update multiples rows of table: "e_utility_types" */
	update_e_utility_types_many?: Array<GraphQLTypes["e_utility_types_mutation_response"] | undefined> | undefined,
	/** update data of the table: "e_veto_pick_types" */
	update_e_veto_pick_types?: GraphQLTypes["e_veto_pick_types_mutation_response"] | undefined,
	/** update single row of the table: "e_veto_pick_types" */
	update_e_veto_pick_types_by_pk?: GraphQLTypes["e_veto_pick_types"] | undefined,
	/** update multiples rows of table: "e_veto_pick_types" */
	update_e_veto_pick_types_many?: Array<GraphQLTypes["e_veto_pick_types_mutation_response"] | undefined> | undefined,
	/** update data of the table: "map_pools" */
	update_map_pools?: GraphQLTypes["map_pools_mutation_response"] | undefined,
	/** update single row of the table: "map_pools" */
	update_map_pools_by_pk?: GraphQLTypes["map_pools"] | undefined,
	/** update multiples rows of table: "map_pools" */
	update_map_pools_many?: Array<GraphQLTypes["map_pools_mutation_response"] | undefined> | undefined,
	/** update data of the table: "maps" */
	update_maps?: GraphQLTypes["maps_mutation_response"] | undefined,
	/** update single row of the table: "maps" */
	update_maps_by_pk?: GraphQLTypes["maps"] | undefined,
	/** update multiples rows of table: "maps" */
	update_maps_many?: Array<GraphQLTypes["maps_mutation_response"] | undefined> | undefined,
	/** update data of the table: "match_lineup_players" */
	update_match_lineup_players?: GraphQLTypes["match_lineup_players_mutation_response"] | undefined,
	/** update single row of the table: "match_lineup_players" */
	update_match_lineup_players_by_pk?: GraphQLTypes["match_lineup_players"] | undefined,
	/** update multiples rows of table: "match_lineup_players" */
	update_match_lineup_players_many?: Array<GraphQLTypes["match_lineup_players_mutation_response"] | undefined> | undefined,
	/** update data of the table: "match_lineups" */
	update_match_lineups?: GraphQLTypes["match_lineups_mutation_response"] | undefined,
	/** update single row of the table: "match_lineups" */
	update_match_lineups_by_pk?: GraphQLTypes["match_lineups"] | undefined,
	/** update multiples rows of table: "match_lineups" */
	update_match_lineups_many?: Array<GraphQLTypes["match_lineups_mutation_response"] | undefined> | undefined,
	/** update data of the table: "match_map_demos" */
	update_match_map_demos?: GraphQLTypes["match_map_demos_mutation_response"] | undefined,
	/** update single row of the table: "match_map_demos" */
	update_match_map_demos_by_pk?: GraphQLTypes["match_map_demos"] | undefined,
	/** update multiples rows of table: "match_map_demos" */
	update_match_map_demos_many?: Array<GraphQLTypes["match_map_demos_mutation_response"] | undefined> | undefined,
	/** update data of the table: "match_map_rounds" */
	update_match_map_rounds?: GraphQLTypes["match_map_rounds_mutation_response"] | undefined,
	/** update single row of the table: "match_map_rounds" */
	update_match_map_rounds_by_pk?: GraphQLTypes["match_map_rounds"] | undefined,
	/** update multiples rows of table: "match_map_rounds" */
	update_match_map_rounds_many?: Array<GraphQLTypes["match_map_rounds_mutation_response"] | undefined> | undefined,
	/** update data of the table: "match_maps" */
	update_match_maps?: GraphQLTypes["match_maps_mutation_response"] | undefined,
	/** update single row of the table: "match_maps" */
	update_match_maps_by_pk?: GraphQLTypes["match_maps"] | undefined,
	/** update multiples rows of table: "match_maps" */
	update_match_maps_many?: Array<GraphQLTypes["match_maps_mutation_response"] | undefined> | undefined,
	/** update data of the table: "match_veto_picks" */
	update_match_veto_picks?: GraphQLTypes["match_veto_picks_mutation_response"] | undefined,
	/** update single row of the table: "match_veto_picks" */
	update_match_veto_picks_by_pk?: GraphQLTypes["match_veto_picks"] | undefined,
	/** update multiples rows of table: "match_veto_picks" */
	update_match_veto_picks_many?: Array<GraphQLTypes["match_veto_picks_mutation_response"] | undefined> | undefined,
	/** update data of the table: "matches" */
	update_matches?: GraphQLTypes["matches_mutation_response"] | undefined,
	/** update single row of the table: "matches" */
	update_matches_by_pk?: GraphQLTypes["matches"] | undefined,
	/** update multiples rows of table: "matches" */
	update_matches_many?: Array<GraphQLTypes["matches_mutation_response"] | undefined> | undefined,
	/** update data of the table: "player_assists" */
	update_player_assists?: GraphQLTypes["player_assists_mutation_response"] | undefined,
	/** update single row of the table: "player_assists" */
	update_player_assists_by_pk?: GraphQLTypes["player_assists"] | undefined,
	/** update multiples rows of table: "player_assists" */
	update_player_assists_many?: Array<GraphQLTypes["player_assists_mutation_response"] | undefined> | undefined,
	/** update data of the table: "player_damages" */
	update_player_damages?: GraphQLTypes["player_damages_mutation_response"] | undefined,
	/** update single row of the table: "player_damages" */
	update_player_damages_by_pk?: GraphQLTypes["player_damages"] | undefined,
	/** update multiples rows of table: "player_damages" */
	update_player_damages_many?: Array<GraphQLTypes["player_damages_mutation_response"] | undefined> | undefined,
	/** update data of the table: "player_flashes" */
	update_player_flashes?: GraphQLTypes["player_flashes_mutation_response"] | undefined,
	/** update single row of the table: "player_flashes" */
	update_player_flashes_by_pk?: GraphQLTypes["player_flashes"] | undefined,
	/** update multiples rows of table: "player_flashes" */
	update_player_flashes_many?: Array<GraphQLTypes["player_flashes_mutation_response"] | undefined> | undefined,
	/** update data of the table: "player_kills" */
	update_player_kills?: GraphQLTypes["player_kills_mutation_response"] | undefined,
	/** update single row of the table: "player_kills" */
	update_player_kills_by_pk?: GraphQLTypes["player_kills"] | undefined,
	/** update multiples rows of table: "player_kills" */
	update_player_kills_many?: Array<GraphQLTypes["player_kills_mutation_response"] | undefined> | undefined,
	/** update data of the table: "player_objectives" */
	update_player_objectives?: GraphQLTypes["player_objectives_mutation_response"] | undefined,
	/** update single row of the table: "player_objectives" */
	update_player_objectives_by_pk?: GraphQLTypes["player_objectives"] | undefined,
	/** update multiples rows of table: "player_objectives" */
	update_player_objectives_many?: Array<GraphQLTypes["player_objectives_mutation_response"] | undefined> | undefined,
	/** update data of the table: "player_unused_utility" */
	update_player_unused_utility?: GraphQLTypes["player_unused_utility_mutation_response"] | undefined,
	/** update single row of the table: "player_unused_utility" */
	update_player_unused_utility_by_pk?: GraphQLTypes["player_unused_utility"] | undefined,
	/** update multiples rows of table: "player_unused_utility" */
	update_player_unused_utility_many?: Array<GraphQLTypes["player_unused_utility_mutation_response"] | undefined> | undefined,
	/** update data of the table: "player_utility" */
	update_player_utility?: GraphQLTypes["player_utility_mutation_response"] | undefined,
	/** update single row of the table: "player_utility" */
	update_player_utility_by_pk?: GraphQLTypes["player_utility"] | undefined,
	/** update multiples rows of table: "player_utility" */
	update_player_utility_many?: Array<GraphQLTypes["player_utility_mutation_response"] | undefined> | undefined,
	/** update data of the table: "players" */
	update_players?: GraphQLTypes["players_mutation_response"] | undefined,
	/** update single row of the table: "players" */
	update_players_by_pk?: GraphQLTypes["players"] | undefined,
	/** update multiples rows of table: "players" */
	update_players_many?: Array<GraphQLTypes["players_mutation_response"] | undefined> | undefined,
	/** update data of the table: "servers" */
	update_servers?: GraphQLTypes["servers_mutation_response"] | undefined,
	/** update single row of the table: "servers" */
	update_servers_by_pk?: GraphQLTypes["servers"] | undefined,
	/** update multiples rows of table: "servers" */
	update_servers_many?: Array<GraphQLTypes["servers_mutation_response"] | undefined> | undefined,
	/** update data of the table: "team_invites" */
	update_team_invites?: GraphQLTypes["team_invites_mutation_response"] | undefined,
	/** update single row of the table: "team_invites" */
	update_team_invites_by_pk?: GraphQLTypes["team_invites"] | undefined,
	/** update multiples rows of table: "team_invites" */
	update_team_invites_many?: Array<GraphQLTypes["team_invites_mutation_response"] | undefined> | undefined,
	/** update data of the table: "team_roster" */
	update_team_roster?: GraphQLTypes["team_roster_mutation_response"] | undefined,
	/** update single row of the table: "team_roster" */
	update_team_roster_by_pk?: GraphQLTypes["team_roster"] | undefined,
	/** update multiples rows of table: "team_roster" */
	update_team_roster_many?: Array<GraphQLTypes["team_roster_mutation_response"] | undefined> | undefined,
	/** update data of the table: "teams" */
	update_teams?: GraphQLTypes["teams_mutation_response"] | undefined,
	/** update single row of the table: "teams" */
	update_teams_by_pk?: GraphQLTypes["teams"] | undefined,
	/** update multiples rows of table: "teams" */
	update_teams_many?: Array<GraphQLTypes["teams_mutation_response"] | undefined> | undefined,
	/** update data of the table: "tournament_organizers" */
	update_tournament_organizers?: GraphQLTypes["tournament_organizers_mutation_response"] | undefined,
	/** update single row of the table: "tournament_organizers" */
	update_tournament_organizers_by_pk?: GraphQLTypes["tournament_organizers"] | undefined,
	/** update multiples rows of table: "tournament_organizers" */
	update_tournament_organizers_many?: Array<GraphQLTypes["tournament_organizers_mutation_response"] | undefined> | undefined,
	/** update data of the table: "tournament_roster" */
	update_tournament_roster?: GraphQLTypes["tournament_roster_mutation_response"] | undefined,
	/** update single row of the table: "tournament_roster" */
	update_tournament_roster_by_pk?: GraphQLTypes["tournament_roster"] | undefined,
	/** update multiples rows of table: "tournament_roster" */
	update_tournament_roster_many?: Array<GraphQLTypes["tournament_roster_mutation_response"] | undefined> | undefined,
	/** update data of the table: "tournament_servers" */
	update_tournament_servers?: GraphQLTypes["tournament_servers_mutation_response"] | undefined,
	/** update single row of the table: "tournament_servers" */
	update_tournament_servers_by_pk?: GraphQLTypes["tournament_servers"] | undefined,
	/** update multiples rows of table: "tournament_servers" */
	update_tournament_servers_many?: Array<GraphQLTypes["tournament_servers_mutation_response"] | undefined> | undefined,
	/** update data of the table: "tournament_stages" */
	update_tournament_stages?: GraphQLTypes["tournament_stages_mutation_response"] | undefined,
	/** update single row of the table: "tournament_stages" */
	update_tournament_stages_by_pk?: GraphQLTypes["tournament_stages"] | undefined,
	/** update multiples rows of table: "tournament_stages" */
	update_tournament_stages_many?: Array<GraphQLTypes["tournament_stages_mutation_response"] | undefined> | undefined,
	/** update data of the table: "tournament_teams" */
	update_tournament_teams?: GraphQLTypes["tournament_teams_mutation_response"] | undefined,
	/** update single row of the table: "tournament_teams" */
	update_tournament_teams_by_pk?: GraphQLTypes["tournament_teams"] | undefined,
	/** update multiples rows of table: "tournament_teams" */
	update_tournament_teams_many?: Array<GraphQLTypes["tournament_teams_mutation_response"] | undefined> | undefined,
	/** update data of the table: "tournaments" */
	update_tournaments?: GraphQLTypes["tournaments_mutation_response"] | undefined,
	/** update single row of the table: "tournaments" */
	update_tournaments_by_pk?: GraphQLTypes["tournaments"] | undefined,
	/** update multiples rows of table: "tournaments" */
	update_tournaments_many?: Array<GraphQLTypes["tournaments_mutation_response"] | undefined> | undefined,
	/** update data of the table: "v_match_captains" */
	update_v_match_captains?: GraphQLTypes["v_match_captains_mutation_response"] | undefined,
	/** update multiples rows of table: "v_match_captains" */
	update_v_match_captains_many?: Array<GraphQLTypes["v_match_captains_mutation_response"] | undefined> | undefined
};
	["numeric"]: "scalar" & { name: "numeric" };
	/** Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'. */
["numeric_comparison_exp"]: {
		_eq?: GraphQLTypes["numeric"] | undefined,
	_gt?: GraphQLTypes["numeric"] | undefined,
	_gte?: GraphQLTypes["numeric"] | undefined,
	_in?: Array<GraphQLTypes["numeric"]> | undefined,
	_is_null?: boolean | undefined,
	_lt?: GraphQLTypes["numeric"] | undefined,
	_lte?: GraphQLTypes["numeric"] | undefined,
	_neq?: GraphQLTypes["numeric"] | undefined,
	_nin?: Array<GraphQLTypes["numeric"]> | undefined
};
	/** column ordering options */
["order_by"]: order_by;
	/** columns and relationships of "player_assists" */
["player_assists"]: {
	__typename: "player_assists",
	/** An object relationship */
	attacked_player: GraphQLTypes["players"],
	attacked_steam_id: GraphQLTypes["bigint"],
	attacked_team: string,
	attacker_steam_id: GraphQLTypes["bigint"],
	attacker_team: string,
	flash: boolean,
	id: GraphQLTypes["uuid"],
	/** An object relationship */
	match: GraphQLTypes["matches"],
	match_id: GraphQLTypes["uuid"],
	/** An object relationship */
	match_map: GraphQLTypes["match_maps"],
	match_map_id: GraphQLTypes["uuid"],
	/** An object relationship */
	player: GraphQLTypes["players"],
	round: number,
	time: GraphQLTypes["timestamptz"]
};
	/** aggregated selection of "player_assists" */
["player_assists_aggregate"]: {
	__typename: "player_assists_aggregate",
	aggregate?: GraphQLTypes["player_assists_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["player_assists"]>
};
	["player_assists_aggregate_bool_exp"]: {
		bool_and?: GraphQLTypes["player_assists_aggregate_bool_exp_bool_and"] | undefined,
	bool_or?: GraphQLTypes["player_assists_aggregate_bool_exp_bool_or"] | undefined,
	count?: GraphQLTypes["player_assists_aggregate_bool_exp_count"] | undefined
};
	["player_assists_aggregate_bool_exp_bool_and"]: {
		arguments: GraphQLTypes["player_assists_select_column_player_assists_aggregate_bool_exp_bool_and_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["player_assists_bool_exp"] | undefined,
	predicate: GraphQLTypes["Boolean_comparison_exp"]
};
	["player_assists_aggregate_bool_exp_bool_or"]: {
		arguments: GraphQLTypes["player_assists_select_column_player_assists_aggregate_bool_exp_bool_or_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["player_assists_bool_exp"] | undefined,
	predicate: GraphQLTypes["Boolean_comparison_exp"]
};
	["player_assists_aggregate_bool_exp_count"]: {
		arguments?: Array<GraphQLTypes["player_assists_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["player_assists_bool_exp"] | undefined,
	predicate: GraphQLTypes["Int_comparison_exp"]
};
	/** aggregate fields of "player_assists" */
["player_assists_aggregate_fields"]: {
	__typename: "player_assists_aggregate_fields",
	avg?: GraphQLTypes["player_assists_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["player_assists_max_fields"] | undefined,
	min?: GraphQLTypes["player_assists_min_fields"] | undefined,
	stddev?: GraphQLTypes["player_assists_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["player_assists_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["player_assists_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["player_assists_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["player_assists_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["player_assists_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["player_assists_variance_fields"] | undefined
};
	/** order by aggregate values of table "player_assists" */
["player_assists_aggregate_order_by"]: {
		avg?: GraphQLTypes["player_assists_avg_order_by"] | undefined,
	count?: GraphQLTypes["order_by"] | undefined,
	max?: GraphQLTypes["player_assists_max_order_by"] | undefined,
	min?: GraphQLTypes["player_assists_min_order_by"] | undefined,
	stddev?: GraphQLTypes["player_assists_stddev_order_by"] | undefined,
	stddev_pop?: GraphQLTypes["player_assists_stddev_pop_order_by"] | undefined,
	stddev_samp?: GraphQLTypes["player_assists_stddev_samp_order_by"] | undefined,
	sum?: GraphQLTypes["player_assists_sum_order_by"] | undefined,
	var_pop?: GraphQLTypes["player_assists_var_pop_order_by"] | undefined,
	var_samp?: GraphQLTypes["player_assists_var_samp_order_by"] | undefined,
	variance?: GraphQLTypes["player_assists_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "player_assists" */
["player_assists_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["player_assists_insert_input"]>,
	/** upsert condition */
	on_conflict?: GraphQLTypes["player_assists_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["player_assists_avg_fields"]: {
	__typename: "player_assists_avg_fields",
	attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by avg() on columns of table "player_assists" */
["player_assists_avg_order_by"]: {
		attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "player_assists". All fields are combined with a logical 'AND'. */
["player_assists_bool_exp"]: {
		_and?: Array<GraphQLTypes["player_assists_bool_exp"]> | undefined,
	_not?: GraphQLTypes["player_assists_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["player_assists_bool_exp"]> | undefined,
	attacked_player?: GraphQLTypes["players_bool_exp"] | undefined,
	attacked_steam_id?: GraphQLTypes["bigint_comparison_exp"] | undefined,
	attacked_team?: GraphQLTypes["String_comparison_exp"] | undefined,
	attacker_steam_id?: GraphQLTypes["bigint_comparison_exp"] | undefined,
	attacker_team?: GraphQLTypes["String_comparison_exp"] | undefined,
	flash?: GraphQLTypes["Boolean_comparison_exp"] | undefined,
	id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	match?: GraphQLTypes["matches_bool_exp"] | undefined,
	match_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	match_map?: GraphQLTypes["match_maps_bool_exp"] | undefined,
	match_map_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	player?: GraphQLTypes["players_bool_exp"] | undefined,
	round?: GraphQLTypes["Int_comparison_exp"] | undefined,
	time?: GraphQLTypes["timestamptz_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "player_assists" */
["player_assists_constraint"]: player_assists_constraint;
	/** input type for incrementing numeric columns in table "player_assists" */
["player_assists_inc_input"]: {
		attacked_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	round?: number | undefined
};
	/** input type for inserting data into table "player_assists" */
["player_assists_insert_input"]: {
		attacked_player?: GraphQLTypes["players_obj_rel_insert_input"] | undefined,
	attacked_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacked_team?: string | undefined,
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacker_team?: string | undefined,
	flash?: boolean | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match?: GraphQLTypes["matches_obj_rel_insert_input"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map?: GraphQLTypes["match_maps_obj_rel_insert_input"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	player?: GraphQLTypes["players_obj_rel_insert_input"] | undefined,
	round?: number | undefined,
	time?: GraphQLTypes["timestamptz"] | undefined
};
	/** aggregate max on columns */
["player_assists_max_fields"]: {
	__typename: "player_assists_max_fields",
	attacked_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacked_team?: string | undefined,
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacker_team?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	round?: number | undefined,
	time?: GraphQLTypes["timestamptz"] | undefined
};
	/** order by max() on columns of table "player_assists" */
["player_assists_max_order_by"]: {
		attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacked_team?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_team?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	match_map_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined,
	time?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["player_assists_min_fields"]: {
	__typename: "player_assists_min_fields",
	attacked_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacked_team?: string | undefined,
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacker_team?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	round?: number | undefined,
	time?: GraphQLTypes["timestamptz"] | undefined
};
	/** order by min() on columns of table "player_assists" */
["player_assists_min_order_by"]: {
		attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacked_team?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_team?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	match_map_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined,
	time?: GraphQLTypes["order_by"] | undefined
};
	/** response of any mutation on the table "player_assists" */
["player_assists_mutation_response"]: {
	__typename: "player_assists_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["player_assists"]>
};
	/** on_conflict condition type for table "player_assists" */
["player_assists_on_conflict"]: {
		constraint: GraphQLTypes["player_assists_constraint"],
	update_columns: Array<GraphQLTypes["player_assists_update_column"]>,
	where?: GraphQLTypes["player_assists_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "player_assists". */
["player_assists_order_by"]: {
		attacked_player?: GraphQLTypes["players_order_by"] | undefined,
	attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacked_team?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_team?: GraphQLTypes["order_by"] | undefined,
	flash?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	match?: GraphQLTypes["matches_order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	match_map?: GraphQLTypes["match_maps_order_by"] | undefined,
	match_map_id?: GraphQLTypes["order_by"] | undefined,
	player?: GraphQLTypes["players_order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined,
	time?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: player_assists */
["player_assists_pk_columns_input"]: {
		id: GraphQLTypes["uuid"]
};
	/** select columns of table "player_assists" */
["player_assists_select_column"]: player_assists_select_column;
	/** select "player_assists_aggregate_bool_exp_bool_and_arguments_columns" columns of table "player_assists" */
["player_assists_select_column_player_assists_aggregate_bool_exp_bool_and_arguments_columns"]: player_assists_select_column_player_assists_aggregate_bool_exp_bool_and_arguments_columns;
	/** select "player_assists_aggregate_bool_exp_bool_or_arguments_columns" columns of table "player_assists" */
["player_assists_select_column_player_assists_aggregate_bool_exp_bool_or_arguments_columns"]: player_assists_select_column_player_assists_aggregate_bool_exp_bool_or_arguments_columns;
	/** input type for updating data in table "player_assists" */
["player_assists_set_input"]: {
		attacked_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacked_team?: string | undefined,
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacker_team?: string | undefined,
	flash?: boolean | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	round?: number | undefined,
	time?: GraphQLTypes["timestamptz"] | undefined
};
	/** aggregate stddev on columns */
["player_assists_stddev_fields"]: {
	__typename: "player_assists_stddev_fields",
	attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by stddev() on columns of table "player_assists" */
["player_assists_stddev_order_by"]: {
		attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["player_assists_stddev_pop_fields"]: {
	__typename: "player_assists_stddev_pop_fields",
	attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by stddev_pop() on columns of table "player_assists" */
["player_assists_stddev_pop_order_by"]: {
		attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["player_assists_stddev_samp_fields"]: {
	__typename: "player_assists_stddev_samp_fields",
	attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by stddev_samp() on columns of table "player_assists" */
["player_assists_stddev_samp_order_by"]: {
		attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "player_assists" */
["player_assists_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["player_assists_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["player_assists_stream_cursor_value_input"]: {
		attacked_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacked_team?: string | undefined,
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacker_team?: string | undefined,
	flash?: boolean | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	round?: number | undefined,
	time?: GraphQLTypes["timestamptz"] | undefined
};
	/** aggregate sum on columns */
["player_assists_sum_fields"]: {
	__typename: "player_assists_sum_fields",
	attacked_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	round?: number | undefined
};
	/** order by sum() on columns of table "player_assists" */
["player_assists_sum_order_by"]: {
		attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** update columns of table "player_assists" */
["player_assists_update_column"]: player_assists_update_column;
	["player_assists_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["player_assists_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["player_assists_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["player_assists_bool_exp"]
};
	/** aggregate var_pop on columns */
["player_assists_var_pop_fields"]: {
	__typename: "player_assists_var_pop_fields",
	attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by var_pop() on columns of table "player_assists" */
["player_assists_var_pop_order_by"]: {
		attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["player_assists_var_samp_fields"]: {
	__typename: "player_assists_var_samp_fields",
	attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by var_samp() on columns of table "player_assists" */
["player_assists_var_samp_order_by"]: {
		attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["player_assists_variance_fields"]: {
	__typename: "player_assists_variance_fields",
	attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by variance() on columns of table "player_assists" */
["player_assists_variance_order_by"]: {
		attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** columns and relationships of "player_damages" */
["player_damages"]: {
	__typename: "player_damages",
	armor: number,
	attacked_location: string,
	attacked_location_coordinates?: string | undefined,
	/** An object relationship */
	attacked_player: GraphQLTypes["players"],
	attacked_steam_id: GraphQLTypes["bigint"],
	attacked_team: string,
	attacker_location?: string | undefined,
	attacker_location_coordinates?: string | undefined,
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacker_team?: string | undefined,
	damage: number,
	damage_armor: number,
	health: number,
	hitgroup: string,
	id: GraphQLTypes["uuid"],
	/** An object relationship */
	match: GraphQLTypes["matches"],
	match_id: GraphQLTypes["uuid"],
	/** An object relationship */
	match_map: GraphQLTypes["match_maps"],
	match_map_id: GraphQLTypes["uuid"],
	/** An object relationship */
	player?: GraphQLTypes["players"] | undefined,
	round: GraphQLTypes["numeric"],
	/** A computed field, executes function "is_team_damage" */
	team_damage?: boolean | undefined,
	time: GraphQLTypes["timestamptz"],
	with?: string | undefined
};
	/** aggregated selection of "player_damages" */
["player_damages_aggregate"]: {
	__typename: "player_damages_aggregate",
	aggregate?: GraphQLTypes["player_damages_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["player_damages"]>
};
	["player_damages_aggregate_bool_exp"]: {
		count?: GraphQLTypes["player_damages_aggregate_bool_exp_count"] | undefined
};
	["player_damages_aggregate_bool_exp_count"]: {
		arguments?: Array<GraphQLTypes["player_damages_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["player_damages_bool_exp"] | undefined,
	predicate: GraphQLTypes["Int_comparison_exp"]
};
	/** aggregate fields of "player_damages" */
["player_damages_aggregate_fields"]: {
	__typename: "player_damages_aggregate_fields",
	avg?: GraphQLTypes["player_damages_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["player_damages_max_fields"] | undefined,
	min?: GraphQLTypes["player_damages_min_fields"] | undefined,
	stddev?: GraphQLTypes["player_damages_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["player_damages_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["player_damages_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["player_damages_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["player_damages_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["player_damages_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["player_damages_variance_fields"] | undefined
};
	/** order by aggregate values of table "player_damages" */
["player_damages_aggregate_order_by"]: {
		avg?: GraphQLTypes["player_damages_avg_order_by"] | undefined,
	count?: GraphQLTypes["order_by"] | undefined,
	max?: GraphQLTypes["player_damages_max_order_by"] | undefined,
	min?: GraphQLTypes["player_damages_min_order_by"] | undefined,
	stddev?: GraphQLTypes["player_damages_stddev_order_by"] | undefined,
	stddev_pop?: GraphQLTypes["player_damages_stddev_pop_order_by"] | undefined,
	stddev_samp?: GraphQLTypes["player_damages_stddev_samp_order_by"] | undefined,
	sum?: GraphQLTypes["player_damages_sum_order_by"] | undefined,
	var_pop?: GraphQLTypes["player_damages_var_pop_order_by"] | undefined,
	var_samp?: GraphQLTypes["player_damages_var_samp_order_by"] | undefined,
	variance?: GraphQLTypes["player_damages_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "player_damages" */
["player_damages_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["player_damages_insert_input"]>,
	/** upsert condition */
	on_conflict?: GraphQLTypes["player_damages_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["player_damages_avg_fields"]: {
	__typename: "player_damages_avg_fields",
	armor?: number | undefined,
	attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	damage?: number | undefined,
	damage_armor?: number | undefined,
	health?: number | undefined,
	round?: number | undefined
};
	/** order by avg() on columns of table "player_damages" */
["player_damages_avg_order_by"]: {
		armor?: GraphQLTypes["order_by"] | undefined,
	attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	damage?: GraphQLTypes["order_by"] | undefined,
	damage_armor?: GraphQLTypes["order_by"] | undefined,
	health?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "player_damages". All fields are combined with a logical 'AND'. */
["player_damages_bool_exp"]: {
		_and?: Array<GraphQLTypes["player_damages_bool_exp"]> | undefined,
	_not?: GraphQLTypes["player_damages_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["player_damages_bool_exp"]> | undefined,
	armor?: GraphQLTypes["Int_comparison_exp"] | undefined,
	attacked_location?: GraphQLTypes["String_comparison_exp"] | undefined,
	attacked_location_coordinates?: GraphQLTypes["String_comparison_exp"] | undefined,
	attacked_player?: GraphQLTypes["players_bool_exp"] | undefined,
	attacked_steam_id?: GraphQLTypes["bigint_comparison_exp"] | undefined,
	attacked_team?: GraphQLTypes["String_comparison_exp"] | undefined,
	attacker_location?: GraphQLTypes["String_comparison_exp"] | undefined,
	attacker_location_coordinates?: GraphQLTypes["String_comparison_exp"] | undefined,
	attacker_steam_id?: GraphQLTypes["bigint_comparison_exp"] | undefined,
	attacker_team?: GraphQLTypes["String_comparison_exp"] | undefined,
	damage?: GraphQLTypes["Int_comparison_exp"] | undefined,
	damage_armor?: GraphQLTypes["Int_comparison_exp"] | undefined,
	health?: GraphQLTypes["Int_comparison_exp"] | undefined,
	hitgroup?: GraphQLTypes["String_comparison_exp"] | undefined,
	id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	match?: GraphQLTypes["matches_bool_exp"] | undefined,
	match_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	match_map?: GraphQLTypes["match_maps_bool_exp"] | undefined,
	match_map_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	player?: GraphQLTypes["players_bool_exp"] | undefined,
	round?: GraphQLTypes["numeric_comparison_exp"] | undefined,
	team_damage?: GraphQLTypes["Boolean_comparison_exp"] | undefined,
	time?: GraphQLTypes["timestamptz_comparison_exp"] | undefined,
	with?: GraphQLTypes["String_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "player_damages" */
["player_damages_constraint"]: player_damages_constraint;
	/** input type for incrementing numeric columns in table "player_damages" */
["player_damages_inc_input"]: {
		armor?: number | undefined,
	attacked_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	damage?: number | undefined,
	damage_armor?: number | undefined,
	health?: number | undefined,
	round?: GraphQLTypes["numeric"] | undefined
};
	/** input type for inserting data into table "player_damages" */
["player_damages_insert_input"]: {
		armor?: number | undefined,
	attacked_location?: string | undefined,
	attacked_location_coordinates?: string | undefined,
	attacked_player?: GraphQLTypes["players_obj_rel_insert_input"] | undefined,
	attacked_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacked_team?: string | undefined,
	attacker_location?: string | undefined,
	attacker_location_coordinates?: string | undefined,
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacker_team?: string | undefined,
	damage?: number | undefined,
	damage_armor?: number | undefined,
	health?: number | undefined,
	hitgroup?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match?: GraphQLTypes["matches_obj_rel_insert_input"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map?: GraphQLTypes["match_maps_obj_rel_insert_input"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	player?: GraphQLTypes["players_obj_rel_insert_input"] | undefined,
	round?: GraphQLTypes["numeric"] | undefined,
	time?: GraphQLTypes["timestamptz"] | undefined,
	with?: string | undefined
};
	/** aggregate max on columns */
["player_damages_max_fields"]: {
	__typename: "player_damages_max_fields",
	armor?: number | undefined,
	attacked_location?: string | undefined,
	attacked_location_coordinates?: string | undefined,
	attacked_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacked_team?: string | undefined,
	attacker_location?: string | undefined,
	attacker_location_coordinates?: string | undefined,
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacker_team?: string | undefined,
	damage?: number | undefined,
	damage_armor?: number | undefined,
	health?: number | undefined,
	hitgroup?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	round?: GraphQLTypes["numeric"] | undefined,
	time?: GraphQLTypes["timestamptz"] | undefined,
	with?: string | undefined
};
	/** order by max() on columns of table "player_damages" */
["player_damages_max_order_by"]: {
		armor?: GraphQLTypes["order_by"] | undefined,
	attacked_location?: GraphQLTypes["order_by"] | undefined,
	attacked_location_coordinates?: GraphQLTypes["order_by"] | undefined,
	attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacked_team?: GraphQLTypes["order_by"] | undefined,
	attacker_location?: GraphQLTypes["order_by"] | undefined,
	attacker_location_coordinates?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_team?: GraphQLTypes["order_by"] | undefined,
	damage?: GraphQLTypes["order_by"] | undefined,
	damage_armor?: GraphQLTypes["order_by"] | undefined,
	health?: GraphQLTypes["order_by"] | undefined,
	hitgroup?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	match_map_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined,
	time?: GraphQLTypes["order_by"] | undefined,
	with?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["player_damages_min_fields"]: {
	__typename: "player_damages_min_fields",
	armor?: number | undefined,
	attacked_location?: string | undefined,
	attacked_location_coordinates?: string | undefined,
	attacked_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacked_team?: string | undefined,
	attacker_location?: string | undefined,
	attacker_location_coordinates?: string | undefined,
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacker_team?: string | undefined,
	damage?: number | undefined,
	damage_armor?: number | undefined,
	health?: number | undefined,
	hitgroup?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	round?: GraphQLTypes["numeric"] | undefined,
	time?: GraphQLTypes["timestamptz"] | undefined,
	with?: string | undefined
};
	/** order by min() on columns of table "player_damages" */
["player_damages_min_order_by"]: {
		armor?: GraphQLTypes["order_by"] | undefined,
	attacked_location?: GraphQLTypes["order_by"] | undefined,
	attacked_location_coordinates?: GraphQLTypes["order_by"] | undefined,
	attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacked_team?: GraphQLTypes["order_by"] | undefined,
	attacker_location?: GraphQLTypes["order_by"] | undefined,
	attacker_location_coordinates?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_team?: GraphQLTypes["order_by"] | undefined,
	damage?: GraphQLTypes["order_by"] | undefined,
	damage_armor?: GraphQLTypes["order_by"] | undefined,
	health?: GraphQLTypes["order_by"] | undefined,
	hitgroup?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	match_map_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined,
	time?: GraphQLTypes["order_by"] | undefined,
	with?: GraphQLTypes["order_by"] | undefined
};
	/** response of any mutation on the table "player_damages" */
["player_damages_mutation_response"]: {
	__typename: "player_damages_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["player_damages"]>
};
	/** on_conflict condition type for table "player_damages" */
["player_damages_on_conflict"]: {
		constraint: GraphQLTypes["player_damages_constraint"],
	update_columns: Array<GraphQLTypes["player_damages_update_column"]>,
	where?: GraphQLTypes["player_damages_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "player_damages". */
["player_damages_order_by"]: {
		armor?: GraphQLTypes["order_by"] | undefined,
	attacked_location?: GraphQLTypes["order_by"] | undefined,
	attacked_location_coordinates?: GraphQLTypes["order_by"] | undefined,
	attacked_player?: GraphQLTypes["players_order_by"] | undefined,
	attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacked_team?: GraphQLTypes["order_by"] | undefined,
	attacker_location?: GraphQLTypes["order_by"] | undefined,
	attacker_location_coordinates?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_team?: GraphQLTypes["order_by"] | undefined,
	damage?: GraphQLTypes["order_by"] | undefined,
	damage_armor?: GraphQLTypes["order_by"] | undefined,
	health?: GraphQLTypes["order_by"] | undefined,
	hitgroup?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	match?: GraphQLTypes["matches_order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	match_map?: GraphQLTypes["match_maps_order_by"] | undefined,
	match_map_id?: GraphQLTypes["order_by"] | undefined,
	player?: GraphQLTypes["players_order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined,
	team_damage?: GraphQLTypes["order_by"] | undefined,
	time?: GraphQLTypes["order_by"] | undefined,
	with?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: player_damages */
["player_damages_pk_columns_input"]: {
		id: GraphQLTypes["uuid"]
};
	/** select columns of table "player_damages" */
["player_damages_select_column"]: player_damages_select_column;
	/** input type for updating data in table "player_damages" */
["player_damages_set_input"]: {
		armor?: number | undefined,
	attacked_location?: string | undefined,
	attacked_location_coordinates?: string | undefined,
	attacked_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacked_team?: string | undefined,
	attacker_location?: string | undefined,
	attacker_location_coordinates?: string | undefined,
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacker_team?: string | undefined,
	damage?: number | undefined,
	damage_armor?: number | undefined,
	health?: number | undefined,
	hitgroup?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	round?: GraphQLTypes["numeric"] | undefined,
	time?: GraphQLTypes["timestamptz"] | undefined,
	with?: string | undefined
};
	/** aggregate stddev on columns */
["player_damages_stddev_fields"]: {
	__typename: "player_damages_stddev_fields",
	armor?: number | undefined,
	attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	damage?: number | undefined,
	damage_armor?: number | undefined,
	health?: number | undefined,
	round?: number | undefined
};
	/** order by stddev() on columns of table "player_damages" */
["player_damages_stddev_order_by"]: {
		armor?: GraphQLTypes["order_by"] | undefined,
	attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	damage?: GraphQLTypes["order_by"] | undefined,
	damage_armor?: GraphQLTypes["order_by"] | undefined,
	health?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["player_damages_stddev_pop_fields"]: {
	__typename: "player_damages_stddev_pop_fields",
	armor?: number | undefined,
	attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	damage?: number | undefined,
	damage_armor?: number | undefined,
	health?: number | undefined,
	round?: number | undefined
};
	/** order by stddev_pop() on columns of table "player_damages" */
["player_damages_stddev_pop_order_by"]: {
		armor?: GraphQLTypes["order_by"] | undefined,
	attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	damage?: GraphQLTypes["order_by"] | undefined,
	damage_armor?: GraphQLTypes["order_by"] | undefined,
	health?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["player_damages_stddev_samp_fields"]: {
	__typename: "player_damages_stddev_samp_fields",
	armor?: number | undefined,
	attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	damage?: number | undefined,
	damage_armor?: number | undefined,
	health?: number | undefined,
	round?: number | undefined
};
	/** order by stddev_samp() on columns of table "player_damages" */
["player_damages_stddev_samp_order_by"]: {
		armor?: GraphQLTypes["order_by"] | undefined,
	attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	damage?: GraphQLTypes["order_by"] | undefined,
	damage_armor?: GraphQLTypes["order_by"] | undefined,
	health?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "player_damages" */
["player_damages_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["player_damages_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["player_damages_stream_cursor_value_input"]: {
		armor?: number | undefined,
	attacked_location?: string | undefined,
	attacked_location_coordinates?: string | undefined,
	attacked_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacked_team?: string | undefined,
	attacker_location?: string | undefined,
	attacker_location_coordinates?: string | undefined,
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacker_team?: string | undefined,
	damage?: number | undefined,
	damage_armor?: number | undefined,
	health?: number | undefined,
	hitgroup?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	round?: GraphQLTypes["numeric"] | undefined,
	time?: GraphQLTypes["timestamptz"] | undefined,
	with?: string | undefined
};
	/** aggregate sum on columns */
["player_damages_sum_fields"]: {
	__typename: "player_damages_sum_fields",
	armor?: number | undefined,
	attacked_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	damage?: number | undefined,
	damage_armor?: number | undefined,
	health?: number | undefined,
	round?: GraphQLTypes["numeric"] | undefined
};
	/** order by sum() on columns of table "player_damages" */
["player_damages_sum_order_by"]: {
		armor?: GraphQLTypes["order_by"] | undefined,
	attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	damage?: GraphQLTypes["order_by"] | undefined,
	damage_armor?: GraphQLTypes["order_by"] | undefined,
	health?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** update columns of table "player_damages" */
["player_damages_update_column"]: player_damages_update_column;
	["player_damages_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["player_damages_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["player_damages_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["player_damages_bool_exp"]
};
	/** aggregate var_pop on columns */
["player_damages_var_pop_fields"]: {
	__typename: "player_damages_var_pop_fields",
	armor?: number | undefined,
	attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	damage?: number | undefined,
	damage_armor?: number | undefined,
	health?: number | undefined,
	round?: number | undefined
};
	/** order by var_pop() on columns of table "player_damages" */
["player_damages_var_pop_order_by"]: {
		armor?: GraphQLTypes["order_by"] | undefined,
	attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	damage?: GraphQLTypes["order_by"] | undefined,
	damage_armor?: GraphQLTypes["order_by"] | undefined,
	health?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["player_damages_var_samp_fields"]: {
	__typename: "player_damages_var_samp_fields",
	armor?: number | undefined,
	attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	damage?: number | undefined,
	damage_armor?: number | undefined,
	health?: number | undefined,
	round?: number | undefined
};
	/** order by var_samp() on columns of table "player_damages" */
["player_damages_var_samp_order_by"]: {
		armor?: GraphQLTypes["order_by"] | undefined,
	attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	damage?: GraphQLTypes["order_by"] | undefined,
	damage_armor?: GraphQLTypes["order_by"] | undefined,
	health?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["player_damages_variance_fields"]: {
	__typename: "player_damages_variance_fields",
	armor?: number | undefined,
	attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	damage?: number | undefined,
	damage_armor?: number | undefined,
	health?: number | undefined,
	round?: number | undefined
};
	/** order by variance() on columns of table "player_damages" */
["player_damages_variance_order_by"]: {
		armor?: GraphQLTypes["order_by"] | undefined,
	attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	damage?: GraphQLTypes["order_by"] | undefined,
	damage_armor?: GraphQLTypes["order_by"] | undefined,
	health?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** columns and relationships of "player_flashes" */
["player_flashes"]: {
	__typename: "player_flashes",
	attacked_steam_id: GraphQLTypes["bigint"],
	attacker_steam_id: GraphQLTypes["bigint"],
	/** An object relationship */
	blinded: GraphQLTypes["players"],
	duration: GraphQLTypes["numeric"],
	id: GraphQLTypes["uuid"],
	/** An object relationship */
	match: GraphQLTypes["matches"],
	match_id: GraphQLTypes["uuid"],
	/** An object relationship */
	match_map: GraphQLTypes["match_maps"],
	match_map_id: GraphQLTypes["uuid"],
	round: number,
	team_flash: boolean,
	/** An object relationship */
	thrown_by: GraphQLTypes["players"],
	time: GraphQLTypes["timestamptz"]
};
	/** aggregated selection of "player_flashes" */
["player_flashes_aggregate"]: {
	__typename: "player_flashes_aggregate",
	aggregate?: GraphQLTypes["player_flashes_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["player_flashes"]>
};
	["player_flashes_aggregate_bool_exp"]: {
		bool_and?: GraphQLTypes["player_flashes_aggregate_bool_exp_bool_and"] | undefined,
	bool_or?: GraphQLTypes["player_flashes_aggregate_bool_exp_bool_or"] | undefined,
	count?: GraphQLTypes["player_flashes_aggregate_bool_exp_count"] | undefined
};
	["player_flashes_aggregate_bool_exp_bool_and"]: {
		arguments: GraphQLTypes["player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_and_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["player_flashes_bool_exp"] | undefined,
	predicate: GraphQLTypes["Boolean_comparison_exp"]
};
	["player_flashes_aggregate_bool_exp_bool_or"]: {
		arguments: GraphQLTypes["player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_or_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["player_flashes_bool_exp"] | undefined,
	predicate: GraphQLTypes["Boolean_comparison_exp"]
};
	["player_flashes_aggregate_bool_exp_count"]: {
		arguments?: Array<GraphQLTypes["player_flashes_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["player_flashes_bool_exp"] | undefined,
	predicate: GraphQLTypes["Int_comparison_exp"]
};
	/** aggregate fields of "player_flashes" */
["player_flashes_aggregate_fields"]: {
	__typename: "player_flashes_aggregate_fields",
	avg?: GraphQLTypes["player_flashes_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["player_flashes_max_fields"] | undefined,
	min?: GraphQLTypes["player_flashes_min_fields"] | undefined,
	stddev?: GraphQLTypes["player_flashes_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["player_flashes_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["player_flashes_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["player_flashes_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["player_flashes_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["player_flashes_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["player_flashes_variance_fields"] | undefined
};
	/** order by aggregate values of table "player_flashes" */
["player_flashes_aggregate_order_by"]: {
		avg?: GraphQLTypes["player_flashes_avg_order_by"] | undefined,
	count?: GraphQLTypes["order_by"] | undefined,
	max?: GraphQLTypes["player_flashes_max_order_by"] | undefined,
	min?: GraphQLTypes["player_flashes_min_order_by"] | undefined,
	stddev?: GraphQLTypes["player_flashes_stddev_order_by"] | undefined,
	stddev_pop?: GraphQLTypes["player_flashes_stddev_pop_order_by"] | undefined,
	stddev_samp?: GraphQLTypes["player_flashes_stddev_samp_order_by"] | undefined,
	sum?: GraphQLTypes["player_flashes_sum_order_by"] | undefined,
	var_pop?: GraphQLTypes["player_flashes_var_pop_order_by"] | undefined,
	var_samp?: GraphQLTypes["player_flashes_var_samp_order_by"] | undefined,
	variance?: GraphQLTypes["player_flashes_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "player_flashes" */
["player_flashes_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["player_flashes_insert_input"]>,
	/** upsert condition */
	on_conflict?: GraphQLTypes["player_flashes_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["player_flashes_avg_fields"]: {
	__typename: "player_flashes_avg_fields",
	attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	duration?: number | undefined,
	round?: number | undefined
};
	/** order by avg() on columns of table "player_flashes" */
["player_flashes_avg_order_by"]: {
		attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	duration?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "player_flashes". All fields are combined with a logical 'AND'. */
["player_flashes_bool_exp"]: {
		_and?: Array<GraphQLTypes["player_flashes_bool_exp"]> | undefined,
	_not?: GraphQLTypes["player_flashes_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["player_flashes_bool_exp"]> | undefined,
	attacked_steam_id?: GraphQLTypes["bigint_comparison_exp"] | undefined,
	attacker_steam_id?: GraphQLTypes["bigint_comparison_exp"] | undefined,
	blinded?: GraphQLTypes["players_bool_exp"] | undefined,
	duration?: GraphQLTypes["numeric_comparison_exp"] | undefined,
	id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	match?: GraphQLTypes["matches_bool_exp"] | undefined,
	match_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	match_map?: GraphQLTypes["match_maps_bool_exp"] | undefined,
	match_map_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	round?: GraphQLTypes["Int_comparison_exp"] | undefined,
	team_flash?: GraphQLTypes["Boolean_comparison_exp"] | undefined,
	thrown_by?: GraphQLTypes["players_bool_exp"] | undefined,
	time?: GraphQLTypes["timestamptz_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "player_flashes" */
["player_flashes_constraint"]: player_flashes_constraint;
	/** input type for incrementing numeric columns in table "player_flashes" */
["player_flashes_inc_input"]: {
		attacked_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	duration?: GraphQLTypes["numeric"] | undefined,
	round?: number | undefined
};
	/** input type for inserting data into table "player_flashes" */
["player_flashes_insert_input"]: {
		attacked_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	blinded?: GraphQLTypes["players_obj_rel_insert_input"] | undefined,
	duration?: GraphQLTypes["numeric"] | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match?: GraphQLTypes["matches_obj_rel_insert_input"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map?: GraphQLTypes["match_maps_obj_rel_insert_input"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	round?: number | undefined,
	team_flash?: boolean | undefined,
	thrown_by?: GraphQLTypes["players_obj_rel_insert_input"] | undefined,
	time?: GraphQLTypes["timestamptz"] | undefined
};
	/** aggregate max on columns */
["player_flashes_max_fields"]: {
	__typename: "player_flashes_max_fields",
	attacked_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	duration?: GraphQLTypes["numeric"] | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	round?: number | undefined,
	time?: GraphQLTypes["timestamptz"] | undefined
};
	/** order by max() on columns of table "player_flashes" */
["player_flashes_max_order_by"]: {
		attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	duration?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	match_map_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined,
	time?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["player_flashes_min_fields"]: {
	__typename: "player_flashes_min_fields",
	attacked_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	duration?: GraphQLTypes["numeric"] | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	round?: number | undefined,
	time?: GraphQLTypes["timestamptz"] | undefined
};
	/** order by min() on columns of table "player_flashes" */
["player_flashes_min_order_by"]: {
		attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	duration?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	match_map_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined,
	time?: GraphQLTypes["order_by"] | undefined
};
	/** response of any mutation on the table "player_flashes" */
["player_flashes_mutation_response"]: {
	__typename: "player_flashes_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["player_flashes"]>
};
	/** on_conflict condition type for table "player_flashes" */
["player_flashes_on_conflict"]: {
		constraint: GraphQLTypes["player_flashes_constraint"],
	update_columns: Array<GraphQLTypes["player_flashes_update_column"]>,
	where?: GraphQLTypes["player_flashes_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "player_flashes". */
["player_flashes_order_by"]: {
		attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	blinded?: GraphQLTypes["players_order_by"] | undefined,
	duration?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	match?: GraphQLTypes["matches_order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	match_map?: GraphQLTypes["match_maps_order_by"] | undefined,
	match_map_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined,
	team_flash?: GraphQLTypes["order_by"] | undefined,
	thrown_by?: GraphQLTypes["players_order_by"] | undefined,
	time?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: player_flashes */
["player_flashes_pk_columns_input"]: {
		id: GraphQLTypes["uuid"]
};
	/** select columns of table "player_flashes" */
["player_flashes_select_column"]: player_flashes_select_column;
	/** select "player_flashes_aggregate_bool_exp_bool_and_arguments_columns" columns of table "player_flashes" */
["player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_and_arguments_columns"]: player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_and_arguments_columns;
	/** select "player_flashes_aggregate_bool_exp_bool_or_arguments_columns" columns of table "player_flashes" */
["player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_or_arguments_columns"]: player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_or_arguments_columns;
	/** input type for updating data in table "player_flashes" */
["player_flashes_set_input"]: {
		attacked_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	duration?: GraphQLTypes["numeric"] | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	round?: number | undefined,
	team_flash?: boolean | undefined,
	time?: GraphQLTypes["timestamptz"] | undefined
};
	/** aggregate stddev on columns */
["player_flashes_stddev_fields"]: {
	__typename: "player_flashes_stddev_fields",
	attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	duration?: number | undefined,
	round?: number | undefined
};
	/** order by stddev() on columns of table "player_flashes" */
["player_flashes_stddev_order_by"]: {
		attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	duration?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["player_flashes_stddev_pop_fields"]: {
	__typename: "player_flashes_stddev_pop_fields",
	attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	duration?: number | undefined,
	round?: number | undefined
};
	/** order by stddev_pop() on columns of table "player_flashes" */
["player_flashes_stddev_pop_order_by"]: {
		attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	duration?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["player_flashes_stddev_samp_fields"]: {
	__typename: "player_flashes_stddev_samp_fields",
	attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	duration?: number | undefined,
	round?: number | undefined
};
	/** order by stddev_samp() on columns of table "player_flashes" */
["player_flashes_stddev_samp_order_by"]: {
		attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	duration?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "player_flashes" */
["player_flashes_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["player_flashes_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["player_flashes_stream_cursor_value_input"]: {
		attacked_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	duration?: GraphQLTypes["numeric"] | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	round?: number | undefined,
	team_flash?: boolean | undefined,
	time?: GraphQLTypes["timestamptz"] | undefined
};
	/** aggregate sum on columns */
["player_flashes_sum_fields"]: {
	__typename: "player_flashes_sum_fields",
	attacked_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	duration?: GraphQLTypes["numeric"] | undefined,
	round?: number | undefined
};
	/** order by sum() on columns of table "player_flashes" */
["player_flashes_sum_order_by"]: {
		attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	duration?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** update columns of table "player_flashes" */
["player_flashes_update_column"]: player_flashes_update_column;
	["player_flashes_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["player_flashes_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["player_flashes_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["player_flashes_bool_exp"]
};
	/** aggregate var_pop on columns */
["player_flashes_var_pop_fields"]: {
	__typename: "player_flashes_var_pop_fields",
	attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	duration?: number | undefined,
	round?: number | undefined
};
	/** order by var_pop() on columns of table "player_flashes" */
["player_flashes_var_pop_order_by"]: {
		attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	duration?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["player_flashes_var_samp_fields"]: {
	__typename: "player_flashes_var_samp_fields",
	attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	duration?: number | undefined,
	round?: number | undefined
};
	/** order by var_samp() on columns of table "player_flashes" */
["player_flashes_var_samp_order_by"]: {
		attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	duration?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["player_flashes_variance_fields"]: {
	__typename: "player_flashes_variance_fields",
	attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	duration?: number | undefined,
	round?: number | undefined
};
	/** order by variance() on columns of table "player_flashes" */
["player_flashes_variance_order_by"]: {
		attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	duration?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** columns and relationships of "player_kills" */
["player_kills"]: {
	__typename: "player_kills",
	assisted: boolean,
	attacked_location: string,
	attacked_location_coordinates?: string | undefined,
	/** An object relationship */
	attacked_player: GraphQLTypes["players"],
	attacked_steam_id: GraphQLTypes["bigint"],
	attacked_team: string,
	attacker_location?: string | undefined,
	attacker_location_coordinates?: string | undefined,
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacker_team?: string | undefined,
	blinded: boolean,
	headshot: boolean,
	hitgroup: string,
	id: GraphQLTypes["uuid"],
	in_air: boolean,
	/** An object relationship */
	match: GraphQLTypes["matches"],
	match_id: GraphQLTypes["uuid"],
	/** An object relationship */
	match_map: GraphQLTypes["match_maps"],
	match_map_id: GraphQLTypes["uuid"],
	no_scope: boolean,
	/** An object relationship */
	player?: GraphQLTypes["players"] | undefined,
	round: number,
	thru_smoke: boolean,
	thru_wall: boolean,
	time: GraphQLTypes["timestamptz"],
	with?: string | undefined
};
	/** aggregated selection of "player_kills" */
["player_kills_aggregate"]: {
	__typename: "player_kills_aggregate",
	aggregate?: GraphQLTypes["player_kills_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["player_kills"]>
};
	["player_kills_aggregate_bool_exp"]: {
		bool_and?: GraphQLTypes["player_kills_aggregate_bool_exp_bool_and"] | undefined,
	bool_or?: GraphQLTypes["player_kills_aggregate_bool_exp_bool_or"] | undefined,
	count?: GraphQLTypes["player_kills_aggregate_bool_exp_count"] | undefined
};
	["player_kills_aggregate_bool_exp_bool_and"]: {
		arguments: GraphQLTypes["player_kills_select_column_player_kills_aggregate_bool_exp_bool_and_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["player_kills_bool_exp"] | undefined,
	predicate: GraphQLTypes["Boolean_comparison_exp"]
};
	["player_kills_aggregate_bool_exp_bool_or"]: {
		arguments: GraphQLTypes["player_kills_select_column_player_kills_aggregate_bool_exp_bool_or_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["player_kills_bool_exp"] | undefined,
	predicate: GraphQLTypes["Boolean_comparison_exp"]
};
	["player_kills_aggregate_bool_exp_count"]: {
		arguments?: Array<GraphQLTypes["player_kills_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["player_kills_bool_exp"] | undefined,
	predicate: GraphQLTypes["Int_comparison_exp"]
};
	/** aggregate fields of "player_kills" */
["player_kills_aggregate_fields"]: {
	__typename: "player_kills_aggregate_fields",
	avg?: GraphQLTypes["player_kills_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["player_kills_max_fields"] | undefined,
	min?: GraphQLTypes["player_kills_min_fields"] | undefined,
	stddev?: GraphQLTypes["player_kills_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["player_kills_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["player_kills_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["player_kills_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["player_kills_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["player_kills_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["player_kills_variance_fields"] | undefined
};
	/** order by aggregate values of table "player_kills" */
["player_kills_aggregate_order_by"]: {
		avg?: GraphQLTypes["player_kills_avg_order_by"] | undefined,
	count?: GraphQLTypes["order_by"] | undefined,
	max?: GraphQLTypes["player_kills_max_order_by"] | undefined,
	min?: GraphQLTypes["player_kills_min_order_by"] | undefined,
	stddev?: GraphQLTypes["player_kills_stddev_order_by"] | undefined,
	stddev_pop?: GraphQLTypes["player_kills_stddev_pop_order_by"] | undefined,
	stddev_samp?: GraphQLTypes["player_kills_stddev_samp_order_by"] | undefined,
	sum?: GraphQLTypes["player_kills_sum_order_by"] | undefined,
	var_pop?: GraphQLTypes["player_kills_var_pop_order_by"] | undefined,
	var_samp?: GraphQLTypes["player_kills_var_samp_order_by"] | undefined,
	variance?: GraphQLTypes["player_kills_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "player_kills" */
["player_kills_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["player_kills_insert_input"]>,
	/** upsert condition */
	on_conflict?: GraphQLTypes["player_kills_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["player_kills_avg_fields"]: {
	__typename: "player_kills_avg_fields",
	attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by avg() on columns of table "player_kills" */
["player_kills_avg_order_by"]: {
		attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "player_kills". All fields are combined with a logical 'AND'. */
["player_kills_bool_exp"]: {
		_and?: Array<GraphQLTypes["player_kills_bool_exp"]> | undefined,
	_not?: GraphQLTypes["player_kills_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["player_kills_bool_exp"]> | undefined,
	assisted?: GraphQLTypes["Boolean_comparison_exp"] | undefined,
	attacked_location?: GraphQLTypes["String_comparison_exp"] | undefined,
	attacked_location_coordinates?: GraphQLTypes["String_comparison_exp"] | undefined,
	attacked_player?: GraphQLTypes["players_bool_exp"] | undefined,
	attacked_steam_id?: GraphQLTypes["bigint_comparison_exp"] | undefined,
	attacked_team?: GraphQLTypes["String_comparison_exp"] | undefined,
	attacker_location?: GraphQLTypes["String_comparison_exp"] | undefined,
	attacker_location_coordinates?: GraphQLTypes["String_comparison_exp"] | undefined,
	attacker_steam_id?: GraphQLTypes["bigint_comparison_exp"] | undefined,
	attacker_team?: GraphQLTypes["String_comparison_exp"] | undefined,
	blinded?: GraphQLTypes["Boolean_comparison_exp"] | undefined,
	headshot?: GraphQLTypes["Boolean_comparison_exp"] | undefined,
	hitgroup?: GraphQLTypes["String_comparison_exp"] | undefined,
	id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	in_air?: GraphQLTypes["Boolean_comparison_exp"] | undefined,
	match?: GraphQLTypes["matches_bool_exp"] | undefined,
	match_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	match_map?: GraphQLTypes["match_maps_bool_exp"] | undefined,
	match_map_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	no_scope?: GraphQLTypes["Boolean_comparison_exp"] | undefined,
	player?: GraphQLTypes["players_bool_exp"] | undefined,
	round?: GraphQLTypes["Int_comparison_exp"] | undefined,
	thru_smoke?: GraphQLTypes["Boolean_comparison_exp"] | undefined,
	thru_wall?: GraphQLTypes["Boolean_comparison_exp"] | undefined,
	time?: GraphQLTypes["timestamptz_comparison_exp"] | undefined,
	with?: GraphQLTypes["String_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "player_kills" */
["player_kills_constraint"]: player_kills_constraint;
	/** input type for incrementing numeric columns in table "player_kills" */
["player_kills_inc_input"]: {
		attacked_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	round?: number | undefined
};
	/** input type for inserting data into table "player_kills" */
["player_kills_insert_input"]: {
		assisted?: boolean | undefined,
	attacked_location?: string | undefined,
	attacked_location_coordinates?: string | undefined,
	attacked_player?: GraphQLTypes["players_obj_rel_insert_input"] | undefined,
	attacked_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacked_team?: string | undefined,
	attacker_location?: string | undefined,
	attacker_location_coordinates?: string | undefined,
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacker_team?: string | undefined,
	blinded?: boolean | undefined,
	headshot?: boolean | undefined,
	hitgroup?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	in_air?: boolean | undefined,
	match?: GraphQLTypes["matches_obj_rel_insert_input"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map?: GraphQLTypes["match_maps_obj_rel_insert_input"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	no_scope?: boolean | undefined,
	player?: GraphQLTypes["players_obj_rel_insert_input"] | undefined,
	round?: number | undefined,
	thru_smoke?: boolean | undefined,
	thru_wall?: boolean | undefined,
	time?: GraphQLTypes["timestamptz"] | undefined,
	with?: string | undefined
};
	/** aggregate max on columns */
["player_kills_max_fields"]: {
	__typename: "player_kills_max_fields",
	attacked_location?: string | undefined,
	attacked_location_coordinates?: string | undefined,
	attacked_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacked_team?: string | undefined,
	attacker_location?: string | undefined,
	attacker_location_coordinates?: string | undefined,
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacker_team?: string | undefined,
	hitgroup?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	round?: number | undefined,
	time?: GraphQLTypes["timestamptz"] | undefined,
	with?: string | undefined
};
	/** order by max() on columns of table "player_kills" */
["player_kills_max_order_by"]: {
		attacked_location?: GraphQLTypes["order_by"] | undefined,
	attacked_location_coordinates?: GraphQLTypes["order_by"] | undefined,
	attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacked_team?: GraphQLTypes["order_by"] | undefined,
	attacker_location?: GraphQLTypes["order_by"] | undefined,
	attacker_location_coordinates?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_team?: GraphQLTypes["order_by"] | undefined,
	hitgroup?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	match_map_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined,
	time?: GraphQLTypes["order_by"] | undefined,
	with?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["player_kills_min_fields"]: {
	__typename: "player_kills_min_fields",
	attacked_location?: string | undefined,
	attacked_location_coordinates?: string | undefined,
	attacked_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacked_team?: string | undefined,
	attacker_location?: string | undefined,
	attacker_location_coordinates?: string | undefined,
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacker_team?: string | undefined,
	hitgroup?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	round?: number | undefined,
	time?: GraphQLTypes["timestamptz"] | undefined,
	with?: string | undefined
};
	/** order by min() on columns of table "player_kills" */
["player_kills_min_order_by"]: {
		attacked_location?: GraphQLTypes["order_by"] | undefined,
	attacked_location_coordinates?: GraphQLTypes["order_by"] | undefined,
	attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacked_team?: GraphQLTypes["order_by"] | undefined,
	attacker_location?: GraphQLTypes["order_by"] | undefined,
	attacker_location_coordinates?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_team?: GraphQLTypes["order_by"] | undefined,
	hitgroup?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	match_map_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined,
	time?: GraphQLTypes["order_by"] | undefined,
	with?: GraphQLTypes["order_by"] | undefined
};
	/** response of any mutation on the table "player_kills" */
["player_kills_mutation_response"]: {
	__typename: "player_kills_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["player_kills"]>
};
	/** on_conflict condition type for table "player_kills" */
["player_kills_on_conflict"]: {
		constraint: GraphQLTypes["player_kills_constraint"],
	update_columns: Array<GraphQLTypes["player_kills_update_column"]>,
	where?: GraphQLTypes["player_kills_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "player_kills". */
["player_kills_order_by"]: {
		assisted?: GraphQLTypes["order_by"] | undefined,
	attacked_location?: GraphQLTypes["order_by"] | undefined,
	attacked_location_coordinates?: GraphQLTypes["order_by"] | undefined,
	attacked_player?: GraphQLTypes["players_order_by"] | undefined,
	attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacked_team?: GraphQLTypes["order_by"] | undefined,
	attacker_location?: GraphQLTypes["order_by"] | undefined,
	attacker_location_coordinates?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_team?: GraphQLTypes["order_by"] | undefined,
	blinded?: GraphQLTypes["order_by"] | undefined,
	headshot?: GraphQLTypes["order_by"] | undefined,
	hitgroup?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	in_air?: GraphQLTypes["order_by"] | undefined,
	match?: GraphQLTypes["matches_order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	match_map?: GraphQLTypes["match_maps_order_by"] | undefined,
	match_map_id?: GraphQLTypes["order_by"] | undefined,
	no_scope?: GraphQLTypes["order_by"] | undefined,
	player?: GraphQLTypes["players_order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined,
	thru_smoke?: GraphQLTypes["order_by"] | undefined,
	thru_wall?: GraphQLTypes["order_by"] | undefined,
	time?: GraphQLTypes["order_by"] | undefined,
	with?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: player_kills */
["player_kills_pk_columns_input"]: {
		id: GraphQLTypes["uuid"]
};
	/** select columns of table "player_kills" */
["player_kills_select_column"]: player_kills_select_column;
	/** select "player_kills_aggregate_bool_exp_bool_and_arguments_columns" columns of table "player_kills" */
["player_kills_select_column_player_kills_aggregate_bool_exp_bool_and_arguments_columns"]: player_kills_select_column_player_kills_aggregate_bool_exp_bool_and_arguments_columns;
	/** select "player_kills_aggregate_bool_exp_bool_or_arguments_columns" columns of table "player_kills" */
["player_kills_select_column_player_kills_aggregate_bool_exp_bool_or_arguments_columns"]: player_kills_select_column_player_kills_aggregate_bool_exp_bool_or_arguments_columns;
	/** input type for updating data in table "player_kills" */
["player_kills_set_input"]: {
		assisted?: boolean | undefined,
	attacked_location?: string | undefined,
	attacked_location_coordinates?: string | undefined,
	attacked_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacked_team?: string | undefined,
	attacker_location?: string | undefined,
	attacker_location_coordinates?: string | undefined,
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacker_team?: string | undefined,
	blinded?: boolean | undefined,
	headshot?: boolean | undefined,
	hitgroup?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	in_air?: boolean | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	no_scope?: boolean | undefined,
	round?: number | undefined,
	thru_smoke?: boolean | undefined,
	thru_wall?: boolean | undefined,
	time?: GraphQLTypes["timestamptz"] | undefined,
	with?: string | undefined
};
	/** aggregate stddev on columns */
["player_kills_stddev_fields"]: {
	__typename: "player_kills_stddev_fields",
	attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by stddev() on columns of table "player_kills" */
["player_kills_stddev_order_by"]: {
		attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["player_kills_stddev_pop_fields"]: {
	__typename: "player_kills_stddev_pop_fields",
	attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by stddev_pop() on columns of table "player_kills" */
["player_kills_stddev_pop_order_by"]: {
		attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["player_kills_stddev_samp_fields"]: {
	__typename: "player_kills_stddev_samp_fields",
	attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by stddev_samp() on columns of table "player_kills" */
["player_kills_stddev_samp_order_by"]: {
		attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "player_kills" */
["player_kills_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["player_kills_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["player_kills_stream_cursor_value_input"]: {
		assisted?: boolean | undefined,
	attacked_location?: string | undefined,
	attacked_location_coordinates?: string | undefined,
	attacked_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacked_team?: string | undefined,
	attacker_location?: string | undefined,
	attacker_location_coordinates?: string | undefined,
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacker_team?: string | undefined,
	blinded?: boolean | undefined,
	headshot?: boolean | undefined,
	hitgroup?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	in_air?: boolean | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	no_scope?: boolean | undefined,
	round?: number | undefined,
	thru_smoke?: boolean | undefined,
	thru_wall?: boolean | undefined,
	time?: GraphQLTypes["timestamptz"] | undefined,
	with?: string | undefined
};
	/** aggregate sum on columns */
["player_kills_sum_fields"]: {
	__typename: "player_kills_sum_fields",
	attacked_steam_id?: GraphQLTypes["bigint"] | undefined,
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	round?: number | undefined
};
	/** order by sum() on columns of table "player_kills" */
["player_kills_sum_order_by"]: {
		attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** update columns of table "player_kills" */
["player_kills_update_column"]: player_kills_update_column;
	["player_kills_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["player_kills_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["player_kills_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["player_kills_bool_exp"]
};
	/** aggregate var_pop on columns */
["player_kills_var_pop_fields"]: {
	__typename: "player_kills_var_pop_fields",
	attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by var_pop() on columns of table "player_kills" */
["player_kills_var_pop_order_by"]: {
		attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["player_kills_var_samp_fields"]: {
	__typename: "player_kills_var_samp_fields",
	attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by var_samp() on columns of table "player_kills" */
["player_kills_var_samp_order_by"]: {
		attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["player_kills_variance_fields"]: {
	__typename: "player_kills_variance_fields",
	attacked_steam_id?: number | undefined,
	attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by variance() on columns of table "player_kills" */
["player_kills_variance_order_by"]: {
		attacked_steam_id?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** columns and relationships of "player_objectives" */
["player_objectives"]: {
	__typename: "player_objectives",
	id: GraphQLTypes["uuid"],
	/** An object relationship */
	match: GraphQLTypes["matches"],
	match_id: GraphQLTypes["uuid"],
	/** An object relationship */
	match_map: GraphQLTypes["match_maps"],
	match_map_id: GraphQLTypes["uuid"],
	/** An object relationship */
	player: GraphQLTypes["players"],
	player_steam_id: GraphQLTypes["bigint"],
	round: number,
	time: GraphQLTypes["timestamptz"],
	type: GraphQLTypes["e_objective_types_enum"]
};
	/** aggregated selection of "player_objectives" */
["player_objectives_aggregate"]: {
	__typename: "player_objectives_aggregate",
	aggregate?: GraphQLTypes["player_objectives_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["player_objectives"]>
};
	["player_objectives_aggregate_bool_exp"]: {
		count?: GraphQLTypes["player_objectives_aggregate_bool_exp_count"] | undefined
};
	["player_objectives_aggregate_bool_exp_count"]: {
		arguments?: Array<GraphQLTypes["player_objectives_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["player_objectives_bool_exp"] | undefined,
	predicate: GraphQLTypes["Int_comparison_exp"]
};
	/** aggregate fields of "player_objectives" */
["player_objectives_aggregate_fields"]: {
	__typename: "player_objectives_aggregate_fields",
	avg?: GraphQLTypes["player_objectives_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["player_objectives_max_fields"] | undefined,
	min?: GraphQLTypes["player_objectives_min_fields"] | undefined,
	stddev?: GraphQLTypes["player_objectives_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["player_objectives_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["player_objectives_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["player_objectives_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["player_objectives_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["player_objectives_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["player_objectives_variance_fields"] | undefined
};
	/** order by aggregate values of table "player_objectives" */
["player_objectives_aggregate_order_by"]: {
		avg?: GraphQLTypes["player_objectives_avg_order_by"] | undefined,
	count?: GraphQLTypes["order_by"] | undefined,
	max?: GraphQLTypes["player_objectives_max_order_by"] | undefined,
	min?: GraphQLTypes["player_objectives_min_order_by"] | undefined,
	stddev?: GraphQLTypes["player_objectives_stddev_order_by"] | undefined,
	stddev_pop?: GraphQLTypes["player_objectives_stddev_pop_order_by"] | undefined,
	stddev_samp?: GraphQLTypes["player_objectives_stddev_samp_order_by"] | undefined,
	sum?: GraphQLTypes["player_objectives_sum_order_by"] | undefined,
	var_pop?: GraphQLTypes["player_objectives_var_pop_order_by"] | undefined,
	var_samp?: GraphQLTypes["player_objectives_var_samp_order_by"] | undefined,
	variance?: GraphQLTypes["player_objectives_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "player_objectives" */
["player_objectives_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["player_objectives_insert_input"]>,
	/** upsert condition */
	on_conflict?: GraphQLTypes["player_objectives_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["player_objectives_avg_fields"]: {
	__typename: "player_objectives_avg_fields",
	player_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by avg() on columns of table "player_objectives" */
["player_objectives_avg_order_by"]: {
		player_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "player_objectives". All fields are combined with a logical 'AND'. */
["player_objectives_bool_exp"]: {
		_and?: Array<GraphQLTypes["player_objectives_bool_exp"]> | undefined,
	_not?: GraphQLTypes["player_objectives_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["player_objectives_bool_exp"]> | undefined,
	id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	match?: GraphQLTypes["matches_bool_exp"] | undefined,
	match_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	match_map?: GraphQLTypes["match_maps_bool_exp"] | undefined,
	match_map_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	player?: GraphQLTypes["players_bool_exp"] | undefined,
	player_steam_id?: GraphQLTypes["bigint_comparison_exp"] | undefined,
	round?: GraphQLTypes["Int_comparison_exp"] | undefined,
	time?: GraphQLTypes["timestamptz_comparison_exp"] | undefined,
	type?: GraphQLTypes["e_objective_types_enum_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "player_objectives" */
["player_objectives_constraint"]: player_objectives_constraint;
	/** input type for incrementing numeric columns in table "player_objectives" */
["player_objectives_inc_input"]: {
		player_steam_id?: GraphQLTypes["bigint"] | undefined,
	round?: number | undefined
};
	/** input type for inserting data into table "player_objectives" */
["player_objectives_insert_input"]: {
		id?: GraphQLTypes["uuid"] | undefined,
	match?: GraphQLTypes["matches_obj_rel_insert_input"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map?: GraphQLTypes["match_maps_obj_rel_insert_input"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	player?: GraphQLTypes["players_obj_rel_insert_input"] | undefined,
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	round?: number | undefined,
	time?: GraphQLTypes["timestamptz"] | undefined,
	type?: GraphQLTypes["e_objective_types_enum"] | undefined
};
	/** aggregate max on columns */
["player_objectives_max_fields"]: {
	__typename: "player_objectives_max_fields",
	id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	round?: number | undefined,
	time?: GraphQLTypes["timestamptz"] | undefined
};
	/** order by max() on columns of table "player_objectives" */
["player_objectives_max_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	match_map_id?: GraphQLTypes["order_by"] | undefined,
	player_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined,
	time?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["player_objectives_min_fields"]: {
	__typename: "player_objectives_min_fields",
	id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	round?: number | undefined,
	time?: GraphQLTypes["timestamptz"] | undefined
};
	/** order by min() on columns of table "player_objectives" */
["player_objectives_min_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	match_map_id?: GraphQLTypes["order_by"] | undefined,
	player_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined,
	time?: GraphQLTypes["order_by"] | undefined
};
	/** response of any mutation on the table "player_objectives" */
["player_objectives_mutation_response"]: {
	__typename: "player_objectives_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["player_objectives"]>
};
	/** on_conflict condition type for table "player_objectives" */
["player_objectives_on_conflict"]: {
		constraint: GraphQLTypes["player_objectives_constraint"],
	update_columns: Array<GraphQLTypes["player_objectives_update_column"]>,
	where?: GraphQLTypes["player_objectives_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "player_objectives". */
["player_objectives_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	match?: GraphQLTypes["matches_order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	match_map?: GraphQLTypes["match_maps_order_by"] | undefined,
	match_map_id?: GraphQLTypes["order_by"] | undefined,
	player?: GraphQLTypes["players_order_by"] | undefined,
	player_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined,
	time?: GraphQLTypes["order_by"] | undefined,
	type?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: player_objectives */
["player_objectives_pk_columns_input"]: {
		id: GraphQLTypes["uuid"]
};
	/** select columns of table "player_objectives" */
["player_objectives_select_column"]: player_objectives_select_column;
	/** input type for updating data in table "player_objectives" */
["player_objectives_set_input"]: {
		id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	round?: number | undefined,
	time?: GraphQLTypes["timestamptz"] | undefined,
	type?: GraphQLTypes["e_objective_types_enum"] | undefined
};
	/** aggregate stddev on columns */
["player_objectives_stddev_fields"]: {
	__typename: "player_objectives_stddev_fields",
	player_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by stddev() on columns of table "player_objectives" */
["player_objectives_stddev_order_by"]: {
		player_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["player_objectives_stddev_pop_fields"]: {
	__typename: "player_objectives_stddev_pop_fields",
	player_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by stddev_pop() on columns of table "player_objectives" */
["player_objectives_stddev_pop_order_by"]: {
		player_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["player_objectives_stddev_samp_fields"]: {
	__typename: "player_objectives_stddev_samp_fields",
	player_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by stddev_samp() on columns of table "player_objectives" */
["player_objectives_stddev_samp_order_by"]: {
		player_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "player_objectives" */
["player_objectives_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["player_objectives_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["player_objectives_stream_cursor_value_input"]: {
		id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	round?: number | undefined,
	time?: GraphQLTypes["timestamptz"] | undefined,
	type?: GraphQLTypes["e_objective_types_enum"] | undefined
};
	/** aggregate sum on columns */
["player_objectives_sum_fields"]: {
	__typename: "player_objectives_sum_fields",
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	round?: number | undefined
};
	/** order by sum() on columns of table "player_objectives" */
["player_objectives_sum_order_by"]: {
		player_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** update columns of table "player_objectives" */
["player_objectives_update_column"]: player_objectives_update_column;
	["player_objectives_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["player_objectives_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["player_objectives_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["player_objectives_bool_exp"]
};
	/** aggregate var_pop on columns */
["player_objectives_var_pop_fields"]: {
	__typename: "player_objectives_var_pop_fields",
	player_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by var_pop() on columns of table "player_objectives" */
["player_objectives_var_pop_order_by"]: {
		player_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["player_objectives_var_samp_fields"]: {
	__typename: "player_objectives_var_samp_fields",
	player_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by var_samp() on columns of table "player_objectives" */
["player_objectives_var_samp_order_by"]: {
		player_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["player_objectives_variance_fields"]: {
	__typename: "player_objectives_variance_fields",
	player_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by variance() on columns of table "player_objectives" */
["player_objectives_variance_order_by"]: {
		player_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** columns and relationships of "player_unused_utility" */
["player_unused_utility"]: {
	__typename: "player_unused_utility",
	id: GraphQLTypes["uuid"],
	/** An object relationship */
	match: GraphQLTypes["matches"],
	match_id: GraphQLTypes["uuid"],
	/** An object relationship */
	match_map: GraphQLTypes["match_maps"],
	match_map_id: GraphQLTypes["uuid"],
	/** An object relationship */
	player: GraphQLTypes["players"],
	player_steam_id: GraphQLTypes["bigint"],
	round: number,
	unused: number
};
	/** aggregated selection of "player_unused_utility" */
["player_unused_utility_aggregate"]: {
	__typename: "player_unused_utility_aggregate",
	aggregate?: GraphQLTypes["player_unused_utility_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["player_unused_utility"]>
};
	["player_unused_utility_aggregate_bool_exp"]: {
		count?: GraphQLTypes["player_unused_utility_aggregate_bool_exp_count"] | undefined
};
	["player_unused_utility_aggregate_bool_exp_count"]: {
		arguments?: Array<GraphQLTypes["player_unused_utility_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["player_unused_utility_bool_exp"] | undefined,
	predicate: GraphQLTypes["Int_comparison_exp"]
};
	/** aggregate fields of "player_unused_utility" */
["player_unused_utility_aggregate_fields"]: {
	__typename: "player_unused_utility_aggregate_fields",
	avg?: GraphQLTypes["player_unused_utility_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["player_unused_utility_max_fields"] | undefined,
	min?: GraphQLTypes["player_unused_utility_min_fields"] | undefined,
	stddev?: GraphQLTypes["player_unused_utility_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["player_unused_utility_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["player_unused_utility_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["player_unused_utility_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["player_unused_utility_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["player_unused_utility_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["player_unused_utility_variance_fields"] | undefined
};
	/** order by aggregate values of table "player_unused_utility" */
["player_unused_utility_aggregate_order_by"]: {
		avg?: GraphQLTypes["player_unused_utility_avg_order_by"] | undefined,
	count?: GraphQLTypes["order_by"] | undefined,
	max?: GraphQLTypes["player_unused_utility_max_order_by"] | undefined,
	min?: GraphQLTypes["player_unused_utility_min_order_by"] | undefined,
	stddev?: GraphQLTypes["player_unused_utility_stddev_order_by"] | undefined,
	stddev_pop?: GraphQLTypes["player_unused_utility_stddev_pop_order_by"] | undefined,
	stddev_samp?: GraphQLTypes["player_unused_utility_stddev_samp_order_by"] | undefined,
	sum?: GraphQLTypes["player_unused_utility_sum_order_by"] | undefined,
	var_pop?: GraphQLTypes["player_unused_utility_var_pop_order_by"] | undefined,
	var_samp?: GraphQLTypes["player_unused_utility_var_samp_order_by"] | undefined,
	variance?: GraphQLTypes["player_unused_utility_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "player_unused_utility" */
["player_unused_utility_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["player_unused_utility_insert_input"]>,
	/** upsert condition */
	on_conflict?: GraphQLTypes["player_unused_utility_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["player_unused_utility_avg_fields"]: {
	__typename: "player_unused_utility_avg_fields",
	player_steam_id?: number | undefined,
	round?: number | undefined,
	unused?: number | undefined
};
	/** order by avg() on columns of table "player_unused_utility" */
["player_unused_utility_avg_order_by"]: {
		player_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined,
	unused?: GraphQLTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "player_unused_utility". All fields are combined with a logical 'AND'. */
["player_unused_utility_bool_exp"]: {
		_and?: Array<GraphQLTypes["player_unused_utility_bool_exp"]> | undefined,
	_not?: GraphQLTypes["player_unused_utility_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["player_unused_utility_bool_exp"]> | undefined,
	id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	match?: GraphQLTypes["matches_bool_exp"] | undefined,
	match_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	match_map?: GraphQLTypes["match_maps_bool_exp"] | undefined,
	match_map_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	player?: GraphQLTypes["players_bool_exp"] | undefined,
	player_steam_id?: GraphQLTypes["bigint_comparison_exp"] | undefined,
	round?: GraphQLTypes["Int_comparison_exp"] | undefined,
	unused?: GraphQLTypes["Int_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "player_unused_utility" */
["player_unused_utility_constraint"]: player_unused_utility_constraint;
	/** input type for incrementing numeric columns in table "player_unused_utility" */
["player_unused_utility_inc_input"]: {
		player_steam_id?: GraphQLTypes["bigint"] | undefined,
	round?: number | undefined,
	unused?: number | undefined
};
	/** input type for inserting data into table "player_unused_utility" */
["player_unused_utility_insert_input"]: {
		id?: GraphQLTypes["uuid"] | undefined,
	match?: GraphQLTypes["matches_obj_rel_insert_input"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map?: GraphQLTypes["match_maps_obj_rel_insert_input"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	player?: GraphQLTypes["players_obj_rel_insert_input"] | undefined,
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	round?: number | undefined,
	unused?: number | undefined
};
	/** aggregate max on columns */
["player_unused_utility_max_fields"]: {
	__typename: "player_unused_utility_max_fields",
	id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	round?: number | undefined,
	unused?: number | undefined
};
	/** order by max() on columns of table "player_unused_utility" */
["player_unused_utility_max_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	match_map_id?: GraphQLTypes["order_by"] | undefined,
	player_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined,
	unused?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["player_unused_utility_min_fields"]: {
	__typename: "player_unused_utility_min_fields",
	id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	round?: number | undefined,
	unused?: number | undefined
};
	/** order by min() on columns of table "player_unused_utility" */
["player_unused_utility_min_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	match_map_id?: GraphQLTypes["order_by"] | undefined,
	player_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined,
	unused?: GraphQLTypes["order_by"] | undefined
};
	/** response of any mutation on the table "player_unused_utility" */
["player_unused_utility_mutation_response"]: {
	__typename: "player_unused_utility_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["player_unused_utility"]>
};
	/** on_conflict condition type for table "player_unused_utility" */
["player_unused_utility_on_conflict"]: {
		constraint: GraphQLTypes["player_unused_utility_constraint"],
	update_columns: Array<GraphQLTypes["player_unused_utility_update_column"]>,
	where?: GraphQLTypes["player_unused_utility_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "player_unused_utility". */
["player_unused_utility_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	match?: GraphQLTypes["matches_order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	match_map?: GraphQLTypes["match_maps_order_by"] | undefined,
	match_map_id?: GraphQLTypes["order_by"] | undefined,
	player?: GraphQLTypes["players_order_by"] | undefined,
	player_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined,
	unused?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: player_unused_utility */
["player_unused_utility_pk_columns_input"]: {
		id: GraphQLTypes["uuid"]
};
	/** select columns of table "player_unused_utility" */
["player_unused_utility_select_column"]: player_unused_utility_select_column;
	/** input type for updating data in table "player_unused_utility" */
["player_unused_utility_set_input"]: {
		id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	round?: number | undefined,
	unused?: number | undefined
};
	/** aggregate stddev on columns */
["player_unused_utility_stddev_fields"]: {
	__typename: "player_unused_utility_stddev_fields",
	player_steam_id?: number | undefined,
	round?: number | undefined,
	unused?: number | undefined
};
	/** order by stddev() on columns of table "player_unused_utility" */
["player_unused_utility_stddev_order_by"]: {
		player_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined,
	unused?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["player_unused_utility_stddev_pop_fields"]: {
	__typename: "player_unused_utility_stddev_pop_fields",
	player_steam_id?: number | undefined,
	round?: number | undefined,
	unused?: number | undefined
};
	/** order by stddev_pop() on columns of table "player_unused_utility" */
["player_unused_utility_stddev_pop_order_by"]: {
		player_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined,
	unused?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["player_unused_utility_stddev_samp_fields"]: {
	__typename: "player_unused_utility_stddev_samp_fields",
	player_steam_id?: number | undefined,
	round?: number | undefined,
	unused?: number | undefined
};
	/** order by stddev_samp() on columns of table "player_unused_utility" */
["player_unused_utility_stddev_samp_order_by"]: {
		player_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined,
	unused?: GraphQLTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "player_unused_utility" */
["player_unused_utility_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["player_unused_utility_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["player_unused_utility_stream_cursor_value_input"]: {
		id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	round?: number | undefined,
	unused?: number | undefined
};
	/** aggregate sum on columns */
["player_unused_utility_sum_fields"]: {
	__typename: "player_unused_utility_sum_fields",
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	round?: number | undefined,
	unused?: number | undefined
};
	/** order by sum() on columns of table "player_unused_utility" */
["player_unused_utility_sum_order_by"]: {
		player_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined,
	unused?: GraphQLTypes["order_by"] | undefined
};
	/** update columns of table "player_unused_utility" */
["player_unused_utility_update_column"]: player_unused_utility_update_column;
	["player_unused_utility_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["player_unused_utility_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["player_unused_utility_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["player_unused_utility_bool_exp"]
};
	/** aggregate var_pop on columns */
["player_unused_utility_var_pop_fields"]: {
	__typename: "player_unused_utility_var_pop_fields",
	player_steam_id?: number | undefined,
	round?: number | undefined,
	unused?: number | undefined
};
	/** order by var_pop() on columns of table "player_unused_utility" */
["player_unused_utility_var_pop_order_by"]: {
		player_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined,
	unused?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["player_unused_utility_var_samp_fields"]: {
	__typename: "player_unused_utility_var_samp_fields",
	player_steam_id?: number | undefined,
	round?: number | undefined,
	unused?: number | undefined
};
	/** order by var_samp() on columns of table "player_unused_utility" */
["player_unused_utility_var_samp_order_by"]: {
		player_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined,
	unused?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["player_unused_utility_variance_fields"]: {
	__typename: "player_unused_utility_variance_fields",
	player_steam_id?: number | undefined,
	round?: number | undefined,
	unused?: number | undefined
};
	/** order by variance() on columns of table "player_unused_utility" */
["player_unused_utility_variance_order_by"]: {
		player_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined,
	unused?: GraphQLTypes["order_by"] | undefined
};
	/** columns and relationships of "player_utility" */
["player_utility"]: {
	__typename: "player_utility",
	attacker_location_coordinates?: string | undefined,
	attacker_steam_id: GraphQLTypes["bigint"],
	id: GraphQLTypes["uuid"],
	/** An object relationship */
	match: GraphQLTypes["matches"],
	match_id: GraphQLTypes["uuid"],
	/** An object relationship */
	match_map: GraphQLTypes["match_maps"],
	match_map_id: GraphQLTypes["uuid"],
	/** An object relationship */
	player: GraphQLTypes["players"],
	round: number,
	time: GraphQLTypes["timestamptz"],
	type: GraphQLTypes["e_utility_types_enum"]
};
	/** aggregated selection of "player_utility" */
["player_utility_aggregate"]: {
	__typename: "player_utility_aggregate",
	aggregate?: GraphQLTypes["player_utility_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["player_utility"]>
};
	["player_utility_aggregate_bool_exp"]: {
		count?: GraphQLTypes["player_utility_aggregate_bool_exp_count"] | undefined
};
	["player_utility_aggregate_bool_exp_count"]: {
		arguments?: Array<GraphQLTypes["player_utility_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["player_utility_bool_exp"] | undefined,
	predicate: GraphQLTypes["Int_comparison_exp"]
};
	/** aggregate fields of "player_utility" */
["player_utility_aggregate_fields"]: {
	__typename: "player_utility_aggregate_fields",
	avg?: GraphQLTypes["player_utility_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["player_utility_max_fields"] | undefined,
	min?: GraphQLTypes["player_utility_min_fields"] | undefined,
	stddev?: GraphQLTypes["player_utility_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["player_utility_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["player_utility_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["player_utility_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["player_utility_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["player_utility_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["player_utility_variance_fields"] | undefined
};
	/** order by aggregate values of table "player_utility" */
["player_utility_aggregate_order_by"]: {
		avg?: GraphQLTypes["player_utility_avg_order_by"] | undefined,
	count?: GraphQLTypes["order_by"] | undefined,
	max?: GraphQLTypes["player_utility_max_order_by"] | undefined,
	min?: GraphQLTypes["player_utility_min_order_by"] | undefined,
	stddev?: GraphQLTypes["player_utility_stddev_order_by"] | undefined,
	stddev_pop?: GraphQLTypes["player_utility_stddev_pop_order_by"] | undefined,
	stddev_samp?: GraphQLTypes["player_utility_stddev_samp_order_by"] | undefined,
	sum?: GraphQLTypes["player_utility_sum_order_by"] | undefined,
	var_pop?: GraphQLTypes["player_utility_var_pop_order_by"] | undefined,
	var_samp?: GraphQLTypes["player_utility_var_samp_order_by"] | undefined,
	variance?: GraphQLTypes["player_utility_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "player_utility" */
["player_utility_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["player_utility_insert_input"]>,
	/** upsert condition */
	on_conflict?: GraphQLTypes["player_utility_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["player_utility_avg_fields"]: {
	__typename: "player_utility_avg_fields",
	attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by avg() on columns of table "player_utility" */
["player_utility_avg_order_by"]: {
		attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "player_utility". All fields are combined with a logical 'AND'. */
["player_utility_bool_exp"]: {
		_and?: Array<GraphQLTypes["player_utility_bool_exp"]> | undefined,
	_not?: GraphQLTypes["player_utility_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["player_utility_bool_exp"]> | undefined,
	attacker_location_coordinates?: GraphQLTypes["String_comparison_exp"] | undefined,
	attacker_steam_id?: GraphQLTypes["bigint_comparison_exp"] | undefined,
	id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	match?: GraphQLTypes["matches_bool_exp"] | undefined,
	match_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	match_map?: GraphQLTypes["match_maps_bool_exp"] | undefined,
	match_map_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	player?: GraphQLTypes["players_bool_exp"] | undefined,
	round?: GraphQLTypes["Int_comparison_exp"] | undefined,
	time?: GraphQLTypes["timestamptz_comparison_exp"] | undefined,
	type?: GraphQLTypes["e_utility_types_enum_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "player_utility" */
["player_utility_constraint"]: player_utility_constraint;
	/** input type for incrementing numeric columns in table "player_utility" */
["player_utility_inc_input"]: {
		attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	round?: number | undefined
};
	/** input type for inserting data into table "player_utility" */
["player_utility_insert_input"]: {
		attacker_location_coordinates?: string | undefined,
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match?: GraphQLTypes["matches_obj_rel_insert_input"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map?: GraphQLTypes["match_maps_obj_rel_insert_input"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	player?: GraphQLTypes["players_obj_rel_insert_input"] | undefined,
	round?: number | undefined,
	time?: GraphQLTypes["timestamptz"] | undefined,
	type?: GraphQLTypes["e_utility_types_enum"] | undefined
};
	/** aggregate max on columns */
["player_utility_max_fields"]: {
	__typename: "player_utility_max_fields",
	attacker_location_coordinates?: string | undefined,
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	round?: number | undefined,
	time?: GraphQLTypes["timestamptz"] | undefined
};
	/** order by max() on columns of table "player_utility" */
["player_utility_max_order_by"]: {
		attacker_location_coordinates?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	match_map_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined,
	time?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["player_utility_min_fields"]: {
	__typename: "player_utility_min_fields",
	attacker_location_coordinates?: string | undefined,
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	round?: number | undefined,
	time?: GraphQLTypes["timestamptz"] | undefined
};
	/** order by min() on columns of table "player_utility" */
["player_utility_min_order_by"]: {
		attacker_location_coordinates?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	match_map_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined,
	time?: GraphQLTypes["order_by"] | undefined
};
	/** response of any mutation on the table "player_utility" */
["player_utility_mutation_response"]: {
	__typename: "player_utility_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["player_utility"]>
};
	/** on_conflict condition type for table "player_utility" */
["player_utility_on_conflict"]: {
		constraint: GraphQLTypes["player_utility_constraint"],
	update_columns: Array<GraphQLTypes["player_utility_update_column"]>,
	where?: GraphQLTypes["player_utility_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "player_utility". */
["player_utility_order_by"]: {
		attacker_location_coordinates?: GraphQLTypes["order_by"] | undefined,
	attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	match?: GraphQLTypes["matches_order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	match_map?: GraphQLTypes["match_maps_order_by"] | undefined,
	match_map_id?: GraphQLTypes["order_by"] | undefined,
	player?: GraphQLTypes["players_order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined,
	time?: GraphQLTypes["order_by"] | undefined,
	type?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: player_utility */
["player_utility_pk_columns_input"]: {
		id: GraphQLTypes["uuid"]
};
	/** select columns of table "player_utility" */
["player_utility_select_column"]: player_utility_select_column;
	/** input type for updating data in table "player_utility" */
["player_utility_set_input"]: {
		attacker_location_coordinates?: string | undefined,
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	round?: number | undefined,
	time?: GraphQLTypes["timestamptz"] | undefined,
	type?: GraphQLTypes["e_utility_types_enum"] | undefined
};
	/** aggregate stddev on columns */
["player_utility_stddev_fields"]: {
	__typename: "player_utility_stddev_fields",
	attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by stddev() on columns of table "player_utility" */
["player_utility_stddev_order_by"]: {
		attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["player_utility_stddev_pop_fields"]: {
	__typename: "player_utility_stddev_pop_fields",
	attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by stddev_pop() on columns of table "player_utility" */
["player_utility_stddev_pop_order_by"]: {
		attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["player_utility_stddev_samp_fields"]: {
	__typename: "player_utility_stddev_samp_fields",
	attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by stddev_samp() on columns of table "player_utility" */
["player_utility_stddev_samp_order_by"]: {
		attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "player_utility" */
["player_utility_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["player_utility_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["player_utility_stream_cursor_value_input"]: {
		attacker_location_coordinates?: string | undefined,
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	round?: number | undefined,
	time?: GraphQLTypes["timestamptz"] | undefined,
	type?: GraphQLTypes["e_utility_types_enum"] | undefined
};
	/** aggregate sum on columns */
["player_utility_sum_fields"]: {
	__typename: "player_utility_sum_fields",
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	round?: number | undefined
};
	/** order by sum() on columns of table "player_utility" */
["player_utility_sum_order_by"]: {
		attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** update columns of table "player_utility" */
["player_utility_update_column"]: player_utility_update_column;
	["player_utility_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["player_utility_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["player_utility_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["player_utility_bool_exp"]
};
	/** aggregate var_pop on columns */
["player_utility_var_pop_fields"]: {
	__typename: "player_utility_var_pop_fields",
	attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by var_pop() on columns of table "player_utility" */
["player_utility_var_pop_order_by"]: {
		attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["player_utility_var_samp_fields"]: {
	__typename: "player_utility_var_samp_fields",
	attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by var_samp() on columns of table "player_utility" */
["player_utility_var_samp_order_by"]: {
		attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["player_utility_variance_fields"]: {
	__typename: "player_utility_variance_fields",
	attacker_steam_id?: number | undefined,
	round?: number | undefined
};
	/** order by variance() on columns of table "player_utility" */
["player_utility_variance_order_by"]: {
		attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** columns and relationships of "players" */
["players"]: {
	__typename: "players",
	/** An array relationship */
	assists: Array<GraphQLTypes["player_assists"]>,
	/** An aggregate relationship */
	assists_aggregate: GraphQLTypes["player_assists_aggregate"],
	/** An array relationship */
	assited_by_players: Array<GraphQLTypes["player_assists"]>,
	/** An aggregate relationship */
	assited_by_players_aggregate: GraphQLTypes["player_assists_aggregate"],
	avatar_url?: string | undefined,
	created_at?: GraphQLTypes["timestamptz"] | undefined,
	/** An array relationship */
	damage_dealt: Array<GraphQLTypes["player_damages"]>,
	/** An aggregate relationship */
	damage_dealt_aggregate: GraphQLTypes["player_damages_aggregate"],
	/** An array relationship */
	damage_taken: Array<GraphQLTypes["player_damages"]>,
	/** An aggregate relationship */
	damage_taken_aggregate: GraphQLTypes["player_damages_aggregate"],
	/** An array relationship */
	deaths: Array<GraphQLTypes["player_kills"]>,
	/** An aggregate relationship */
	deaths_aggregate: GraphQLTypes["player_kills_aggregate"],
	discord_id?: string | undefined,
	/** An array relationship */
	flashed_by_players: Array<GraphQLTypes["player_flashes"]>,
	/** An aggregate relationship */
	flashed_by_players_aggregate: GraphQLTypes["player_flashes_aggregate"],
	/** An array relationship */
	flashed_players: Array<GraphQLTypes["player_flashes"]>,
	/** An aggregate relationship */
	flashed_players_aggregate: GraphQLTypes["player_flashes_aggregate"],
	/** An array relationship */
	invited_players: Array<GraphQLTypes["team_invites"]>,
	/** An aggregate relationship */
	invited_players_aggregate: GraphQLTypes["team_invites_aggregate"],
	/** An array relationship */
	kills: Array<GraphQLTypes["player_kills"]>,
	/** An aggregate relationship */
	kills_aggregate: GraphQLTypes["player_kills_aggregate"],
	/** An array relationship */
	match_lineups: Array<GraphQLTypes["match_lineups"]>,
	/** An aggregate relationship */
	match_lineups_aggregate: GraphQLTypes["match_lineups_aggregate"],
	/** A computed field, executes function "get_player_matches" */
	matches?: Array<GraphQLTypes["matches"]> | undefined,
	/** An array relationship */
	multi_kills: Array<GraphQLTypes["v_player_multi_kills"]>,
	/** An aggregate relationship */
	multi_kills_aggregate: GraphQLTypes["v_player_multi_kills_aggregate"],
	name: string,
	/** An array relationship */
	objectives: Array<GraphQLTypes["player_objectives"]>,
	/** An aggregate relationship */
	objectives_aggregate: GraphQLTypes["player_objectives_aggregate"],
	/** An array relationship */
	opening_duels: Array<GraphQLTypes["v_player_opening_duels"]>,
	/** An aggregate relationship */
	opening_duels_aggregate: GraphQLTypes["v_player_opening_duels_aggregate"],
	/** An array relationship */
	owned_teams: Array<GraphQLTypes["teams"]>,
	/** An aggregate relationship */
	owned_teams_aggregate: GraphQLTypes["teams_aggregate"],
	/** An array relationship */
	player_lineup: Array<GraphQLTypes["match_lineup_players"]>,
	/** An aggregate relationship */
	player_lineup_aggregate: GraphQLTypes["match_lineup_players_aggregate"],
	/** An array relationship */
	player_unused_utilities: Array<GraphQLTypes["player_unused_utility"]>,
	/** An aggregate relationship */
	player_unused_utilities_aggregate: GraphQLTypes["player_unused_utility_aggregate"],
	profile_url?: string | undefined,
	steam_id: GraphQLTypes["bigint"],
	/** An array relationship */
	team_invites: Array<GraphQLTypes["team_invites"]>,
	/** An aggregate relationship */
	team_invites_aggregate: GraphQLTypes["team_invites_aggregate"],
	/** An array relationship */
	team_members: Array<GraphQLTypes["team_roster"]>,
	/** An aggregate relationship */
	team_members_aggregate: GraphQLTypes["team_roster_aggregate"],
	/** A computed field, executes function "get_player_teams" */
	teams?: Array<GraphQLTypes["teams"]> | undefined,
	/** An array relationship */
	tournament_organizers: Array<GraphQLTypes["tournament_organizers"]>,
	/** An aggregate relationship */
	tournament_organizers_aggregate: GraphQLTypes["tournament_organizers_aggregate"],
	/** An array relationship */
	tournament_rosters: Array<GraphQLTypes["tournament_roster"]>,
	/** An aggregate relationship */
	tournament_rosters_aggregate: GraphQLTypes["tournament_roster_aggregate"],
	/** An array relationship */
	tournaments: Array<GraphQLTypes["tournaments"]>,
	/** An aggregate relationship */
	tournaments_aggregate: GraphQLTypes["tournaments_aggregate"],
	updated_at?: GraphQLTypes["timestamptz"] | undefined,
	/** An array relationship */
	utility_thrown: Array<GraphQLTypes["player_utility"]>,
	/** An aggregate relationship */
	utility_thrown_aggregate: GraphQLTypes["player_utility_aggregate"]
};
	/** aggregated selection of "players" */
["players_aggregate"]: {
	__typename: "players_aggregate",
	aggregate?: GraphQLTypes["players_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["players"]>
};
	/** aggregate fields of "players" */
["players_aggregate_fields"]: {
	__typename: "players_aggregate_fields",
	avg?: GraphQLTypes["players_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["players_max_fields"] | undefined,
	min?: GraphQLTypes["players_min_fields"] | undefined,
	stddev?: GraphQLTypes["players_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["players_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["players_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["players_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["players_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["players_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["players_variance_fields"] | undefined
};
	/** aggregate avg on columns */
["players_avg_fields"]: {
	__typename: "players_avg_fields",
	steam_id?: number | undefined
};
	/** Boolean expression to filter rows from the table "players". All fields are combined with a logical 'AND'. */
["players_bool_exp"]: {
		_and?: Array<GraphQLTypes["players_bool_exp"]> | undefined,
	_not?: GraphQLTypes["players_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["players_bool_exp"]> | undefined,
	assists?: GraphQLTypes["player_assists_bool_exp"] | undefined,
	assists_aggregate?: GraphQLTypes["player_assists_aggregate_bool_exp"] | undefined,
	assited_by_players?: GraphQLTypes["player_assists_bool_exp"] | undefined,
	assited_by_players_aggregate?: GraphQLTypes["player_assists_aggregate_bool_exp"] | undefined,
	avatar_url?: GraphQLTypes["String_comparison_exp"] | undefined,
	created_at?: GraphQLTypes["timestamptz_comparison_exp"] | undefined,
	damage_dealt?: GraphQLTypes["player_damages_bool_exp"] | undefined,
	damage_dealt_aggregate?: GraphQLTypes["player_damages_aggregate_bool_exp"] | undefined,
	damage_taken?: GraphQLTypes["player_damages_bool_exp"] | undefined,
	damage_taken_aggregate?: GraphQLTypes["player_damages_aggregate_bool_exp"] | undefined,
	deaths?: GraphQLTypes["player_kills_bool_exp"] | undefined,
	deaths_aggregate?: GraphQLTypes["player_kills_aggregate_bool_exp"] | undefined,
	discord_id?: GraphQLTypes["String_comparison_exp"] | undefined,
	flashed_by_players?: GraphQLTypes["player_flashes_bool_exp"] | undefined,
	flashed_by_players_aggregate?: GraphQLTypes["player_flashes_aggregate_bool_exp"] | undefined,
	flashed_players?: GraphQLTypes["player_flashes_bool_exp"] | undefined,
	flashed_players_aggregate?: GraphQLTypes["player_flashes_aggregate_bool_exp"] | undefined,
	invited_players?: GraphQLTypes["team_invites_bool_exp"] | undefined,
	invited_players_aggregate?: GraphQLTypes["team_invites_aggregate_bool_exp"] | undefined,
	kills?: GraphQLTypes["player_kills_bool_exp"] | undefined,
	kills_aggregate?: GraphQLTypes["player_kills_aggregate_bool_exp"] | undefined,
	match_lineups?: GraphQLTypes["match_lineups_bool_exp"] | undefined,
	match_lineups_aggregate?: GraphQLTypes["match_lineups_aggregate_bool_exp"] | undefined,
	matches?: GraphQLTypes["matches_bool_exp"] | undefined,
	multi_kills?: GraphQLTypes["v_player_multi_kills_bool_exp"] | undefined,
	multi_kills_aggregate?: GraphQLTypes["v_player_multi_kills_aggregate_bool_exp"] | undefined,
	name?: GraphQLTypes["String_comparison_exp"] | undefined,
	objectives?: GraphQLTypes["player_objectives_bool_exp"] | undefined,
	objectives_aggregate?: GraphQLTypes["player_objectives_aggregate_bool_exp"] | undefined,
	opening_duels?: GraphQLTypes["v_player_opening_duels_bool_exp"] | undefined,
	opening_duels_aggregate?: GraphQLTypes["v_player_opening_duels_aggregate_bool_exp"] | undefined,
	owned_teams?: GraphQLTypes["teams_bool_exp"] | undefined,
	owned_teams_aggregate?: GraphQLTypes["teams_aggregate_bool_exp"] | undefined,
	player_lineup?: GraphQLTypes["match_lineup_players_bool_exp"] | undefined,
	player_lineup_aggregate?: GraphQLTypes["match_lineup_players_aggregate_bool_exp"] | undefined,
	player_unused_utilities?: GraphQLTypes["player_unused_utility_bool_exp"] | undefined,
	player_unused_utilities_aggregate?: GraphQLTypes["player_unused_utility_aggregate_bool_exp"] | undefined,
	profile_url?: GraphQLTypes["String_comparison_exp"] | undefined,
	steam_id?: GraphQLTypes["bigint_comparison_exp"] | undefined,
	team_invites?: GraphQLTypes["team_invites_bool_exp"] | undefined,
	team_invites_aggregate?: GraphQLTypes["team_invites_aggregate_bool_exp"] | undefined,
	team_members?: GraphQLTypes["team_roster_bool_exp"] | undefined,
	team_members_aggregate?: GraphQLTypes["team_roster_aggregate_bool_exp"] | undefined,
	teams?: GraphQLTypes["teams_bool_exp"] | undefined,
	tournament_organizers?: GraphQLTypes["tournament_organizers_bool_exp"] | undefined,
	tournament_organizers_aggregate?: GraphQLTypes["tournament_organizers_aggregate_bool_exp"] | undefined,
	tournament_rosters?: GraphQLTypes["tournament_roster_bool_exp"] | undefined,
	tournament_rosters_aggregate?: GraphQLTypes["tournament_roster_aggregate_bool_exp"] | undefined,
	tournaments?: GraphQLTypes["tournaments_bool_exp"] | undefined,
	tournaments_aggregate?: GraphQLTypes["tournaments_aggregate_bool_exp"] | undefined,
	updated_at?: GraphQLTypes["timestamptz_comparison_exp"] | undefined,
	utility_thrown?: GraphQLTypes["player_utility_bool_exp"] | undefined,
	utility_thrown_aggregate?: GraphQLTypes["player_utility_aggregate_bool_exp"] | undefined
};
	/** unique or primary key constraints on table "players" */
["players_constraint"]: players_constraint;
	/** input type for incrementing numeric columns in table "players" */
["players_inc_input"]: {
		steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** input type for inserting data into table "players" */
["players_insert_input"]: {
		assists?: GraphQLTypes["player_assists_arr_rel_insert_input"] | undefined,
	assited_by_players?: GraphQLTypes["player_assists_arr_rel_insert_input"] | undefined,
	avatar_url?: string | undefined,
	created_at?: GraphQLTypes["timestamptz"] | undefined,
	damage_dealt?: GraphQLTypes["player_damages_arr_rel_insert_input"] | undefined,
	damage_taken?: GraphQLTypes["player_damages_arr_rel_insert_input"] | undefined,
	deaths?: GraphQLTypes["player_kills_arr_rel_insert_input"] | undefined,
	discord_id?: string | undefined,
	flashed_by_players?: GraphQLTypes["player_flashes_arr_rel_insert_input"] | undefined,
	flashed_players?: GraphQLTypes["player_flashes_arr_rel_insert_input"] | undefined,
	invited_players?: GraphQLTypes["team_invites_arr_rel_insert_input"] | undefined,
	kills?: GraphQLTypes["player_kills_arr_rel_insert_input"] | undefined,
	match_lineups?: GraphQLTypes["match_lineups_arr_rel_insert_input"] | undefined,
	multi_kills?: GraphQLTypes["v_player_multi_kills_arr_rel_insert_input"] | undefined,
	name?: string | undefined,
	objectives?: GraphQLTypes["player_objectives_arr_rel_insert_input"] | undefined,
	opening_duels?: GraphQLTypes["v_player_opening_duels_arr_rel_insert_input"] | undefined,
	owned_teams?: GraphQLTypes["teams_arr_rel_insert_input"] | undefined,
	player_lineup?: GraphQLTypes["match_lineup_players_arr_rel_insert_input"] | undefined,
	player_unused_utilities?: GraphQLTypes["player_unused_utility_arr_rel_insert_input"] | undefined,
	profile_url?: string | undefined,
	steam_id?: GraphQLTypes["bigint"] | undefined,
	team_invites?: GraphQLTypes["team_invites_arr_rel_insert_input"] | undefined,
	team_members?: GraphQLTypes["team_roster_arr_rel_insert_input"] | undefined,
	tournament_organizers?: GraphQLTypes["tournament_organizers_arr_rel_insert_input"] | undefined,
	tournament_rosters?: GraphQLTypes["tournament_roster_arr_rel_insert_input"] | undefined,
	tournaments?: GraphQLTypes["tournaments_arr_rel_insert_input"] | undefined,
	updated_at?: GraphQLTypes["timestamptz"] | undefined,
	utility_thrown?: GraphQLTypes["player_utility_arr_rel_insert_input"] | undefined
};
	/** aggregate max on columns */
["players_max_fields"]: {
	__typename: "players_max_fields",
	avatar_url?: string | undefined,
	created_at?: GraphQLTypes["timestamptz"] | undefined,
	discord_id?: string | undefined,
	name?: string | undefined,
	profile_url?: string | undefined,
	steam_id?: GraphQLTypes["bigint"] | undefined,
	updated_at?: GraphQLTypes["timestamptz"] | undefined
};
	/** aggregate min on columns */
["players_min_fields"]: {
	__typename: "players_min_fields",
	avatar_url?: string | undefined,
	created_at?: GraphQLTypes["timestamptz"] | undefined,
	discord_id?: string | undefined,
	name?: string | undefined,
	profile_url?: string | undefined,
	steam_id?: GraphQLTypes["bigint"] | undefined,
	updated_at?: GraphQLTypes["timestamptz"] | undefined
};
	/** response of any mutation on the table "players" */
["players_mutation_response"]: {
	__typename: "players_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["players"]>
};
	/** input type for inserting object relation for remote table "players" */
["players_obj_rel_insert_input"]: {
		data: GraphQLTypes["players_insert_input"],
	/** upsert condition */
	on_conflict?: GraphQLTypes["players_on_conflict"] | undefined
};
	/** on_conflict condition type for table "players" */
["players_on_conflict"]: {
		constraint: GraphQLTypes["players_constraint"],
	update_columns: Array<GraphQLTypes["players_update_column"]>,
	where?: GraphQLTypes["players_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "players". */
["players_order_by"]: {
		assists_aggregate?: GraphQLTypes["player_assists_aggregate_order_by"] | undefined,
	assited_by_players_aggregate?: GraphQLTypes["player_assists_aggregate_order_by"] | undefined,
	avatar_url?: GraphQLTypes["order_by"] | undefined,
	created_at?: GraphQLTypes["order_by"] | undefined,
	damage_dealt_aggregate?: GraphQLTypes["player_damages_aggregate_order_by"] | undefined,
	damage_taken_aggregate?: GraphQLTypes["player_damages_aggregate_order_by"] | undefined,
	deaths_aggregate?: GraphQLTypes["player_kills_aggregate_order_by"] | undefined,
	discord_id?: GraphQLTypes["order_by"] | undefined,
	flashed_by_players_aggregate?: GraphQLTypes["player_flashes_aggregate_order_by"] | undefined,
	flashed_players_aggregate?: GraphQLTypes["player_flashes_aggregate_order_by"] | undefined,
	invited_players_aggregate?: GraphQLTypes["team_invites_aggregate_order_by"] | undefined,
	kills_aggregate?: GraphQLTypes["player_kills_aggregate_order_by"] | undefined,
	match_lineups_aggregate?: GraphQLTypes["match_lineups_aggregate_order_by"] | undefined,
	matches_aggregate?: GraphQLTypes["matches_aggregate_order_by"] | undefined,
	multi_kills_aggregate?: GraphQLTypes["v_player_multi_kills_aggregate_order_by"] | undefined,
	name?: GraphQLTypes["order_by"] | undefined,
	objectives_aggregate?: GraphQLTypes["player_objectives_aggregate_order_by"] | undefined,
	opening_duels_aggregate?: GraphQLTypes["v_player_opening_duels_aggregate_order_by"] | undefined,
	owned_teams_aggregate?: GraphQLTypes["teams_aggregate_order_by"] | undefined,
	player_lineup_aggregate?: GraphQLTypes["match_lineup_players_aggregate_order_by"] | undefined,
	player_unused_utilities_aggregate?: GraphQLTypes["player_unused_utility_aggregate_order_by"] | undefined,
	profile_url?: GraphQLTypes["order_by"] | undefined,
	steam_id?: GraphQLTypes["order_by"] | undefined,
	team_invites_aggregate?: GraphQLTypes["team_invites_aggregate_order_by"] | undefined,
	team_members_aggregate?: GraphQLTypes["team_roster_aggregate_order_by"] | undefined,
	teams_aggregate?: GraphQLTypes["teams_aggregate_order_by"] | undefined,
	tournament_organizers_aggregate?: GraphQLTypes["tournament_organizers_aggregate_order_by"] | undefined,
	tournament_rosters_aggregate?: GraphQLTypes["tournament_roster_aggregate_order_by"] | undefined,
	tournaments_aggregate?: GraphQLTypes["tournaments_aggregate_order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined,
	utility_thrown_aggregate?: GraphQLTypes["player_utility_aggregate_order_by"] | undefined
};
	/** primary key columns input for table: players */
["players_pk_columns_input"]: {
		steam_id: GraphQLTypes["bigint"]
};
	/** select columns of table "players" */
["players_select_column"]: players_select_column;
	/** input type for updating data in table "players" */
["players_set_input"]: {
		avatar_url?: string | undefined,
	created_at?: GraphQLTypes["timestamptz"] | undefined,
	discord_id?: string | undefined,
	name?: string | undefined,
	profile_url?: string | undefined,
	steam_id?: GraphQLTypes["bigint"] | undefined,
	updated_at?: GraphQLTypes["timestamptz"] | undefined
};
	/** aggregate stddev on columns */
["players_stddev_fields"]: {
	__typename: "players_stddev_fields",
	steam_id?: number | undefined
};
	/** aggregate stddev_pop on columns */
["players_stddev_pop_fields"]: {
	__typename: "players_stddev_pop_fields",
	steam_id?: number | undefined
};
	/** aggregate stddev_samp on columns */
["players_stddev_samp_fields"]: {
	__typename: "players_stddev_samp_fields",
	steam_id?: number | undefined
};
	/** Streaming cursor of the table "players" */
["players_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["players_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["players_stream_cursor_value_input"]: {
		avatar_url?: string | undefined,
	created_at?: GraphQLTypes["timestamptz"] | undefined,
	discord_id?: string | undefined,
	name?: string | undefined,
	profile_url?: string | undefined,
	steam_id?: GraphQLTypes["bigint"] | undefined,
	updated_at?: GraphQLTypes["timestamptz"] | undefined
};
	/** aggregate sum on columns */
["players_sum_fields"]: {
	__typename: "players_sum_fields",
	steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** update columns of table "players" */
["players_update_column"]: players_update_column;
	["players_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["players_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["players_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["players_bool_exp"]
};
	/** aggregate var_pop on columns */
["players_var_pop_fields"]: {
	__typename: "players_var_pop_fields",
	steam_id?: number | undefined
};
	/** aggregate var_samp on columns */
["players_var_samp_fields"]: {
	__typename: "players_var_samp_fields",
	steam_id?: number | undefined
};
	/** aggregate variance on columns */
["players_variance_fields"]: {
	__typename: "players_variance_fields",
	steam_id?: number | undefined
};
	["query_root"]: {
	__typename: "query_root",
	/** fetch data from the table: "_map_pool" */
	_map_pool: Array<GraphQLTypes["_map_pool"]>,
	/** fetch aggregated fields from the table: "_map_pool" */
	_map_pool_aggregate: GraphQLTypes["_map_pool_aggregate"],
	/** fetch data from the table: "_map_pool" using primary key columns */
	_map_pool_by_pk?: GraphQLTypes["_map_pool"] | undefined,
	/** fetch data from the table: "e_match_map_status" */
	e_match_map_status: Array<GraphQLTypes["e_match_map_status"]>,
	/** fetch aggregated fields from the table: "e_match_map_status" */
	e_match_map_status_aggregate: GraphQLTypes["e_match_map_status_aggregate"],
	/** fetch data from the table: "e_match_map_status" using primary key columns */
	e_match_map_status_by_pk?: GraphQLTypes["e_match_map_status"] | undefined,
	/** fetch data from the table: "e_match_status" */
	e_match_status: Array<GraphQLTypes["e_match_status"]>,
	/** fetch aggregated fields from the table: "e_match_status" */
	e_match_status_aggregate: GraphQLTypes["e_match_status_aggregate"],
	/** fetch data from the table: "e_match_status" using primary key columns */
	e_match_status_by_pk?: GraphQLTypes["e_match_status"] | undefined,
	/** fetch data from the table: "e_match_types" */
	e_match_types: Array<GraphQLTypes["e_match_types"]>,
	/** fetch aggregated fields from the table: "e_match_types" */
	e_match_types_aggregate: GraphQLTypes["e_match_types_aggregate"],
	/** fetch data from the table: "e_match_types" using primary key columns */
	e_match_types_by_pk?: GraphQLTypes["e_match_types"] | undefined,
	/** fetch data from the table: "e_objective_types" */
	e_objective_types: Array<GraphQLTypes["e_objective_types"]>,
	/** fetch aggregated fields from the table: "e_objective_types" */
	e_objective_types_aggregate: GraphQLTypes["e_objective_types_aggregate"],
	/** fetch data from the table: "e_objective_types" using primary key columns */
	e_objective_types_by_pk?: GraphQLTypes["e_objective_types"] | undefined,
	/** fetch data from the table: "e_sides" */
	e_sides: Array<GraphQLTypes["e_sides"]>,
	/** fetch aggregated fields from the table: "e_sides" */
	e_sides_aggregate: GraphQLTypes["e_sides_aggregate"],
	/** fetch data from the table: "e_sides" using primary key columns */
	e_sides_by_pk?: GraphQLTypes["e_sides"] | undefined,
	/** fetch data from the table: "e_team_roles" */
	e_team_roles: Array<GraphQLTypes["e_team_roles"]>,
	/** fetch aggregated fields from the table: "e_team_roles" */
	e_team_roles_aggregate: GraphQLTypes["e_team_roles_aggregate"],
	/** fetch data from the table: "e_team_roles" using primary key columns */
	e_team_roles_by_pk?: GraphQLTypes["e_team_roles"] | undefined,
	/** fetch data from the table: "e_timeout_settings" */
	e_timeout_settings: Array<GraphQLTypes["e_timeout_settings"]>,
	/** fetch aggregated fields from the table: "e_timeout_settings" */
	e_timeout_settings_aggregate: GraphQLTypes["e_timeout_settings_aggregate"],
	/** fetch data from the table: "e_timeout_settings" using primary key columns */
	e_timeout_settings_by_pk?: GraphQLTypes["e_timeout_settings"] | undefined,
	/** fetch data from the table: "e_utility_types" */
	e_utility_types: Array<GraphQLTypes["e_utility_types"]>,
	/** fetch aggregated fields from the table: "e_utility_types" */
	e_utility_types_aggregate: GraphQLTypes["e_utility_types_aggregate"],
	/** fetch data from the table: "e_utility_types" using primary key columns */
	e_utility_types_by_pk?: GraphQLTypes["e_utility_types"] | undefined,
	/** fetch data from the table: "e_veto_pick_types" */
	e_veto_pick_types: Array<GraphQLTypes["e_veto_pick_types"]>,
	/** fetch aggregated fields from the table: "e_veto_pick_types" */
	e_veto_pick_types_aggregate: GraphQLTypes["e_veto_pick_types_aggregate"],
	/** fetch data from the table: "e_veto_pick_types" using primary key columns */
	e_veto_pick_types_by_pk?: GraphQLTypes["e_veto_pick_types"] | undefined,
	/** fetch data from the table: "map_pools" */
	map_pools: Array<GraphQLTypes["map_pools"]>,
	/** fetch aggregated fields from the table: "map_pools" */
	map_pools_aggregate: GraphQLTypes["map_pools_aggregate"],
	/** fetch data from the table: "map_pools" using primary key columns */
	map_pools_by_pk?: GraphQLTypes["map_pools"] | undefined,
	/** An array relationship */
	maps: Array<GraphQLTypes["maps"]>,
	/** An aggregate relationship */
	maps_aggregate: GraphQLTypes["maps_aggregate"],
	/** fetch data from the table: "maps" using primary key columns */
	maps_by_pk?: GraphQLTypes["maps"] | undefined,
	/** fetch data from the table: "match_lineup_players" */
	match_lineup_players: Array<GraphQLTypes["match_lineup_players"]>,
	/** fetch aggregated fields from the table: "match_lineup_players" */
	match_lineup_players_aggregate: GraphQLTypes["match_lineup_players_aggregate"],
	/** fetch data from the table: "match_lineup_players" using primary key columns */
	match_lineup_players_by_pk?: GraphQLTypes["match_lineup_players"] | undefined,
	/** An array relationship */
	match_lineups: Array<GraphQLTypes["match_lineups"]>,
	/** An aggregate relationship */
	match_lineups_aggregate: GraphQLTypes["match_lineups_aggregate"],
	/** fetch data from the table: "match_lineups" using primary key columns */
	match_lineups_by_pk?: GraphQLTypes["match_lineups"] | undefined,
	/** fetch data from the table: "match_map_demos" */
	match_map_demos: Array<GraphQLTypes["match_map_demos"]>,
	/** fetch aggregated fields from the table: "match_map_demos" */
	match_map_demos_aggregate: GraphQLTypes["match_map_demos_aggregate"],
	/** fetch data from the table: "match_map_demos" using primary key columns */
	match_map_demos_by_pk?: GraphQLTypes["match_map_demos"] | undefined,
	/** fetch data from the table: "match_map_rounds" */
	match_map_rounds: Array<GraphQLTypes["match_map_rounds"]>,
	/** fetch aggregated fields from the table: "match_map_rounds" */
	match_map_rounds_aggregate: GraphQLTypes["match_map_rounds_aggregate"],
	/** fetch data from the table: "match_map_rounds" using primary key columns */
	match_map_rounds_by_pk?: GraphQLTypes["match_map_rounds"] | undefined,
	/** An array relationship */
	match_maps: Array<GraphQLTypes["match_maps"]>,
	/** An aggregate relationship */
	match_maps_aggregate: GraphQLTypes["match_maps_aggregate"],
	/** fetch data from the table: "match_maps" using primary key columns */
	match_maps_by_pk?: GraphQLTypes["match_maps"] | undefined,
	/** An array relationship */
	match_veto_picks: Array<GraphQLTypes["match_veto_picks"]>,
	/** An aggregate relationship */
	match_veto_picks_aggregate: GraphQLTypes["match_veto_picks_aggregate"],
	/** fetch data from the table: "match_veto_picks" using primary key columns */
	match_veto_picks_by_pk?: GraphQLTypes["match_veto_picks"] | undefined,
	/** An array relationship */
	matches: Array<GraphQLTypes["matches"]>,
	/** An aggregate relationship */
	matches_aggregate: GraphQLTypes["matches_aggregate"],
	/** fetch data from the table: "matches" using primary key columns */
	matches_by_pk?: GraphQLTypes["matches"] | undefined,
	/** Gets Current User */
	me: GraphQLTypes["MeResponse"],
	/** An array relationship */
	player_assists: Array<GraphQLTypes["player_assists"]>,
	/** An aggregate relationship */
	player_assists_aggregate: GraphQLTypes["player_assists_aggregate"],
	/** fetch data from the table: "player_assists" using primary key columns */
	player_assists_by_pk?: GraphQLTypes["player_assists"] | undefined,
	/** An array relationship */
	player_damages: Array<GraphQLTypes["player_damages"]>,
	/** An aggregate relationship */
	player_damages_aggregate: GraphQLTypes["player_damages_aggregate"],
	/** fetch data from the table: "player_damages" using primary key columns */
	player_damages_by_pk?: GraphQLTypes["player_damages"] | undefined,
	/** An array relationship */
	player_flashes: Array<GraphQLTypes["player_flashes"]>,
	/** An aggregate relationship */
	player_flashes_aggregate: GraphQLTypes["player_flashes_aggregate"],
	/** fetch data from the table: "player_flashes" using primary key columns */
	player_flashes_by_pk?: GraphQLTypes["player_flashes"] | undefined,
	/** An array relationship */
	player_kills: Array<GraphQLTypes["player_kills"]>,
	/** An aggregate relationship */
	player_kills_aggregate: GraphQLTypes["player_kills_aggregate"],
	/** fetch data from the table: "player_kills" using primary key columns */
	player_kills_by_pk?: GraphQLTypes["player_kills"] | undefined,
	/** An array relationship */
	player_objectives: Array<GraphQLTypes["player_objectives"]>,
	/** An aggregate relationship */
	player_objectives_aggregate: GraphQLTypes["player_objectives_aggregate"],
	/** fetch data from the table: "player_objectives" using primary key columns */
	player_objectives_by_pk?: GraphQLTypes["player_objectives"] | undefined,
	/** fetch data from the table: "player_unused_utility" */
	player_unused_utility: Array<GraphQLTypes["player_unused_utility"]>,
	/** fetch aggregated fields from the table: "player_unused_utility" */
	player_unused_utility_aggregate: GraphQLTypes["player_unused_utility_aggregate"],
	/** fetch data from the table: "player_unused_utility" using primary key columns */
	player_unused_utility_by_pk?: GraphQLTypes["player_unused_utility"] | undefined,
	/** An array relationship */
	player_utility: Array<GraphQLTypes["player_utility"]>,
	/** An aggregate relationship */
	player_utility_aggregate: GraphQLTypes["player_utility_aggregate"],
	/** fetch data from the table: "player_utility" using primary key columns */
	player_utility_by_pk?: GraphQLTypes["player_utility"] | undefined,
	/** fetch data from the table: "players" */
	players: Array<GraphQLTypes["players"]>,
	/** fetch aggregated fields from the table: "players" */
	players_aggregate: GraphQLTypes["players_aggregate"],
	/** fetch data from the table: "players" using primary key columns */
	players_by_pk?: GraphQLTypes["players"] | undefined,
	/** fetch data from the table: "servers" */
	servers: Array<GraphQLTypes["servers"]>,
	/** fetch aggregated fields from the table: "servers" */
	servers_aggregate: GraphQLTypes["servers_aggregate"],
	/** fetch data from the table: "servers" using primary key columns */
	servers_by_pk?: GraphQLTypes["servers"] | undefined,
	/** An array relationship */
	team_invites: Array<GraphQLTypes["team_invites"]>,
	/** An aggregate relationship */
	team_invites_aggregate: GraphQLTypes["team_invites_aggregate"],
	/** fetch data from the table: "team_invites" using primary key columns */
	team_invites_by_pk?: GraphQLTypes["team_invites"] | undefined,
	/** fetch data from the table: "team_roster" */
	team_roster: Array<GraphQLTypes["team_roster"]>,
	/** fetch aggregated fields from the table: "team_roster" */
	team_roster_aggregate: GraphQLTypes["team_roster_aggregate"],
	/** fetch data from the table: "team_roster" using primary key columns */
	team_roster_by_pk?: GraphQLTypes["team_roster"] | undefined,
	/** fetch data from the table: "teams" */
	teams: Array<GraphQLTypes["teams"]>,
	/** fetch aggregated fields from the table: "teams" */
	teams_aggregate: GraphQLTypes["teams_aggregate"],
	/** fetch data from the table: "teams" using primary key columns */
	teams_by_pk?: GraphQLTypes["teams"] | undefined,
	/** An array relationship */
	tournament_organizers: Array<GraphQLTypes["tournament_organizers"]>,
	/** An aggregate relationship */
	tournament_organizers_aggregate: GraphQLTypes["tournament_organizers_aggregate"],
	/** fetch data from the table: "tournament_organizers" using primary key columns */
	tournament_organizers_by_pk?: GraphQLTypes["tournament_organizers"] | undefined,
	/** fetch data from the table: "tournament_roster" */
	tournament_roster: Array<GraphQLTypes["tournament_roster"]>,
	/** fetch aggregated fields from the table: "tournament_roster" */
	tournament_roster_aggregate: GraphQLTypes["tournament_roster_aggregate"],
	/** fetch data from the table: "tournament_roster" using primary key columns */
	tournament_roster_by_pk?: GraphQLTypes["tournament_roster"] | undefined,
	/** An array relationship */
	tournament_servers: Array<GraphQLTypes["tournament_servers"]>,
	/** An aggregate relationship */
	tournament_servers_aggregate: GraphQLTypes["tournament_servers_aggregate"],
	/** fetch data from the table: "tournament_servers" using primary key columns */
	tournament_servers_by_pk?: GraphQLTypes["tournament_servers"] | undefined,
	/** fetch data from the table: "tournament_stages" */
	tournament_stages: Array<GraphQLTypes["tournament_stages"]>,
	/** fetch aggregated fields from the table: "tournament_stages" */
	tournament_stages_aggregate: GraphQLTypes["tournament_stages_aggregate"],
	/** fetch data from the table: "tournament_stages" using primary key columns */
	tournament_stages_by_pk?: GraphQLTypes["tournament_stages"] | undefined,
	/** An array relationship */
	tournament_teams: Array<GraphQLTypes["tournament_teams"]>,
	/** An aggregate relationship */
	tournament_teams_aggregate: GraphQLTypes["tournament_teams_aggregate"],
	/** fetch data from the table: "tournament_teams" using primary key columns */
	tournament_teams_by_pk?: GraphQLTypes["tournament_teams"] | undefined,
	/** An array relationship */
	tournaments: Array<GraphQLTypes["tournaments"]>,
	/** An aggregate relationship */
	tournaments_aggregate: GraphQLTypes["tournaments_aggregate"],
	/** fetch data from the table: "tournaments" using primary key columns */
	tournaments_by_pk?: GraphQLTypes["tournaments"] | undefined,
	/** fetch data from the table: "v_match_captains" */
	v_match_captains: Array<GraphQLTypes["v_match_captains"]>,
	/** fetch aggregated fields from the table: "v_match_captains" */
	v_match_captains_aggregate: GraphQLTypes["v_match_captains_aggregate"],
	/** fetch data from the table: "v_player_arch_nemesis" */
	v_player_arch_nemesis: Array<GraphQLTypes["v_player_arch_nemesis"]>,
	/** fetch aggregated fields from the table: "v_player_arch_nemesis" */
	v_player_arch_nemesis_aggregate: GraphQLTypes["v_player_arch_nemesis_aggregate"],
	/** fetch data from the table: "v_player_damage" */
	v_player_damage: Array<GraphQLTypes["v_player_damage"]>,
	/** fetch aggregated fields from the table: "v_player_damage" */
	v_player_damage_aggregate: GraphQLTypes["v_player_damage_aggregate"],
	/** fetch data from the table: "v_player_killed_player_counts" */
	v_player_killed_player_counts: Array<GraphQLTypes["v_player_killed_player_counts"]>,
	/** fetch aggregated fields from the table: "v_player_killed_player_counts" */
	v_player_killed_player_counts_aggregate: GraphQLTypes["v_player_killed_player_counts_aggregate"],
	/** fetch data from the table: "v_player_match_kills" */
	v_player_match_kills: Array<GraphQLTypes["v_player_match_kills"]>,
	/** fetch aggregated fields from the table: "v_player_match_kills" */
	v_player_match_kills_aggregate: GraphQLTypes["v_player_match_kills_aggregate"],
	/** fetch data from the table: "v_player_multi_kills" */
	v_player_multi_kills: Array<GraphQLTypes["v_player_multi_kills"]>,
	/** fetch aggregated fields from the table: "v_player_multi_kills" */
	v_player_multi_kills_aggregate: GraphQLTypes["v_player_multi_kills_aggregate"],
	/** fetch data from the table: "v_player_opening_duels" */
	v_player_opening_duels: Array<GraphQLTypes["v_player_opening_duels"]>,
	/** fetch aggregated fields from the table: "v_player_opening_duels" */
	v_player_opening_duels_aggregate: GraphQLTypes["v_player_opening_duels_aggregate"],
	/** fetch data from the table: "v_pool_maps" */
	v_pool_maps: Array<GraphQLTypes["v_pool_maps"]>,
	/** fetch aggregated fields from the table: "v_pool_maps" */
	v_pool_maps_aggregate: GraphQLTypes["v_pool_maps_aggregate"]
};
	/** columns and relationships of "servers" */
["servers"]: {
	__typename: "servers",
	api_password: GraphQLTypes["uuid"],
	/** A computed field, executes function "get_server_current_match_id" */
	current_match_id?: string | undefined,
	enabled: boolean,
	host: string,
	id: GraphQLTypes["uuid"],
	label: string,
	/** An array relationship */
	matches: Array<GraphQLTypes["matches"]>,
	/** An aggregate relationship */
	matches_aggregate: GraphQLTypes["matches_aggregate"],
	on_demand: boolean,
	/** An object relationship */
	owner?: GraphQLTypes["players"] | undefined,
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	port: number,
	rcon_password: GraphQLTypes["bytea"],
	/** An array relationship */
	tournament_servers: Array<GraphQLTypes["tournament_servers"]>,
	/** An aggregate relationship */
	tournament_servers_aggregate: GraphQLTypes["tournament_servers_aggregate"],
	tv_port?: number | undefined
};
	/** aggregated selection of "servers" */
["servers_aggregate"]: {
	__typename: "servers_aggregate",
	aggregate?: GraphQLTypes["servers_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["servers"]>
};
	/** aggregate fields of "servers" */
["servers_aggregate_fields"]: {
	__typename: "servers_aggregate_fields",
	avg?: GraphQLTypes["servers_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["servers_max_fields"] | undefined,
	min?: GraphQLTypes["servers_min_fields"] | undefined,
	stddev?: GraphQLTypes["servers_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["servers_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["servers_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["servers_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["servers_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["servers_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["servers_variance_fields"] | undefined
};
	/** aggregate avg on columns */
["servers_avg_fields"]: {
	__typename: "servers_avg_fields",
	player_steam_id?: number | undefined,
	port?: number | undefined,
	tv_port?: number | undefined
};
	/** Boolean expression to filter rows from the table "servers". All fields are combined with a logical 'AND'. */
["servers_bool_exp"]: {
		_and?: Array<GraphQLTypes["servers_bool_exp"]> | undefined,
	_not?: GraphQLTypes["servers_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["servers_bool_exp"]> | undefined,
	api_password?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	current_match_id?: GraphQLTypes["String_comparison_exp"] | undefined,
	enabled?: GraphQLTypes["Boolean_comparison_exp"] | undefined,
	host?: GraphQLTypes["String_comparison_exp"] | undefined,
	id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	label?: GraphQLTypes["String_comparison_exp"] | undefined,
	matches?: GraphQLTypes["matches_bool_exp"] | undefined,
	matches_aggregate?: GraphQLTypes["matches_aggregate_bool_exp"] | undefined,
	on_demand?: GraphQLTypes["Boolean_comparison_exp"] | undefined,
	owner?: GraphQLTypes["players_bool_exp"] | undefined,
	player_steam_id?: GraphQLTypes["bigint_comparison_exp"] | undefined,
	port?: GraphQLTypes["Int_comparison_exp"] | undefined,
	rcon_password?: GraphQLTypes["bytea_comparison_exp"] | undefined,
	tournament_servers?: GraphQLTypes["tournament_servers_bool_exp"] | undefined,
	tournament_servers_aggregate?: GraphQLTypes["tournament_servers_aggregate_bool_exp"] | undefined,
	tv_port?: GraphQLTypes["Int_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "servers" */
["servers_constraint"]: servers_constraint;
	/** input type for incrementing numeric columns in table "servers" */
["servers_inc_input"]: {
		player_steam_id?: GraphQLTypes["bigint"] | undefined,
	port?: number | undefined,
	tv_port?: number | undefined
};
	/** input type for inserting data into table "servers" */
["servers_insert_input"]: {
		api_password?: GraphQLTypes["uuid"] | undefined,
	enabled?: boolean | undefined,
	host?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	label?: string | undefined,
	matches?: GraphQLTypes["matches_arr_rel_insert_input"] | undefined,
	on_demand?: boolean | undefined,
	owner?: GraphQLTypes["players_obj_rel_insert_input"] | undefined,
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	port?: number | undefined,
	rcon_password?: GraphQLTypes["bytea"] | undefined,
	tournament_servers?: GraphQLTypes["tournament_servers_arr_rel_insert_input"] | undefined,
	tv_port?: number | undefined
};
	/** aggregate max on columns */
["servers_max_fields"]: {
	__typename: "servers_max_fields",
	api_password?: GraphQLTypes["uuid"] | undefined,
	/** A computed field, executes function "get_server_current_match_id" */
	current_match_id?: string | undefined,
	host?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	label?: string | undefined,
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	port?: number | undefined,
	tv_port?: number | undefined
};
	/** aggregate min on columns */
["servers_min_fields"]: {
	__typename: "servers_min_fields",
	api_password?: GraphQLTypes["uuid"] | undefined,
	/** A computed field, executes function "get_server_current_match_id" */
	current_match_id?: string | undefined,
	host?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	label?: string | undefined,
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	port?: number | undefined,
	tv_port?: number | undefined
};
	/** response of any mutation on the table "servers" */
["servers_mutation_response"]: {
	__typename: "servers_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["servers"]>
};
	/** input type for inserting object relation for remote table "servers" */
["servers_obj_rel_insert_input"]: {
		data: GraphQLTypes["servers_insert_input"],
	/** upsert condition */
	on_conflict?: GraphQLTypes["servers_on_conflict"] | undefined
};
	/** on_conflict condition type for table "servers" */
["servers_on_conflict"]: {
		constraint: GraphQLTypes["servers_constraint"],
	update_columns: Array<GraphQLTypes["servers_update_column"]>,
	where?: GraphQLTypes["servers_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "servers". */
["servers_order_by"]: {
		api_password?: GraphQLTypes["order_by"] | undefined,
	current_match_id?: GraphQLTypes["order_by"] | undefined,
	enabled?: GraphQLTypes["order_by"] | undefined,
	host?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	label?: GraphQLTypes["order_by"] | undefined,
	matches_aggregate?: GraphQLTypes["matches_aggregate_order_by"] | undefined,
	on_demand?: GraphQLTypes["order_by"] | undefined,
	owner?: GraphQLTypes["players_order_by"] | undefined,
	player_steam_id?: GraphQLTypes["order_by"] | undefined,
	port?: GraphQLTypes["order_by"] | undefined,
	rcon_password?: GraphQLTypes["order_by"] | undefined,
	tournament_servers_aggregate?: GraphQLTypes["tournament_servers_aggregate_order_by"] | undefined,
	tv_port?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: servers */
["servers_pk_columns_input"]: {
		id: GraphQLTypes["uuid"]
};
	/** select columns of table "servers" */
["servers_select_column"]: servers_select_column;
	/** input type for updating data in table "servers" */
["servers_set_input"]: {
		api_password?: GraphQLTypes["uuid"] | undefined,
	enabled?: boolean | undefined,
	host?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	label?: string | undefined,
	on_demand?: boolean | undefined,
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	port?: number | undefined,
	rcon_password?: GraphQLTypes["bytea"] | undefined,
	tv_port?: number | undefined
};
	/** aggregate stddev on columns */
["servers_stddev_fields"]: {
	__typename: "servers_stddev_fields",
	player_steam_id?: number | undefined,
	port?: number | undefined,
	tv_port?: number | undefined
};
	/** aggregate stddev_pop on columns */
["servers_stddev_pop_fields"]: {
	__typename: "servers_stddev_pop_fields",
	player_steam_id?: number | undefined,
	port?: number | undefined,
	tv_port?: number | undefined
};
	/** aggregate stddev_samp on columns */
["servers_stddev_samp_fields"]: {
	__typename: "servers_stddev_samp_fields",
	player_steam_id?: number | undefined,
	port?: number | undefined,
	tv_port?: number | undefined
};
	/** Streaming cursor of the table "servers" */
["servers_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["servers_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["servers_stream_cursor_value_input"]: {
		api_password?: GraphQLTypes["uuid"] | undefined,
	enabled?: boolean | undefined,
	host?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	label?: string | undefined,
	on_demand?: boolean | undefined,
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	port?: number | undefined,
	rcon_password?: GraphQLTypes["bytea"] | undefined,
	tv_port?: number | undefined
};
	/** aggregate sum on columns */
["servers_sum_fields"]: {
	__typename: "servers_sum_fields",
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	port?: number | undefined,
	tv_port?: number | undefined
};
	/** update columns of table "servers" */
["servers_update_column"]: servers_update_column;
	["servers_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["servers_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["servers_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["servers_bool_exp"]
};
	/** aggregate var_pop on columns */
["servers_var_pop_fields"]: {
	__typename: "servers_var_pop_fields",
	player_steam_id?: number | undefined,
	port?: number | undefined,
	tv_port?: number | undefined
};
	/** aggregate var_samp on columns */
["servers_var_samp_fields"]: {
	__typename: "servers_var_samp_fields",
	player_steam_id?: number | undefined,
	port?: number | undefined,
	tv_port?: number | undefined
};
	/** aggregate variance on columns */
["servers_variance_fields"]: {
	__typename: "servers_variance_fields",
	player_steam_id?: number | undefined,
	port?: number | undefined,
	tv_port?: number | undefined
};
	["subscription_root"]: {
	__typename: "subscription_root",
	/** fetch data from the table: "_map_pool" */
	_map_pool: Array<GraphQLTypes["_map_pool"]>,
	/** fetch aggregated fields from the table: "_map_pool" */
	_map_pool_aggregate: GraphQLTypes["_map_pool_aggregate"],
	/** fetch data from the table: "_map_pool" using primary key columns */
	_map_pool_by_pk?: GraphQLTypes["_map_pool"] | undefined,
	/** fetch data from the table in a streaming manner: "_map_pool" */
	_map_pool_stream: Array<GraphQLTypes["_map_pool"]>,
	/** fetch data from the table: "e_match_map_status" */
	e_match_map_status: Array<GraphQLTypes["e_match_map_status"]>,
	/** fetch aggregated fields from the table: "e_match_map_status" */
	e_match_map_status_aggregate: GraphQLTypes["e_match_map_status_aggregate"],
	/** fetch data from the table: "e_match_map_status" using primary key columns */
	e_match_map_status_by_pk?: GraphQLTypes["e_match_map_status"] | undefined,
	/** fetch data from the table in a streaming manner: "e_match_map_status" */
	e_match_map_status_stream: Array<GraphQLTypes["e_match_map_status"]>,
	/** fetch data from the table: "e_match_status" */
	e_match_status: Array<GraphQLTypes["e_match_status"]>,
	/** fetch aggregated fields from the table: "e_match_status" */
	e_match_status_aggregate: GraphQLTypes["e_match_status_aggregate"],
	/** fetch data from the table: "e_match_status" using primary key columns */
	e_match_status_by_pk?: GraphQLTypes["e_match_status"] | undefined,
	/** fetch data from the table in a streaming manner: "e_match_status" */
	e_match_status_stream: Array<GraphQLTypes["e_match_status"]>,
	/** fetch data from the table: "e_match_types" */
	e_match_types: Array<GraphQLTypes["e_match_types"]>,
	/** fetch aggregated fields from the table: "e_match_types" */
	e_match_types_aggregate: GraphQLTypes["e_match_types_aggregate"],
	/** fetch data from the table: "e_match_types" using primary key columns */
	e_match_types_by_pk?: GraphQLTypes["e_match_types"] | undefined,
	/** fetch data from the table in a streaming manner: "e_match_types" */
	e_match_types_stream: Array<GraphQLTypes["e_match_types"]>,
	/** fetch data from the table: "e_objective_types" */
	e_objective_types: Array<GraphQLTypes["e_objective_types"]>,
	/** fetch aggregated fields from the table: "e_objective_types" */
	e_objective_types_aggregate: GraphQLTypes["e_objective_types_aggregate"],
	/** fetch data from the table: "e_objective_types" using primary key columns */
	e_objective_types_by_pk?: GraphQLTypes["e_objective_types"] | undefined,
	/** fetch data from the table in a streaming manner: "e_objective_types" */
	e_objective_types_stream: Array<GraphQLTypes["e_objective_types"]>,
	/** fetch data from the table: "e_sides" */
	e_sides: Array<GraphQLTypes["e_sides"]>,
	/** fetch aggregated fields from the table: "e_sides" */
	e_sides_aggregate: GraphQLTypes["e_sides_aggregate"],
	/** fetch data from the table: "e_sides" using primary key columns */
	e_sides_by_pk?: GraphQLTypes["e_sides"] | undefined,
	/** fetch data from the table in a streaming manner: "e_sides" */
	e_sides_stream: Array<GraphQLTypes["e_sides"]>,
	/** fetch data from the table: "e_team_roles" */
	e_team_roles: Array<GraphQLTypes["e_team_roles"]>,
	/** fetch aggregated fields from the table: "e_team_roles" */
	e_team_roles_aggregate: GraphQLTypes["e_team_roles_aggregate"],
	/** fetch data from the table: "e_team_roles" using primary key columns */
	e_team_roles_by_pk?: GraphQLTypes["e_team_roles"] | undefined,
	/** fetch data from the table in a streaming manner: "e_team_roles" */
	e_team_roles_stream: Array<GraphQLTypes["e_team_roles"]>,
	/** fetch data from the table: "e_timeout_settings" */
	e_timeout_settings: Array<GraphQLTypes["e_timeout_settings"]>,
	/** fetch aggregated fields from the table: "e_timeout_settings" */
	e_timeout_settings_aggregate: GraphQLTypes["e_timeout_settings_aggregate"],
	/** fetch data from the table: "e_timeout_settings" using primary key columns */
	e_timeout_settings_by_pk?: GraphQLTypes["e_timeout_settings"] | undefined,
	/** fetch data from the table in a streaming manner: "e_timeout_settings" */
	e_timeout_settings_stream: Array<GraphQLTypes["e_timeout_settings"]>,
	/** fetch data from the table: "e_utility_types" */
	e_utility_types: Array<GraphQLTypes["e_utility_types"]>,
	/** fetch aggregated fields from the table: "e_utility_types" */
	e_utility_types_aggregate: GraphQLTypes["e_utility_types_aggregate"],
	/** fetch data from the table: "e_utility_types" using primary key columns */
	e_utility_types_by_pk?: GraphQLTypes["e_utility_types"] | undefined,
	/** fetch data from the table in a streaming manner: "e_utility_types" */
	e_utility_types_stream: Array<GraphQLTypes["e_utility_types"]>,
	/** fetch data from the table: "e_veto_pick_types" */
	e_veto_pick_types: Array<GraphQLTypes["e_veto_pick_types"]>,
	/** fetch aggregated fields from the table: "e_veto_pick_types" */
	e_veto_pick_types_aggregate: GraphQLTypes["e_veto_pick_types_aggregate"],
	/** fetch data from the table: "e_veto_pick_types" using primary key columns */
	e_veto_pick_types_by_pk?: GraphQLTypes["e_veto_pick_types"] | undefined,
	/** fetch data from the table in a streaming manner: "e_veto_pick_types" */
	e_veto_pick_types_stream: Array<GraphQLTypes["e_veto_pick_types"]>,
	/** fetch data from the table: "map_pools" */
	map_pools: Array<GraphQLTypes["map_pools"]>,
	/** fetch aggregated fields from the table: "map_pools" */
	map_pools_aggregate: GraphQLTypes["map_pools_aggregate"],
	/** fetch data from the table: "map_pools" using primary key columns */
	map_pools_by_pk?: GraphQLTypes["map_pools"] | undefined,
	/** fetch data from the table in a streaming manner: "map_pools" */
	map_pools_stream: Array<GraphQLTypes["map_pools"]>,
	/** An array relationship */
	maps: Array<GraphQLTypes["maps"]>,
	/** An aggregate relationship */
	maps_aggregate: GraphQLTypes["maps_aggregate"],
	/** fetch data from the table: "maps" using primary key columns */
	maps_by_pk?: GraphQLTypes["maps"] | undefined,
	/** fetch data from the table in a streaming manner: "maps" */
	maps_stream: Array<GraphQLTypes["maps"]>,
	/** fetch data from the table: "match_lineup_players" */
	match_lineup_players: Array<GraphQLTypes["match_lineup_players"]>,
	/** fetch aggregated fields from the table: "match_lineup_players" */
	match_lineup_players_aggregate: GraphQLTypes["match_lineup_players_aggregate"],
	/** fetch data from the table: "match_lineup_players" using primary key columns */
	match_lineup_players_by_pk?: GraphQLTypes["match_lineup_players"] | undefined,
	/** fetch data from the table in a streaming manner: "match_lineup_players" */
	match_lineup_players_stream: Array<GraphQLTypes["match_lineup_players"]>,
	/** An array relationship */
	match_lineups: Array<GraphQLTypes["match_lineups"]>,
	/** An aggregate relationship */
	match_lineups_aggregate: GraphQLTypes["match_lineups_aggregate"],
	/** fetch data from the table: "match_lineups" using primary key columns */
	match_lineups_by_pk?: GraphQLTypes["match_lineups"] | undefined,
	/** fetch data from the table in a streaming manner: "match_lineups" */
	match_lineups_stream: Array<GraphQLTypes["match_lineups"]>,
	/** fetch data from the table: "match_map_demos" */
	match_map_demos: Array<GraphQLTypes["match_map_demos"]>,
	/** fetch aggregated fields from the table: "match_map_demos" */
	match_map_demos_aggregate: GraphQLTypes["match_map_demos_aggregate"],
	/** fetch data from the table: "match_map_demos" using primary key columns */
	match_map_demos_by_pk?: GraphQLTypes["match_map_demos"] | undefined,
	/** fetch data from the table in a streaming manner: "match_map_demos" */
	match_map_demos_stream: Array<GraphQLTypes["match_map_demos"]>,
	/** fetch data from the table: "match_map_rounds" */
	match_map_rounds: Array<GraphQLTypes["match_map_rounds"]>,
	/** fetch aggregated fields from the table: "match_map_rounds" */
	match_map_rounds_aggregate: GraphQLTypes["match_map_rounds_aggregate"],
	/** fetch data from the table: "match_map_rounds" using primary key columns */
	match_map_rounds_by_pk?: GraphQLTypes["match_map_rounds"] | undefined,
	/** fetch data from the table in a streaming manner: "match_map_rounds" */
	match_map_rounds_stream: Array<GraphQLTypes["match_map_rounds"]>,
	/** An array relationship */
	match_maps: Array<GraphQLTypes["match_maps"]>,
	/** An aggregate relationship */
	match_maps_aggregate: GraphQLTypes["match_maps_aggregate"],
	/** fetch data from the table: "match_maps" using primary key columns */
	match_maps_by_pk?: GraphQLTypes["match_maps"] | undefined,
	/** fetch data from the table in a streaming manner: "match_maps" */
	match_maps_stream: Array<GraphQLTypes["match_maps"]>,
	/** An array relationship */
	match_veto_picks: Array<GraphQLTypes["match_veto_picks"]>,
	/** An aggregate relationship */
	match_veto_picks_aggregate: GraphQLTypes["match_veto_picks_aggregate"],
	/** fetch data from the table: "match_veto_picks" using primary key columns */
	match_veto_picks_by_pk?: GraphQLTypes["match_veto_picks"] | undefined,
	/** fetch data from the table in a streaming manner: "match_veto_picks" */
	match_veto_picks_stream: Array<GraphQLTypes["match_veto_picks"]>,
	/** An array relationship */
	matches: Array<GraphQLTypes["matches"]>,
	/** An aggregate relationship */
	matches_aggregate: GraphQLTypes["matches_aggregate"],
	/** fetch data from the table: "matches" using primary key columns */
	matches_by_pk?: GraphQLTypes["matches"] | undefined,
	/** fetch data from the table in a streaming manner: "matches" */
	matches_stream: Array<GraphQLTypes["matches"]>,
	/** An array relationship */
	player_assists: Array<GraphQLTypes["player_assists"]>,
	/** An aggregate relationship */
	player_assists_aggregate: GraphQLTypes["player_assists_aggregate"],
	/** fetch data from the table: "player_assists" using primary key columns */
	player_assists_by_pk?: GraphQLTypes["player_assists"] | undefined,
	/** fetch data from the table in a streaming manner: "player_assists" */
	player_assists_stream: Array<GraphQLTypes["player_assists"]>,
	/** An array relationship */
	player_damages: Array<GraphQLTypes["player_damages"]>,
	/** An aggregate relationship */
	player_damages_aggregate: GraphQLTypes["player_damages_aggregate"],
	/** fetch data from the table: "player_damages" using primary key columns */
	player_damages_by_pk?: GraphQLTypes["player_damages"] | undefined,
	/** fetch data from the table in a streaming manner: "player_damages" */
	player_damages_stream: Array<GraphQLTypes["player_damages"]>,
	/** An array relationship */
	player_flashes: Array<GraphQLTypes["player_flashes"]>,
	/** An aggregate relationship */
	player_flashes_aggregate: GraphQLTypes["player_flashes_aggregate"],
	/** fetch data from the table: "player_flashes" using primary key columns */
	player_flashes_by_pk?: GraphQLTypes["player_flashes"] | undefined,
	/** fetch data from the table in a streaming manner: "player_flashes" */
	player_flashes_stream: Array<GraphQLTypes["player_flashes"]>,
	/** An array relationship */
	player_kills: Array<GraphQLTypes["player_kills"]>,
	/** An aggregate relationship */
	player_kills_aggregate: GraphQLTypes["player_kills_aggregate"],
	/** fetch data from the table: "player_kills" using primary key columns */
	player_kills_by_pk?: GraphQLTypes["player_kills"] | undefined,
	/** fetch data from the table in a streaming manner: "player_kills" */
	player_kills_stream: Array<GraphQLTypes["player_kills"]>,
	/** An array relationship */
	player_objectives: Array<GraphQLTypes["player_objectives"]>,
	/** An aggregate relationship */
	player_objectives_aggregate: GraphQLTypes["player_objectives_aggregate"],
	/** fetch data from the table: "player_objectives" using primary key columns */
	player_objectives_by_pk?: GraphQLTypes["player_objectives"] | undefined,
	/** fetch data from the table in a streaming manner: "player_objectives" */
	player_objectives_stream: Array<GraphQLTypes["player_objectives"]>,
	/** fetch data from the table: "player_unused_utility" */
	player_unused_utility: Array<GraphQLTypes["player_unused_utility"]>,
	/** fetch aggregated fields from the table: "player_unused_utility" */
	player_unused_utility_aggregate: GraphQLTypes["player_unused_utility_aggregate"],
	/** fetch data from the table: "player_unused_utility" using primary key columns */
	player_unused_utility_by_pk?: GraphQLTypes["player_unused_utility"] | undefined,
	/** fetch data from the table in a streaming manner: "player_unused_utility" */
	player_unused_utility_stream: Array<GraphQLTypes["player_unused_utility"]>,
	/** An array relationship */
	player_utility: Array<GraphQLTypes["player_utility"]>,
	/** An aggregate relationship */
	player_utility_aggregate: GraphQLTypes["player_utility_aggregate"],
	/** fetch data from the table: "player_utility" using primary key columns */
	player_utility_by_pk?: GraphQLTypes["player_utility"] | undefined,
	/** fetch data from the table in a streaming manner: "player_utility" */
	player_utility_stream: Array<GraphQLTypes["player_utility"]>,
	/** fetch data from the table: "players" */
	players: Array<GraphQLTypes["players"]>,
	/** fetch aggregated fields from the table: "players" */
	players_aggregate: GraphQLTypes["players_aggregate"],
	/** fetch data from the table: "players" using primary key columns */
	players_by_pk?: GraphQLTypes["players"] | undefined,
	/** fetch data from the table in a streaming manner: "players" */
	players_stream: Array<GraphQLTypes["players"]>,
	/** fetch data from the table: "servers" */
	servers: Array<GraphQLTypes["servers"]>,
	/** fetch aggregated fields from the table: "servers" */
	servers_aggregate: GraphQLTypes["servers_aggregate"],
	/** fetch data from the table: "servers" using primary key columns */
	servers_by_pk?: GraphQLTypes["servers"] | undefined,
	/** fetch data from the table in a streaming manner: "servers" */
	servers_stream: Array<GraphQLTypes["servers"]>,
	/** An array relationship */
	team_invites: Array<GraphQLTypes["team_invites"]>,
	/** An aggregate relationship */
	team_invites_aggregate: GraphQLTypes["team_invites_aggregate"],
	/** fetch data from the table: "team_invites" using primary key columns */
	team_invites_by_pk?: GraphQLTypes["team_invites"] | undefined,
	/** fetch data from the table in a streaming manner: "team_invites" */
	team_invites_stream: Array<GraphQLTypes["team_invites"]>,
	/** fetch data from the table: "team_roster" */
	team_roster: Array<GraphQLTypes["team_roster"]>,
	/** fetch aggregated fields from the table: "team_roster" */
	team_roster_aggregate: GraphQLTypes["team_roster_aggregate"],
	/** fetch data from the table: "team_roster" using primary key columns */
	team_roster_by_pk?: GraphQLTypes["team_roster"] | undefined,
	/** fetch data from the table in a streaming manner: "team_roster" */
	team_roster_stream: Array<GraphQLTypes["team_roster"]>,
	/** fetch data from the table: "teams" */
	teams: Array<GraphQLTypes["teams"]>,
	/** fetch aggregated fields from the table: "teams" */
	teams_aggregate: GraphQLTypes["teams_aggregate"],
	/** fetch data from the table: "teams" using primary key columns */
	teams_by_pk?: GraphQLTypes["teams"] | undefined,
	/** fetch data from the table in a streaming manner: "teams" */
	teams_stream: Array<GraphQLTypes["teams"]>,
	/** An array relationship */
	tournament_organizers: Array<GraphQLTypes["tournament_organizers"]>,
	/** An aggregate relationship */
	tournament_organizers_aggregate: GraphQLTypes["tournament_organizers_aggregate"],
	/** fetch data from the table: "tournament_organizers" using primary key columns */
	tournament_organizers_by_pk?: GraphQLTypes["tournament_organizers"] | undefined,
	/** fetch data from the table in a streaming manner: "tournament_organizers" */
	tournament_organizers_stream: Array<GraphQLTypes["tournament_organizers"]>,
	/** fetch data from the table: "tournament_roster" */
	tournament_roster: Array<GraphQLTypes["tournament_roster"]>,
	/** fetch aggregated fields from the table: "tournament_roster" */
	tournament_roster_aggregate: GraphQLTypes["tournament_roster_aggregate"],
	/** fetch data from the table: "tournament_roster" using primary key columns */
	tournament_roster_by_pk?: GraphQLTypes["tournament_roster"] | undefined,
	/** fetch data from the table in a streaming manner: "tournament_roster" */
	tournament_roster_stream: Array<GraphQLTypes["tournament_roster"]>,
	/** An array relationship */
	tournament_servers: Array<GraphQLTypes["tournament_servers"]>,
	/** An aggregate relationship */
	tournament_servers_aggregate: GraphQLTypes["tournament_servers_aggregate"],
	/** fetch data from the table: "tournament_servers" using primary key columns */
	tournament_servers_by_pk?: GraphQLTypes["tournament_servers"] | undefined,
	/** fetch data from the table in a streaming manner: "tournament_servers" */
	tournament_servers_stream: Array<GraphQLTypes["tournament_servers"]>,
	/** fetch data from the table: "tournament_stages" */
	tournament_stages: Array<GraphQLTypes["tournament_stages"]>,
	/** fetch aggregated fields from the table: "tournament_stages" */
	tournament_stages_aggregate: GraphQLTypes["tournament_stages_aggregate"],
	/** fetch data from the table: "tournament_stages" using primary key columns */
	tournament_stages_by_pk?: GraphQLTypes["tournament_stages"] | undefined,
	/** fetch data from the table in a streaming manner: "tournament_stages" */
	tournament_stages_stream: Array<GraphQLTypes["tournament_stages"]>,
	/** An array relationship */
	tournament_teams: Array<GraphQLTypes["tournament_teams"]>,
	/** An aggregate relationship */
	tournament_teams_aggregate: GraphQLTypes["tournament_teams_aggregate"],
	/** fetch data from the table: "tournament_teams" using primary key columns */
	tournament_teams_by_pk?: GraphQLTypes["tournament_teams"] | undefined,
	/** fetch data from the table in a streaming manner: "tournament_teams" */
	tournament_teams_stream: Array<GraphQLTypes["tournament_teams"]>,
	/** An array relationship */
	tournaments: Array<GraphQLTypes["tournaments"]>,
	/** An aggregate relationship */
	tournaments_aggregate: GraphQLTypes["tournaments_aggregate"],
	/** fetch data from the table: "tournaments" using primary key columns */
	tournaments_by_pk?: GraphQLTypes["tournaments"] | undefined,
	/** fetch data from the table in a streaming manner: "tournaments" */
	tournaments_stream: Array<GraphQLTypes["tournaments"]>,
	/** fetch data from the table: "v_match_captains" */
	v_match_captains: Array<GraphQLTypes["v_match_captains"]>,
	/** fetch aggregated fields from the table: "v_match_captains" */
	v_match_captains_aggregate: GraphQLTypes["v_match_captains_aggregate"],
	/** fetch data from the table in a streaming manner: "v_match_captains" */
	v_match_captains_stream: Array<GraphQLTypes["v_match_captains"]>,
	/** fetch data from the table: "v_player_arch_nemesis" */
	v_player_arch_nemesis: Array<GraphQLTypes["v_player_arch_nemesis"]>,
	/** fetch aggregated fields from the table: "v_player_arch_nemesis" */
	v_player_arch_nemesis_aggregate: GraphQLTypes["v_player_arch_nemesis_aggregate"],
	/** fetch data from the table in a streaming manner: "v_player_arch_nemesis" */
	v_player_arch_nemesis_stream: Array<GraphQLTypes["v_player_arch_nemesis"]>,
	/** fetch data from the table: "v_player_damage" */
	v_player_damage: Array<GraphQLTypes["v_player_damage"]>,
	/** fetch aggregated fields from the table: "v_player_damage" */
	v_player_damage_aggregate: GraphQLTypes["v_player_damage_aggregate"],
	/** fetch data from the table in a streaming manner: "v_player_damage" */
	v_player_damage_stream: Array<GraphQLTypes["v_player_damage"]>,
	/** fetch data from the table: "v_player_killed_player_counts" */
	v_player_killed_player_counts: Array<GraphQLTypes["v_player_killed_player_counts"]>,
	/** fetch aggregated fields from the table: "v_player_killed_player_counts" */
	v_player_killed_player_counts_aggregate: GraphQLTypes["v_player_killed_player_counts_aggregate"],
	/** fetch data from the table in a streaming manner: "v_player_killed_player_counts" */
	v_player_killed_player_counts_stream: Array<GraphQLTypes["v_player_killed_player_counts"]>,
	/** fetch data from the table: "v_player_match_kills" */
	v_player_match_kills: Array<GraphQLTypes["v_player_match_kills"]>,
	/** fetch aggregated fields from the table: "v_player_match_kills" */
	v_player_match_kills_aggregate: GraphQLTypes["v_player_match_kills_aggregate"],
	/** fetch data from the table in a streaming manner: "v_player_match_kills" */
	v_player_match_kills_stream: Array<GraphQLTypes["v_player_match_kills"]>,
	/** fetch data from the table: "v_player_multi_kills" */
	v_player_multi_kills: Array<GraphQLTypes["v_player_multi_kills"]>,
	/** fetch aggregated fields from the table: "v_player_multi_kills" */
	v_player_multi_kills_aggregate: GraphQLTypes["v_player_multi_kills_aggregate"],
	/** fetch data from the table in a streaming manner: "v_player_multi_kills" */
	v_player_multi_kills_stream: Array<GraphQLTypes["v_player_multi_kills"]>,
	/** fetch data from the table: "v_player_opening_duels" */
	v_player_opening_duels: Array<GraphQLTypes["v_player_opening_duels"]>,
	/** fetch aggregated fields from the table: "v_player_opening_duels" */
	v_player_opening_duels_aggregate: GraphQLTypes["v_player_opening_duels_aggregate"],
	/** fetch data from the table in a streaming manner: "v_player_opening_duels" */
	v_player_opening_duels_stream: Array<GraphQLTypes["v_player_opening_duels"]>,
	/** fetch data from the table: "v_pool_maps" */
	v_pool_maps: Array<GraphQLTypes["v_pool_maps"]>,
	/** fetch aggregated fields from the table: "v_pool_maps" */
	v_pool_maps_aggregate: GraphQLTypes["v_pool_maps_aggregate"],
	/** fetch data from the table in a streaming manner: "v_pool_maps" */
	v_pool_maps_stream: Array<GraphQLTypes["v_pool_maps"]>
};
	/** columns and relationships of "team_invites" */
["team_invites"]: {
	__typename: "team_invites",
	created_at: GraphQLTypes["timestamptz"],
	id: GraphQLTypes["uuid"],
	/** An object relationship */
	invited_by: GraphQLTypes["players"],
	invited_by_player_steam_id: GraphQLTypes["bigint"],
	/** An object relationship */
	player: GraphQLTypes["players"],
	steam_id: GraphQLTypes["bigint"],
	/** An object relationship */
	team: GraphQLTypes["teams"],
	team_id: GraphQLTypes["uuid"]
};
	/** aggregated selection of "team_invites" */
["team_invites_aggregate"]: {
	__typename: "team_invites_aggregate",
	aggregate?: GraphQLTypes["team_invites_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["team_invites"]>
};
	["team_invites_aggregate_bool_exp"]: {
		count?: GraphQLTypes["team_invites_aggregate_bool_exp_count"] | undefined
};
	["team_invites_aggregate_bool_exp_count"]: {
		arguments?: Array<GraphQLTypes["team_invites_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["team_invites_bool_exp"] | undefined,
	predicate: GraphQLTypes["Int_comparison_exp"]
};
	/** aggregate fields of "team_invites" */
["team_invites_aggregate_fields"]: {
	__typename: "team_invites_aggregate_fields",
	avg?: GraphQLTypes["team_invites_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["team_invites_max_fields"] | undefined,
	min?: GraphQLTypes["team_invites_min_fields"] | undefined,
	stddev?: GraphQLTypes["team_invites_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["team_invites_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["team_invites_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["team_invites_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["team_invites_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["team_invites_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["team_invites_variance_fields"] | undefined
};
	/** order by aggregate values of table "team_invites" */
["team_invites_aggregate_order_by"]: {
		avg?: GraphQLTypes["team_invites_avg_order_by"] | undefined,
	count?: GraphQLTypes["order_by"] | undefined,
	max?: GraphQLTypes["team_invites_max_order_by"] | undefined,
	min?: GraphQLTypes["team_invites_min_order_by"] | undefined,
	stddev?: GraphQLTypes["team_invites_stddev_order_by"] | undefined,
	stddev_pop?: GraphQLTypes["team_invites_stddev_pop_order_by"] | undefined,
	stddev_samp?: GraphQLTypes["team_invites_stddev_samp_order_by"] | undefined,
	sum?: GraphQLTypes["team_invites_sum_order_by"] | undefined,
	var_pop?: GraphQLTypes["team_invites_var_pop_order_by"] | undefined,
	var_samp?: GraphQLTypes["team_invites_var_samp_order_by"] | undefined,
	variance?: GraphQLTypes["team_invites_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "team_invites" */
["team_invites_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["team_invites_insert_input"]>,
	/** upsert condition */
	on_conflict?: GraphQLTypes["team_invites_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["team_invites_avg_fields"]: {
	__typename: "team_invites_avg_fields",
	invited_by_player_steam_id?: number | undefined,
	steam_id?: number | undefined
};
	/** order by avg() on columns of table "team_invites" */
["team_invites_avg_order_by"]: {
		invited_by_player_steam_id?: GraphQLTypes["order_by"] | undefined,
	steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "team_invites". All fields are combined with a logical 'AND'. */
["team_invites_bool_exp"]: {
		_and?: Array<GraphQLTypes["team_invites_bool_exp"]> | undefined,
	_not?: GraphQLTypes["team_invites_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["team_invites_bool_exp"]> | undefined,
	created_at?: GraphQLTypes["timestamptz_comparison_exp"] | undefined,
	id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	invited_by?: GraphQLTypes["players_bool_exp"] | undefined,
	invited_by_player_steam_id?: GraphQLTypes["bigint_comparison_exp"] | undefined,
	player?: GraphQLTypes["players_bool_exp"] | undefined,
	steam_id?: GraphQLTypes["bigint_comparison_exp"] | undefined,
	team?: GraphQLTypes["teams_bool_exp"] | undefined,
	team_id?: GraphQLTypes["uuid_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "team_invites" */
["team_invites_constraint"]: team_invites_constraint;
	/** input type for incrementing numeric columns in table "team_invites" */
["team_invites_inc_input"]: {
		invited_by_player_steam_id?: GraphQLTypes["bigint"] | undefined,
	steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** input type for inserting data into table "team_invites" */
["team_invites_insert_input"]: {
		created_at?: GraphQLTypes["timestamptz"] | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	invited_by?: GraphQLTypes["players_obj_rel_insert_input"] | undefined,
	invited_by_player_steam_id?: GraphQLTypes["bigint"] | undefined,
	player?: GraphQLTypes["players_obj_rel_insert_input"] | undefined,
	steam_id?: GraphQLTypes["bigint"] | undefined,
	team?: GraphQLTypes["teams_obj_rel_insert_input"] | undefined,
	team_id?: GraphQLTypes["uuid"] | undefined
};
	/** aggregate max on columns */
["team_invites_max_fields"]: {
	__typename: "team_invites_max_fields",
	created_at?: GraphQLTypes["timestamptz"] | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	invited_by_player_steam_id?: GraphQLTypes["bigint"] | undefined,
	steam_id?: GraphQLTypes["bigint"] | undefined,
	team_id?: GraphQLTypes["uuid"] | undefined
};
	/** order by max() on columns of table "team_invites" */
["team_invites_max_order_by"]: {
		created_at?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	invited_by_player_steam_id?: GraphQLTypes["order_by"] | undefined,
	steam_id?: GraphQLTypes["order_by"] | undefined,
	team_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["team_invites_min_fields"]: {
	__typename: "team_invites_min_fields",
	created_at?: GraphQLTypes["timestamptz"] | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	invited_by_player_steam_id?: GraphQLTypes["bigint"] | undefined,
	steam_id?: GraphQLTypes["bigint"] | undefined,
	team_id?: GraphQLTypes["uuid"] | undefined
};
	/** order by min() on columns of table "team_invites" */
["team_invites_min_order_by"]: {
		created_at?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	invited_by_player_steam_id?: GraphQLTypes["order_by"] | undefined,
	steam_id?: GraphQLTypes["order_by"] | undefined,
	team_id?: GraphQLTypes["order_by"] | undefined
};
	/** response of any mutation on the table "team_invites" */
["team_invites_mutation_response"]: {
	__typename: "team_invites_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["team_invites"]>
};
	/** on_conflict condition type for table "team_invites" */
["team_invites_on_conflict"]: {
		constraint: GraphQLTypes["team_invites_constraint"],
	update_columns: Array<GraphQLTypes["team_invites_update_column"]>,
	where?: GraphQLTypes["team_invites_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "team_invites". */
["team_invites_order_by"]: {
		created_at?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	invited_by?: GraphQLTypes["players_order_by"] | undefined,
	invited_by_player_steam_id?: GraphQLTypes["order_by"] | undefined,
	player?: GraphQLTypes["players_order_by"] | undefined,
	steam_id?: GraphQLTypes["order_by"] | undefined,
	team?: GraphQLTypes["teams_order_by"] | undefined,
	team_id?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: team_invites */
["team_invites_pk_columns_input"]: {
		id: GraphQLTypes["uuid"]
};
	/** select columns of table "team_invites" */
["team_invites_select_column"]: team_invites_select_column;
	/** input type for updating data in table "team_invites" */
["team_invites_set_input"]: {
		created_at?: GraphQLTypes["timestamptz"] | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	invited_by_player_steam_id?: GraphQLTypes["bigint"] | undefined,
	steam_id?: GraphQLTypes["bigint"] | undefined,
	team_id?: GraphQLTypes["uuid"] | undefined
};
	/** aggregate stddev on columns */
["team_invites_stddev_fields"]: {
	__typename: "team_invites_stddev_fields",
	invited_by_player_steam_id?: number | undefined,
	steam_id?: number | undefined
};
	/** order by stddev() on columns of table "team_invites" */
["team_invites_stddev_order_by"]: {
		invited_by_player_steam_id?: GraphQLTypes["order_by"] | undefined,
	steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["team_invites_stddev_pop_fields"]: {
	__typename: "team_invites_stddev_pop_fields",
	invited_by_player_steam_id?: number | undefined,
	steam_id?: number | undefined
};
	/** order by stddev_pop() on columns of table "team_invites" */
["team_invites_stddev_pop_order_by"]: {
		invited_by_player_steam_id?: GraphQLTypes["order_by"] | undefined,
	steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["team_invites_stddev_samp_fields"]: {
	__typename: "team_invites_stddev_samp_fields",
	invited_by_player_steam_id?: number | undefined,
	steam_id?: number | undefined
};
	/** order by stddev_samp() on columns of table "team_invites" */
["team_invites_stddev_samp_order_by"]: {
		invited_by_player_steam_id?: GraphQLTypes["order_by"] | undefined,
	steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "team_invites" */
["team_invites_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["team_invites_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["team_invites_stream_cursor_value_input"]: {
		created_at?: GraphQLTypes["timestamptz"] | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	invited_by_player_steam_id?: GraphQLTypes["bigint"] | undefined,
	steam_id?: GraphQLTypes["bigint"] | undefined,
	team_id?: GraphQLTypes["uuid"] | undefined
};
	/** aggregate sum on columns */
["team_invites_sum_fields"]: {
	__typename: "team_invites_sum_fields",
	invited_by_player_steam_id?: GraphQLTypes["bigint"] | undefined,
	steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** order by sum() on columns of table "team_invites" */
["team_invites_sum_order_by"]: {
		invited_by_player_steam_id?: GraphQLTypes["order_by"] | undefined,
	steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** update columns of table "team_invites" */
["team_invites_update_column"]: team_invites_update_column;
	["team_invites_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["team_invites_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["team_invites_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["team_invites_bool_exp"]
};
	/** aggregate var_pop on columns */
["team_invites_var_pop_fields"]: {
	__typename: "team_invites_var_pop_fields",
	invited_by_player_steam_id?: number | undefined,
	steam_id?: number | undefined
};
	/** order by var_pop() on columns of table "team_invites" */
["team_invites_var_pop_order_by"]: {
		invited_by_player_steam_id?: GraphQLTypes["order_by"] | undefined,
	steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["team_invites_var_samp_fields"]: {
	__typename: "team_invites_var_samp_fields",
	invited_by_player_steam_id?: number | undefined,
	steam_id?: number | undefined
};
	/** order by var_samp() on columns of table "team_invites" */
["team_invites_var_samp_order_by"]: {
		invited_by_player_steam_id?: GraphQLTypes["order_by"] | undefined,
	steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["team_invites_variance_fields"]: {
	__typename: "team_invites_variance_fields",
	invited_by_player_steam_id?: number | undefined,
	steam_id?: number | undefined
};
	/** order by variance() on columns of table "team_invites" */
["team_invites_variance_order_by"]: {
		invited_by_player_steam_id?: GraphQLTypes["order_by"] | undefined,
	steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** columns and relationships of "team_roster" */
["team_roster"]: {
	__typename: "team_roster",
	/** An object relationship */
	player: GraphQLTypes["players"],
	player_steam_id: GraphQLTypes["bigint"],
	role: GraphQLTypes["e_team_roles_enum"],
	/** An object relationship */
	team: GraphQLTypes["teams"],
	team_id: GraphQLTypes["uuid"]
};
	/** aggregated selection of "team_roster" */
["team_roster_aggregate"]: {
	__typename: "team_roster_aggregate",
	aggregate?: GraphQLTypes["team_roster_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["team_roster"]>
};
	["team_roster_aggregate_bool_exp"]: {
		count?: GraphQLTypes["team_roster_aggregate_bool_exp_count"] | undefined
};
	["team_roster_aggregate_bool_exp_count"]: {
		arguments?: Array<GraphQLTypes["team_roster_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["team_roster_bool_exp"] | undefined,
	predicate: GraphQLTypes["Int_comparison_exp"]
};
	/** aggregate fields of "team_roster" */
["team_roster_aggregate_fields"]: {
	__typename: "team_roster_aggregate_fields",
	avg?: GraphQLTypes["team_roster_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["team_roster_max_fields"] | undefined,
	min?: GraphQLTypes["team_roster_min_fields"] | undefined,
	stddev?: GraphQLTypes["team_roster_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["team_roster_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["team_roster_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["team_roster_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["team_roster_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["team_roster_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["team_roster_variance_fields"] | undefined
};
	/** order by aggregate values of table "team_roster" */
["team_roster_aggregate_order_by"]: {
		avg?: GraphQLTypes["team_roster_avg_order_by"] | undefined,
	count?: GraphQLTypes["order_by"] | undefined,
	max?: GraphQLTypes["team_roster_max_order_by"] | undefined,
	min?: GraphQLTypes["team_roster_min_order_by"] | undefined,
	stddev?: GraphQLTypes["team_roster_stddev_order_by"] | undefined,
	stddev_pop?: GraphQLTypes["team_roster_stddev_pop_order_by"] | undefined,
	stddev_samp?: GraphQLTypes["team_roster_stddev_samp_order_by"] | undefined,
	sum?: GraphQLTypes["team_roster_sum_order_by"] | undefined,
	var_pop?: GraphQLTypes["team_roster_var_pop_order_by"] | undefined,
	var_samp?: GraphQLTypes["team_roster_var_samp_order_by"] | undefined,
	variance?: GraphQLTypes["team_roster_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "team_roster" */
["team_roster_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["team_roster_insert_input"]>,
	/** upsert condition */
	on_conflict?: GraphQLTypes["team_roster_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["team_roster_avg_fields"]: {
	__typename: "team_roster_avg_fields",
	player_steam_id?: number | undefined
};
	/** order by avg() on columns of table "team_roster" */
["team_roster_avg_order_by"]: {
		player_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "team_roster". All fields are combined with a logical 'AND'. */
["team_roster_bool_exp"]: {
		_and?: Array<GraphQLTypes["team_roster_bool_exp"]> | undefined,
	_not?: GraphQLTypes["team_roster_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["team_roster_bool_exp"]> | undefined,
	player?: GraphQLTypes["players_bool_exp"] | undefined,
	player_steam_id?: GraphQLTypes["bigint_comparison_exp"] | undefined,
	role?: GraphQLTypes["e_team_roles_enum_comparison_exp"] | undefined,
	team?: GraphQLTypes["teams_bool_exp"] | undefined,
	team_id?: GraphQLTypes["uuid_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "team_roster" */
["team_roster_constraint"]: team_roster_constraint;
	/** input type for incrementing numeric columns in table "team_roster" */
["team_roster_inc_input"]: {
		player_steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** input type for inserting data into table "team_roster" */
["team_roster_insert_input"]: {
		player?: GraphQLTypes["players_obj_rel_insert_input"] | undefined,
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	role?: GraphQLTypes["e_team_roles_enum"] | undefined,
	team?: GraphQLTypes["teams_obj_rel_insert_input"] | undefined,
	team_id?: GraphQLTypes["uuid"] | undefined
};
	/** aggregate max on columns */
["team_roster_max_fields"]: {
	__typename: "team_roster_max_fields",
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	team_id?: GraphQLTypes["uuid"] | undefined
};
	/** order by max() on columns of table "team_roster" */
["team_roster_max_order_by"]: {
		player_steam_id?: GraphQLTypes["order_by"] | undefined,
	team_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["team_roster_min_fields"]: {
	__typename: "team_roster_min_fields",
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	team_id?: GraphQLTypes["uuid"] | undefined
};
	/** order by min() on columns of table "team_roster" */
["team_roster_min_order_by"]: {
		player_steam_id?: GraphQLTypes["order_by"] | undefined,
	team_id?: GraphQLTypes["order_by"] | undefined
};
	/** response of any mutation on the table "team_roster" */
["team_roster_mutation_response"]: {
	__typename: "team_roster_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["team_roster"]>
};
	/** on_conflict condition type for table "team_roster" */
["team_roster_on_conflict"]: {
		constraint: GraphQLTypes["team_roster_constraint"],
	update_columns: Array<GraphQLTypes["team_roster_update_column"]>,
	where?: GraphQLTypes["team_roster_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "team_roster". */
["team_roster_order_by"]: {
		player?: GraphQLTypes["players_order_by"] | undefined,
	player_steam_id?: GraphQLTypes["order_by"] | undefined,
	role?: GraphQLTypes["order_by"] | undefined,
	team?: GraphQLTypes["teams_order_by"] | undefined,
	team_id?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: team_roster */
["team_roster_pk_columns_input"]: {
		player_steam_id: GraphQLTypes["bigint"],
	team_id: GraphQLTypes["uuid"]
};
	/** select columns of table "team_roster" */
["team_roster_select_column"]: team_roster_select_column;
	/** input type for updating data in table "team_roster" */
["team_roster_set_input"]: {
		player_steam_id?: GraphQLTypes["bigint"] | undefined,
	role?: GraphQLTypes["e_team_roles_enum"] | undefined,
	team_id?: GraphQLTypes["uuid"] | undefined
};
	/** aggregate stddev on columns */
["team_roster_stddev_fields"]: {
	__typename: "team_roster_stddev_fields",
	player_steam_id?: number | undefined
};
	/** order by stddev() on columns of table "team_roster" */
["team_roster_stddev_order_by"]: {
		player_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["team_roster_stddev_pop_fields"]: {
	__typename: "team_roster_stddev_pop_fields",
	player_steam_id?: number | undefined
};
	/** order by stddev_pop() on columns of table "team_roster" */
["team_roster_stddev_pop_order_by"]: {
		player_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["team_roster_stddev_samp_fields"]: {
	__typename: "team_roster_stddev_samp_fields",
	player_steam_id?: number | undefined
};
	/** order by stddev_samp() on columns of table "team_roster" */
["team_roster_stddev_samp_order_by"]: {
		player_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "team_roster" */
["team_roster_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["team_roster_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["team_roster_stream_cursor_value_input"]: {
		player_steam_id?: GraphQLTypes["bigint"] | undefined,
	role?: GraphQLTypes["e_team_roles_enum"] | undefined,
	team_id?: GraphQLTypes["uuid"] | undefined
};
	/** aggregate sum on columns */
["team_roster_sum_fields"]: {
	__typename: "team_roster_sum_fields",
	player_steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** order by sum() on columns of table "team_roster" */
["team_roster_sum_order_by"]: {
		player_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** update columns of table "team_roster" */
["team_roster_update_column"]: team_roster_update_column;
	["team_roster_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["team_roster_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["team_roster_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["team_roster_bool_exp"]
};
	/** aggregate var_pop on columns */
["team_roster_var_pop_fields"]: {
	__typename: "team_roster_var_pop_fields",
	player_steam_id?: number | undefined
};
	/** order by var_pop() on columns of table "team_roster" */
["team_roster_var_pop_order_by"]: {
		player_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["team_roster_var_samp_fields"]: {
	__typename: "team_roster_var_samp_fields",
	player_steam_id?: number | undefined
};
	/** order by var_samp() on columns of table "team_roster" */
["team_roster_var_samp_order_by"]: {
		player_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["team_roster_variance_fields"]: {
	__typename: "team_roster_variance_fields",
	player_steam_id?: number | undefined
};
	/** order by variance() on columns of table "team_roster" */
["team_roster_variance_order_by"]: {
		player_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** columns and relationships of "teams" */
["teams"]: {
	__typename: "teams",
	id: GraphQLTypes["uuid"],
	/** An array relationship */
	invites: Array<GraphQLTypes["team_invites"]>,
	/** An aggregate relationship */
	invites_aggregate: GraphQLTypes["team_invites_aggregate"],
	/** An array relationship */
	match_lineups: Array<GraphQLTypes["match_lineups"]>,
	/** An aggregate relationship */
	match_lineups_aggregate: GraphQLTypes["match_lineups_aggregate"],
	/** A computed field, executes function "get_team_matches" */
	matches?: Array<GraphQLTypes["matches"]> | undefined,
	name: string,
	/** An object relationship */
	owner: GraphQLTypes["players"],
	owner_steam_id: GraphQLTypes["bigint"],
	/** An array relationship */
	roster: Array<GraphQLTypes["team_roster"]>,
	/** An aggregate relationship */
	roster_aggregate: GraphQLTypes["team_roster_aggregate"],
	short_name: string,
	/** An array relationship */
	tournament_rosters: Array<GraphQLTypes["tournament_roster"]>,
	/** An aggregate relationship */
	tournament_rosters_aggregate: GraphQLTypes["tournament_roster_aggregate"],
	/** An array relationship */
	tournament_teams: Array<GraphQLTypes["tournament_teams"]>,
	/** An aggregate relationship */
	tournament_teams_aggregate: GraphQLTypes["tournament_teams_aggregate"]
};
	/** aggregated selection of "teams" */
["teams_aggregate"]: {
	__typename: "teams_aggregate",
	aggregate?: GraphQLTypes["teams_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["teams"]>
};
	["teams_aggregate_bool_exp"]: {
		count?: GraphQLTypes["teams_aggregate_bool_exp_count"] | undefined
};
	["teams_aggregate_bool_exp_count"]: {
		arguments?: Array<GraphQLTypes["teams_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["teams_bool_exp"] | undefined,
	predicate: GraphQLTypes["Int_comparison_exp"]
};
	/** aggregate fields of "teams" */
["teams_aggregate_fields"]: {
	__typename: "teams_aggregate_fields",
	avg?: GraphQLTypes["teams_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["teams_max_fields"] | undefined,
	min?: GraphQLTypes["teams_min_fields"] | undefined,
	stddev?: GraphQLTypes["teams_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["teams_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["teams_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["teams_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["teams_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["teams_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["teams_variance_fields"] | undefined
};
	/** order by aggregate values of table "teams" */
["teams_aggregate_order_by"]: {
		avg?: GraphQLTypes["teams_avg_order_by"] | undefined,
	count?: GraphQLTypes["order_by"] | undefined,
	max?: GraphQLTypes["teams_max_order_by"] | undefined,
	min?: GraphQLTypes["teams_min_order_by"] | undefined,
	stddev?: GraphQLTypes["teams_stddev_order_by"] | undefined,
	stddev_pop?: GraphQLTypes["teams_stddev_pop_order_by"] | undefined,
	stddev_samp?: GraphQLTypes["teams_stddev_samp_order_by"] | undefined,
	sum?: GraphQLTypes["teams_sum_order_by"] | undefined,
	var_pop?: GraphQLTypes["teams_var_pop_order_by"] | undefined,
	var_samp?: GraphQLTypes["teams_var_samp_order_by"] | undefined,
	variance?: GraphQLTypes["teams_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "teams" */
["teams_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["teams_insert_input"]>,
	/** upsert condition */
	on_conflict?: GraphQLTypes["teams_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["teams_avg_fields"]: {
	__typename: "teams_avg_fields",
	owner_steam_id?: number | undefined
};
	/** order by avg() on columns of table "teams" */
["teams_avg_order_by"]: {
		owner_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "teams". All fields are combined with a logical 'AND'. */
["teams_bool_exp"]: {
		_and?: Array<GraphQLTypes["teams_bool_exp"]> | undefined,
	_not?: GraphQLTypes["teams_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["teams_bool_exp"]> | undefined,
	id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	invites?: GraphQLTypes["team_invites_bool_exp"] | undefined,
	invites_aggregate?: GraphQLTypes["team_invites_aggregate_bool_exp"] | undefined,
	match_lineups?: GraphQLTypes["match_lineups_bool_exp"] | undefined,
	match_lineups_aggregate?: GraphQLTypes["match_lineups_aggregate_bool_exp"] | undefined,
	matches?: GraphQLTypes["matches_bool_exp"] | undefined,
	name?: GraphQLTypes["String_comparison_exp"] | undefined,
	owner?: GraphQLTypes["players_bool_exp"] | undefined,
	owner_steam_id?: GraphQLTypes["bigint_comparison_exp"] | undefined,
	roster?: GraphQLTypes["team_roster_bool_exp"] | undefined,
	roster_aggregate?: GraphQLTypes["team_roster_aggregate_bool_exp"] | undefined,
	short_name?: GraphQLTypes["String_comparison_exp"] | undefined,
	tournament_rosters?: GraphQLTypes["tournament_roster_bool_exp"] | undefined,
	tournament_rosters_aggregate?: GraphQLTypes["tournament_roster_aggregate_bool_exp"] | undefined,
	tournament_teams?: GraphQLTypes["tournament_teams_bool_exp"] | undefined,
	tournament_teams_aggregate?: GraphQLTypes["tournament_teams_aggregate_bool_exp"] | undefined
};
	/** unique or primary key constraints on table "teams" */
["teams_constraint"]: teams_constraint;
	/** input type for incrementing numeric columns in table "teams" */
["teams_inc_input"]: {
		owner_steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** input type for inserting data into table "teams" */
["teams_insert_input"]: {
		id?: GraphQLTypes["uuid"] | undefined,
	invites?: GraphQLTypes["team_invites_arr_rel_insert_input"] | undefined,
	match_lineups?: GraphQLTypes["match_lineups_arr_rel_insert_input"] | undefined,
	name?: string | undefined,
	owner?: GraphQLTypes["players_obj_rel_insert_input"] | undefined,
	owner_steam_id?: GraphQLTypes["bigint"] | undefined,
	roster?: GraphQLTypes["team_roster_arr_rel_insert_input"] | undefined,
	short_name?: string | undefined,
	tournament_rosters?: GraphQLTypes["tournament_roster_arr_rel_insert_input"] | undefined,
	tournament_teams?: GraphQLTypes["tournament_teams_arr_rel_insert_input"] | undefined
};
	/** aggregate max on columns */
["teams_max_fields"]: {
	__typename: "teams_max_fields",
	id?: GraphQLTypes["uuid"] | undefined,
	name?: string | undefined,
	owner_steam_id?: GraphQLTypes["bigint"] | undefined,
	short_name?: string | undefined
};
	/** order by max() on columns of table "teams" */
["teams_max_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	name?: GraphQLTypes["order_by"] | undefined,
	owner_steam_id?: GraphQLTypes["order_by"] | undefined,
	short_name?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["teams_min_fields"]: {
	__typename: "teams_min_fields",
	id?: GraphQLTypes["uuid"] | undefined,
	name?: string | undefined,
	owner_steam_id?: GraphQLTypes["bigint"] | undefined,
	short_name?: string | undefined
};
	/** order by min() on columns of table "teams" */
["teams_min_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	name?: GraphQLTypes["order_by"] | undefined,
	owner_steam_id?: GraphQLTypes["order_by"] | undefined,
	short_name?: GraphQLTypes["order_by"] | undefined
};
	/** response of any mutation on the table "teams" */
["teams_mutation_response"]: {
	__typename: "teams_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["teams"]>
};
	/** input type for inserting object relation for remote table "teams" */
["teams_obj_rel_insert_input"]: {
		data: GraphQLTypes["teams_insert_input"],
	/** upsert condition */
	on_conflict?: GraphQLTypes["teams_on_conflict"] | undefined
};
	/** on_conflict condition type for table "teams" */
["teams_on_conflict"]: {
		constraint: GraphQLTypes["teams_constraint"],
	update_columns: Array<GraphQLTypes["teams_update_column"]>,
	where?: GraphQLTypes["teams_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "teams". */
["teams_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	invites_aggregate?: GraphQLTypes["team_invites_aggregate_order_by"] | undefined,
	match_lineups_aggregate?: GraphQLTypes["match_lineups_aggregate_order_by"] | undefined,
	matches_aggregate?: GraphQLTypes["matches_aggregate_order_by"] | undefined,
	name?: GraphQLTypes["order_by"] | undefined,
	owner?: GraphQLTypes["players_order_by"] | undefined,
	owner_steam_id?: GraphQLTypes["order_by"] | undefined,
	roster_aggregate?: GraphQLTypes["team_roster_aggregate_order_by"] | undefined,
	short_name?: GraphQLTypes["order_by"] | undefined,
	tournament_rosters_aggregate?: GraphQLTypes["tournament_roster_aggregate_order_by"] | undefined,
	tournament_teams_aggregate?: GraphQLTypes["tournament_teams_aggregate_order_by"] | undefined
};
	/** primary key columns input for table: teams */
["teams_pk_columns_input"]: {
		id: GraphQLTypes["uuid"]
};
	/** select columns of table "teams" */
["teams_select_column"]: teams_select_column;
	/** input type for updating data in table "teams" */
["teams_set_input"]: {
		id?: GraphQLTypes["uuid"] | undefined,
	name?: string | undefined,
	owner_steam_id?: GraphQLTypes["bigint"] | undefined,
	short_name?: string | undefined
};
	/** aggregate stddev on columns */
["teams_stddev_fields"]: {
	__typename: "teams_stddev_fields",
	owner_steam_id?: number | undefined
};
	/** order by stddev() on columns of table "teams" */
["teams_stddev_order_by"]: {
		owner_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["teams_stddev_pop_fields"]: {
	__typename: "teams_stddev_pop_fields",
	owner_steam_id?: number | undefined
};
	/** order by stddev_pop() on columns of table "teams" */
["teams_stddev_pop_order_by"]: {
		owner_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["teams_stddev_samp_fields"]: {
	__typename: "teams_stddev_samp_fields",
	owner_steam_id?: number | undefined
};
	/** order by stddev_samp() on columns of table "teams" */
["teams_stddev_samp_order_by"]: {
		owner_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "teams" */
["teams_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["teams_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["teams_stream_cursor_value_input"]: {
		id?: GraphQLTypes["uuid"] | undefined,
	name?: string | undefined,
	owner_steam_id?: GraphQLTypes["bigint"] | undefined,
	short_name?: string | undefined
};
	/** aggregate sum on columns */
["teams_sum_fields"]: {
	__typename: "teams_sum_fields",
	owner_steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** order by sum() on columns of table "teams" */
["teams_sum_order_by"]: {
		owner_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** update columns of table "teams" */
["teams_update_column"]: teams_update_column;
	["teams_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["teams_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["teams_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["teams_bool_exp"]
};
	/** aggregate var_pop on columns */
["teams_var_pop_fields"]: {
	__typename: "teams_var_pop_fields",
	owner_steam_id?: number | undefined
};
	/** order by var_pop() on columns of table "teams" */
["teams_var_pop_order_by"]: {
		owner_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["teams_var_samp_fields"]: {
	__typename: "teams_var_samp_fields",
	owner_steam_id?: number | undefined
};
	/** order by var_samp() on columns of table "teams" */
["teams_var_samp_order_by"]: {
		owner_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["teams_variance_fields"]: {
	__typename: "teams_variance_fields",
	owner_steam_id?: number | undefined
};
	/** order by variance() on columns of table "teams" */
["teams_variance_order_by"]: {
		owner_steam_id?: GraphQLTypes["order_by"] | undefined
};
	["timestamptz"]: "scalar" & { name: "timestamptz" };
	/** Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'. */
["timestamptz_comparison_exp"]: {
		_eq?: GraphQLTypes["timestamptz"] | undefined,
	_gt?: GraphQLTypes["timestamptz"] | undefined,
	_gte?: GraphQLTypes["timestamptz"] | undefined,
	_in?: Array<GraphQLTypes["timestamptz"]> | undefined,
	_is_null?: boolean | undefined,
	_lt?: GraphQLTypes["timestamptz"] | undefined,
	_lte?: GraphQLTypes["timestamptz"] | undefined,
	_neq?: GraphQLTypes["timestamptz"] | undefined,
	_nin?: Array<GraphQLTypes["timestamptz"]> | undefined
};
	/** columns and relationships of "tournament_organizers" */
["tournament_organizers"]: {
	__typename: "tournament_organizers",
	/** An object relationship */
	organizer: GraphQLTypes["players"],
	role: string,
	steam_id: GraphQLTypes["bigint"],
	/** An object relationship */
	tournament: GraphQLTypes["tournaments"],
	tournament_id: GraphQLTypes["uuid"]
};
	/** aggregated selection of "tournament_organizers" */
["tournament_organizers_aggregate"]: {
	__typename: "tournament_organizers_aggregate",
	aggregate?: GraphQLTypes["tournament_organizers_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["tournament_organizers"]>
};
	["tournament_organizers_aggregate_bool_exp"]: {
		count?: GraphQLTypes["tournament_organizers_aggregate_bool_exp_count"] | undefined
};
	["tournament_organizers_aggregate_bool_exp_count"]: {
		arguments?: Array<GraphQLTypes["tournament_organizers_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["tournament_organizers_bool_exp"] | undefined,
	predicate: GraphQLTypes["Int_comparison_exp"]
};
	/** aggregate fields of "tournament_organizers" */
["tournament_organizers_aggregate_fields"]: {
	__typename: "tournament_organizers_aggregate_fields",
	avg?: GraphQLTypes["tournament_organizers_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["tournament_organizers_max_fields"] | undefined,
	min?: GraphQLTypes["tournament_organizers_min_fields"] | undefined,
	stddev?: GraphQLTypes["tournament_organizers_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["tournament_organizers_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["tournament_organizers_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["tournament_organizers_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["tournament_organizers_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["tournament_organizers_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["tournament_organizers_variance_fields"] | undefined
};
	/** order by aggregate values of table "tournament_organizers" */
["tournament_organizers_aggregate_order_by"]: {
		avg?: GraphQLTypes["tournament_organizers_avg_order_by"] | undefined,
	count?: GraphQLTypes["order_by"] | undefined,
	max?: GraphQLTypes["tournament_organizers_max_order_by"] | undefined,
	min?: GraphQLTypes["tournament_organizers_min_order_by"] | undefined,
	stddev?: GraphQLTypes["tournament_organizers_stddev_order_by"] | undefined,
	stddev_pop?: GraphQLTypes["tournament_organizers_stddev_pop_order_by"] | undefined,
	stddev_samp?: GraphQLTypes["tournament_organizers_stddev_samp_order_by"] | undefined,
	sum?: GraphQLTypes["tournament_organizers_sum_order_by"] | undefined,
	var_pop?: GraphQLTypes["tournament_organizers_var_pop_order_by"] | undefined,
	var_samp?: GraphQLTypes["tournament_organizers_var_samp_order_by"] | undefined,
	variance?: GraphQLTypes["tournament_organizers_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "tournament_organizers" */
["tournament_organizers_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["tournament_organizers_insert_input"]>,
	/** upsert condition */
	on_conflict?: GraphQLTypes["tournament_organizers_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["tournament_organizers_avg_fields"]: {
	__typename: "tournament_organizers_avg_fields",
	steam_id?: number | undefined
};
	/** order by avg() on columns of table "tournament_organizers" */
["tournament_organizers_avg_order_by"]: {
		steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "tournament_organizers". All fields are combined with a logical 'AND'. */
["tournament_organizers_bool_exp"]: {
		_and?: Array<GraphQLTypes["tournament_organizers_bool_exp"]> | undefined,
	_not?: GraphQLTypes["tournament_organizers_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["tournament_organizers_bool_exp"]> | undefined,
	organizer?: GraphQLTypes["players_bool_exp"] | undefined,
	role?: GraphQLTypes["String_comparison_exp"] | undefined,
	steam_id?: GraphQLTypes["bigint_comparison_exp"] | undefined,
	tournament?: GraphQLTypes["tournaments_bool_exp"] | undefined,
	tournament_id?: GraphQLTypes["uuid_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "tournament_organizers" */
["tournament_organizers_constraint"]: tournament_organizers_constraint;
	/** input type for incrementing numeric columns in table "tournament_organizers" */
["tournament_organizers_inc_input"]: {
		steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** input type for inserting data into table "tournament_organizers" */
["tournament_organizers_insert_input"]: {
		organizer?: GraphQLTypes["players_obj_rel_insert_input"] | undefined,
	role?: string | undefined,
	steam_id?: GraphQLTypes["bigint"] | undefined,
	tournament?: GraphQLTypes["tournaments_obj_rel_insert_input"] | undefined,
	tournament_id?: GraphQLTypes["uuid"] | undefined
};
	/** aggregate max on columns */
["tournament_organizers_max_fields"]: {
	__typename: "tournament_organizers_max_fields",
	role?: string | undefined,
	steam_id?: GraphQLTypes["bigint"] | undefined,
	tournament_id?: GraphQLTypes["uuid"] | undefined
};
	/** order by max() on columns of table "tournament_organizers" */
["tournament_organizers_max_order_by"]: {
		role?: GraphQLTypes["order_by"] | undefined,
	steam_id?: GraphQLTypes["order_by"] | undefined,
	tournament_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["tournament_organizers_min_fields"]: {
	__typename: "tournament_organizers_min_fields",
	role?: string | undefined,
	steam_id?: GraphQLTypes["bigint"] | undefined,
	tournament_id?: GraphQLTypes["uuid"] | undefined
};
	/** order by min() on columns of table "tournament_organizers" */
["tournament_organizers_min_order_by"]: {
		role?: GraphQLTypes["order_by"] | undefined,
	steam_id?: GraphQLTypes["order_by"] | undefined,
	tournament_id?: GraphQLTypes["order_by"] | undefined
};
	/** response of any mutation on the table "tournament_organizers" */
["tournament_organizers_mutation_response"]: {
	__typename: "tournament_organizers_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["tournament_organizers"]>
};
	/** on_conflict condition type for table "tournament_organizers" */
["tournament_organizers_on_conflict"]: {
		constraint: GraphQLTypes["tournament_organizers_constraint"],
	update_columns: Array<GraphQLTypes["tournament_organizers_update_column"]>,
	where?: GraphQLTypes["tournament_organizers_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "tournament_organizers". */
["tournament_organizers_order_by"]: {
		organizer?: GraphQLTypes["players_order_by"] | undefined,
	role?: GraphQLTypes["order_by"] | undefined,
	steam_id?: GraphQLTypes["order_by"] | undefined,
	tournament?: GraphQLTypes["tournaments_order_by"] | undefined,
	tournament_id?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: tournament_organizers */
["tournament_organizers_pk_columns_input"]: {
		steam_id: GraphQLTypes["bigint"],
	tournament_id: GraphQLTypes["uuid"]
};
	/** select columns of table "tournament_organizers" */
["tournament_organizers_select_column"]: tournament_organizers_select_column;
	/** input type for updating data in table "tournament_organizers" */
["tournament_organizers_set_input"]: {
		role?: string | undefined,
	steam_id?: GraphQLTypes["bigint"] | undefined,
	tournament_id?: GraphQLTypes["uuid"] | undefined
};
	/** aggregate stddev on columns */
["tournament_organizers_stddev_fields"]: {
	__typename: "tournament_organizers_stddev_fields",
	steam_id?: number | undefined
};
	/** order by stddev() on columns of table "tournament_organizers" */
["tournament_organizers_stddev_order_by"]: {
		steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["tournament_organizers_stddev_pop_fields"]: {
	__typename: "tournament_organizers_stddev_pop_fields",
	steam_id?: number | undefined
};
	/** order by stddev_pop() on columns of table "tournament_organizers" */
["tournament_organizers_stddev_pop_order_by"]: {
		steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["tournament_organizers_stddev_samp_fields"]: {
	__typename: "tournament_organizers_stddev_samp_fields",
	steam_id?: number | undefined
};
	/** order by stddev_samp() on columns of table "tournament_organizers" */
["tournament_organizers_stddev_samp_order_by"]: {
		steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "tournament_organizers" */
["tournament_organizers_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["tournament_organizers_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["tournament_organizers_stream_cursor_value_input"]: {
		role?: string | undefined,
	steam_id?: GraphQLTypes["bigint"] | undefined,
	tournament_id?: GraphQLTypes["uuid"] | undefined
};
	/** aggregate sum on columns */
["tournament_organizers_sum_fields"]: {
	__typename: "tournament_organizers_sum_fields",
	steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** order by sum() on columns of table "tournament_organizers" */
["tournament_organizers_sum_order_by"]: {
		steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** update columns of table "tournament_organizers" */
["tournament_organizers_update_column"]: tournament_organizers_update_column;
	["tournament_organizers_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["tournament_organizers_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["tournament_organizers_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["tournament_organizers_bool_exp"]
};
	/** aggregate var_pop on columns */
["tournament_organizers_var_pop_fields"]: {
	__typename: "tournament_organizers_var_pop_fields",
	steam_id?: number | undefined
};
	/** order by var_pop() on columns of table "tournament_organizers" */
["tournament_organizers_var_pop_order_by"]: {
		steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["tournament_organizers_var_samp_fields"]: {
	__typename: "tournament_organizers_var_samp_fields",
	steam_id?: number | undefined
};
	/** order by var_samp() on columns of table "tournament_organizers" */
["tournament_organizers_var_samp_order_by"]: {
		steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["tournament_organizers_variance_fields"]: {
	__typename: "tournament_organizers_variance_fields",
	steam_id?: number | undefined
};
	/** order by variance() on columns of table "tournament_organizers" */
["tournament_organizers_variance_order_by"]: {
		steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** columns and relationships of "tournament_roster" */
["tournament_roster"]: {
	__typename: "tournament_roster",
	id: GraphQLTypes["uuid"],
	/** An object relationship */
	player: GraphQLTypes["players"],
	player_steam_id: GraphQLTypes["bigint"],
	/** An object relationship */
	team: GraphQLTypes["teams"],
	team_id: GraphQLTypes["uuid"],
	/** An object relationship */
	tournament: GraphQLTypes["tournaments"],
	tournament_id: GraphQLTypes["uuid"],
	type: string
};
	/** aggregated selection of "tournament_roster" */
["tournament_roster_aggregate"]: {
	__typename: "tournament_roster_aggregate",
	aggregate?: GraphQLTypes["tournament_roster_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["tournament_roster"]>
};
	["tournament_roster_aggregate_bool_exp"]: {
		count?: GraphQLTypes["tournament_roster_aggregate_bool_exp_count"] | undefined
};
	["tournament_roster_aggregate_bool_exp_count"]: {
		arguments?: Array<GraphQLTypes["tournament_roster_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["tournament_roster_bool_exp"] | undefined,
	predicate: GraphQLTypes["Int_comparison_exp"]
};
	/** aggregate fields of "tournament_roster" */
["tournament_roster_aggregate_fields"]: {
	__typename: "tournament_roster_aggregate_fields",
	avg?: GraphQLTypes["tournament_roster_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["tournament_roster_max_fields"] | undefined,
	min?: GraphQLTypes["tournament_roster_min_fields"] | undefined,
	stddev?: GraphQLTypes["tournament_roster_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["tournament_roster_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["tournament_roster_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["tournament_roster_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["tournament_roster_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["tournament_roster_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["tournament_roster_variance_fields"] | undefined
};
	/** order by aggregate values of table "tournament_roster" */
["tournament_roster_aggregate_order_by"]: {
		avg?: GraphQLTypes["tournament_roster_avg_order_by"] | undefined,
	count?: GraphQLTypes["order_by"] | undefined,
	max?: GraphQLTypes["tournament_roster_max_order_by"] | undefined,
	min?: GraphQLTypes["tournament_roster_min_order_by"] | undefined,
	stddev?: GraphQLTypes["tournament_roster_stddev_order_by"] | undefined,
	stddev_pop?: GraphQLTypes["tournament_roster_stddev_pop_order_by"] | undefined,
	stddev_samp?: GraphQLTypes["tournament_roster_stddev_samp_order_by"] | undefined,
	sum?: GraphQLTypes["tournament_roster_sum_order_by"] | undefined,
	var_pop?: GraphQLTypes["tournament_roster_var_pop_order_by"] | undefined,
	var_samp?: GraphQLTypes["tournament_roster_var_samp_order_by"] | undefined,
	variance?: GraphQLTypes["tournament_roster_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "tournament_roster" */
["tournament_roster_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["tournament_roster_insert_input"]>,
	/** upsert condition */
	on_conflict?: GraphQLTypes["tournament_roster_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["tournament_roster_avg_fields"]: {
	__typename: "tournament_roster_avg_fields",
	player_steam_id?: number | undefined
};
	/** order by avg() on columns of table "tournament_roster" */
["tournament_roster_avg_order_by"]: {
		player_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "tournament_roster". All fields are combined with a logical 'AND'. */
["tournament_roster_bool_exp"]: {
		_and?: Array<GraphQLTypes["tournament_roster_bool_exp"]> | undefined,
	_not?: GraphQLTypes["tournament_roster_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["tournament_roster_bool_exp"]> | undefined,
	id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	player?: GraphQLTypes["players_bool_exp"] | undefined,
	player_steam_id?: GraphQLTypes["bigint_comparison_exp"] | undefined,
	team?: GraphQLTypes["teams_bool_exp"] | undefined,
	team_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	tournament?: GraphQLTypes["tournaments_bool_exp"] | undefined,
	tournament_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	type?: GraphQLTypes["String_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "tournament_roster" */
["tournament_roster_constraint"]: tournament_roster_constraint;
	/** input type for incrementing numeric columns in table "tournament_roster" */
["tournament_roster_inc_input"]: {
		player_steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** input type for inserting data into table "tournament_roster" */
["tournament_roster_insert_input"]: {
		id?: GraphQLTypes["uuid"] | undefined,
	player?: GraphQLTypes["players_obj_rel_insert_input"] | undefined,
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	team?: GraphQLTypes["teams_obj_rel_insert_input"] | undefined,
	team_id?: GraphQLTypes["uuid"] | undefined,
	tournament?: GraphQLTypes["tournaments_obj_rel_insert_input"] | undefined,
	tournament_id?: GraphQLTypes["uuid"] | undefined,
	type?: string | undefined
};
	/** aggregate max on columns */
["tournament_roster_max_fields"]: {
	__typename: "tournament_roster_max_fields",
	id?: GraphQLTypes["uuid"] | undefined,
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	team_id?: GraphQLTypes["uuid"] | undefined,
	tournament_id?: GraphQLTypes["uuid"] | undefined,
	type?: string | undefined
};
	/** order by max() on columns of table "tournament_roster" */
["tournament_roster_max_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	player_steam_id?: GraphQLTypes["order_by"] | undefined,
	team_id?: GraphQLTypes["order_by"] | undefined,
	tournament_id?: GraphQLTypes["order_by"] | undefined,
	type?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["tournament_roster_min_fields"]: {
	__typename: "tournament_roster_min_fields",
	id?: GraphQLTypes["uuid"] | undefined,
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	team_id?: GraphQLTypes["uuid"] | undefined,
	tournament_id?: GraphQLTypes["uuid"] | undefined,
	type?: string | undefined
};
	/** order by min() on columns of table "tournament_roster" */
["tournament_roster_min_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	player_steam_id?: GraphQLTypes["order_by"] | undefined,
	team_id?: GraphQLTypes["order_by"] | undefined,
	tournament_id?: GraphQLTypes["order_by"] | undefined,
	type?: GraphQLTypes["order_by"] | undefined
};
	/** response of any mutation on the table "tournament_roster" */
["tournament_roster_mutation_response"]: {
	__typename: "tournament_roster_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["tournament_roster"]>
};
	/** on_conflict condition type for table "tournament_roster" */
["tournament_roster_on_conflict"]: {
		constraint: GraphQLTypes["tournament_roster_constraint"],
	update_columns: Array<GraphQLTypes["tournament_roster_update_column"]>,
	where?: GraphQLTypes["tournament_roster_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "tournament_roster". */
["tournament_roster_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	player?: GraphQLTypes["players_order_by"] | undefined,
	player_steam_id?: GraphQLTypes["order_by"] | undefined,
	team?: GraphQLTypes["teams_order_by"] | undefined,
	team_id?: GraphQLTypes["order_by"] | undefined,
	tournament?: GraphQLTypes["tournaments_order_by"] | undefined,
	tournament_id?: GraphQLTypes["order_by"] | undefined,
	type?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: tournament_roster */
["tournament_roster_pk_columns_input"]: {
		id: GraphQLTypes["uuid"]
};
	/** select columns of table "tournament_roster" */
["tournament_roster_select_column"]: tournament_roster_select_column;
	/** input type for updating data in table "tournament_roster" */
["tournament_roster_set_input"]: {
		id?: GraphQLTypes["uuid"] | undefined,
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	team_id?: GraphQLTypes["uuid"] | undefined,
	tournament_id?: GraphQLTypes["uuid"] | undefined,
	type?: string | undefined
};
	/** aggregate stddev on columns */
["tournament_roster_stddev_fields"]: {
	__typename: "tournament_roster_stddev_fields",
	player_steam_id?: number | undefined
};
	/** order by stddev() on columns of table "tournament_roster" */
["tournament_roster_stddev_order_by"]: {
		player_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["tournament_roster_stddev_pop_fields"]: {
	__typename: "tournament_roster_stddev_pop_fields",
	player_steam_id?: number | undefined
};
	/** order by stddev_pop() on columns of table "tournament_roster" */
["tournament_roster_stddev_pop_order_by"]: {
		player_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["tournament_roster_stddev_samp_fields"]: {
	__typename: "tournament_roster_stddev_samp_fields",
	player_steam_id?: number | undefined
};
	/** order by stddev_samp() on columns of table "tournament_roster" */
["tournament_roster_stddev_samp_order_by"]: {
		player_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "tournament_roster" */
["tournament_roster_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["tournament_roster_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["tournament_roster_stream_cursor_value_input"]: {
		id?: GraphQLTypes["uuid"] | undefined,
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	team_id?: GraphQLTypes["uuid"] | undefined,
	tournament_id?: GraphQLTypes["uuid"] | undefined,
	type?: string | undefined
};
	/** aggregate sum on columns */
["tournament_roster_sum_fields"]: {
	__typename: "tournament_roster_sum_fields",
	player_steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** order by sum() on columns of table "tournament_roster" */
["tournament_roster_sum_order_by"]: {
		player_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** update columns of table "tournament_roster" */
["tournament_roster_update_column"]: tournament_roster_update_column;
	["tournament_roster_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["tournament_roster_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["tournament_roster_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["tournament_roster_bool_exp"]
};
	/** aggregate var_pop on columns */
["tournament_roster_var_pop_fields"]: {
	__typename: "tournament_roster_var_pop_fields",
	player_steam_id?: number | undefined
};
	/** order by var_pop() on columns of table "tournament_roster" */
["tournament_roster_var_pop_order_by"]: {
		player_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["tournament_roster_var_samp_fields"]: {
	__typename: "tournament_roster_var_samp_fields",
	player_steam_id?: number | undefined
};
	/** order by var_samp() on columns of table "tournament_roster" */
["tournament_roster_var_samp_order_by"]: {
		player_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["tournament_roster_variance_fields"]: {
	__typename: "tournament_roster_variance_fields",
	player_steam_id?: number | undefined
};
	/** order by variance() on columns of table "tournament_roster" */
["tournament_roster_variance_order_by"]: {
		player_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** columns and relationships of "tournament_servers" */
["tournament_servers"]: {
	__typename: "tournament_servers",
	id: GraphQLTypes["uuid"],
	/** An object relationship */
	server: GraphQLTypes["servers"],
	server_id: GraphQLTypes["uuid"],
	/** An object relationship */
	tournament: GraphQLTypes["tournaments"],
	tournament_id: GraphQLTypes["uuid"]
};
	/** aggregated selection of "tournament_servers" */
["tournament_servers_aggregate"]: {
	__typename: "tournament_servers_aggregate",
	aggregate?: GraphQLTypes["tournament_servers_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["tournament_servers"]>
};
	["tournament_servers_aggregate_bool_exp"]: {
		count?: GraphQLTypes["tournament_servers_aggregate_bool_exp_count"] | undefined
};
	["tournament_servers_aggregate_bool_exp_count"]: {
		arguments?: Array<GraphQLTypes["tournament_servers_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["tournament_servers_bool_exp"] | undefined,
	predicate: GraphQLTypes["Int_comparison_exp"]
};
	/** aggregate fields of "tournament_servers" */
["tournament_servers_aggregate_fields"]: {
	__typename: "tournament_servers_aggregate_fields",
	count: number,
	max?: GraphQLTypes["tournament_servers_max_fields"] | undefined,
	min?: GraphQLTypes["tournament_servers_min_fields"] | undefined
};
	/** order by aggregate values of table "tournament_servers" */
["tournament_servers_aggregate_order_by"]: {
		count?: GraphQLTypes["order_by"] | undefined,
	max?: GraphQLTypes["tournament_servers_max_order_by"] | undefined,
	min?: GraphQLTypes["tournament_servers_min_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "tournament_servers" */
["tournament_servers_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["tournament_servers_insert_input"]>,
	/** upsert condition */
	on_conflict?: GraphQLTypes["tournament_servers_on_conflict"] | undefined
};
	/** Boolean expression to filter rows from the table "tournament_servers". All fields are combined with a logical 'AND'. */
["tournament_servers_bool_exp"]: {
		_and?: Array<GraphQLTypes["tournament_servers_bool_exp"]> | undefined,
	_not?: GraphQLTypes["tournament_servers_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["tournament_servers_bool_exp"]> | undefined,
	id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	server?: GraphQLTypes["servers_bool_exp"] | undefined,
	server_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	tournament?: GraphQLTypes["tournaments_bool_exp"] | undefined,
	tournament_id?: GraphQLTypes["uuid_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "tournament_servers" */
["tournament_servers_constraint"]: tournament_servers_constraint;
	/** input type for inserting data into table "tournament_servers" */
["tournament_servers_insert_input"]: {
		id?: GraphQLTypes["uuid"] | undefined,
	server?: GraphQLTypes["servers_obj_rel_insert_input"] | undefined,
	server_id?: GraphQLTypes["uuid"] | undefined,
	tournament?: GraphQLTypes["tournaments_obj_rel_insert_input"] | undefined,
	tournament_id?: GraphQLTypes["uuid"] | undefined
};
	/** aggregate max on columns */
["tournament_servers_max_fields"]: {
	__typename: "tournament_servers_max_fields",
	id?: GraphQLTypes["uuid"] | undefined,
	server_id?: GraphQLTypes["uuid"] | undefined,
	tournament_id?: GraphQLTypes["uuid"] | undefined
};
	/** order by max() on columns of table "tournament_servers" */
["tournament_servers_max_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	server_id?: GraphQLTypes["order_by"] | undefined,
	tournament_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["tournament_servers_min_fields"]: {
	__typename: "tournament_servers_min_fields",
	id?: GraphQLTypes["uuid"] | undefined,
	server_id?: GraphQLTypes["uuid"] | undefined,
	tournament_id?: GraphQLTypes["uuid"] | undefined
};
	/** order by min() on columns of table "tournament_servers" */
["tournament_servers_min_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	server_id?: GraphQLTypes["order_by"] | undefined,
	tournament_id?: GraphQLTypes["order_by"] | undefined
};
	/** response of any mutation on the table "tournament_servers" */
["tournament_servers_mutation_response"]: {
	__typename: "tournament_servers_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["tournament_servers"]>
};
	/** on_conflict condition type for table "tournament_servers" */
["tournament_servers_on_conflict"]: {
		constraint: GraphQLTypes["tournament_servers_constraint"],
	update_columns: Array<GraphQLTypes["tournament_servers_update_column"]>,
	where?: GraphQLTypes["tournament_servers_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "tournament_servers". */
["tournament_servers_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	server?: GraphQLTypes["servers_order_by"] | undefined,
	server_id?: GraphQLTypes["order_by"] | undefined,
	tournament?: GraphQLTypes["tournaments_order_by"] | undefined,
	tournament_id?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: tournament_servers */
["tournament_servers_pk_columns_input"]: {
		id: GraphQLTypes["uuid"]
};
	/** select columns of table "tournament_servers" */
["tournament_servers_select_column"]: tournament_servers_select_column;
	/** input type for updating data in table "tournament_servers" */
["tournament_servers_set_input"]: {
		id?: GraphQLTypes["uuid"] | undefined,
	server_id?: GraphQLTypes["uuid"] | undefined,
	tournament_id?: GraphQLTypes["uuid"] | undefined
};
	/** Streaming cursor of the table "tournament_servers" */
["tournament_servers_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["tournament_servers_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["tournament_servers_stream_cursor_value_input"]: {
		id?: GraphQLTypes["uuid"] | undefined,
	server_id?: GraphQLTypes["uuid"] | undefined,
	tournament_id?: GraphQLTypes["uuid"] | undefined
};
	/** update columns of table "tournament_servers" */
["tournament_servers_update_column"]: tournament_servers_update_column;
	["tournament_servers_updates"]: {
		/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["tournament_servers_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["tournament_servers_bool_exp"]
};
	/** columns and relationships of "tournament_stages" */
["tournament_stages"]: {
	__typename: "tournament_stages",
	id: GraphQLTypes["uuid"],
	order: number,
	settings: GraphQLTypes["jsonb"],
	/** An object relationship */
	tournament: GraphQLTypes["tournaments"],
	tournament_id: GraphQLTypes["uuid"],
	type: string
};
	/** aggregated selection of "tournament_stages" */
["tournament_stages_aggregate"]: {
	__typename: "tournament_stages_aggregate",
	aggregate?: GraphQLTypes["tournament_stages_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["tournament_stages"]>
};
	["tournament_stages_aggregate_bool_exp"]: {
		count?: GraphQLTypes["tournament_stages_aggregate_bool_exp_count"] | undefined
};
	["tournament_stages_aggregate_bool_exp_count"]: {
		arguments?: Array<GraphQLTypes["tournament_stages_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["tournament_stages_bool_exp"] | undefined,
	predicate: GraphQLTypes["Int_comparison_exp"]
};
	/** aggregate fields of "tournament_stages" */
["tournament_stages_aggregate_fields"]: {
	__typename: "tournament_stages_aggregate_fields",
	avg?: GraphQLTypes["tournament_stages_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["tournament_stages_max_fields"] | undefined,
	min?: GraphQLTypes["tournament_stages_min_fields"] | undefined,
	stddev?: GraphQLTypes["tournament_stages_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["tournament_stages_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["tournament_stages_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["tournament_stages_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["tournament_stages_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["tournament_stages_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["tournament_stages_variance_fields"] | undefined
};
	/** order by aggregate values of table "tournament_stages" */
["tournament_stages_aggregate_order_by"]: {
		avg?: GraphQLTypes["tournament_stages_avg_order_by"] | undefined,
	count?: GraphQLTypes["order_by"] | undefined,
	max?: GraphQLTypes["tournament_stages_max_order_by"] | undefined,
	min?: GraphQLTypes["tournament_stages_min_order_by"] | undefined,
	stddev?: GraphQLTypes["tournament_stages_stddev_order_by"] | undefined,
	stddev_pop?: GraphQLTypes["tournament_stages_stddev_pop_order_by"] | undefined,
	stddev_samp?: GraphQLTypes["tournament_stages_stddev_samp_order_by"] | undefined,
	sum?: GraphQLTypes["tournament_stages_sum_order_by"] | undefined,
	var_pop?: GraphQLTypes["tournament_stages_var_pop_order_by"] | undefined,
	var_samp?: GraphQLTypes["tournament_stages_var_samp_order_by"] | undefined,
	variance?: GraphQLTypes["tournament_stages_variance_order_by"] | undefined
};
	/** append existing jsonb value of filtered columns with new jsonb value */
["tournament_stages_append_input"]: {
		settings?: GraphQLTypes["jsonb"] | undefined
};
	/** input type for inserting array relation for remote table "tournament_stages" */
["tournament_stages_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["tournament_stages_insert_input"]>,
	/** upsert condition */
	on_conflict?: GraphQLTypes["tournament_stages_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["tournament_stages_avg_fields"]: {
	__typename: "tournament_stages_avg_fields",
	order?: number | undefined
};
	/** order by avg() on columns of table "tournament_stages" */
["tournament_stages_avg_order_by"]: {
		order?: GraphQLTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "tournament_stages". All fields are combined with a logical 'AND'. */
["tournament_stages_bool_exp"]: {
		_and?: Array<GraphQLTypes["tournament_stages_bool_exp"]> | undefined,
	_not?: GraphQLTypes["tournament_stages_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["tournament_stages_bool_exp"]> | undefined,
	id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	order?: GraphQLTypes["Int_comparison_exp"] | undefined,
	settings?: GraphQLTypes["jsonb_comparison_exp"] | undefined,
	tournament?: GraphQLTypes["tournaments_bool_exp"] | undefined,
	tournament_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	type?: GraphQLTypes["String_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "tournament_stages" */
["tournament_stages_constraint"]: tournament_stages_constraint;
	/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
["tournament_stages_delete_at_path_input"]: {
		settings?: Array<string> | undefined
};
	/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
["tournament_stages_delete_elem_input"]: {
		settings?: number | undefined
};
	/** delete key/value pair or string element. key/value pairs are matched based on their key value */
["tournament_stages_delete_key_input"]: {
		settings?: string | undefined
};
	/** input type for incrementing numeric columns in table "tournament_stages" */
["tournament_stages_inc_input"]: {
		order?: number | undefined
};
	/** input type for inserting data into table "tournament_stages" */
["tournament_stages_insert_input"]: {
		id?: GraphQLTypes["uuid"] | undefined,
	order?: number | undefined,
	settings?: GraphQLTypes["jsonb"] | undefined,
	tournament?: GraphQLTypes["tournaments_obj_rel_insert_input"] | undefined,
	tournament_id?: GraphQLTypes["uuid"] | undefined,
	type?: string | undefined
};
	/** aggregate max on columns */
["tournament_stages_max_fields"]: {
	__typename: "tournament_stages_max_fields",
	id?: GraphQLTypes["uuid"] | undefined,
	order?: number | undefined,
	tournament_id?: GraphQLTypes["uuid"] | undefined,
	type?: string | undefined
};
	/** order by max() on columns of table "tournament_stages" */
["tournament_stages_max_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	order?: GraphQLTypes["order_by"] | undefined,
	tournament_id?: GraphQLTypes["order_by"] | undefined,
	type?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["tournament_stages_min_fields"]: {
	__typename: "tournament_stages_min_fields",
	id?: GraphQLTypes["uuid"] | undefined,
	order?: number | undefined,
	tournament_id?: GraphQLTypes["uuid"] | undefined,
	type?: string | undefined
};
	/** order by min() on columns of table "tournament_stages" */
["tournament_stages_min_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	order?: GraphQLTypes["order_by"] | undefined,
	tournament_id?: GraphQLTypes["order_by"] | undefined,
	type?: GraphQLTypes["order_by"] | undefined
};
	/** response of any mutation on the table "tournament_stages" */
["tournament_stages_mutation_response"]: {
	__typename: "tournament_stages_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["tournament_stages"]>
};
	/** on_conflict condition type for table "tournament_stages" */
["tournament_stages_on_conflict"]: {
		constraint: GraphQLTypes["tournament_stages_constraint"],
	update_columns: Array<GraphQLTypes["tournament_stages_update_column"]>,
	where?: GraphQLTypes["tournament_stages_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "tournament_stages". */
["tournament_stages_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	order?: GraphQLTypes["order_by"] | undefined,
	settings?: GraphQLTypes["order_by"] | undefined,
	tournament?: GraphQLTypes["tournaments_order_by"] | undefined,
	tournament_id?: GraphQLTypes["order_by"] | undefined,
	type?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: tournament_stages */
["tournament_stages_pk_columns_input"]: {
		id: GraphQLTypes["uuid"]
};
	/** prepend existing jsonb value of filtered columns with new jsonb value */
["tournament_stages_prepend_input"]: {
		settings?: GraphQLTypes["jsonb"] | undefined
};
	/** select columns of table "tournament_stages" */
["tournament_stages_select_column"]: tournament_stages_select_column;
	/** input type for updating data in table "tournament_stages" */
["tournament_stages_set_input"]: {
		id?: GraphQLTypes["uuid"] | undefined,
	order?: number | undefined,
	settings?: GraphQLTypes["jsonb"] | undefined,
	tournament_id?: GraphQLTypes["uuid"] | undefined,
	type?: string | undefined
};
	/** aggregate stddev on columns */
["tournament_stages_stddev_fields"]: {
	__typename: "tournament_stages_stddev_fields",
	order?: number | undefined
};
	/** order by stddev() on columns of table "tournament_stages" */
["tournament_stages_stddev_order_by"]: {
		order?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["tournament_stages_stddev_pop_fields"]: {
	__typename: "tournament_stages_stddev_pop_fields",
	order?: number | undefined
};
	/** order by stddev_pop() on columns of table "tournament_stages" */
["tournament_stages_stddev_pop_order_by"]: {
		order?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["tournament_stages_stddev_samp_fields"]: {
	__typename: "tournament_stages_stddev_samp_fields",
	order?: number | undefined
};
	/** order by stddev_samp() on columns of table "tournament_stages" */
["tournament_stages_stddev_samp_order_by"]: {
		order?: GraphQLTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "tournament_stages" */
["tournament_stages_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["tournament_stages_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["tournament_stages_stream_cursor_value_input"]: {
		id?: GraphQLTypes["uuid"] | undefined,
	order?: number | undefined,
	settings?: GraphQLTypes["jsonb"] | undefined,
	tournament_id?: GraphQLTypes["uuid"] | undefined,
	type?: string | undefined
};
	/** aggregate sum on columns */
["tournament_stages_sum_fields"]: {
	__typename: "tournament_stages_sum_fields",
	order?: number | undefined
};
	/** order by sum() on columns of table "tournament_stages" */
["tournament_stages_sum_order_by"]: {
		order?: GraphQLTypes["order_by"] | undefined
};
	/** update columns of table "tournament_stages" */
["tournament_stages_update_column"]: tournament_stages_update_column;
	["tournament_stages_updates"]: {
		/** append existing jsonb value of filtered columns with new jsonb value */
	_append?: GraphQLTypes["tournament_stages_append_input"] | undefined,
	/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
	_delete_at_path?: GraphQLTypes["tournament_stages_delete_at_path_input"] | undefined,
	/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
	_delete_elem?: GraphQLTypes["tournament_stages_delete_elem_input"] | undefined,
	/** delete key/value pair or string element. key/value pairs are matched based on their key value */
	_delete_key?: GraphQLTypes["tournament_stages_delete_key_input"] | undefined,
	/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["tournament_stages_inc_input"] | undefined,
	/** prepend existing jsonb value of filtered columns with new jsonb value */
	_prepend?: GraphQLTypes["tournament_stages_prepend_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["tournament_stages_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["tournament_stages_bool_exp"]
};
	/** aggregate var_pop on columns */
["tournament_stages_var_pop_fields"]: {
	__typename: "tournament_stages_var_pop_fields",
	order?: number | undefined
};
	/** order by var_pop() on columns of table "tournament_stages" */
["tournament_stages_var_pop_order_by"]: {
		order?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["tournament_stages_var_samp_fields"]: {
	__typename: "tournament_stages_var_samp_fields",
	order?: number | undefined
};
	/** order by var_samp() on columns of table "tournament_stages" */
["tournament_stages_var_samp_order_by"]: {
		order?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["tournament_stages_variance_fields"]: {
	__typename: "tournament_stages_variance_fields",
	order?: number | undefined
};
	/** order by variance() on columns of table "tournament_stages" */
["tournament_stages_variance_order_by"]: {
		order?: GraphQLTypes["order_by"] | undefined
};
	/** columns and relationships of "tournament_teams" */
["tournament_teams"]: {
	__typename: "tournament_teams",
	id: GraphQLTypes["uuid"],
	/** An object relationship */
	team: GraphQLTypes["teams"],
	team_id: GraphQLTypes["uuid"],
	/** An object relationship */
	tournament: GraphQLTypes["tournaments"],
	tournament_id: GraphQLTypes["uuid"]
};
	/** aggregated selection of "tournament_teams" */
["tournament_teams_aggregate"]: {
	__typename: "tournament_teams_aggregate",
	aggregate?: GraphQLTypes["tournament_teams_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["tournament_teams"]>
};
	["tournament_teams_aggregate_bool_exp"]: {
		count?: GraphQLTypes["tournament_teams_aggregate_bool_exp_count"] | undefined
};
	["tournament_teams_aggregate_bool_exp_count"]: {
		arguments?: Array<GraphQLTypes["tournament_teams_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["tournament_teams_bool_exp"] | undefined,
	predicate: GraphQLTypes["Int_comparison_exp"]
};
	/** aggregate fields of "tournament_teams" */
["tournament_teams_aggregate_fields"]: {
	__typename: "tournament_teams_aggregate_fields",
	count: number,
	max?: GraphQLTypes["tournament_teams_max_fields"] | undefined,
	min?: GraphQLTypes["tournament_teams_min_fields"] | undefined
};
	/** order by aggregate values of table "tournament_teams" */
["tournament_teams_aggregate_order_by"]: {
		count?: GraphQLTypes["order_by"] | undefined,
	max?: GraphQLTypes["tournament_teams_max_order_by"] | undefined,
	min?: GraphQLTypes["tournament_teams_min_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "tournament_teams" */
["tournament_teams_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["tournament_teams_insert_input"]>,
	/** upsert condition */
	on_conflict?: GraphQLTypes["tournament_teams_on_conflict"] | undefined
};
	/** Boolean expression to filter rows from the table "tournament_teams". All fields are combined with a logical 'AND'. */
["tournament_teams_bool_exp"]: {
		_and?: Array<GraphQLTypes["tournament_teams_bool_exp"]> | undefined,
	_not?: GraphQLTypes["tournament_teams_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["tournament_teams_bool_exp"]> | undefined,
	id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	team?: GraphQLTypes["teams_bool_exp"] | undefined,
	team_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	tournament?: GraphQLTypes["tournaments_bool_exp"] | undefined,
	tournament_id?: GraphQLTypes["uuid_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "tournament_teams" */
["tournament_teams_constraint"]: tournament_teams_constraint;
	/** input type for inserting data into table "tournament_teams" */
["tournament_teams_insert_input"]: {
		id?: GraphQLTypes["uuid"] | undefined,
	team?: GraphQLTypes["teams_obj_rel_insert_input"] | undefined,
	team_id?: GraphQLTypes["uuid"] | undefined,
	tournament?: GraphQLTypes["tournaments_obj_rel_insert_input"] | undefined,
	tournament_id?: GraphQLTypes["uuid"] | undefined
};
	/** aggregate max on columns */
["tournament_teams_max_fields"]: {
	__typename: "tournament_teams_max_fields",
	id?: GraphQLTypes["uuid"] | undefined,
	team_id?: GraphQLTypes["uuid"] | undefined,
	tournament_id?: GraphQLTypes["uuid"] | undefined
};
	/** order by max() on columns of table "tournament_teams" */
["tournament_teams_max_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	team_id?: GraphQLTypes["order_by"] | undefined,
	tournament_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["tournament_teams_min_fields"]: {
	__typename: "tournament_teams_min_fields",
	id?: GraphQLTypes["uuid"] | undefined,
	team_id?: GraphQLTypes["uuid"] | undefined,
	tournament_id?: GraphQLTypes["uuid"] | undefined
};
	/** order by min() on columns of table "tournament_teams" */
["tournament_teams_min_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	team_id?: GraphQLTypes["order_by"] | undefined,
	tournament_id?: GraphQLTypes["order_by"] | undefined
};
	/** response of any mutation on the table "tournament_teams" */
["tournament_teams_mutation_response"]: {
	__typename: "tournament_teams_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["tournament_teams"]>
};
	/** on_conflict condition type for table "tournament_teams" */
["tournament_teams_on_conflict"]: {
		constraint: GraphQLTypes["tournament_teams_constraint"],
	update_columns: Array<GraphQLTypes["tournament_teams_update_column"]>,
	where?: GraphQLTypes["tournament_teams_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "tournament_teams". */
["tournament_teams_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	team?: GraphQLTypes["teams_order_by"] | undefined,
	team_id?: GraphQLTypes["order_by"] | undefined,
	tournament?: GraphQLTypes["tournaments_order_by"] | undefined,
	tournament_id?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: tournament_teams */
["tournament_teams_pk_columns_input"]: {
		id: GraphQLTypes["uuid"]
};
	/** select columns of table "tournament_teams" */
["tournament_teams_select_column"]: tournament_teams_select_column;
	/** input type for updating data in table "tournament_teams" */
["tournament_teams_set_input"]: {
		id?: GraphQLTypes["uuid"] | undefined,
	team_id?: GraphQLTypes["uuid"] | undefined,
	tournament_id?: GraphQLTypes["uuid"] | undefined
};
	/** Streaming cursor of the table "tournament_teams" */
["tournament_teams_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["tournament_teams_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["tournament_teams_stream_cursor_value_input"]: {
		id?: GraphQLTypes["uuid"] | undefined,
	team_id?: GraphQLTypes["uuid"] | undefined,
	tournament_id?: GraphQLTypes["uuid"] | undefined
};
	/** update columns of table "tournament_teams" */
["tournament_teams_update_column"]: tournament_teams_update_column;
	["tournament_teams_updates"]: {
		/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["tournament_teams_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["tournament_teams_bool_exp"]
};
	/** columns and relationships of "tournaments" */
["tournaments"]: {
	__typename: "tournaments",
	/** An object relationship */
	admin: GraphQLTypes["players"],
	description?: string | undefined,
	id: GraphQLTypes["uuid"],
	name: string,
	organizer_steam_id: GraphQLTypes["bigint"],
	/** An array relationship */
	organizers: Array<GraphQLTypes["tournament_organizers"]>,
	/** An aggregate relationship */
	organizers_aggregate: GraphQLTypes["tournament_organizers_aggregate"],
	/** An array relationship */
	rosters: Array<GraphQLTypes["tournament_roster"]>,
	/** An aggregate relationship */
	rosters_aggregate: GraphQLTypes["tournament_roster_aggregate"],
	/** An array relationship */
	servers: Array<GraphQLTypes["tournament_servers"]>,
	/** An aggregate relationship */
	servers_aggregate: GraphQLTypes["tournament_servers_aggregate"],
	/** An array relationship */
	stages: Array<GraphQLTypes["tournament_stages"]>,
	/** An aggregate relationship */
	stages_aggregate: GraphQLTypes["tournament_stages_aggregate"],
	start: GraphQLTypes["timestamptz"],
	status: string,
	/** An array relationship */
	teams: Array<GraphQLTypes["tournament_teams"]>,
	/** An aggregate relationship */
	teams_aggregate: GraphQLTypes["tournament_teams_aggregate"],
	type: string
};
	/** aggregated selection of "tournaments" */
["tournaments_aggregate"]: {
	__typename: "tournaments_aggregate",
	aggregate?: GraphQLTypes["tournaments_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["tournaments"]>
};
	["tournaments_aggregate_bool_exp"]: {
		count?: GraphQLTypes["tournaments_aggregate_bool_exp_count"] | undefined
};
	["tournaments_aggregate_bool_exp_count"]: {
		arguments?: Array<GraphQLTypes["tournaments_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["tournaments_bool_exp"] | undefined,
	predicate: GraphQLTypes["Int_comparison_exp"]
};
	/** aggregate fields of "tournaments" */
["tournaments_aggregate_fields"]: {
	__typename: "tournaments_aggregate_fields",
	avg?: GraphQLTypes["tournaments_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["tournaments_max_fields"] | undefined,
	min?: GraphQLTypes["tournaments_min_fields"] | undefined,
	stddev?: GraphQLTypes["tournaments_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["tournaments_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["tournaments_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["tournaments_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["tournaments_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["tournaments_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["tournaments_variance_fields"] | undefined
};
	/** order by aggregate values of table "tournaments" */
["tournaments_aggregate_order_by"]: {
		avg?: GraphQLTypes["tournaments_avg_order_by"] | undefined,
	count?: GraphQLTypes["order_by"] | undefined,
	max?: GraphQLTypes["tournaments_max_order_by"] | undefined,
	min?: GraphQLTypes["tournaments_min_order_by"] | undefined,
	stddev?: GraphQLTypes["tournaments_stddev_order_by"] | undefined,
	stddev_pop?: GraphQLTypes["tournaments_stddev_pop_order_by"] | undefined,
	stddev_samp?: GraphQLTypes["tournaments_stddev_samp_order_by"] | undefined,
	sum?: GraphQLTypes["tournaments_sum_order_by"] | undefined,
	var_pop?: GraphQLTypes["tournaments_var_pop_order_by"] | undefined,
	var_samp?: GraphQLTypes["tournaments_var_samp_order_by"] | undefined,
	variance?: GraphQLTypes["tournaments_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "tournaments" */
["tournaments_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["tournaments_insert_input"]>,
	/** upsert condition */
	on_conflict?: GraphQLTypes["tournaments_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["tournaments_avg_fields"]: {
	__typename: "tournaments_avg_fields",
	organizer_steam_id?: number | undefined
};
	/** order by avg() on columns of table "tournaments" */
["tournaments_avg_order_by"]: {
		organizer_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "tournaments". All fields are combined with a logical 'AND'. */
["tournaments_bool_exp"]: {
		_and?: Array<GraphQLTypes["tournaments_bool_exp"]> | undefined,
	_not?: GraphQLTypes["tournaments_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["tournaments_bool_exp"]> | undefined,
	admin?: GraphQLTypes["players_bool_exp"] | undefined,
	description?: GraphQLTypes["String_comparison_exp"] | undefined,
	id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	name?: GraphQLTypes["String_comparison_exp"] | undefined,
	organizer_steam_id?: GraphQLTypes["bigint_comparison_exp"] | undefined,
	organizers?: GraphQLTypes["tournament_organizers_bool_exp"] | undefined,
	organizers_aggregate?: GraphQLTypes["tournament_organizers_aggregate_bool_exp"] | undefined,
	rosters?: GraphQLTypes["tournament_roster_bool_exp"] | undefined,
	rosters_aggregate?: GraphQLTypes["tournament_roster_aggregate_bool_exp"] | undefined,
	servers?: GraphQLTypes["tournament_servers_bool_exp"] | undefined,
	servers_aggregate?: GraphQLTypes["tournament_servers_aggregate_bool_exp"] | undefined,
	stages?: GraphQLTypes["tournament_stages_bool_exp"] | undefined,
	stages_aggregate?: GraphQLTypes["tournament_stages_aggregate_bool_exp"] | undefined,
	start?: GraphQLTypes["timestamptz_comparison_exp"] | undefined,
	status?: GraphQLTypes["String_comparison_exp"] | undefined,
	teams?: GraphQLTypes["tournament_teams_bool_exp"] | undefined,
	teams_aggregate?: GraphQLTypes["tournament_teams_aggregate_bool_exp"] | undefined,
	type?: GraphQLTypes["String_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "tournaments" */
["tournaments_constraint"]: tournaments_constraint;
	/** input type for incrementing numeric columns in table "tournaments" */
["tournaments_inc_input"]: {
		organizer_steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** input type for inserting data into table "tournaments" */
["tournaments_insert_input"]: {
		admin?: GraphQLTypes["players_obj_rel_insert_input"] | undefined,
	description?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	name?: string | undefined,
	organizer_steam_id?: GraphQLTypes["bigint"] | undefined,
	organizers?: GraphQLTypes["tournament_organizers_arr_rel_insert_input"] | undefined,
	rosters?: GraphQLTypes["tournament_roster_arr_rel_insert_input"] | undefined,
	servers?: GraphQLTypes["tournament_servers_arr_rel_insert_input"] | undefined,
	stages?: GraphQLTypes["tournament_stages_arr_rel_insert_input"] | undefined,
	start?: GraphQLTypes["timestamptz"] | undefined,
	status?: string | undefined,
	teams?: GraphQLTypes["tournament_teams_arr_rel_insert_input"] | undefined,
	type?: string | undefined
};
	/** aggregate max on columns */
["tournaments_max_fields"]: {
	__typename: "tournaments_max_fields",
	description?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	name?: string | undefined,
	organizer_steam_id?: GraphQLTypes["bigint"] | undefined,
	start?: GraphQLTypes["timestamptz"] | undefined,
	status?: string | undefined,
	type?: string | undefined
};
	/** order by max() on columns of table "tournaments" */
["tournaments_max_order_by"]: {
		description?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	name?: GraphQLTypes["order_by"] | undefined,
	organizer_steam_id?: GraphQLTypes["order_by"] | undefined,
	start?: GraphQLTypes["order_by"] | undefined,
	status?: GraphQLTypes["order_by"] | undefined,
	type?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["tournaments_min_fields"]: {
	__typename: "tournaments_min_fields",
	description?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	name?: string | undefined,
	organizer_steam_id?: GraphQLTypes["bigint"] | undefined,
	start?: GraphQLTypes["timestamptz"] | undefined,
	status?: string | undefined,
	type?: string | undefined
};
	/** order by min() on columns of table "tournaments" */
["tournaments_min_order_by"]: {
		description?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	name?: GraphQLTypes["order_by"] | undefined,
	organizer_steam_id?: GraphQLTypes["order_by"] | undefined,
	start?: GraphQLTypes["order_by"] | undefined,
	status?: GraphQLTypes["order_by"] | undefined,
	type?: GraphQLTypes["order_by"] | undefined
};
	/** response of any mutation on the table "tournaments" */
["tournaments_mutation_response"]: {
	__typename: "tournaments_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["tournaments"]>
};
	/** input type for inserting object relation for remote table "tournaments" */
["tournaments_obj_rel_insert_input"]: {
		data: GraphQLTypes["tournaments_insert_input"],
	/** upsert condition */
	on_conflict?: GraphQLTypes["tournaments_on_conflict"] | undefined
};
	/** on_conflict condition type for table "tournaments" */
["tournaments_on_conflict"]: {
		constraint: GraphQLTypes["tournaments_constraint"],
	update_columns: Array<GraphQLTypes["tournaments_update_column"]>,
	where?: GraphQLTypes["tournaments_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "tournaments". */
["tournaments_order_by"]: {
		admin?: GraphQLTypes["players_order_by"] | undefined,
	description?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	name?: GraphQLTypes["order_by"] | undefined,
	organizer_steam_id?: GraphQLTypes["order_by"] | undefined,
	organizers_aggregate?: GraphQLTypes["tournament_organizers_aggregate_order_by"] | undefined,
	rosters_aggregate?: GraphQLTypes["tournament_roster_aggregate_order_by"] | undefined,
	servers_aggregate?: GraphQLTypes["tournament_servers_aggregate_order_by"] | undefined,
	stages_aggregate?: GraphQLTypes["tournament_stages_aggregate_order_by"] | undefined,
	start?: GraphQLTypes["order_by"] | undefined,
	status?: GraphQLTypes["order_by"] | undefined,
	teams_aggregate?: GraphQLTypes["tournament_teams_aggregate_order_by"] | undefined,
	type?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: tournaments */
["tournaments_pk_columns_input"]: {
		id: GraphQLTypes["uuid"]
};
	/** select columns of table "tournaments" */
["tournaments_select_column"]: tournaments_select_column;
	/** input type for updating data in table "tournaments" */
["tournaments_set_input"]: {
		description?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	name?: string | undefined,
	organizer_steam_id?: GraphQLTypes["bigint"] | undefined,
	start?: GraphQLTypes["timestamptz"] | undefined,
	status?: string | undefined,
	type?: string | undefined
};
	/** aggregate stddev on columns */
["tournaments_stddev_fields"]: {
	__typename: "tournaments_stddev_fields",
	organizer_steam_id?: number | undefined
};
	/** order by stddev() on columns of table "tournaments" */
["tournaments_stddev_order_by"]: {
		organizer_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["tournaments_stddev_pop_fields"]: {
	__typename: "tournaments_stddev_pop_fields",
	organizer_steam_id?: number | undefined
};
	/** order by stddev_pop() on columns of table "tournaments" */
["tournaments_stddev_pop_order_by"]: {
		organizer_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["tournaments_stddev_samp_fields"]: {
	__typename: "tournaments_stddev_samp_fields",
	organizer_steam_id?: number | undefined
};
	/** order by stddev_samp() on columns of table "tournaments" */
["tournaments_stddev_samp_order_by"]: {
		organizer_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "tournaments" */
["tournaments_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["tournaments_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["tournaments_stream_cursor_value_input"]: {
		description?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	name?: string | undefined,
	organizer_steam_id?: GraphQLTypes["bigint"] | undefined,
	start?: GraphQLTypes["timestamptz"] | undefined,
	status?: string | undefined,
	type?: string | undefined
};
	/** aggregate sum on columns */
["tournaments_sum_fields"]: {
	__typename: "tournaments_sum_fields",
	organizer_steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** order by sum() on columns of table "tournaments" */
["tournaments_sum_order_by"]: {
		organizer_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** update columns of table "tournaments" */
["tournaments_update_column"]: tournaments_update_column;
	["tournaments_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["tournaments_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["tournaments_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["tournaments_bool_exp"]
};
	/** aggregate var_pop on columns */
["tournaments_var_pop_fields"]: {
	__typename: "tournaments_var_pop_fields",
	organizer_steam_id?: number | undefined
};
	/** order by var_pop() on columns of table "tournaments" */
["tournaments_var_pop_order_by"]: {
		organizer_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["tournaments_var_samp_fields"]: {
	__typename: "tournaments_var_samp_fields",
	organizer_steam_id?: number | undefined
};
	/** order by var_samp() on columns of table "tournaments" */
["tournaments_var_samp_order_by"]: {
		organizer_steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["tournaments_variance_fields"]: {
	__typename: "tournaments_variance_fields",
	organizer_steam_id?: number | undefined
};
	/** order by variance() on columns of table "tournaments" */
["tournaments_variance_order_by"]: {
		organizer_steam_id?: GraphQLTypes["order_by"] | undefined
};
	["uuid"]: "scalar" & { name: "uuid" };
	/** Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'. */
["uuid_comparison_exp"]: {
		_eq?: GraphQLTypes["uuid"] | undefined,
	_gt?: GraphQLTypes["uuid"] | undefined,
	_gte?: GraphQLTypes["uuid"] | undefined,
	_in?: Array<GraphQLTypes["uuid"]> | undefined,
	_is_null?: boolean | undefined,
	_lt?: GraphQLTypes["uuid"] | undefined,
	_lte?: GraphQLTypes["uuid"] | undefined,
	_neq?: GraphQLTypes["uuid"] | undefined,
	_nin?: Array<GraphQLTypes["uuid"]> | undefined
};
	/** columns and relationships of "v_match_captains" */
["v_match_captains"]: {
	__typename: "v_match_captains",
	captain?: boolean | undefined,
	discord_id?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	/** An object relationship */
	lineup?: GraphQLTypes["match_lineups"] | undefined,
	match_lineup_id?: GraphQLTypes["uuid"] | undefined,
	placeholder_name?: string | undefined,
	/** An object relationship */
	player?: GraphQLTypes["players"] | undefined,
	steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** aggregated selection of "v_match_captains" */
["v_match_captains_aggregate"]: {
	__typename: "v_match_captains_aggregate",
	aggregate?: GraphQLTypes["v_match_captains_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["v_match_captains"]>
};
	/** aggregate fields of "v_match_captains" */
["v_match_captains_aggregate_fields"]: {
	__typename: "v_match_captains_aggregate_fields",
	avg?: GraphQLTypes["v_match_captains_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["v_match_captains_max_fields"] | undefined,
	min?: GraphQLTypes["v_match_captains_min_fields"] | undefined,
	stddev?: GraphQLTypes["v_match_captains_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["v_match_captains_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["v_match_captains_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["v_match_captains_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["v_match_captains_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["v_match_captains_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["v_match_captains_variance_fields"] | undefined
};
	/** aggregate avg on columns */
["v_match_captains_avg_fields"]: {
	__typename: "v_match_captains_avg_fields",
	steam_id?: number | undefined
};
	/** Boolean expression to filter rows from the table "v_match_captains". All fields are combined with a logical 'AND'. */
["v_match_captains_bool_exp"]: {
		_and?: Array<GraphQLTypes["v_match_captains_bool_exp"]> | undefined,
	_not?: GraphQLTypes["v_match_captains_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["v_match_captains_bool_exp"]> | undefined,
	captain?: GraphQLTypes["Boolean_comparison_exp"] | undefined,
	discord_id?: GraphQLTypes["String_comparison_exp"] | undefined,
	id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	lineup?: GraphQLTypes["match_lineups_bool_exp"] | undefined,
	match_lineup_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	placeholder_name?: GraphQLTypes["String_comparison_exp"] | undefined,
	player?: GraphQLTypes["players_bool_exp"] | undefined,
	steam_id?: GraphQLTypes["bigint_comparison_exp"] | undefined
};
	/** input type for incrementing numeric columns in table "v_match_captains" */
["v_match_captains_inc_input"]: {
		steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** input type for inserting data into table "v_match_captains" */
["v_match_captains_insert_input"]: {
		captain?: boolean | undefined,
	discord_id?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	lineup?: GraphQLTypes["match_lineups_obj_rel_insert_input"] | undefined,
	match_lineup_id?: GraphQLTypes["uuid"] | undefined,
	placeholder_name?: string | undefined,
	player?: GraphQLTypes["players_obj_rel_insert_input"] | undefined,
	steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** aggregate max on columns */
["v_match_captains_max_fields"]: {
	__typename: "v_match_captains_max_fields",
	discord_id?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match_lineup_id?: GraphQLTypes["uuid"] | undefined,
	placeholder_name?: string | undefined,
	steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** aggregate min on columns */
["v_match_captains_min_fields"]: {
	__typename: "v_match_captains_min_fields",
	discord_id?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match_lineup_id?: GraphQLTypes["uuid"] | undefined,
	placeholder_name?: string | undefined,
	steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** response of any mutation on the table "v_match_captains" */
["v_match_captains_mutation_response"]: {
	__typename: "v_match_captains_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["v_match_captains"]>
};
	/** input type for inserting object relation for remote table "v_match_captains" */
["v_match_captains_obj_rel_insert_input"]: {
		data: GraphQLTypes["v_match_captains_insert_input"]
};
	/** Ordering options when selecting data from "v_match_captains". */
["v_match_captains_order_by"]: {
		captain?: GraphQLTypes["order_by"] | undefined,
	discord_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	lineup?: GraphQLTypes["match_lineups_order_by"] | undefined,
	match_lineup_id?: GraphQLTypes["order_by"] | undefined,
	placeholder_name?: GraphQLTypes["order_by"] | undefined,
	player?: GraphQLTypes["players_order_by"] | undefined,
	steam_id?: GraphQLTypes["order_by"] | undefined
};
	/** select columns of table "v_match_captains" */
["v_match_captains_select_column"]: v_match_captains_select_column;
	/** input type for updating data in table "v_match_captains" */
["v_match_captains_set_input"]: {
		captain?: boolean | undefined,
	discord_id?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match_lineup_id?: GraphQLTypes["uuid"] | undefined,
	placeholder_name?: string | undefined,
	steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** aggregate stddev on columns */
["v_match_captains_stddev_fields"]: {
	__typename: "v_match_captains_stddev_fields",
	steam_id?: number | undefined
};
	/** aggregate stddev_pop on columns */
["v_match_captains_stddev_pop_fields"]: {
	__typename: "v_match_captains_stddev_pop_fields",
	steam_id?: number | undefined
};
	/** aggregate stddev_samp on columns */
["v_match_captains_stddev_samp_fields"]: {
	__typename: "v_match_captains_stddev_samp_fields",
	steam_id?: number | undefined
};
	/** Streaming cursor of the table "v_match_captains" */
["v_match_captains_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["v_match_captains_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["v_match_captains_stream_cursor_value_input"]: {
		captain?: boolean | undefined,
	discord_id?: string | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	match_lineup_id?: GraphQLTypes["uuid"] | undefined,
	placeholder_name?: string | undefined,
	steam_id?: GraphQLTypes["bigint"] | undefined
};
	/** aggregate sum on columns */
["v_match_captains_sum_fields"]: {
	__typename: "v_match_captains_sum_fields",
	steam_id?: GraphQLTypes["bigint"] | undefined
};
	["v_match_captains_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["v_match_captains_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["v_match_captains_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["v_match_captains_bool_exp"]
};
	/** aggregate var_pop on columns */
["v_match_captains_var_pop_fields"]: {
	__typename: "v_match_captains_var_pop_fields",
	steam_id?: number | undefined
};
	/** aggregate var_samp on columns */
["v_match_captains_var_samp_fields"]: {
	__typename: "v_match_captains_var_samp_fields",
	steam_id?: number | undefined
};
	/** aggregate variance on columns */
["v_match_captains_variance_fields"]: {
	__typename: "v_match_captains_variance_fields",
	steam_id?: number | undefined
};
	/** columns and relationships of "v_player_arch_nemesis" */
["v_player_arch_nemesis"]: {
	__typename: "v_player_arch_nemesis",
	attacker_id?: GraphQLTypes["bigint"] | undefined,
	kill_count?: GraphQLTypes["bigint"] | undefined,
	/** An object relationship */
	nemsis?: GraphQLTypes["players"] | undefined,
	/** An object relationship */
	player?: GraphQLTypes["players"] | undefined,
	victim_id?: GraphQLTypes["bigint"] | undefined
};
	/** aggregated selection of "v_player_arch_nemesis" */
["v_player_arch_nemesis_aggregate"]: {
	__typename: "v_player_arch_nemesis_aggregate",
	aggregate?: GraphQLTypes["v_player_arch_nemesis_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["v_player_arch_nemesis"]>
};
	/** aggregate fields of "v_player_arch_nemesis" */
["v_player_arch_nemesis_aggregate_fields"]: {
	__typename: "v_player_arch_nemesis_aggregate_fields",
	avg?: GraphQLTypes["v_player_arch_nemesis_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["v_player_arch_nemesis_max_fields"] | undefined,
	min?: GraphQLTypes["v_player_arch_nemesis_min_fields"] | undefined,
	stddev?: GraphQLTypes["v_player_arch_nemesis_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["v_player_arch_nemesis_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["v_player_arch_nemesis_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["v_player_arch_nemesis_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["v_player_arch_nemesis_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["v_player_arch_nemesis_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["v_player_arch_nemesis_variance_fields"] | undefined
};
	/** aggregate avg on columns */
["v_player_arch_nemesis_avg_fields"]: {
	__typename: "v_player_arch_nemesis_avg_fields",
	attacker_id?: number | undefined,
	kill_count?: number | undefined,
	victim_id?: number | undefined
};
	/** Boolean expression to filter rows from the table "v_player_arch_nemesis". All fields are combined with a logical 'AND'. */
["v_player_arch_nemesis_bool_exp"]: {
		_and?: Array<GraphQLTypes["v_player_arch_nemesis_bool_exp"]> | undefined,
	_not?: GraphQLTypes["v_player_arch_nemesis_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["v_player_arch_nemesis_bool_exp"]> | undefined,
	attacker_id?: GraphQLTypes["bigint_comparison_exp"] | undefined,
	kill_count?: GraphQLTypes["bigint_comparison_exp"] | undefined,
	nemsis?: GraphQLTypes["players_bool_exp"] | undefined,
	player?: GraphQLTypes["players_bool_exp"] | undefined,
	victim_id?: GraphQLTypes["bigint_comparison_exp"] | undefined
};
	/** aggregate max on columns */
["v_player_arch_nemesis_max_fields"]: {
	__typename: "v_player_arch_nemesis_max_fields",
	attacker_id?: GraphQLTypes["bigint"] | undefined,
	kill_count?: GraphQLTypes["bigint"] | undefined,
	victim_id?: GraphQLTypes["bigint"] | undefined
};
	/** aggregate min on columns */
["v_player_arch_nemesis_min_fields"]: {
	__typename: "v_player_arch_nemesis_min_fields",
	attacker_id?: GraphQLTypes["bigint"] | undefined,
	kill_count?: GraphQLTypes["bigint"] | undefined,
	victim_id?: GraphQLTypes["bigint"] | undefined
};
	/** Ordering options when selecting data from "v_player_arch_nemesis". */
["v_player_arch_nemesis_order_by"]: {
		attacker_id?: GraphQLTypes["order_by"] | undefined,
	kill_count?: GraphQLTypes["order_by"] | undefined,
	nemsis?: GraphQLTypes["players_order_by"] | undefined,
	player?: GraphQLTypes["players_order_by"] | undefined,
	victim_id?: GraphQLTypes["order_by"] | undefined
};
	/** select columns of table "v_player_arch_nemesis" */
["v_player_arch_nemesis_select_column"]: v_player_arch_nemesis_select_column;
	/** aggregate stddev on columns */
["v_player_arch_nemesis_stddev_fields"]: {
	__typename: "v_player_arch_nemesis_stddev_fields",
	attacker_id?: number | undefined,
	kill_count?: number | undefined,
	victim_id?: number | undefined
};
	/** aggregate stddev_pop on columns */
["v_player_arch_nemesis_stddev_pop_fields"]: {
	__typename: "v_player_arch_nemesis_stddev_pop_fields",
	attacker_id?: number | undefined,
	kill_count?: number | undefined,
	victim_id?: number | undefined
};
	/** aggregate stddev_samp on columns */
["v_player_arch_nemesis_stddev_samp_fields"]: {
	__typename: "v_player_arch_nemesis_stddev_samp_fields",
	attacker_id?: number | undefined,
	kill_count?: number | undefined,
	victim_id?: number | undefined
};
	/** Streaming cursor of the table "v_player_arch_nemesis" */
["v_player_arch_nemesis_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["v_player_arch_nemesis_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["v_player_arch_nemesis_stream_cursor_value_input"]: {
		attacker_id?: GraphQLTypes["bigint"] | undefined,
	kill_count?: GraphQLTypes["bigint"] | undefined,
	victim_id?: GraphQLTypes["bigint"] | undefined
};
	/** aggregate sum on columns */
["v_player_arch_nemesis_sum_fields"]: {
	__typename: "v_player_arch_nemesis_sum_fields",
	attacker_id?: GraphQLTypes["bigint"] | undefined,
	kill_count?: GraphQLTypes["bigint"] | undefined,
	victim_id?: GraphQLTypes["bigint"] | undefined
};
	/** aggregate var_pop on columns */
["v_player_arch_nemesis_var_pop_fields"]: {
	__typename: "v_player_arch_nemesis_var_pop_fields",
	attacker_id?: number | undefined,
	kill_count?: number | undefined,
	victim_id?: number | undefined
};
	/** aggregate var_samp on columns */
["v_player_arch_nemesis_var_samp_fields"]: {
	__typename: "v_player_arch_nemesis_var_samp_fields",
	attacker_id?: number | undefined,
	kill_count?: number | undefined,
	victim_id?: number | undefined
};
	/** aggregate variance on columns */
["v_player_arch_nemesis_variance_fields"]: {
	__typename: "v_player_arch_nemesis_variance_fields",
	attacker_id?: number | undefined,
	kill_count?: number | undefined,
	victim_id?: number | undefined
};
	/** columns and relationships of "v_player_damage" */
["v_player_damage"]: {
	__typename: "v_player_damage",
	avg_damage_per_round?: GraphQLTypes["bigint"] | undefined,
	/** An object relationship */
	player?: GraphQLTypes["players"] | undefined,
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	total_damage?: GraphQLTypes["bigint"] | undefined,
	total_rounds?: GraphQLTypes["bigint"] | undefined
};
	/** aggregated selection of "v_player_damage" */
["v_player_damage_aggregate"]: {
	__typename: "v_player_damage_aggregate",
	aggregate?: GraphQLTypes["v_player_damage_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["v_player_damage"]>
};
	/** aggregate fields of "v_player_damage" */
["v_player_damage_aggregate_fields"]: {
	__typename: "v_player_damage_aggregate_fields",
	avg?: GraphQLTypes["v_player_damage_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["v_player_damage_max_fields"] | undefined,
	min?: GraphQLTypes["v_player_damage_min_fields"] | undefined,
	stddev?: GraphQLTypes["v_player_damage_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["v_player_damage_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["v_player_damage_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["v_player_damage_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["v_player_damage_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["v_player_damage_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["v_player_damage_variance_fields"] | undefined
};
	/** aggregate avg on columns */
["v_player_damage_avg_fields"]: {
	__typename: "v_player_damage_avg_fields",
	avg_damage_per_round?: number | undefined,
	player_steam_id?: number | undefined,
	total_damage?: number | undefined,
	total_rounds?: number | undefined
};
	/** Boolean expression to filter rows from the table "v_player_damage". All fields are combined with a logical 'AND'. */
["v_player_damage_bool_exp"]: {
		_and?: Array<GraphQLTypes["v_player_damage_bool_exp"]> | undefined,
	_not?: GraphQLTypes["v_player_damage_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["v_player_damage_bool_exp"]> | undefined,
	avg_damage_per_round?: GraphQLTypes["bigint_comparison_exp"] | undefined,
	player?: GraphQLTypes["players_bool_exp"] | undefined,
	player_steam_id?: GraphQLTypes["bigint_comparison_exp"] | undefined,
	total_damage?: GraphQLTypes["bigint_comparison_exp"] | undefined,
	total_rounds?: GraphQLTypes["bigint_comparison_exp"] | undefined
};
	/** aggregate max on columns */
["v_player_damage_max_fields"]: {
	__typename: "v_player_damage_max_fields",
	avg_damage_per_round?: GraphQLTypes["bigint"] | undefined,
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	total_damage?: GraphQLTypes["bigint"] | undefined,
	total_rounds?: GraphQLTypes["bigint"] | undefined
};
	/** aggregate min on columns */
["v_player_damage_min_fields"]: {
	__typename: "v_player_damage_min_fields",
	avg_damage_per_round?: GraphQLTypes["bigint"] | undefined,
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	total_damage?: GraphQLTypes["bigint"] | undefined,
	total_rounds?: GraphQLTypes["bigint"] | undefined
};
	/** Ordering options when selecting data from "v_player_damage". */
["v_player_damage_order_by"]: {
		avg_damage_per_round?: GraphQLTypes["order_by"] | undefined,
	player?: GraphQLTypes["players_order_by"] | undefined,
	player_steam_id?: GraphQLTypes["order_by"] | undefined,
	total_damage?: GraphQLTypes["order_by"] | undefined,
	total_rounds?: GraphQLTypes["order_by"] | undefined
};
	/** select columns of table "v_player_damage" */
["v_player_damage_select_column"]: v_player_damage_select_column;
	/** aggregate stddev on columns */
["v_player_damage_stddev_fields"]: {
	__typename: "v_player_damage_stddev_fields",
	avg_damage_per_round?: number | undefined,
	player_steam_id?: number | undefined,
	total_damage?: number | undefined,
	total_rounds?: number | undefined
};
	/** aggregate stddev_pop on columns */
["v_player_damage_stddev_pop_fields"]: {
	__typename: "v_player_damage_stddev_pop_fields",
	avg_damage_per_round?: number | undefined,
	player_steam_id?: number | undefined,
	total_damage?: number | undefined,
	total_rounds?: number | undefined
};
	/** aggregate stddev_samp on columns */
["v_player_damage_stddev_samp_fields"]: {
	__typename: "v_player_damage_stddev_samp_fields",
	avg_damage_per_round?: number | undefined,
	player_steam_id?: number | undefined,
	total_damage?: number | undefined,
	total_rounds?: number | undefined
};
	/** Streaming cursor of the table "v_player_damage" */
["v_player_damage_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["v_player_damage_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["v_player_damage_stream_cursor_value_input"]: {
		avg_damage_per_round?: GraphQLTypes["bigint"] | undefined,
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	total_damage?: GraphQLTypes["bigint"] | undefined,
	total_rounds?: GraphQLTypes["bigint"] | undefined
};
	/** aggregate sum on columns */
["v_player_damage_sum_fields"]: {
	__typename: "v_player_damage_sum_fields",
	avg_damage_per_round?: GraphQLTypes["bigint"] | undefined,
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	total_damage?: GraphQLTypes["bigint"] | undefined,
	total_rounds?: GraphQLTypes["bigint"] | undefined
};
	/** aggregate var_pop on columns */
["v_player_damage_var_pop_fields"]: {
	__typename: "v_player_damage_var_pop_fields",
	avg_damage_per_round?: number | undefined,
	player_steam_id?: number | undefined,
	total_damage?: number | undefined,
	total_rounds?: number | undefined
};
	/** aggregate var_samp on columns */
["v_player_damage_var_samp_fields"]: {
	__typename: "v_player_damage_var_samp_fields",
	avg_damage_per_round?: number | undefined,
	player_steam_id?: number | undefined,
	total_damage?: number | undefined,
	total_rounds?: number | undefined
};
	/** aggregate variance on columns */
["v_player_damage_variance_fields"]: {
	__typename: "v_player_damage_variance_fields",
	avg_damage_per_round?: number | undefined,
	player_steam_id?: number | undefined,
	total_damage?: number | undefined,
	total_rounds?: number | undefined
};
	/** columns and relationships of "v_player_killed_player_counts" */
["v_player_killed_player_counts"]: {
	__typename: "v_player_killed_player_counts",
	kill_count?: GraphQLTypes["bigint"] | undefined,
	player_id?: GraphQLTypes["bigint"] | undefined,
	victim_id?: GraphQLTypes["bigint"] | undefined
};
	/** aggregated selection of "v_player_killed_player_counts" */
["v_player_killed_player_counts_aggregate"]: {
	__typename: "v_player_killed_player_counts_aggregate",
	aggregate?: GraphQLTypes["v_player_killed_player_counts_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["v_player_killed_player_counts"]>
};
	/** aggregate fields of "v_player_killed_player_counts" */
["v_player_killed_player_counts_aggregate_fields"]: {
	__typename: "v_player_killed_player_counts_aggregate_fields",
	avg?: GraphQLTypes["v_player_killed_player_counts_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["v_player_killed_player_counts_max_fields"] | undefined,
	min?: GraphQLTypes["v_player_killed_player_counts_min_fields"] | undefined,
	stddev?: GraphQLTypes["v_player_killed_player_counts_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["v_player_killed_player_counts_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["v_player_killed_player_counts_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["v_player_killed_player_counts_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["v_player_killed_player_counts_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["v_player_killed_player_counts_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["v_player_killed_player_counts_variance_fields"] | undefined
};
	/** aggregate avg on columns */
["v_player_killed_player_counts_avg_fields"]: {
	__typename: "v_player_killed_player_counts_avg_fields",
	kill_count?: number | undefined,
	player_id?: number | undefined,
	victim_id?: number | undefined
};
	/** Boolean expression to filter rows from the table "v_player_killed_player_counts". All fields are combined with a logical 'AND'. */
["v_player_killed_player_counts_bool_exp"]: {
		_and?: Array<GraphQLTypes["v_player_killed_player_counts_bool_exp"]> | undefined,
	_not?: GraphQLTypes["v_player_killed_player_counts_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["v_player_killed_player_counts_bool_exp"]> | undefined,
	kill_count?: GraphQLTypes["bigint_comparison_exp"] | undefined,
	player_id?: GraphQLTypes["bigint_comparison_exp"] | undefined,
	victim_id?: GraphQLTypes["bigint_comparison_exp"] | undefined
};
	/** aggregate max on columns */
["v_player_killed_player_counts_max_fields"]: {
	__typename: "v_player_killed_player_counts_max_fields",
	kill_count?: GraphQLTypes["bigint"] | undefined,
	player_id?: GraphQLTypes["bigint"] | undefined,
	victim_id?: GraphQLTypes["bigint"] | undefined
};
	/** aggregate min on columns */
["v_player_killed_player_counts_min_fields"]: {
	__typename: "v_player_killed_player_counts_min_fields",
	kill_count?: GraphQLTypes["bigint"] | undefined,
	player_id?: GraphQLTypes["bigint"] | undefined,
	victim_id?: GraphQLTypes["bigint"] | undefined
};
	/** Ordering options when selecting data from "v_player_killed_player_counts". */
["v_player_killed_player_counts_order_by"]: {
		kill_count?: GraphQLTypes["order_by"] | undefined,
	player_id?: GraphQLTypes["order_by"] | undefined,
	victim_id?: GraphQLTypes["order_by"] | undefined
};
	/** select columns of table "v_player_killed_player_counts" */
["v_player_killed_player_counts_select_column"]: v_player_killed_player_counts_select_column;
	/** aggregate stddev on columns */
["v_player_killed_player_counts_stddev_fields"]: {
	__typename: "v_player_killed_player_counts_stddev_fields",
	kill_count?: number | undefined,
	player_id?: number | undefined,
	victim_id?: number | undefined
};
	/** aggregate stddev_pop on columns */
["v_player_killed_player_counts_stddev_pop_fields"]: {
	__typename: "v_player_killed_player_counts_stddev_pop_fields",
	kill_count?: number | undefined,
	player_id?: number | undefined,
	victim_id?: number | undefined
};
	/** aggregate stddev_samp on columns */
["v_player_killed_player_counts_stddev_samp_fields"]: {
	__typename: "v_player_killed_player_counts_stddev_samp_fields",
	kill_count?: number | undefined,
	player_id?: number | undefined,
	victim_id?: number | undefined
};
	/** Streaming cursor of the table "v_player_killed_player_counts" */
["v_player_killed_player_counts_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["v_player_killed_player_counts_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["v_player_killed_player_counts_stream_cursor_value_input"]: {
		kill_count?: GraphQLTypes["bigint"] | undefined,
	player_id?: GraphQLTypes["bigint"] | undefined,
	victim_id?: GraphQLTypes["bigint"] | undefined
};
	/** aggregate sum on columns */
["v_player_killed_player_counts_sum_fields"]: {
	__typename: "v_player_killed_player_counts_sum_fields",
	kill_count?: GraphQLTypes["bigint"] | undefined,
	player_id?: GraphQLTypes["bigint"] | undefined,
	victim_id?: GraphQLTypes["bigint"] | undefined
};
	/** aggregate var_pop on columns */
["v_player_killed_player_counts_var_pop_fields"]: {
	__typename: "v_player_killed_player_counts_var_pop_fields",
	kill_count?: number | undefined,
	player_id?: number | undefined,
	victim_id?: number | undefined
};
	/** aggregate var_samp on columns */
["v_player_killed_player_counts_var_samp_fields"]: {
	__typename: "v_player_killed_player_counts_var_samp_fields",
	kill_count?: number | undefined,
	player_id?: number | undefined,
	victim_id?: number | undefined
};
	/** aggregate variance on columns */
["v_player_killed_player_counts_variance_fields"]: {
	__typename: "v_player_killed_player_counts_variance_fields",
	kill_count?: number | undefined,
	player_id?: number | undefined,
	victim_id?: number | undefined
};
	/** columns and relationships of "v_player_match_kills" */
["v_player_match_kills"]: {
	__typename: "v_player_match_kills",
	avg_kills_per_game?: GraphQLTypes["bigint"] | undefined,
	kills?: GraphQLTypes["bigint"] | undefined,
	/** An object relationship */
	player?: GraphQLTypes["players"] | undefined,
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	total_matches?: GraphQLTypes["bigint"] | undefined
};
	/** aggregated selection of "v_player_match_kills" */
["v_player_match_kills_aggregate"]: {
	__typename: "v_player_match_kills_aggregate",
	aggregate?: GraphQLTypes["v_player_match_kills_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["v_player_match_kills"]>
};
	/** aggregate fields of "v_player_match_kills" */
["v_player_match_kills_aggregate_fields"]: {
	__typename: "v_player_match_kills_aggregate_fields",
	avg?: GraphQLTypes["v_player_match_kills_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["v_player_match_kills_max_fields"] | undefined,
	min?: GraphQLTypes["v_player_match_kills_min_fields"] | undefined,
	stddev?: GraphQLTypes["v_player_match_kills_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["v_player_match_kills_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["v_player_match_kills_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["v_player_match_kills_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["v_player_match_kills_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["v_player_match_kills_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["v_player_match_kills_variance_fields"] | undefined
};
	/** aggregate avg on columns */
["v_player_match_kills_avg_fields"]: {
	__typename: "v_player_match_kills_avg_fields",
	avg_kills_per_game?: number | undefined,
	kills?: number | undefined,
	player_steam_id?: number | undefined,
	total_matches?: number | undefined
};
	/** Boolean expression to filter rows from the table "v_player_match_kills". All fields are combined with a logical 'AND'. */
["v_player_match_kills_bool_exp"]: {
		_and?: Array<GraphQLTypes["v_player_match_kills_bool_exp"]> | undefined,
	_not?: GraphQLTypes["v_player_match_kills_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["v_player_match_kills_bool_exp"]> | undefined,
	avg_kills_per_game?: GraphQLTypes["bigint_comparison_exp"] | undefined,
	kills?: GraphQLTypes["bigint_comparison_exp"] | undefined,
	player?: GraphQLTypes["players_bool_exp"] | undefined,
	player_steam_id?: GraphQLTypes["bigint_comparison_exp"] | undefined,
	total_matches?: GraphQLTypes["bigint_comparison_exp"] | undefined
};
	/** aggregate max on columns */
["v_player_match_kills_max_fields"]: {
	__typename: "v_player_match_kills_max_fields",
	avg_kills_per_game?: GraphQLTypes["bigint"] | undefined,
	kills?: GraphQLTypes["bigint"] | undefined,
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	total_matches?: GraphQLTypes["bigint"] | undefined
};
	/** aggregate min on columns */
["v_player_match_kills_min_fields"]: {
	__typename: "v_player_match_kills_min_fields",
	avg_kills_per_game?: GraphQLTypes["bigint"] | undefined,
	kills?: GraphQLTypes["bigint"] | undefined,
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	total_matches?: GraphQLTypes["bigint"] | undefined
};
	/** Ordering options when selecting data from "v_player_match_kills". */
["v_player_match_kills_order_by"]: {
		avg_kills_per_game?: GraphQLTypes["order_by"] | undefined,
	kills?: GraphQLTypes["order_by"] | undefined,
	player?: GraphQLTypes["players_order_by"] | undefined,
	player_steam_id?: GraphQLTypes["order_by"] | undefined,
	total_matches?: GraphQLTypes["order_by"] | undefined
};
	/** select columns of table "v_player_match_kills" */
["v_player_match_kills_select_column"]: v_player_match_kills_select_column;
	/** aggregate stddev on columns */
["v_player_match_kills_stddev_fields"]: {
	__typename: "v_player_match_kills_stddev_fields",
	avg_kills_per_game?: number | undefined,
	kills?: number | undefined,
	player_steam_id?: number | undefined,
	total_matches?: number | undefined
};
	/** aggregate stddev_pop on columns */
["v_player_match_kills_stddev_pop_fields"]: {
	__typename: "v_player_match_kills_stddev_pop_fields",
	avg_kills_per_game?: number | undefined,
	kills?: number | undefined,
	player_steam_id?: number | undefined,
	total_matches?: number | undefined
};
	/** aggregate stddev_samp on columns */
["v_player_match_kills_stddev_samp_fields"]: {
	__typename: "v_player_match_kills_stddev_samp_fields",
	avg_kills_per_game?: number | undefined,
	kills?: number | undefined,
	player_steam_id?: number | undefined,
	total_matches?: number | undefined
};
	/** Streaming cursor of the table "v_player_match_kills" */
["v_player_match_kills_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["v_player_match_kills_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["v_player_match_kills_stream_cursor_value_input"]: {
		avg_kills_per_game?: GraphQLTypes["bigint"] | undefined,
	kills?: GraphQLTypes["bigint"] | undefined,
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	total_matches?: GraphQLTypes["bigint"] | undefined
};
	/** aggregate sum on columns */
["v_player_match_kills_sum_fields"]: {
	__typename: "v_player_match_kills_sum_fields",
	avg_kills_per_game?: GraphQLTypes["bigint"] | undefined,
	kills?: GraphQLTypes["bigint"] | undefined,
	player_steam_id?: GraphQLTypes["bigint"] | undefined,
	total_matches?: GraphQLTypes["bigint"] | undefined
};
	/** aggregate var_pop on columns */
["v_player_match_kills_var_pop_fields"]: {
	__typename: "v_player_match_kills_var_pop_fields",
	avg_kills_per_game?: number | undefined,
	kills?: number | undefined,
	player_steam_id?: number | undefined,
	total_matches?: number | undefined
};
	/** aggregate var_samp on columns */
["v_player_match_kills_var_samp_fields"]: {
	__typename: "v_player_match_kills_var_samp_fields",
	avg_kills_per_game?: number | undefined,
	kills?: number | undefined,
	player_steam_id?: number | undefined,
	total_matches?: number | undefined
};
	/** aggregate variance on columns */
["v_player_match_kills_variance_fields"]: {
	__typename: "v_player_match_kills_variance_fields",
	avg_kills_per_game?: number | undefined,
	kills?: number | undefined,
	player_steam_id?: number | undefined,
	total_matches?: number | undefined
};
	/** columns and relationships of "v_player_multi_kills" */
["v_player_multi_kills"]: {
	__typename: "v_player_multi_kills",
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	kills?: GraphQLTypes["bigint"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	round?: number | undefined
};
	/** aggregated selection of "v_player_multi_kills" */
["v_player_multi_kills_aggregate"]: {
	__typename: "v_player_multi_kills_aggregate",
	aggregate?: GraphQLTypes["v_player_multi_kills_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["v_player_multi_kills"]>
};
	["v_player_multi_kills_aggregate_bool_exp"]: {
		count?: GraphQLTypes["v_player_multi_kills_aggregate_bool_exp_count"] | undefined
};
	["v_player_multi_kills_aggregate_bool_exp_count"]: {
		arguments?: Array<GraphQLTypes["v_player_multi_kills_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["v_player_multi_kills_bool_exp"] | undefined,
	predicate: GraphQLTypes["Int_comparison_exp"]
};
	/** aggregate fields of "v_player_multi_kills" */
["v_player_multi_kills_aggregate_fields"]: {
	__typename: "v_player_multi_kills_aggregate_fields",
	avg?: GraphQLTypes["v_player_multi_kills_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["v_player_multi_kills_max_fields"] | undefined,
	min?: GraphQLTypes["v_player_multi_kills_min_fields"] | undefined,
	stddev?: GraphQLTypes["v_player_multi_kills_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["v_player_multi_kills_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["v_player_multi_kills_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["v_player_multi_kills_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["v_player_multi_kills_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["v_player_multi_kills_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["v_player_multi_kills_variance_fields"] | undefined
};
	/** order by aggregate values of table "v_player_multi_kills" */
["v_player_multi_kills_aggregate_order_by"]: {
		avg?: GraphQLTypes["v_player_multi_kills_avg_order_by"] | undefined,
	count?: GraphQLTypes["order_by"] | undefined,
	max?: GraphQLTypes["v_player_multi_kills_max_order_by"] | undefined,
	min?: GraphQLTypes["v_player_multi_kills_min_order_by"] | undefined,
	stddev?: GraphQLTypes["v_player_multi_kills_stddev_order_by"] | undefined,
	stddev_pop?: GraphQLTypes["v_player_multi_kills_stddev_pop_order_by"] | undefined,
	stddev_samp?: GraphQLTypes["v_player_multi_kills_stddev_samp_order_by"] | undefined,
	sum?: GraphQLTypes["v_player_multi_kills_sum_order_by"] | undefined,
	var_pop?: GraphQLTypes["v_player_multi_kills_var_pop_order_by"] | undefined,
	var_samp?: GraphQLTypes["v_player_multi_kills_var_samp_order_by"] | undefined,
	variance?: GraphQLTypes["v_player_multi_kills_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "v_player_multi_kills" */
["v_player_multi_kills_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["v_player_multi_kills_insert_input"]>
};
	/** aggregate avg on columns */
["v_player_multi_kills_avg_fields"]: {
	__typename: "v_player_multi_kills_avg_fields",
	attacker_steam_id?: number | undefined,
	kills?: number | undefined,
	round?: number | undefined
};
	/** order by avg() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_avg_order_by"]: {
		attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	kills?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "v_player_multi_kills". All fields are combined with a logical 'AND'. */
["v_player_multi_kills_bool_exp"]: {
		_and?: Array<GraphQLTypes["v_player_multi_kills_bool_exp"]> | undefined,
	_not?: GraphQLTypes["v_player_multi_kills_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["v_player_multi_kills_bool_exp"]> | undefined,
	attacker_steam_id?: GraphQLTypes["bigint_comparison_exp"] | undefined,
	kills?: GraphQLTypes["bigint_comparison_exp"] | undefined,
	match_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	round?: GraphQLTypes["Int_comparison_exp"] | undefined
};
	/** input type for inserting data into table "v_player_multi_kills" */
["v_player_multi_kills_insert_input"]: {
		attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	kills?: GraphQLTypes["bigint"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	round?: number | undefined
};
	/** aggregate max on columns */
["v_player_multi_kills_max_fields"]: {
	__typename: "v_player_multi_kills_max_fields",
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	kills?: GraphQLTypes["bigint"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	round?: number | undefined
};
	/** order by max() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_max_order_by"]: {
		attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	kills?: GraphQLTypes["order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["v_player_multi_kills_min_fields"]: {
	__typename: "v_player_multi_kills_min_fields",
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	kills?: GraphQLTypes["bigint"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	round?: number | undefined
};
	/** order by min() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_min_order_by"]: {
		attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	kills?: GraphQLTypes["order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** Ordering options when selecting data from "v_player_multi_kills". */
["v_player_multi_kills_order_by"]: {
		attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	kills?: GraphQLTypes["order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** select columns of table "v_player_multi_kills" */
["v_player_multi_kills_select_column"]: v_player_multi_kills_select_column;
	/** aggregate stddev on columns */
["v_player_multi_kills_stddev_fields"]: {
	__typename: "v_player_multi_kills_stddev_fields",
	attacker_steam_id?: number | undefined,
	kills?: number | undefined,
	round?: number | undefined
};
	/** order by stddev() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_stddev_order_by"]: {
		attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	kills?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["v_player_multi_kills_stddev_pop_fields"]: {
	__typename: "v_player_multi_kills_stddev_pop_fields",
	attacker_steam_id?: number | undefined,
	kills?: number | undefined,
	round?: number | undefined
};
	/** order by stddev_pop() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_stddev_pop_order_by"]: {
		attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	kills?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["v_player_multi_kills_stddev_samp_fields"]: {
	__typename: "v_player_multi_kills_stddev_samp_fields",
	attacker_steam_id?: number | undefined,
	kills?: number | undefined,
	round?: number | undefined
};
	/** order by stddev_samp() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_stddev_samp_order_by"]: {
		attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	kills?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "v_player_multi_kills" */
["v_player_multi_kills_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["v_player_multi_kills_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["v_player_multi_kills_stream_cursor_value_input"]: {
		attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	kills?: GraphQLTypes["bigint"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	round?: number | undefined
};
	/** aggregate sum on columns */
["v_player_multi_kills_sum_fields"]: {
	__typename: "v_player_multi_kills_sum_fields",
	attacker_steam_id?: GraphQLTypes["bigint"] | undefined,
	kills?: GraphQLTypes["bigint"] | undefined,
	round?: number | undefined
};
	/** order by sum() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_sum_order_by"]: {
		attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	kills?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate var_pop on columns */
["v_player_multi_kills_var_pop_fields"]: {
	__typename: "v_player_multi_kills_var_pop_fields",
	attacker_steam_id?: number | undefined,
	kills?: number | undefined,
	round?: number | undefined
};
	/** order by var_pop() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_var_pop_order_by"]: {
		attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	kills?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["v_player_multi_kills_var_samp_fields"]: {
	__typename: "v_player_multi_kills_var_samp_fields",
	attacker_steam_id?: number | undefined,
	kills?: number | undefined,
	round?: number | undefined
};
	/** order by var_samp() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_var_samp_order_by"]: {
		attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	kills?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["v_player_multi_kills_variance_fields"]: {
	__typename: "v_player_multi_kills_variance_fields",
	attacker_steam_id?: number | undefined,
	kills?: number | undefined,
	round?: number | undefined
};
	/** order by variance() on columns of table "v_player_multi_kills" */
["v_player_multi_kills_variance_order_by"]: {
		attacker_steam_id?: GraphQLTypes["order_by"] | undefined,
	kills?: GraphQLTypes["order_by"] | undefined,
	round?: GraphQLTypes["order_by"] | undefined
};
	/** columns and relationships of "v_player_opening_duels" */
["v_player_opening_duels"]: {
	__typename: "v_player_opening_duels",
	attempts?: GraphQLTypes["bigint"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	steam_id?: GraphQLTypes["bigint"] | undefined,
	successes?: GraphQLTypes["bigint"] | undefined
};
	/** aggregated selection of "v_player_opening_duels" */
["v_player_opening_duels_aggregate"]: {
	__typename: "v_player_opening_duels_aggregate",
	aggregate?: GraphQLTypes["v_player_opening_duels_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["v_player_opening_duels"]>
};
	["v_player_opening_duels_aggregate_bool_exp"]: {
		count?: GraphQLTypes["v_player_opening_duels_aggregate_bool_exp_count"] | undefined
};
	["v_player_opening_duels_aggregate_bool_exp_count"]: {
		arguments?: Array<GraphQLTypes["v_player_opening_duels_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["v_player_opening_duels_bool_exp"] | undefined,
	predicate: GraphQLTypes["Int_comparison_exp"]
};
	/** aggregate fields of "v_player_opening_duels" */
["v_player_opening_duels_aggregate_fields"]: {
	__typename: "v_player_opening_duels_aggregate_fields",
	avg?: GraphQLTypes["v_player_opening_duels_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["v_player_opening_duels_max_fields"] | undefined,
	min?: GraphQLTypes["v_player_opening_duels_min_fields"] | undefined,
	stddev?: GraphQLTypes["v_player_opening_duels_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["v_player_opening_duels_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["v_player_opening_duels_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["v_player_opening_duels_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["v_player_opening_duels_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["v_player_opening_duels_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["v_player_opening_duels_variance_fields"] | undefined
};
	/** order by aggregate values of table "v_player_opening_duels" */
["v_player_opening_duels_aggregate_order_by"]: {
		avg?: GraphQLTypes["v_player_opening_duels_avg_order_by"] | undefined,
	count?: GraphQLTypes["order_by"] | undefined,
	max?: GraphQLTypes["v_player_opening_duels_max_order_by"] | undefined,
	min?: GraphQLTypes["v_player_opening_duels_min_order_by"] | undefined,
	stddev?: GraphQLTypes["v_player_opening_duels_stddev_order_by"] | undefined,
	stddev_pop?: GraphQLTypes["v_player_opening_duels_stddev_pop_order_by"] | undefined,
	stddev_samp?: GraphQLTypes["v_player_opening_duels_stddev_samp_order_by"] | undefined,
	sum?: GraphQLTypes["v_player_opening_duels_sum_order_by"] | undefined,
	var_pop?: GraphQLTypes["v_player_opening_duels_var_pop_order_by"] | undefined,
	var_samp?: GraphQLTypes["v_player_opening_duels_var_samp_order_by"] | undefined,
	variance?: GraphQLTypes["v_player_opening_duels_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "v_player_opening_duels" */
["v_player_opening_duels_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["v_player_opening_duels_insert_input"]>
};
	/** aggregate avg on columns */
["v_player_opening_duels_avg_fields"]: {
	__typename: "v_player_opening_duels_avg_fields",
	attempts?: number | undefined,
	steam_id?: number | undefined,
	successes?: number | undefined
};
	/** order by avg() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_avg_order_by"]: {
		attempts?: GraphQLTypes["order_by"] | undefined,
	steam_id?: GraphQLTypes["order_by"] | undefined,
	successes?: GraphQLTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "v_player_opening_duels". All fields are combined with a logical 'AND'. */
["v_player_opening_duels_bool_exp"]: {
		_and?: Array<GraphQLTypes["v_player_opening_duels_bool_exp"]> | undefined,
	_not?: GraphQLTypes["v_player_opening_duels_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["v_player_opening_duels_bool_exp"]> | undefined,
	attempts?: GraphQLTypes["bigint_comparison_exp"] | undefined,
	match_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	match_map_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	steam_id?: GraphQLTypes["bigint_comparison_exp"] | undefined,
	successes?: GraphQLTypes["bigint_comparison_exp"] | undefined
};
	/** input type for inserting data into table "v_player_opening_duels" */
["v_player_opening_duels_insert_input"]: {
		attempts?: GraphQLTypes["bigint"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	steam_id?: GraphQLTypes["bigint"] | undefined,
	successes?: GraphQLTypes["bigint"] | undefined
};
	/** aggregate max on columns */
["v_player_opening_duels_max_fields"]: {
	__typename: "v_player_opening_duels_max_fields",
	attempts?: GraphQLTypes["bigint"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	steam_id?: GraphQLTypes["bigint"] | undefined,
	successes?: GraphQLTypes["bigint"] | undefined
};
	/** order by max() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_max_order_by"]: {
		attempts?: GraphQLTypes["order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	match_map_id?: GraphQLTypes["order_by"] | undefined,
	steam_id?: GraphQLTypes["order_by"] | undefined,
	successes?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["v_player_opening_duels_min_fields"]: {
	__typename: "v_player_opening_duels_min_fields",
	attempts?: GraphQLTypes["bigint"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	steam_id?: GraphQLTypes["bigint"] | undefined,
	successes?: GraphQLTypes["bigint"] | undefined
};
	/** order by min() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_min_order_by"]: {
		attempts?: GraphQLTypes["order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	match_map_id?: GraphQLTypes["order_by"] | undefined,
	steam_id?: GraphQLTypes["order_by"] | undefined,
	successes?: GraphQLTypes["order_by"] | undefined
};
	/** Ordering options when selecting data from "v_player_opening_duels". */
["v_player_opening_duels_order_by"]: {
		attempts?: GraphQLTypes["order_by"] | undefined,
	match_id?: GraphQLTypes["order_by"] | undefined,
	match_map_id?: GraphQLTypes["order_by"] | undefined,
	steam_id?: GraphQLTypes["order_by"] | undefined,
	successes?: GraphQLTypes["order_by"] | undefined
};
	/** select columns of table "v_player_opening_duels" */
["v_player_opening_duels_select_column"]: v_player_opening_duels_select_column;
	/** aggregate stddev on columns */
["v_player_opening_duels_stddev_fields"]: {
	__typename: "v_player_opening_duels_stddev_fields",
	attempts?: number | undefined,
	steam_id?: number | undefined,
	successes?: number | undefined
};
	/** order by stddev() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_stddev_order_by"]: {
		attempts?: GraphQLTypes["order_by"] | undefined,
	steam_id?: GraphQLTypes["order_by"] | undefined,
	successes?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["v_player_opening_duels_stddev_pop_fields"]: {
	__typename: "v_player_opening_duels_stddev_pop_fields",
	attempts?: number | undefined,
	steam_id?: number | undefined,
	successes?: number | undefined
};
	/** order by stddev_pop() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_stddev_pop_order_by"]: {
		attempts?: GraphQLTypes["order_by"] | undefined,
	steam_id?: GraphQLTypes["order_by"] | undefined,
	successes?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["v_player_opening_duels_stddev_samp_fields"]: {
	__typename: "v_player_opening_duels_stddev_samp_fields",
	attempts?: number | undefined,
	steam_id?: number | undefined,
	successes?: number | undefined
};
	/** order by stddev_samp() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_stddev_samp_order_by"]: {
		attempts?: GraphQLTypes["order_by"] | undefined,
	steam_id?: GraphQLTypes["order_by"] | undefined,
	successes?: GraphQLTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "v_player_opening_duels" */
["v_player_opening_duels_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["v_player_opening_duels_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["v_player_opening_duels_stream_cursor_value_input"]: {
		attempts?: GraphQLTypes["bigint"] | undefined,
	match_id?: GraphQLTypes["uuid"] | undefined,
	match_map_id?: GraphQLTypes["uuid"] | undefined,
	steam_id?: GraphQLTypes["bigint"] | undefined,
	successes?: GraphQLTypes["bigint"] | undefined
};
	/** aggregate sum on columns */
["v_player_opening_duels_sum_fields"]: {
	__typename: "v_player_opening_duels_sum_fields",
	attempts?: GraphQLTypes["bigint"] | undefined,
	steam_id?: GraphQLTypes["bigint"] | undefined,
	successes?: GraphQLTypes["bigint"] | undefined
};
	/** order by sum() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_sum_order_by"]: {
		attempts?: GraphQLTypes["order_by"] | undefined,
	steam_id?: GraphQLTypes["order_by"] | undefined,
	successes?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate var_pop on columns */
["v_player_opening_duels_var_pop_fields"]: {
	__typename: "v_player_opening_duels_var_pop_fields",
	attempts?: number | undefined,
	steam_id?: number | undefined,
	successes?: number | undefined
};
	/** order by var_pop() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_var_pop_order_by"]: {
		attempts?: GraphQLTypes["order_by"] | undefined,
	steam_id?: GraphQLTypes["order_by"] | undefined,
	successes?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["v_player_opening_duels_var_samp_fields"]: {
	__typename: "v_player_opening_duels_var_samp_fields",
	attempts?: number | undefined,
	steam_id?: number | undefined,
	successes?: number | undefined
};
	/** order by var_samp() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_var_samp_order_by"]: {
		attempts?: GraphQLTypes["order_by"] | undefined,
	steam_id?: GraphQLTypes["order_by"] | undefined,
	successes?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["v_player_opening_duels_variance_fields"]: {
	__typename: "v_player_opening_duels_variance_fields",
	attempts?: number | undefined,
	steam_id?: number | undefined,
	successes?: number | undefined
};
	/** order by variance() on columns of table "v_player_opening_duels" */
["v_player_opening_duels_variance_order_by"]: {
		attempts?: GraphQLTypes["order_by"] | undefined,
	steam_id?: GraphQLTypes["order_by"] | undefined,
	successes?: GraphQLTypes["order_by"] | undefined
};
	/** columns and relationships of "v_pool_maps" */
["v_pool_maps"]: {
	__typename: "v_pool_maps",
	active_pool?: boolean | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	/** An object relationship */
	map_pool?: GraphQLTypes["map_pools"] | undefined,
	map_pool_id?: GraphQLTypes["uuid"] | undefined,
	name?: string | undefined,
	type?: string | undefined,
	workshop_map_id?: string | undefined
};
	/** aggregated selection of "v_pool_maps" */
["v_pool_maps_aggregate"]: {
	__typename: "v_pool_maps_aggregate",
	aggregate?: GraphQLTypes["v_pool_maps_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["v_pool_maps"]>
};
	["v_pool_maps_aggregate_bool_exp"]: {
		bool_and?: GraphQLTypes["v_pool_maps_aggregate_bool_exp_bool_and"] | undefined,
	bool_or?: GraphQLTypes["v_pool_maps_aggregate_bool_exp_bool_or"] | undefined,
	count?: GraphQLTypes["v_pool_maps_aggregate_bool_exp_count"] | undefined
};
	["v_pool_maps_aggregate_bool_exp_bool_and"]: {
		arguments: GraphQLTypes["v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_and_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["v_pool_maps_bool_exp"] | undefined,
	predicate: GraphQLTypes["Boolean_comparison_exp"]
};
	["v_pool_maps_aggregate_bool_exp_bool_or"]: {
		arguments: GraphQLTypes["v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_or_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["v_pool_maps_bool_exp"] | undefined,
	predicate: GraphQLTypes["Boolean_comparison_exp"]
};
	["v_pool_maps_aggregate_bool_exp_count"]: {
		arguments?: Array<GraphQLTypes["v_pool_maps_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["v_pool_maps_bool_exp"] | undefined,
	predicate: GraphQLTypes["Int_comparison_exp"]
};
	/** aggregate fields of "v_pool_maps" */
["v_pool_maps_aggregate_fields"]: {
	__typename: "v_pool_maps_aggregate_fields",
	count: number,
	max?: GraphQLTypes["v_pool_maps_max_fields"] | undefined,
	min?: GraphQLTypes["v_pool_maps_min_fields"] | undefined
};
	/** order by aggregate values of table "v_pool_maps" */
["v_pool_maps_aggregate_order_by"]: {
		count?: GraphQLTypes["order_by"] | undefined,
	max?: GraphQLTypes["v_pool_maps_max_order_by"] | undefined,
	min?: GraphQLTypes["v_pool_maps_min_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "v_pool_maps" */
["v_pool_maps_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["v_pool_maps_insert_input"]>
};
	/** Boolean expression to filter rows from the table "v_pool_maps". All fields are combined with a logical 'AND'. */
["v_pool_maps_bool_exp"]: {
		_and?: Array<GraphQLTypes["v_pool_maps_bool_exp"]> | undefined,
	_not?: GraphQLTypes["v_pool_maps_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["v_pool_maps_bool_exp"]> | undefined,
	active_pool?: GraphQLTypes["Boolean_comparison_exp"] | undefined,
	id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	map_pool?: GraphQLTypes["map_pools_bool_exp"] | undefined,
	map_pool_id?: GraphQLTypes["uuid_comparison_exp"] | undefined,
	name?: GraphQLTypes["String_comparison_exp"] | undefined,
	type?: GraphQLTypes["String_comparison_exp"] | undefined,
	workshop_map_id?: GraphQLTypes["String_comparison_exp"] | undefined
};
	/** input type for inserting data into table "v_pool_maps" */
["v_pool_maps_insert_input"]: {
		active_pool?: boolean | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	map_pool?: GraphQLTypes["map_pools_obj_rel_insert_input"] | undefined,
	map_pool_id?: GraphQLTypes["uuid"] | undefined,
	name?: string | undefined,
	type?: string | undefined,
	workshop_map_id?: string | undefined
};
	/** aggregate max on columns */
["v_pool_maps_max_fields"]: {
	__typename: "v_pool_maps_max_fields",
	id?: GraphQLTypes["uuid"] | undefined,
	map_pool_id?: GraphQLTypes["uuid"] | undefined,
	name?: string | undefined,
	type?: string | undefined,
	workshop_map_id?: string | undefined
};
	/** order by max() on columns of table "v_pool_maps" */
["v_pool_maps_max_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	map_pool_id?: GraphQLTypes["order_by"] | undefined,
	name?: GraphQLTypes["order_by"] | undefined,
	type?: GraphQLTypes["order_by"] | undefined,
	workshop_map_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["v_pool_maps_min_fields"]: {
	__typename: "v_pool_maps_min_fields",
	id?: GraphQLTypes["uuid"] | undefined,
	map_pool_id?: GraphQLTypes["uuid"] | undefined,
	name?: string | undefined,
	type?: string | undefined,
	workshop_map_id?: string | undefined
};
	/** order by min() on columns of table "v_pool_maps" */
["v_pool_maps_min_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	map_pool_id?: GraphQLTypes["order_by"] | undefined,
	name?: GraphQLTypes["order_by"] | undefined,
	type?: GraphQLTypes["order_by"] | undefined,
	workshop_map_id?: GraphQLTypes["order_by"] | undefined
};
	/** response of any mutation on the table "v_pool_maps" */
["v_pool_maps_mutation_response"]: {
	__typename: "v_pool_maps_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["v_pool_maps"]>
};
	/** Ordering options when selecting data from "v_pool_maps". */
["v_pool_maps_order_by"]: {
		active_pool?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	map_pool?: GraphQLTypes["map_pools_order_by"] | undefined,
	map_pool_id?: GraphQLTypes["order_by"] | undefined,
	name?: GraphQLTypes["order_by"] | undefined,
	type?: GraphQLTypes["order_by"] | undefined,
	workshop_map_id?: GraphQLTypes["order_by"] | undefined
};
	/** select columns of table "v_pool_maps" */
["v_pool_maps_select_column"]: v_pool_maps_select_column;
	/** select "v_pool_maps_aggregate_bool_exp_bool_and_arguments_columns" columns of table "v_pool_maps" */
["v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_and_arguments_columns"]: v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_and_arguments_columns;
	/** select "v_pool_maps_aggregate_bool_exp_bool_or_arguments_columns" columns of table "v_pool_maps" */
["v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_or_arguments_columns"]: v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_or_arguments_columns;
	/** Streaming cursor of the table "v_pool_maps" */
["v_pool_maps_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["v_pool_maps_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["v_pool_maps_stream_cursor_value_input"]: {
		active_pool?: boolean | undefined,
	id?: GraphQLTypes["uuid"] | undefined,
	map_pool_id?: GraphQLTypes["uuid"] | undefined,
	name?: string | undefined,
	type?: string | undefined,
	workshop_map_id?: string | undefined
}
    }
/** unique or primary key constraints on table "_map_pool" */
export const enum _map_pool_constraint {
	map_pool_pkey = "map_pool_pkey"
}
/** select columns of table "_map_pool" */
export const enum _map_pool_select_column {
	map_id = "map_id",
	map_pool_id = "map_pool_id"
}
/** update columns of table "_map_pool" */
export const enum _map_pool_update_column {
	map_id = "map_id",
	map_pool_id = "map_pool_id"
}
/** ordering argument of a cursor */
export const enum cursor_ordering {
	ASC = "ASC",
	DESC = "DESC"
}
/** unique or primary key constraints on table "e_match_map_status" */
export const enum e_match_map_status_constraint {
	match_map_status_pkey = "match_map_status_pkey"
}
export const enum e_match_map_status_enum {
	Canceled = "Canceled",
	Finished = "Finished",
	Knife = "Knife",
	Live = "Live",
	Overtime = "Overtime",
	Paused = "Paused",
	Scheduled = "Scheduled",
	Warmup = "Warmup"
}
/** select columns of table "e_match_map_status" */
export const enum e_match_map_status_select_column {
	description = "description",
	value = "value"
}
/** update columns of table "e_match_map_status" */
export const enum e_match_map_status_update_column {
	description = "description",
	value = "value"
}
/** unique or primary key constraints on table "e_match_status" */
export const enum e_match_status_constraint {
	e_match_status_pkey = "e_match_status_pkey"
}
export const enum e_match_status_enum {
	Canceled = "Canceled",
	Finished = "Finished",
	Live = "Live",
	PickingPlayers = "PickingPlayers",
	Scheduled = "Scheduled",
	Veto = "Veto"
}
/** select columns of table "e_match_status" */
export const enum e_match_status_select_column {
	description = "description",
	value = "value"
}
/** update columns of table "e_match_status" */
export const enum e_match_status_update_column {
	description = "description",
	value = "value"
}
/** unique or primary key constraints on table "e_match_types" */
export const enum e_match_types_constraint {
	e_match_types_pkey = "e_match_types_pkey"
}
export const enum e_match_types_enum {
	Competitive = "Competitive",
	Scrimmage = "Scrimmage",
	Wingman = "Wingman"
}
/** select columns of table "e_match_types" */
export const enum e_match_types_select_column {
	description = "description",
	value = "value"
}
/** update columns of table "e_match_types" */
export const enum e_match_types_update_column {
	description = "description",
	value = "value"
}
/** unique or primary key constraints on table "e_objective_types" */
export const enum e_objective_types_constraint {
	e_objective__pkey = "e_objective__pkey"
}
export const enum e_objective_types_enum {
	Defused = "Defused",
	Exploded = "Exploded",
	Planted = "Planted"
}
/** select columns of table "e_objective_types" */
export const enum e_objective_types_select_column {
	description = "description",
	value = "value"
}
/** update columns of table "e_objective_types" */
export const enum e_objective_types_update_column {
	description = "description",
	value = "value"
}
/** unique or primary key constraints on table "e_sides" */
export const enum e_sides_constraint {
	e_teams_pkey = "e_teams_pkey"
}
export const enum e_sides_enum {
	CT = "CT",
	None = "None",
	Spectator = "Spectator",
	TERRORIST = "TERRORIST"
}
/** select columns of table "e_sides" */
export const enum e_sides_select_column {
	description = "description",
	value = "value"
}
/** update columns of table "e_sides" */
export const enum e_sides_update_column {
	description = "description",
	value = "value"
}
/** unique or primary key constraints on table "e_team_roles" */
export const enum e_team_roles_constraint {
	e_team_roles_pkey = "e_team_roles_pkey"
}
export const enum e_team_roles_enum {
	Admin = "Admin",
	Invite = "Invite",
	Member = "Member",
	Pending = "Pending"
}
/** select columns of table "e_team_roles" */
export const enum e_team_roles_select_column {
	description = "description",
	value = "value"
}
/** update columns of table "e_team_roles" */
export const enum e_team_roles_update_column {
	description = "description",
	value = "value"
}
/** unique or primary key constraints on table "e_timeout_settings" */
export const enum e_timeout_settings_constraint {
	e_timeout_settings_pkey = "e_timeout_settings_pkey"
}
export const enum e_timeout_settings_enum {
	Admin = "Admin",
	Coach = "Coach",
	CoachAndPlayers = "CoachAndPlayers"
}
/** select columns of table "e_timeout_settings" */
export const enum e_timeout_settings_select_column {
	description = "description",
	value = "value"
}
/** update columns of table "e_timeout_settings" */
export const enum e_timeout_settings_update_column {
	description = "description",
	value = "value"
}
/** unique or primary key constraints on table "e_utility_types" */
export const enum e_utility_types_constraint {
	e_utility_types_pkey = "e_utility_types_pkey"
}
export const enum e_utility_types_enum {
	Decoy = "Decoy",
	Flash = "Flash",
	HighExplosive = "HighExplosive",
	Molotov = "Molotov",
	Smoke = "Smoke"
}
/** select columns of table "e_utility_types" */
export const enum e_utility_types_select_column {
	description = "description",
	value = "value"
}
/** update columns of table "e_utility_types" */
export const enum e_utility_types_update_column {
	description = "description",
	value = "value"
}
/** unique or primary key constraints on table "e_veto_pick_types" */
export const enum e_veto_pick_types_constraint {
	e_veto_pick_type_pkey = "e_veto_pick_type_pkey"
}
export const enum e_veto_pick_types_enum {
	Ban = "Ban",
	Decider = "Decider",
	Pick = "Pick",
	Side = "Side"
}
/** select columns of table "e_veto_pick_types" */
export const enum e_veto_pick_types_select_column {
	description = "description",
	value = "value"
}
/** update columns of table "e_veto_pick_types" */
export const enum e_veto_pick_types_update_column {
	description = "description",
	value = "value"
}
/** unique or primary key constraints on table "map_pools" */
export const enum map_pools_constraint {
	map_pools_label_owner_steam_id_key = "map_pools_label_owner_steam_id_key",
	map_pools_pkey = "map_pools_pkey"
}
/** select columns of table "map_pools" */
export const enum map_pools_select_column {
	enabled = "enabled",
	id = "id",
	label = "label",
	owner_steam_id = "owner_steam_id"
}
/** update columns of table "map_pools" */
export const enum map_pools_update_column {
	enabled = "enabled",
	id = "id",
	label = "label",
	owner_steam_id = "owner_steam_id"
}
/** unique or primary key constraints on table "maps" */
export const enum maps_constraint {
	maps_name_type_key = "maps_name_type_key",
	maps_pkey = "maps_pkey"
}
/** select columns of table "maps" */
export const enum maps_select_column {
	active_pool = "active_pool",
	id = "id",
	name = "name",
	type = "type",
	workshop_map_id = "workshop_map_id"
}
/** select "maps_aggregate_bool_exp_bool_and_arguments_columns" columns of table "maps" */
export const enum maps_select_column_maps_aggregate_bool_exp_bool_and_arguments_columns {
	active_pool = "active_pool"
}
/** select "maps_aggregate_bool_exp_bool_or_arguments_columns" columns of table "maps" */
export const enum maps_select_column_maps_aggregate_bool_exp_bool_or_arguments_columns {
	active_pool = "active_pool"
}
/** update columns of table "maps" */
export const enum maps_update_column {
	active_pool = "active_pool",
	id = "id",
	name = "name",
	type = "type",
	workshop_map_id = "workshop_map_id"
}
/** unique or primary key constraints on table "match_lineup_players" */
export const enum match_lineup_players_constraint {
	match_lineup_players_match_lineup_id_placeholder_name_key = "match_lineup_players_match_lineup_id_placeholder_name_key",
	match_lineup_players_match_lineup_id_steam_id_key = "match_lineup_players_match_lineup_id_steam_id_key",
	match_members_pkey = "match_members_pkey"
}
/** select columns of table "match_lineup_players" */
export const enum match_lineup_players_select_column {
	captain = "captain",
	discord_id = "discord_id",
	id = "id",
	match_lineup_id = "match_lineup_id",
	placeholder_name = "placeholder_name",
	steam_id = "steam_id"
}
/** select "match_lineup_players_aggregate_bool_exp_bool_and_arguments_columns" columns of table "match_lineup_players" */
export const enum match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_and_arguments_columns {
	captain = "captain"
}
/** select "match_lineup_players_aggregate_bool_exp_bool_or_arguments_columns" columns of table "match_lineup_players" */
export const enum match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_or_arguments_columns {
	captain = "captain"
}
/** update columns of table "match_lineup_players" */
export const enum match_lineup_players_update_column {
	captain = "captain",
	discord_id = "discord_id",
	id = "id",
	match_lineup_id = "match_lineup_id",
	placeholder_name = "placeholder_name",
	steam_id = "steam_id"
}
/** unique or primary key constraints on table "match_lineups" */
export const enum match_lineups_constraint {
	match_teams_pkey = "match_teams_pkey"
}
/** select columns of table "match_lineups" */
export const enum match_lineups_select_column {
	coach_steam_id = "coach_steam_id",
	id = "id",
	match_id = "match_id",
	team_id = "team_id"
}
/** update columns of table "match_lineups" */
export const enum match_lineups_update_column {
	coach_steam_id = "coach_steam_id",
	id = "id",
	match_id = "match_id",
	team_id = "team_id"
}
/** unique or primary key constraints on table "match_map_demos" */
export const enum match_map_demos_constraint {
	match_demos_pkey = "match_demos_pkey"
}
/** select columns of table "match_map_demos" */
export const enum match_map_demos_select_column {
	file = "file",
	id = "id",
	match_id = "match_id",
	match_map_id = "match_map_id",
	size = "size"
}
/** update columns of table "match_map_demos" */
export const enum match_map_demos_update_column {
	file = "file",
	id = "id",
	match_id = "match_id",
	match_map_id = "match_map_id",
	size = "size"
}
/** unique or primary key constraints on table "match_map_rounds" */
export const enum match_map_rounds_constraint {
	match_rounds__id_key = "match_rounds__id_key",
	match_rounds_match_id_round_key = "match_rounds_match_id_round_key",
	match_rounds_pkey = "match_rounds_pkey"
}
/** select columns of table "match_map_rounds" */
export const enum match_map_rounds_select_column {
	backup_file = "backup_file",
	id = "id",
	lineup_1_money = "lineup_1_money",
	lineup_1_score = "lineup_1_score",
	lineup_1_timeouts_available = "lineup_1_timeouts_available",
	lineup_2_money = "lineup_2_money",
	lineup_2_score = "lineup_2_score",
	lineup_2_timeouts_available = "lineup_2_timeouts_available",
	match_map_id = "match_map_id",
	round = "round",
	time = "time"
}
/** update columns of table "match_map_rounds" */
export const enum match_map_rounds_update_column {
	backup_file = "backup_file",
	id = "id",
	lineup_1_money = "lineup_1_money",
	lineup_1_score = "lineup_1_score",
	lineup_1_timeouts_available = "lineup_1_timeouts_available",
	lineup_2_money = "lineup_2_money",
	lineup_2_score = "lineup_2_score",
	lineup_2_timeouts_available = "lineup_2_timeouts_available",
	match_map_id = "match_map_id",
	round = "round",
	time = "time"
}
/** unique or primary key constraints on table "match_maps" */
export const enum match_maps_constraint {
	match_maps_match_id_order_key = "match_maps_match_id_order_key",
	match_maps_pkey = "match_maps_pkey"
}
/** select columns of table "match_maps" */
export const enum match_maps_select_column {
	created_at = "created_at",
	id = "id",
	lineup_1_side = "lineup_1_side",
	lineup_1_timeouts_available = "lineup_1_timeouts_available",
	lineup_2_side = "lineup_2_side",
	lineup_2_timeouts_available = "lineup_2_timeouts_available",
	map_id = "map_id",
	match_id = "match_id",
	order = "order",
	status = "status"
}
/** update columns of table "match_maps" */
export const enum match_maps_update_column {
	created_at = "created_at",
	id = "id",
	lineup_1_side = "lineup_1_side",
	lineup_1_timeouts_available = "lineup_1_timeouts_available",
	lineup_2_side = "lineup_2_side",
	lineup_2_timeouts_available = "lineup_2_timeouts_available",
	map_id = "map_id",
	match_id = "match_id",
	order = "order",
	status = "status"
}
/** unique or primary key constraints on table "match_veto_picks" */
export const enum match_veto_picks_constraint {
	match_veto_picks_pkey = "match_veto_picks_pkey"
}
/** select columns of table "match_veto_picks" */
export const enum match_veto_picks_select_column {
	created_at = "created_at",
	id = "id",
	map_id = "map_id",
	match_id = "match_id",
	match_lineup_id = "match_lineup_id",
	side = "side",
	type = "type"
}
/** update columns of table "match_veto_picks" */
export const enum match_veto_picks_update_column {
	created_at = "created_at",
	id = "id",
	map_id = "map_id",
	match_id = "match_id",
	match_lineup_id = "match_lineup_id",
	side = "side",
	type = "type"
}
/** unique or primary key constraints on table "matches" */
export const enum matches_constraint {
	matches_pkey = "matches_pkey"
}
/** select columns of table "matches" */
export const enum matches_select_column {
	best_of = "best_of",
	coaches = "coaches",
	created_at = "created_at",
	id = "id",
	knife_round = "knife_round",
	label = "label",
	map_veto = "map_veto",
	match_pool_id = "match_pool_id",
	mr = "mr",
	number_of_substitutes = "number_of_substitutes",
	organizer_steam_id = "organizer_steam_id",
	overtime = "overtime",
	password = "password",
	scheduled_at = "scheduled_at",
	server_id = "server_id",
	status = "status",
	tech_timeout_setting = "tech_timeout_setting",
	timeout_setting = "timeout_setting",
	type = "type",
	updated_at = "updated_at"
}
/** select "matches_aggregate_bool_exp_bool_and_arguments_columns" columns of table "matches" */
export const enum matches_select_column_matches_aggregate_bool_exp_bool_and_arguments_columns {
	coaches = "coaches",
	knife_round = "knife_round",
	map_veto = "map_veto",
	overtime = "overtime"
}
/** select "matches_aggregate_bool_exp_bool_or_arguments_columns" columns of table "matches" */
export const enum matches_select_column_matches_aggregate_bool_exp_bool_or_arguments_columns {
	coaches = "coaches",
	knife_round = "knife_round",
	map_veto = "map_veto",
	overtime = "overtime"
}
/** update columns of table "matches" */
export const enum matches_update_column {
	best_of = "best_of",
	coaches = "coaches",
	created_at = "created_at",
	id = "id",
	knife_round = "knife_round",
	label = "label",
	map_veto = "map_veto",
	match_pool_id = "match_pool_id",
	mr = "mr",
	number_of_substitutes = "number_of_substitutes",
	organizer_steam_id = "organizer_steam_id",
	overtime = "overtime",
	password = "password",
	scheduled_at = "scheduled_at",
	server_id = "server_id",
	status = "status",
	tech_timeout_setting = "tech_timeout_setting",
	timeout_setting = "timeout_setting",
	type = "type",
	updated_at = "updated_at"
}
/** column ordering options */
export const enum order_by {
	asc = "asc",
	asc_nulls_first = "asc_nulls_first",
	asc_nulls_last = "asc_nulls_last",
	desc = "desc",
	desc_nulls_first = "desc_nulls_first",
	desc_nulls_last = "desc_nulls_last"
}
/** unique or primary key constraints on table "player_assists" */
export const enum player_assists_constraint {
	player_assists_pkey = "player_assists_pkey"
}
/** select columns of table "player_assists" */
export const enum player_assists_select_column {
	attacked_steam_id = "attacked_steam_id",
	attacked_team = "attacked_team",
	attacker_steam_id = "attacker_steam_id",
	attacker_team = "attacker_team",
	flash = "flash",
	id = "id",
	match_id = "match_id",
	match_map_id = "match_map_id",
	round = "round",
	time = "time"
}
/** select "player_assists_aggregate_bool_exp_bool_and_arguments_columns" columns of table "player_assists" */
export const enum player_assists_select_column_player_assists_aggregate_bool_exp_bool_and_arguments_columns {
	flash = "flash"
}
/** select "player_assists_aggregate_bool_exp_bool_or_arguments_columns" columns of table "player_assists" */
export const enum player_assists_select_column_player_assists_aggregate_bool_exp_bool_or_arguments_columns {
	flash = "flash"
}
/** update columns of table "player_assists" */
export const enum player_assists_update_column {
	attacked_steam_id = "attacked_steam_id",
	attacked_team = "attacked_team",
	attacker_steam_id = "attacker_steam_id",
	attacker_team = "attacker_team",
	flash = "flash",
	id = "id",
	match_id = "match_id",
	match_map_id = "match_map_id",
	round = "round",
	time = "time"
}
/** unique or primary key constraints on table "player_damages" */
export const enum player_damages_constraint {
	player_damages_pkey = "player_damages_pkey"
}
/** select columns of table "player_damages" */
export const enum player_damages_select_column {
	armor = "armor",
	attacked_location = "attacked_location",
	attacked_location_coordinates = "attacked_location_coordinates",
	attacked_steam_id = "attacked_steam_id",
	attacked_team = "attacked_team",
	attacker_location = "attacker_location",
	attacker_location_coordinates = "attacker_location_coordinates",
	attacker_steam_id = "attacker_steam_id",
	attacker_team = "attacker_team",
	damage = "damage",
	damage_armor = "damage_armor",
	health = "health",
	hitgroup = "hitgroup",
	id = "id",
	match_id = "match_id",
	match_map_id = "match_map_id",
	round = "round",
	time = "time",
	with = "with"
}
/** update columns of table "player_damages" */
export const enum player_damages_update_column {
	armor = "armor",
	attacked_location = "attacked_location",
	attacked_location_coordinates = "attacked_location_coordinates",
	attacked_steam_id = "attacked_steam_id",
	attacked_team = "attacked_team",
	attacker_location = "attacker_location",
	attacker_location_coordinates = "attacker_location_coordinates",
	attacker_steam_id = "attacker_steam_id",
	attacker_team = "attacker_team",
	damage = "damage",
	damage_armor = "damage_armor",
	health = "health",
	hitgroup = "hitgroup",
	id = "id",
	match_id = "match_id",
	match_map_id = "match_map_id",
	round = "round",
	time = "time",
	with = "with"
}
/** unique or primary key constraints on table "player_flashes" */
export const enum player_flashes_constraint {
	player_flashes_pkey = "player_flashes_pkey"
}
/** select columns of table "player_flashes" */
export const enum player_flashes_select_column {
	attacked_steam_id = "attacked_steam_id",
	attacker_steam_id = "attacker_steam_id",
	duration = "duration",
	id = "id",
	match_id = "match_id",
	match_map_id = "match_map_id",
	round = "round",
	team_flash = "team_flash",
	time = "time"
}
/** select "player_flashes_aggregate_bool_exp_bool_and_arguments_columns" columns of table "player_flashes" */
export const enum player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_and_arguments_columns {
	team_flash = "team_flash"
}
/** select "player_flashes_aggregate_bool_exp_bool_or_arguments_columns" columns of table "player_flashes" */
export const enum player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_or_arguments_columns {
	team_flash = "team_flash"
}
/** update columns of table "player_flashes" */
export const enum player_flashes_update_column {
	attacked_steam_id = "attacked_steam_id",
	attacker_steam_id = "attacker_steam_id",
	duration = "duration",
	id = "id",
	match_id = "match_id",
	match_map_id = "match_map_id",
	round = "round",
	team_flash = "team_flash",
	time = "time"
}
/** unique or primary key constraints on table "player_kills" */
export const enum player_kills_constraint {
	player_kills_pkey = "player_kills_pkey"
}
/** select columns of table "player_kills" */
export const enum player_kills_select_column {
	assisted = "assisted",
	attacked_location = "attacked_location",
	attacked_location_coordinates = "attacked_location_coordinates",
	attacked_steam_id = "attacked_steam_id",
	attacked_team = "attacked_team",
	attacker_location = "attacker_location",
	attacker_location_coordinates = "attacker_location_coordinates",
	attacker_steam_id = "attacker_steam_id",
	attacker_team = "attacker_team",
	blinded = "blinded",
	headshot = "headshot",
	hitgroup = "hitgroup",
	id = "id",
	in_air = "in_air",
	match_id = "match_id",
	match_map_id = "match_map_id",
	no_scope = "no_scope",
	round = "round",
	thru_smoke = "thru_smoke",
	thru_wall = "thru_wall",
	time = "time",
	with = "with"
}
/** select "player_kills_aggregate_bool_exp_bool_and_arguments_columns" columns of table "player_kills" */
export const enum player_kills_select_column_player_kills_aggregate_bool_exp_bool_and_arguments_columns {
	assisted = "assisted",
	blinded = "blinded",
	headshot = "headshot",
	in_air = "in_air",
	no_scope = "no_scope",
	thru_smoke = "thru_smoke",
	thru_wall = "thru_wall"
}
/** select "player_kills_aggregate_bool_exp_bool_or_arguments_columns" columns of table "player_kills" */
export const enum player_kills_select_column_player_kills_aggregate_bool_exp_bool_or_arguments_columns {
	assisted = "assisted",
	blinded = "blinded",
	headshot = "headshot",
	in_air = "in_air",
	no_scope = "no_scope",
	thru_smoke = "thru_smoke",
	thru_wall = "thru_wall"
}
/** update columns of table "player_kills" */
export const enum player_kills_update_column {
	assisted = "assisted",
	attacked_location = "attacked_location",
	attacked_location_coordinates = "attacked_location_coordinates",
	attacked_steam_id = "attacked_steam_id",
	attacked_team = "attacked_team",
	attacker_location = "attacker_location",
	attacker_location_coordinates = "attacker_location_coordinates",
	attacker_steam_id = "attacker_steam_id",
	attacker_team = "attacker_team",
	blinded = "blinded",
	headshot = "headshot",
	hitgroup = "hitgroup",
	id = "id",
	in_air = "in_air",
	match_id = "match_id",
	match_map_id = "match_map_id",
	no_scope = "no_scope",
	round = "round",
	thru_smoke = "thru_smoke",
	thru_wall = "thru_wall",
	time = "time",
	with = "with"
}
/** unique or primary key constraints on table "player_objectives" */
export const enum player_objectives_constraint {
	player_objectives_pkey = "player_objectives_pkey"
}
/** select columns of table "player_objectives" */
export const enum player_objectives_select_column {
	id = "id",
	match_id = "match_id",
	match_map_id = "match_map_id",
	player_steam_id = "player_steam_id",
	round = "round",
	time = "time",
	type = "type"
}
/** update columns of table "player_objectives" */
export const enum player_objectives_update_column {
	id = "id",
	match_id = "match_id",
	match_map_id = "match_map_id",
	player_steam_id = "player_steam_id",
	round = "round",
	time = "time",
	type = "type"
}
/** unique or primary key constraints on table "player_unused_utility" */
export const enum player_unused_utility_constraint {
	player_unused_utility_pkey = "player_unused_utility_pkey"
}
/** select columns of table "player_unused_utility" */
export const enum player_unused_utility_select_column {
	id = "id",
	match_id = "match_id",
	match_map_id = "match_map_id",
	player_steam_id = "player_steam_id",
	round = "round",
	unused = "unused"
}
/** update columns of table "player_unused_utility" */
export const enum player_unused_utility_update_column {
	id = "id",
	match_id = "match_id",
	match_map_id = "match_map_id",
	player_steam_id = "player_steam_id",
	round = "round",
	unused = "unused"
}
/** unique or primary key constraints on table "player_utility" */
export const enum player_utility_constraint {
	player_utility_pkey = "player_utility_pkey"
}
/** select columns of table "player_utility" */
export const enum player_utility_select_column {
	attacker_location_coordinates = "attacker_location_coordinates",
	attacker_steam_id = "attacker_steam_id",
	id = "id",
	match_id = "match_id",
	match_map_id = "match_map_id",
	round = "round",
	time = "time",
	type = "type"
}
/** update columns of table "player_utility" */
export const enum player_utility_update_column {
	attacker_location_coordinates = "attacker_location_coordinates",
	attacker_steam_id = "attacker_steam_id",
	id = "id",
	match_id = "match_id",
	match_map_id = "match_map_id",
	round = "round",
	time = "time",
	type = "type"
}
/** unique or primary key constraints on table "players" */
export const enum players_constraint {
	players_discord_id_key = "players_discord_id_key",
	players_pkey = "players_pkey",
	players_steam_id_key = "players_steam_id_key"
}
/** select columns of table "players" */
export const enum players_select_column {
	avatar_url = "avatar_url",
	created_at = "created_at",
	discord_id = "discord_id",
	name = "name",
	profile_url = "profile_url",
	steam_id = "steam_id",
	updated_at = "updated_at"
}
/** update columns of table "players" */
export const enum players_update_column {
	avatar_url = "avatar_url",
	created_at = "created_at",
	discord_id = "discord_id",
	name = "name",
	profile_url = "profile_url",
	steam_id = "steam_id",
	updated_at = "updated_at"
}
/** unique or primary key constraints on table "servers" */
export const enum servers_constraint {
	servers_pkey = "servers_pkey"
}
/** select columns of table "servers" */
export const enum servers_select_column {
	api_password = "api_password",
	enabled = "enabled",
	host = "host",
	id = "id",
	label = "label",
	on_demand = "on_demand",
	player_steam_id = "player_steam_id",
	port = "port",
	rcon_password = "rcon_password",
	tv_port = "tv_port"
}
/** update columns of table "servers" */
export const enum servers_update_column {
	api_password = "api_password",
	enabled = "enabled",
	host = "host",
	id = "id",
	label = "label",
	on_demand = "on_demand",
	player_steam_id = "player_steam_id",
	port = "port",
	rcon_password = "rcon_password",
	tv_port = "tv_port"
}
/** unique or primary key constraints on table "team_invites" */
export const enum team_invites_constraint {
	team_invites_id_key = "team_invites_id_key",
	team_invites_pkey = "team_invites_pkey"
}
/** select columns of table "team_invites" */
export const enum team_invites_select_column {
	created_at = "created_at",
	id = "id",
	invited_by_player_steam_id = "invited_by_player_steam_id",
	steam_id = "steam_id",
	team_id = "team_id"
}
/** update columns of table "team_invites" */
export const enum team_invites_update_column {
	created_at = "created_at",
	id = "id",
	invited_by_player_steam_id = "invited_by_player_steam_id",
	steam_id = "steam_id",
	team_id = "team_id"
}
/** unique or primary key constraints on table "team_roster" */
export const enum team_roster_constraint {
	team_members_pkey = "team_members_pkey"
}
/** select columns of table "team_roster" */
export const enum team_roster_select_column {
	player_steam_id = "player_steam_id",
	role = "role",
	team_id = "team_id"
}
/** update columns of table "team_roster" */
export const enum team_roster_update_column {
	player_steam_id = "player_steam_id",
	role = "role",
	team_id = "team_id"
}
/** unique or primary key constraints on table "teams" */
export const enum teams_constraint {
	teams_name_key = "teams_name_key",
	teams_pkey = "teams_pkey"
}
/** select columns of table "teams" */
export const enum teams_select_column {
	id = "id",
	name = "name",
	owner_steam_id = "owner_steam_id",
	short_name = "short_name"
}
/** update columns of table "teams" */
export const enum teams_update_column {
	id = "id",
	name = "name",
	owner_steam_id = "owner_steam_id",
	short_name = "short_name"
}
/** unique or primary key constraints on table "tournament_organizers" */
export const enum tournament_organizers_constraint {
	tournament_organizers_pkey = "tournament_organizers_pkey"
}
/** select columns of table "tournament_organizers" */
export const enum tournament_organizers_select_column {
	role = "role",
	steam_id = "steam_id",
	tournament_id = "tournament_id"
}
/** update columns of table "tournament_organizers" */
export const enum tournament_organizers_update_column {
	role = "role",
	steam_id = "steam_id",
	tournament_id = "tournament_id"
}
/** unique or primary key constraints on table "tournament_roster" */
export const enum tournament_roster_constraint {
	tournament_roster_pkey = "tournament_roster_pkey"
}
/** select columns of table "tournament_roster" */
export const enum tournament_roster_select_column {
	id = "id",
	player_steam_id = "player_steam_id",
	team_id = "team_id",
	tournament_id = "tournament_id",
	type = "type"
}
/** update columns of table "tournament_roster" */
export const enum tournament_roster_update_column {
	id = "id",
	player_steam_id = "player_steam_id",
	team_id = "team_id",
	tournament_id = "tournament_id",
	type = "type"
}
/** unique or primary key constraints on table "tournament_servers" */
export const enum tournament_servers_constraint {
	tournament_servers_pkey = "tournament_servers_pkey"
}
/** select columns of table "tournament_servers" */
export const enum tournament_servers_select_column {
	id = "id",
	server_id = "server_id",
	tournament_id = "tournament_id"
}
/** update columns of table "tournament_servers" */
export const enum tournament_servers_update_column {
	id = "id",
	server_id = "server_id",
	tournament_id = "tournament_id"
}
/** unique or primary key constraints on table "tournament_stages" */
export const enum tournament_stages_constraint {
	tournament_stages_pkey = "tournament_stages_pkey"
}
/** select columns of table "tournament_stages" */
export const enum tournament_stages_select_column {
	id = "id",
	order = "order",
	settings = "settings",
	tournament_id = "tournament_id",
	type = "type"
}
/** update columns of table "tournament_stages" */
export const enum tournament_stages_update_column {
	id = "id",
	order = "order",
	settings = "settings",
	tournament_id = "tournament_id",
	type = "type"
}
/** unique or primary key constraints on table "tournament_teams" */
export const enum tournament_teams_constraint {
	tournament_teams_pkey = "tournament_teams_pkey"
}
/** select columns of table "tournament_teams" */
export const enum tournament_teams_select_column {
	id = "id",
	team_id = "team_id",
	tournament_id = "tournament_id"
}
/** update columns of table "tournament_teams" */
export const enum tournament_teams_update_column {
	id = "id",
	team_id = "team_id",
	tournament_id = "tournament_id"
}
/** unique or primary key constraints on table "tournaments" */
export const enum tournaments_constraint {
	tournaments_pkey = "tournaments_pkey"
}
/** select columns of table "tournaments" */
export const enum tournaments_select_column {
	description = "description",
	id = "id",
	name = "name",
	organizer_steam_id = "organizer_steam_id",
	start = "start",
	status = "status",
	type = "type"
}
/** update columns of table "tournaments" */
export const enum tournaments_update_column {
	description = "description",
	id = "id",
	name = "name",
	organizer_steam_id = "organizer_steam_id",
	start = "start",
	status = "status",
	type = "type"
}
/** select columns of table "v_match_captains" */
export const enum v_match_captains_select_column {
	captain = "captain",
	discord_id = "discord_id",
	id = "id",
	match_lineup_id = "match_lineup_id",
	placeholder_name = "placeholder_name",
	steam_id = "steam_id"
}
/** select columns of table "v_player_arch_nemesis" */
export const enum v_player_arch_nemesis_select_column {
	attacker_id = "attacker_id",
	kill_count = "kill_count",
	victim_id = "victim_id"
}
/** select columns of table "v_player_damage" */
export const enum v_player_damage_select_column {
	avg_damage_per_round = "avg_damage_per_round",
	player_steam_id = "player_steam_id",
	total_damage = "total_damage",
	total_rounds = "total_rounds"
}
/** select columns of table "v_player_killed_player_counts" */
export const enum v_player_killed_player_counts_select_column {
	kill_count = "kill_count",
	player_id = "player_id",
	victim_id = "victim_id"
}
/** select columns of table "v_player_match_kills" */
export const enum v_player_match_kills_select_column {
	avg_kills_per_game = "avg_kills_per_game",
	kills = "kills",
	player_steam_id = "player_steam_id",
	total_matches = "total_matches"
}
/** select columns of table "v_player_multi_kills" */
export const enum v_player_multi_kills_select_column {
	attacker_steam_id = "attacker_steam_id",
	kills = "kills",
	match_id = "match_id",
	round = "round"
}
/** select columns of table "v_player_opening_duels" */
export const enum v_player_opening_duels_select_column {
	attempts = "attempts",
	match_id = "match_id",
	match_map_id = "match_map_id",
	steam_id = "steam_id",
	successes = "successes"
}
/** select columns of table "v_pool_maps" */
export const enum v_pool_maps_select_column {
	active_pool = "active_pool",
	id = "id",
	map_pool_id = "map_pool_id",
	name = "name",
	type = "type",
	workshop_map_id = "workshop_map_id"
}
/** select "v_pool_maps_aggregate_bool_exp_bool_and_arguments_columns" columns of table "v_pool_maps" */
export const enum v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_and_arguments_columns {
	active_pool = "active_pool"
}
/** select "v_pool_maps_aggregate_bool_exp_bool_or_arguments_columns" columns of table "v_pool_maps" */
export const enum v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_or_arguments_columns {
	active_pool = "active_pool"
}

type ZEUS_VARIABLES = {
	["Boolean_comparison_exp"]: ValueTypes["Boolean_comparison_exp"];
	["Int_comparison_exp"]: ValueTypes["Int_comparison_exp"];
	["String_comparison_exp"]: ValueTypes["String_comparison_exp"];
	["_map_pool_bool_exp"]: ValueTypes["_map_pool_bool_exp"];
	["_map_pool_constraint"]: ValueTypes["_map_pool_constraint"];
	["_map_pool_insert_input"]: ValueTypes["_map_pool_insert_input"];
	["_map_pool_on_conflict"]: ValueTypes["_map_pool_on_conflict"];
	["_map_pool_order_by"]: ValueTypes["_map_pool_order_by"];
	["_map_pool_pk_columns_input"]: ValueTypes["_map_pool_pk_columns_input"];
	["_map_pool_select_column"]: ValueTypes["_map_pool_select_column"];
	["_map_pool_set_input"]: ValueTypes["_map_pool_set_input"];
	["_map_pool_stream_cursor_input"]: ValueTypes["_map_pool_stream_cursor_input"];
	["_map_pool_stream_cursor_value_input"]: ValueTypes["_map_pool_stream_cursor_value_input"];
	["_map_pool_update_column"]: ValueTypes["_map_pool_update_column"];
	["_map_pool_updates"]: ValueTypes["_map_pool_updates"];
	["bigint"]: ValueTypes["bigint"];
	["bigint_comparison_exp"]: ValueTypes["bigint_comparison_exp"];
	["bytea"]: ValueTypes["bytea"];
	["bytea_comparison_exp"]: ValueTypes["bytea_comparison_exp"];
	["cursor_ordering"]: ValueTypes["cursor_ordering"];
	["date"]: ValueTypes["date"];
	["date_comparison_exp"]: ValueTypes["date_comparison_exp"];
	["e_match_map_status_bool_exp"]: ValueTypes["e_match_map_status_bool_exp"];
	["e_match_map_status_constraint"]: ValueTypes["e_match_map_status_constraint"];
	["e_match_map_status_enum"]: ValueTypes["e_match_map_status_enum"];
	["e_match_map_status_enum_comparison_exp"]: ValueTypes["e_match_map_status_enum_comparison_exp"];
	["e_match_map_status_insert_input"]: ValueTypes["e_match_map_status_insert_input"];
	["e_match_map_status_obj_rel_insert_input"]: ValueTypes["e_match_map_status_obj_rel_insert_input"];
	["e_match_map_status_on_conflict"]: ValueTypes["e_match_map_status_on_conflict"];
	["e_match_map_status_order_by"]: ValueTypes["e_match_map_status_order_by"];
	["e_match_map_status_pk_columns_input"]: ValueTypes["e_match_map_status_pk_columns_input"];
	["e_match_map_status_select_column"]: ValueTypes["e_match_map_status_select_column"];
	["e_match_map_status_set_input"]: ValueTypes["e_match_map_status_set_input"];
	["e_match_map_status_stream_cursor_input"]: ValueTypes["e_match_map_status_stream_cursor_input"];
	["e_match_map_status_stream_cursor_value_input"]: ValueTypes["e_match_map_status_stream_cursor_value_input"];
	["e_match_map_status_update_column"]: ValueTypes["e_match_map_status_update_column"];
	["e_match_map_status_updates"]: ValueTypes["e_match_map_status_updates"];
	["e_match_status_bool_exp"]: ValueTypes["e_match_status_bool_exp"];
	["e_match_status_constraint"]: ValueTypes["e_match_status_constraint"];
	["e_match_status_enum"]: ValueTypes["e_match_status_enum"];
	["e_match_status_enum_comparison_exp"]: ValueTypes["e_match_status_enum_comparison_exp"];
	["e_match_status_insert_input"]: ValueTypes["e_match_status_insert_input"];
	["e_match_status_obj_rel_insert_input"]: ValueTypes["e_match_status_obj_rel_insert_input"];
	["e_match_status_on_conflict"]: ValueTypes["e_match_status_on_conflict"];
	["e_match_status_order_by"]: ValueTypes["e_match_status_order_by"];
	["e_match_status_pk_columns_input"]: ValueTypes["e_match_status_pk_columns_input"];
	["e_match_status_select_column"]: ValueTypes["e_match_status_select_column"];
	["e_match_status_set_input"]: ValueTypes["e_match_status_set_input"];
	["e_match_status_stream_cursor_input"]: ValueTypes["e_match_status_stream_cursor_input"];
	["e_match_status_stream_cursor_value_input"]: ValueTypes["e_match_status_stream_cursor_value_input"];
	["e_match_status_update_column"]: ValueTypes["e_match_status_update_column"];
	["e_match_status_updates"]: ValueTypes["e_match_status_updates"];
	["e_match_types_bool_exp"]: ValueTypes["e_match_types_bool_exp"];
	["e_match_types_constraint"]: ValueTypes["e_match_types_constraint"];
	["e_match_types_enum"]: ValueTypes["e_match_types_enum"];
	["e_match_types_enum_comparison_exp"]: ValueTypes["e_match_types_enum_comparison_exp"];
	["e_match_types_insert_input"]: ValueTypes["e_match_types_insert_input"];
	["e_match_types_obj_rel_insert_input"]: ValueTypes["e_match_types_obj_rel_insert_input"];
	["e_match_types_on_conflict"]: ValueTypes["e_match_types_on_conflict"];
	["e_match_types_order_by"]: ValueTypes["e_match_types_order_by"];
	["e_match_types_pk_columns_input"]: ValueTypes["e_match_types_pk_columns_input"];
	["e_match_types_select_column"]: ValueTypes["e_match_types_select_column"];
	["e_match_types_set_input"]: ValueTypes["e_match_types_set_input"];
	["e_match_types_stream_cursor_input"]: ValueTypes["e_match_types_stream_cursor_input"];
	["e_match_types_stream_cursor_value_input"]: ValueTypes["e_match_types_stream_cursor_value_input"];
	["e_match_types_update_column"]: ValueTypes["e_match_types_update_column"];
	["e_match_types_updates"]: ValueTypes["e_match_types_updates"];
	["e_objective_types_bool_exp"]: ValueTypes["e_objective_types_bool_exp"];
	["e_objective_types_constraint"]: ValueTypes["e_objective_types_constraint"];
	["e_objective_types_enum"]: ValueTypes["e_objective_types_enum"];
	["e_objective_types_enum_comparison_exp"]: ValueTypes["e_objective_types_enum_comparison_exp"];
	["e_objective_types_insert_input"]: ValueTypes["e_objective_types_insert_input"];
	["e_objective_types_on_conflict"]: ValueTypes["e_objective_types_on_conflict"];
	["e_objective_types_order_by"]: ValueTypes["e_objective_types_order_by"];
	["e_objective_types_pk_columns_input"]: ValueTypes["e_objective_types_pk_columns_input"];
	["e_objective_types_select_column"]: ValueTypes["e_objective_types_select_column"];
	["e_objective_types_set_input"]: ValueTypes["e_objective_types_set_input"];
	["e_objective_types_stream_cursor_input"]: ValueTypes["e_objective_types_stream_cursor_input"];
	["e_objective_types_stream_cursor_value_input"]: ValueTypes["e_objective_types_stream_cursor_value_input"];
	["e_objective_types_update_column"]: ValueTypes["e_objective_types_update_column"];
	["e_objective_types_updates"]: ValueTypes["e_objective_types_updates"];
	["e_sides_bool_exp"]: ValueTypes["e_sides_bool_exp"];
	["e_sides_constraint"]: ValueTypes["e_sides_constraint"];
	["e_sides_enum"]: ValueTypes["e_sides_enum"];
	["e_sides_enum_comparison_exp"]: ValueTypes["e_sides_enum_comparison_exp"];
	["e_sides_insert_input"]: ValueTypes["e_sides_insert_input"];
	["e_sides_on_conflict"]: ValueTypes["e_sides_on_conflict"];
	["e_sides_order_by"]: ValueTypes["e_sides_order_by"];
	["e_sides_pk_columns_input"]: ValueTypes["e_sides_pk_columns_input"];
	["e_sides_select_column"]: ValueTypes["e_sides_select_column"];
	["e_sides_set_input"]: ValueTypes["e_sides_set_input"];
	["e_sides_stream_cursor_input"]: ValueTypes["e_sides_stream_cursor_input"];
	["e_sides_stream_cursor_value_input"]: ValueTypes["e_sides_stream_cursor_value_input"];
	["e_sides_update_column"]: ValueTypes["e_sides_update_column"];
	["e_sides_updates"]: ValueTypes["e_sides_updates"];
	["e_team_roles_bool_exp"]: ValueTypes["e_team_roles_bool_exp"];
	["e_team_roles_constraint"]: ValueTypes["e_team_roles_constraint"];
	["e_team_roles_enum"]: ValueTypes["e_team_roles_enum"];
	["e_team_roles_enum_comparison_exp"]: ValueTypes["e_team_roles_enum_comparison_exp"];
	["e_team_roles_insert_input"]: ValueTypes["e_team_roles_insert_input"];
	["e_team_roles_on_conflict"]: ValueTypes["e_team_roles_on_conflict"];
	["e_team_roles_order_by"]: ValueTypes["e_team_roles_order_by"];
	["e_team_roles_pk_columns_input"]: ValueTypes["e_team_roles_pk_columns_input"];
	["e_team_roles_select_column"]: ValueTypes["e_team_roles_select_column"];
	["e_team_roles_set_input"]: ValueTypes["e_team_roles_set_input"];
	["e_team_roles_stream_cursor_input"]: ValueTypes["e_team_roles_stream_cursor_input"];
	["e_team_roles_stream_cursor_value_input"]: ValueTypes["e_team_roles_stream_cursor_value_input"];
	["e_team_roles_update_column"]: ValueTypes["e_team_roles_update_column"];
	["e_team_roles_updates"]: ValueTypes["e_team_roles_updates"];
	["e_timeout_settings_bool_exp"]: ValueTypes["e_timeout_settings_bool_exp"];
	["e_timeout_settings_constraint"]: ValueTypes["e_timeout_settings_constraint"];
	["e_timeout_settings_enum"]: ValueTypes["e_timeout_settings_enum"];
	["e_timeout_settings_enum_comparison_exp"]: ValueTypes["e_timeout_settings_enum_comparison_exp"];
	["e_timeout_settings_insert_input"]: ValueTypes["e_timeout_settings_insert_input"];
	["e_timeout_settings_on_conflict"]: ValueTypes["e_timeout_settings_on_conflict"];
	["e_timeout_settings_order_by"]: ValueTypes["e_timeout_settings_order_by"];
	["e_timeout_settings_pk_columns_input"]: ValueTypes["e_timeout_settings_pk_columns_input"];
	["e_timeout_settings_select_column"]: ValueTypes["e_timeout_settings_select_column"];
	["e_timeout_settings_set_input"]: ValueTypes["e_timeout_settings_set_input"];
	["e_timeout_settings_stream_cursor_input"]: ValueTypes["e_timeout_settings_stream_cursor_input"];
	["e_timeout_settings_stream_cursor_value_input"]: ValueTypes["e_timeout_settings_stream_cursor_value_input"];
	["e_timeout_settings_update_column"]: ValueTypes["e_timeout_settings_update_column"];
	["e_timeout_settings_updates"]: ValueTypes["e_timeout_settings_updates"];
	["e_utility_types_bool_exp"]: ValueTypes["e_utility_types_bool_exp"];
	["e_utility_types_constraint"]: ValueTypes["e_utility_types_constraint"];
	["e_utility_types_enum"]: ValueTypes["e_utility_types_enum"];
	["e_utility_types_enum_comparison_exp"]: ValueTypes["e_utility_types_enum_comparison_exp"];
	["e_utility_types_insert_input"]: ValueTypes["e_utility_types_insert_input"];
	["e_utility_types_on_conflict"]: ValueTypes["e_utility_types_on_conflict"];
	["e_utility_types_order_by"]: ValueTypes["e_utility_types_order_by"];
	["e_utility_types_pk_columns_input"]: ValueTypes["e_utility_types_pk_columns_input"];
	["e_utility_types_select_column"]: ValueTypes["e_utility_types_select_column"];
	["e_utility_types_set_input"]: ValueTypes["e_utility_types_set_input"];
	["e_utility_types_stream_cursor_input"]: ValueTypes["e_utility_types_stream_cursor_input"];
	["e_utility_types_stream_cursor_value_input"]: ValueTypes["e_utility_types_stream_cursor_value_input"];
	["e_utility_types_update_column"]: ValueTypes["e_utility_types_update_column"];
	["e_utility_types_updates"]: ValueTypes["e_utility_types_updates"];
	["e_veto_pick_types_bool_exp"]: ValueTypes["e_veto_pick_types_bool_exp"];
	["e_veto_pick_types_constraint"]: ValueTypes["e_veto_pick_types_constraint"];
	["e_veto_pick_types_enum"]: ValueTypes["e_veto_pick_types_enum"];
	["e_veto_pick_types_enum_comparison_exp"]: ValueTypes["e_veto_pick_types_enum_comparison_exp"];
	["e_veto_pick_types_insert_input"]: ValueTypes["e_veto_pick_types_insert_input"];
	["e_veto_pick_types_on_conflict"]: ValueTypes["e_veto_pick_types_on_conflict"];
	["e_veto_pick_types_order_by"]: ValueTypes["e_veto_pick_types_order_by"];
	["e_veto_pick_types_pk_columns_input"]: ValueTypes["e_veto_pick_types_pk_columns_input"];
	["e_veto_pick_types_select_column"]: ValueTypes["e_veto_pick_types_select_column"];
	["e_veto_pick_types_set_input"]: ValueTypes["e_veto_pick_types_set_input"];
	["e_veto_pick_types_stream_cursor_input"]: ValueTypes["e_veto_pick_types_stream_cursor_input"];
	["e_veto_pick_types_stream_cursor_value_input"]: ValueTypes["e_veto_pick_types_stream_cursor_value_input"];
	["e_veto_pick_types_update_column"]: ValueTypes["e_veto_pick_types_update_column"];
	["e_veto_pick_types_updates"]: ValueTypes["e_veto_pick_types_updates"];
	["jsonb"]: ValueTypes["jsonb"];
	["jsonb_cast_exp"]: ValueTypes["jsonb_cast_exp"];
	["jsonb_comparison_exp"]: ValueTypes["jsonb_comparison_exp"];
	["map_pools_bool_exp"]: ValueTypes["map_pools_bool_exp"];
	["map_pools_constraint"]: ValueTypes["map_pools_constraint"];
	["map_pools_inc_input"]: ValueTypes["map_pools_inc_input"];
	["map_pools_insert_input"]: ValueTypes["map_pools_insert_input"];
	["map_pools_obj_rel_insert_input"]: ValueTypes["map_pools_obj_rel_insert_input"];
	["map_pools_on_conflict"]: ValueTypes["map_pools_on_conflict"];
	["map_pools_order_by"]: ValueTypes["map_pools_order_by"];
	["map_pools_pk_columns_input"]: ValueTypes["map_pools_pk_columns_input"];
	["map_pools_select_column"]: ValueTypes["map_pools_select_column"];
	["map_pools_set_input"]: ValueTypes["map_pools_set_input"];
	["map_pools_stream_cursor_input"]: ValueTypes["map_pools_stream_cursor_input"];
	["map_pools_stream_cursor_value_input"]: ValueTypes["map_pools_stream_cursor_value_input"];
	["map_pools_update_column"]: ValueTypes["map_pools_update_column"];
	["map_pools_updates"]: ValueTypes["map_pools_updates"];
	["maps_aggregate_bool_exp"]: ValueTypes["maps_aggregate_bool_exp"];
	["maps_aggregate_bool_exp_bool_and"]: ValueTypes["maps_aggregate_bool_exp_bool_and"];
	["maps_aggregate_bool_exp_bool_or"]: ValueTypes["maps_aggregate_bool_exp_bool_or"];
	["maps_aggregate_bool_exp_count"]: ValueTypes["maps_aggregate_bool_exp_count"];
	["maps_aggregate_order_by"]: ValueTypes["maps_aggregate_order_by"];
	["maps_arr_rel_insert_input"]: ValueTypes["maps_arr_rel_insert_input"];
	["maps_bool_exp"]: ValueTypes["maps_bool_exp"];
	["maps_constraint"]: ValueTypes["maps_constraint"];
	["maps_insert_input"]: ValueTypes["maps_insert_input"];
	["maps_max_order_by"]: ValueTypes["maps_max_order_by"];
	["maps_min_order_by"]: ValueTypes["maps_min_order_by"];
	["maps_obj_rel_insert_input"]: ValueTypes["maps_obj_rel_insert_input"];
	["maps_on_conflict"]: ValueTypes["maps_on_conflict"];
	["maps_order_by"]: ValueTypes["maps_order_by"];
	["maps_pk_columns_input"]: ValueTypes["maps_pk_columns_input"];
	["maps_select_column"]: ValueTypes["maps_select_column"];
	["maps_select_column_maps_aggregate_bool_exp_bool_and_arguments_columns"]: ValueTypes["maps_select_column_maps_aggregate_bool_exp_bool_and_arguments_columns"];
	["maps_select_column_maps_aggregate_bool_exp_bool_or_arguments_columns"]: ValueTypes["maps_select_column_maps_aggregate_bool_exp_bool_or_arguments_columns"];
	["maps_set_input"]: ValueTypes["maps_set_input"];
	["maps_stream_cursor_input"]: ValueTypes["maps_stream_cursor_input"];
	["maps_stream_cursor_value_input"]: ValueTypes["maps_stream_cursor_value_input"];
	["maps_update_column"]: ValueTypes["maps_update_column"];
	["maps_updates"]: ValueTypes["maps_updates"];
	["match_lineup_players_aggregate_bool_exp"]: ValueTypes["match_lineup_players_aggregate_bool_exp"];
	["match_lineup_players_aggregate_bool_exp_bool_and"]: ValueTypes["match_lineup_players_aggregate_bool_exp_bool_and"];
	["match_lineup_players_aggregate_bool_exp_bool_or"]: ValueTypes["match_lineup_players_aggregate_bool_exp_bool_or"];
	["match_lineup_players_aggregate_bool_exp_count"]: ValueTypes["match_lineup_players_aggregate_bool_exp_count"];
	["match_lineup_players_aggregate_order_by"]: ValueTypes["match_lineup_players_aggregate_order_by"];
	["match_lineup_players_arr_rel_insert_input"]: ValueTypes["match_lineup_players_arr_rel_insert_input"];
	["match_lineup_players_avg_order_by"]: ValueTypes["match_lineup_players_avg_order_by"];
	["match_lineup_players_bool_exp"]: ValueTypes["match_lineup_players_bool_exp"];
	["match_lineup_players_constraint"]: ValueTypes["match_lineup_players_constraint"];
	["match_lineup_players_inc_input"]: ValueTypes["match_lineup_players_inc_input"];
	["match_lineup_players_insert_input"]: ValueTypes["match_lineup_players_insert_input"];
	["match_lineup_players_max_order_by"]: ValueTypes["match_lineup_players_max_order_by"];
	["match_lineup_players_min_order_by"]: ValueTypes["match_lineup_players_min_order_by"];
	["match_lineup_players_on_conflict"]: ValueTypes["match_lineup_players_on_conflict"];
	["match_lineup_players_order_by"]: ValueTypes["match_lineup_players_order_by"];
	["match_lineup_players_pk_columns_input"]: ValueTypes["match_lineup_players_pk_columns_input"];
	["match_lineup_players_select_column"]: ValueTypes["match_lineup_players_select_column"];
	["match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_and_arguments_columns"]: ValueTypes["match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_and_arguments_columns"];
	["match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_or_arguments_columns"]: ValueTypes["match_lineup_players_select_column_match_lineup_players_aggregate_bool_exp_bool_or_arguments_columns"];
	["match_lineup_players_set_input"]: ValueTypes["match_lineup_players_set_input"];
	["match_lineup_players_stddev_order_by"]: ValueTypes["match_lineup_players_stddev_order_by"];
	["match_lineup_players_stddev_pop_order_by"]: ValueTypes["match_lineup_players_stddev_pop_order_by"];
	["match_lineup_players_stddev_samp_order_by"]: ValueTypes["match_lineup_players_stddev_samp_order_by"];
	["match_lineup_players_stream_cursor_input"]: ValueTypes["match_lineup_players_stream_cursor_input"];
	["match_lineup_players_stream_cursor_value_input"]: ValueTypes["match_lineup_players_stream_cursor_value_input"];
	["match_lineup_players_sum_order_by"]: ValueTypes["match_lineup_players_sum_order_by"];
	["match_lineup_players_update_column"]: ValueTypes["match_lineup_players_update_column"];
	["match_lineup_players_updates"]: ValueTypes["match_lineup_players_updates"];
	["match_lineup_players_var_pop_order_by"]: ValueTypes["match_lineup_players_var_pop_order_by"];
	["match_lineup_players_var_samp_order_by"]: ValueTypes["match_lineup_players_var_samp_order_by"];
	["match_lineup_players_variance_order_by"]: ValueTypes["match_lineup_players_variance_order_by"];
	["match_lineups_aggregate_bool_exp"]: ValueTypes["match_lineups_aggregate_bool_exp"];
	["match_lineups_aggregate_bool_exp_count"]: ValueTypes["match_lineups_aggregate_bool_exp_count"];
	["match_lineups_aggregate_order_by"]: ValueTypes["match_lineups_aggregate_order_by"];
	["match_lineups_arr_rel_insert_input"]: ValueTypes["match_lineups_arr_rel_insert_input"];
	["match_lineups_avg_order_by"]: ValueTypes["match_lineups_avg_order_by"];
	["match_lineups_bool_exp"]: ValueTypes["match_lineups_bool_exp"];
	["match_lineups_constraint"]: ValueTypes["match_lineups_constraint"];
	["match_lineups_inc_input"]: ValueTypes["match_lineups_inc_input"];
	["match_lineups_insert_input"]: ValueTypes["match_lineups_insert_input"];
	["match_lineups_max_order_by"]: ValueTypes["match_lineups_max_order_by"];
	["match_lineups_min_order_by"]: ValueTypes["match_lineups_min_order_by"];
	["match_lineups_obj_rel_insert_input"]: ValueTypes["match_lineups_obj_rel_insert_input"];
	["match_lineups_on_conflict"]: ValueTypes["match_lineups_on_conflict"];
	["match_lineups_order_by"]: ValueTypes["match_lineups_order_by"];
	["match_lineups_pk_columns_input"]: ValueTypes["match_lineups_pk_columns_input"];
	["match_lineups_select_column"]: ValueTypes["match_lineups_select_column"];
	["match_lineups_set_input"]: ValueTypes["match_lineups_set_input"];
	["match_lineups_stddev_order_by"]: ValueTypes["match_lineups_stddev_order_by"];
	["match_lineups_stddev_pop_order_by"]: ValueTypes["match_lineups_stddev_pop_order_by"];
	["match_lineups_stddev_samp_order_by"]: ValueTypes["match_lineups_stddev_samp_order_by"];
	["match_lineups_stream_cursor_input"]: ValueTypes["match_lineups_stream_cursor_input"];
	["match_lineups_stream_cursor_value_input"]: ValueTypes["match_lineups_stream_cursor_value_input"];
	["match_lineups_sum_order_by"]: ValueTypes["match_lineups_sum_order_by"];
	["match_lineups_update_column"]: ValueTypes["match_lineups_update_column"];
	["match_lineups_updates"]: ValueTypes["match_lineups_updates"];
	["match_lineups_var_pop_order_by"]: ValueTypes["match_lineups_var_pop_order_by"];
	["match_lineups_var_samp_order_by"]: ValueTypes["match_lineups_var_samp_order_by"];
	["match_lineups_variance_order_by"]: ValueTypes["match_lineups_variance_order_by"];
	["match_map_demos_bool_exp"]: ValueTypes["match_map_demos_bool_exp"];
	["match_map_demos_constraint"]: ValueTypes["match_map_demos_constraint"];
	["match_map_demos_inc_input"]: ValueTypes["match_map_demos_inc_input"];
	["match_map_demos_insert_input"]: ValueTypes["match_map_demos_insert_input"];
	["match_map_demos_on_conflict"]: ValueTypes["match_map_demos_on_conflict"];
	["match_map_demos_order_by"]: ValueTypes["match_map_demos_order_by"];
	["match_map_demos_pk_columns_input"]: ValueTypes["match_map_demos_pk_columns_input"];
	["match_map_demos_select_column"]: ValueTypes["match_map_demos_select_column"];
	["match_map_demos_set_input"]: ValueTypes["match_map_demos_set_input"];
	["match_map_demos_stream_cursor_input"]: ValueTypes["match_map_demos_stream_cursor_input"];
	["match_map_demos_stream_cursor_value_input"]: ValueTypes["match_map_demos_stream_cursor_value_input"];
	["match_map_demos_update_column"]: ValueTypes["match_map_demos_update_column"];
	["match_map_demos_updates"]: ValueTypes["match_map_demos_updates"];
	["match_map_rounds_aggregate_bool_exp"]: ValueTypes["match_map_rounds_aggregate_bool_exp"];
	["match_map_rounds_aggregate_bool_exp_count"]: ValueTypes["match_map_rounds_aggregate_bool_exp_count"];
	["match_map_rounds_aggregate_order_by"]: ValueTypes["match_map_rounds_aggregate_order_by"];
	["match_map_rounds_arr_rel_insert_input"]: ValueTypes["match_map_rounds_arr_rel_insert_input"];
	["match_map_rounds_avg_order_by"]: ValueTypes["match_map_rounds_avg_order_by"];
	["match_map_rounds_bool_exp"]: ValueTypes["match_map_rounds_bool_exp"];
	["match_map_rounds_constraint"]: ValueTypes["match_map_rounds_constraint"];
	["match_map_rounds_inc_input"]: ValueTypes["match_map_rounds_inc_input"];
	["match_map_rounds_insert_input"]: ValueTypes["match_map_rounds_insert_input"];
	["match_map_rounds_max_order_by"]: ValueTypes["match_map_rounds_max_order_by"];
	["match_map_rounds_min_order_by"]: ValueTypes["match_map_rounds_min_order_by"];
	["match_map_rounds_on_conflict"]: ValueTypes["match_map_rounds_on_conflict"];
	["match_map_rounds_order_by"]: ValueTypes["match_map_rounds_order_by"];
	["match_map_rounds_pk_columns_input"]: ValueTypes["match_map_rounds_pk_columns_input"];
	["match_map_rounds_select_column"]: ValueTypes["match_map_rounds_select_column"];
	["match_map_rounds_set_input"]: ValueTypes["match_map_rounds_set_input"];
	["match_map_rounds_stddev_order_by"]: ValueTypes["match_map_rounds_stddev_order_by"];
	["match_map_rounds_stddev_pop_order_by"]: ValueTypes["match_map_rounds_stddev_pop_order_by"];
	["match_map_rounds_stddev_samp_order_by"]: ValueTypes["match_map_rounds_stddev_samp_order_by"];
	["match_map_rounds_stream_cursor_input"]: ValueTypes["match_map_rounds_stream_cursor_input"];
	["match_map_rounds_stream_cursor_value_input"]: ValueTypes["match_map_rounds_stream_cursor_value_input"];
	["match_map_rounds_sum_order_by"]: ValueTypes["match_map_rounds_sum_order_by"];
	["match_map_rounds_update_column"]: ValueTypes["match_map_rounds_update_column"];
	["match_map_rounds_updates"]: ValueTypes["match_map_rounds_updates"];
	["match_map_rounds_var_pop_order_by"]: ValueTypes["match_map_rounds_var_pop_order_by"];
	["match_map_rounds_var_samp_order_by"]: ValueTypes["match_map_rounds_var_samp_order_by"];
	["match_map_rounds_variance_order_by"]: ValueTypes["match_map_rounds_variance_order_by"];
	["match_maps_aggregate_bool_exp"]: ValueTypes["match_maps_aggregate_bool_exp"];
	["match_maps_aggregate_bool_exp_count"]: ValueTypes["match_maps_aggregate_bool_exp_count"];
	["match_maps_aggregate_order_by"]: ValueTypes["match_maps_aggregate_order_by"];
	["match_maps_arr_rel_insert_input"]: ValueTypes["match_maps_arr_rel_insert_input"];
	["match_maps_avg_order_by"]: ValueTypes["match_maps_avg_order_by"];
	["match_maps_bool_exp"]: ValueTypes["match_maps_bool_exp"];
	["match_maps_constraint"]: ValueTypes["match_maps_constraint"];
	["match_maps_inc_input"]: ValueTypes["match_maps_inc_input"];
	["match_maps_insert_input"]: ValueTypes["match_maps_insert_input"];
	["match_maps_max_order_by"]: ValueTypes["match_maps_max_order_by"];
	["match_maps_min_order_by"]: ValueTypes["match_maps_min_order_by"];
	["match_maps_obj_rel_insert_input"]: ValueTypes["match_maps_obj_rel_insert_input"];
	["match_maps_on_conflict"]: ValueTypes["match_maps_on_conflict"];
	["match_maps_order_by"]: ValueTypes["match_maps_order_by"];
	["match_maps_pk_columns_input"]: ValueTypes["match_maps_pk_columns_input"];
	["match_maps_select_column"]: ValueTypes["match_maps_select_column"];
	["match_maps_set_input"]: ValueTypes["match_maps_set_input"];
	["match_maps_stddev_order_by"]: ValueTypes["match_maps_stddev_order_by"];
	["match_maps_stddev_pop_order_by"]: ValueTypes["match_maps_stddev_pop_order_by"];
	["match_maps_stddev_samp_order_by"]: ValueTypes["match_maps_stddev_samp_order_by"];
	["match_maps_stream_cursor_input"]: ValueTypes["match_maps_stream_cursor_input"];
	["match_maps_stream_cursor_value_input"]: ValueTypes["match_maps_stream_cursor_value_input"];
	["match_maps_sum_order_by"]: ValueTypes["match_maps_sum_order_by"];
	["match_maps_update_column"]: ValueTypes["match_maps_update_column"];
	["match_maps_updates"]: ValueTypes["match_maps_updates"];
	["match_maps_var_pop_order_by"]: ValueTypes["match_maps_var_pop_order_by"];
	["match_maps_var_samp_order_by"]: ValueTypes["match_maps_var_samp_order_by"];
	["match_maps_variance_order_by"]: ValueTypes["match_maps_variance_order_by"];
	["match_veto_picks_aggregate_bool_exp"]: ValueTypes["match_veto_picks_aggregate_bool_exp"];
	["match_veto_picks_aggregate_bool_exp_count"]: ValueTypes["match_veto_picks_aggregate_bool_exp_count"];
	["match_veto_picks_aggregate_order_by"]: ValueTypes["match_veto_picks_aggregate_order_by"];
	["match_veto_picks_arr_rel_insert_input"]: ValueTypes["match_veto_picks_arr_rel_insert_input"];
	["match_veto_picks_bool_exp"]: ValueTypes["match_veto_picks_bool_exp"];
	["match_veto_picks_constraint"]: ValueTypes["match_veto_picks_constraint"];
	["match_veto_picks_insert_input"]: ValueTypes["match_veto_picks_insert_input"];
	["match_veto_picks_max_order_by"]: ValueTypes["match_veto_picks_max_order_by"];
	["match_veto_picks_min_order_by"]: ValueTypes["match_veto_picks_min_order_by"];
	["match_veto_picks_on_conflict"]: ValueTypes["match_veto_picks_on_conflict"];
	["match_veto_picks_order_by"]: ValueTypes["match_veto_picks_order_by"];
	["match_veto_picks_pk_columns_input"]: ValueTypes["match_veto_picks_pk_columns_input"];
	["match_veto_picks_select_column"]: ValueTypes["match_veto_picks_select_column"];
	["match_veto_picks_set_input"]: ValueTypes["match_veto_picks_set_input"];
	["match_veto_picks_stream_cursor_input"]: ValueTypes["match_veto_picks_stream_cursor_input"];
	["match_veto_picks_stream_cursor_value_input"]: ValueTypes["match_veto_picks_stream_cursor_value_input"];
	["match_veto_picks_update_column"]: ValueTypes["match_veto_picks_update_column"];
	["match_veto_picks_updates"]: ValueTypes["match_veto_picks_updates"];
	["matches_aggregate_bool_exp"]: ValueTypes["matches_aggregate_bool_exp"];
	["matches_aggregate_bool_exp_bool_and"]: ValueTypes["matches_aggregate_bool_exp_bool_and"];
	["matches_aggregate_bool_exp_bool_or"]: ValueTypes["matches_aggregate_bool_exp_bool_or"];
	["matches_aggregate_bool_exp_count"]: ValueTypes["matches_aggregate_bool_exp_count"];
	["matches_aggregate_order_by"]: ValueTypes["matches_aggregate_order_by"];
	["matches_arr_rel_insert_input"]: ValueTypes["matches_arr_rel_insert_input"];
	["matches_avg_order_by"]: ValueTypes["matches_avg_order_by"];
	["matches_bool_exp"]: ValueTypes["matches_bool_exp"];
	["matches_constraint"]: ValueTypes["matches_constraint"];
	["matches_inc_input"]: ValueTypes["matches_inc_input"];
	["matches_insert_input"]: ValueTypes["matches_insert_input"];
	["matches_max_order_by"]: ValueTypes["matches_max_order_by"];
	["matches_min_order_by"]: ValueTypes["matches_min_order_by"];
	["matches_obj_rel_insert_input"]: ValueTypes["matches_obj_rel_insert_input"];
	["matches_on_conflict"]: ValueTypes["matches_on_conflict"];
	["matches_order_by"]: ValueTypes["matches_order_by"];
	["matches_pk_columns_input"]: ValueTypes["matches_pk_columns_input"];
	["matches_select_column"]: ValueTypes["matches_select_column"];
	["matches_select_column_matches_aggregate_bool_exp_bool_and_arguments_columns"]: ValueTypes["matches_select_column_matches_aggregate_bool_exp_bool_and_arguments_columns"];
	["matches_select_column_matches_aggregate_bool_exp_bool_or_arguments_columns"]: ValueTypes["matches_select_column_matches_aggregate_bool_exp_bool_or_arguments_columns"];
	["matches_set_input"]: ValueTypes["matches_set_input"];
	["matches_stddev_order_by"]: ValueTypes["matches_stddev_order_by"];
	["matches_stddev_pop_order_by"]: ValueTypes["matches_stddev_pop_order_by"];
	["matches_stddev_samp_order_by"]: ValueTypes["matches_stddev_samp_order_by"];
	["matches_stream_cursor_input"]: ValueTypes["matches_stream_cursor_input"];
	["matches_stream_cursor_value_input"]: ValueTypes["matches_stream_cursor_value_input"];
	["matches_sum_order_by"]: ValueTypes["matches_sum_order_by"];
	["matches_update_column"]: ValueTypes["matches_update_column"];
	["matches_updates"]: ValueTypes["matches_updates"];
	["matches_var_pop_order_by"]: ValueTypes["matches_var_pop_order_by"];
	["matches_var_samp_order_by"]: ValueTypes["matches_var_samp_order_by"];
	["matches_variance_order_by"]: ValueTypes["matches_variance_order_by"];
	["numeric"]: ValueTypes["numeric"];
	["numeric_comparison_exp"]: ValueTypes["numeric_comparison_exp"];
	["order_by"]: ValueTypes["order_by"];
	["player_assists_aggregate_bool_exp"]: ValueTypes["player_assists_aggregate_bool_exp"];
	["player_assists_aggregate_bool_exp_bool_and"]: ValueTypes["player_assists_aggregate_bool_exp_bool_and"];
	["player_assists_aggregate_bool_exp_bool_or"]: ValueTypes["player_assists_aggregate_bool_exp_bool_or"];
	["player_assists_aggregate_bool_exp_count"]: ValueTypes["player_assists_aggregate_bool_exp_count"];
	["player_assists_aggregate_order_by"]: ValueTypes["player_assists_aggregate_order_by"];
	["player_assists_arr_rel_insert_input"]: ValueTypes["player_assists_arr_rel_insert_input"];
	["player_assists_avg_order_by"]: ValueTypes["player_assists_avg_order_by"];
	["player_assists_bool_exp"]: ValueTypes["player_assists_bool_exp"];
	["player_assists_constraint"]: ValueTypes["player_assists_constraint"];
	["player_assists_inc_input"]: ValueTypes["player_assists_inc_input"];
	["player_assists_insert_input"]: ValueTypes["player_assists_insert_input"];
	["player_assists_max_order_by"]: ValueTypes["player_assists_max_order_by"];
	["player_assists_min_order_by"]: ValueTypes["player_assists_min_order_by"];
	["player_assists_on_conflict"]: ValueTypes["player_assists_on_conflict"];
	["player_assists_order_by"]: ValueTypes["player_assists_order_by"];
	["player_assists_pk_columns_input"]: ValueTypes["player_assists_pk_columns_input"];
	["player_assists_select_column"]: ValueTypes["player_assists_select_column"];
	["player_assists_select_column_player_assists_aggregate_bool_exp_bool_and_arguments_columns"]: ValueTypes["player_assists_select_column_player_assists_aggregate_bool_exp_bool_and_arguments_columns"];
	["player_assists_select_column_player_assists_aggregate_bool_exp_bool_or_arguments_columns"]: ValueTypes["player_assists_select_column_player_assists_aggregate_bool_exp_bool_or_arguments_columns"];
	["player_assists_set_input"]: ValueTypes["player_assists_set_input"];
	["player_assists_stddev_order_by"]: ValueTypes["player_assists_stddev_order_by"];
	["player_assists_stddev_pop_order_by"]: ValueTypes["player_assists_stddev_pop_order_by"];
	["player_assists_stddev_samp_order_by"]: ValueTypes["player_assists_stddev_samp_order_by"];
	["player_assists_stream_cursor_input"]: ValueTypes["player_assists_stream_cursor_input"];
	["player_assists_stream_cursor_value_input"]: ValueTypes["player_assists_stream_cursor_value_input"];
	["player_assists_sum_order_by"]: ValueTypes["player_assists_sum_order_by"];
	["player_assists_update_column"]: ValueTypes["player_assists_update_column"];
	["player_assists_updates"]: ValueTypes["player_assists_updates"];
	["player_assists_var_pop_order_by"]: ValueTypes["player_assists_var_pop_order_by"];
	["player_assists_var_samp_order_by"]: ValueTypes["player_assists_var_samp_order_by"];
	["player_assists_variance_order_by"]: ValueTypes["player_assists_variance_order_by"];
	["player_damages_aggregate_bool_exp"]: ValueTypes["player_damages_aggregate_bool_exp"];
	["player_damages_aggregate_bool_exp_count"]: ValueTypes["player_damages_aggregate_bool_exp_count"];
	["player_damages_aggregate_order_by"]: ValueTypes["player_damages_aggregate_order_by"];
	["player_damages_arr_rel_insert_input"]: ValueTypes["player_damages_arr_rel_insert_input"];
	["player_damages_avg_order_by"]: ValueTypes["player_damages_avg_order_by"];
	["player_damages_bool_exp"]: ValueTypes["player_damages_bool_exp"];
	["player_damages_constraint"]: ValueTypes["player_damages_constraint"];
	["player_damages_inc_input"]: ValueTypes["player_damages_inc_input"];
	["player_damages_insert_input"]: ValueTypes["player_damages_insert_input"];
	["player_damages_max_order_by"]: ValueTypes["player_damages_max_order_by"];
	["player_damages_min_order_by"]: ValueTypes["player_damages_min_order_by"];
	["player_damages_on_conflict"]: ValueTypes["player_damages_on_conflict"];
	["player_damages_order_by"]: ValueTypes["player_damages_order_by"];
	["player_damages_pk_columns_input"]: ValueTypes["player_damages_pk_columns_input"];
	["player_damages_select_column"]: ValueTypes["player_damages_select_column"];
	["player_damages_set_input"]: ValueTypes["player_damages_set_input"];
	["player_damages_stddev_order_by"]: ValueTypes["player_damages_stddev_order_by"];
	["player_damages_stddev_pop_order_by"]: ValueTypes["player_damages_stddev_pop_order_by"];
	["player_damages_stddev_samp_order_by"]: ValueTypes["player_damages_stddev_samp_order_by"];
	["player_damages_stream_cursor_input"]: ValueTypes["player_damages_stream_cursor_input"];
	["player_damages_stream_cursor_value_input"]: ValueTypes["player_damages_stream_cursor_value_input"];
	["player_damages_sum_order_by"]: ValueTypes["player_damages_sum_order_by"];
	["player_damages_update_column"]: ValueTypes["player_damages_update_column"];
	["player_damages_updates"]: ValueTypes["player_damages_updates"];
	["player_damages_var_pop_order_by"]: ValueTypes["player_damages_var_pop_order_by"];
	["player_damages_var_samp_order_by"]: ValueTypes["player_damages_var_samp_order_by"];
	["player_damages_variance_order_by"]: ValueTypes["player_damages_variance_order_by"];
	["player_flashes_aggregate_bool_exp"]: ValueTypes["player_flashes_aggregate_bool_exp"];
	["player_flashes_aggregate_bool_exp_bool_and"]: ValueTypes["player_flashes_aggregate_bool_exp_bool_and"];
	["player_flashes_aggregate_bool_exp_bool_or"]: ValueTypes["player_flashes_aggregate_bool_exp_bool_or"];
	["player_flashes_aggregate_bool_exp_count"]: ValueTypes["player_flashes_aggregate_bool_exp_count"];
	["player_flashes_aggregate_order_by"]: ValueTypes["player_flashes_aggregate_order_by"];
	["player_flashes_arr_rel_insert_input"]: ValueTypes["player_flashes_arr_rel_insert_input"];
	["player_flashes_avg_order_by"]: ValueTypes["player_flashes_avg_order_by"];
	["player_flashes_bool_exp"]: ValueTypes["player_flashes_bool_exp"];
	["player_flashes_constraint"]: ValueTypes["player_flashes_constraint"];
	["player_flashes_inc_input"]: ValueTypes["player_flashes_inc_input"];
	["player_flashes_insert_input"]: ValueTypes["player_flashes_insert_input"];
	["player_flashes_max_order_by"]: ValueTypes["player_flashes_max_order_by"];
	["player_flashes_min_order_by"]: ValueTypes["player_flashes_min_order_by"];
	["player_flashes_on_conflict"]: ValueTypes["player_flashes_on_conflict"];
	["player_flashes_order_by"]: ValueTypes["player_flashes_order_by"];
	["player_flashes_pk_columns_input"]: ValueTypes["player_flashes_pk_columns_input"];
	["player_flashes_select_column"]: ValueTypes["player_flashes_select_column"];
	["player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_and_arguments_columns"]: ValueTypes["player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_and_arguments_columns"];
	["player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_or_arguments_columns"]: ValueTypes["player_flashes_select_column_player_flashes_aggregate_bool_exp_bool_or_arguments_columns"];
	["player_flashes_set_input"]: ValueTypes["player_flashes_set_input"];
	["player_flashes_stddev_order_by"]: ValueTypes["player_flashes_stddev_order_by"];
	["player_flashes_stddev_pop_order_by"]: ValueTypes["player_flashes_stddev_pop_order_by"];
	["player_flashes_stddev_samp_order_by"]: ValueTypes["player_flashes_stddev_samp_order_by"];
	["player_flashes_stream_cursor_input"]: ValueTypes["player_flashes_stream_cursor_input"];
	["player_flashes_stream_cursor_value_input"]: ValueTypes["player_flashes_stream_cursor_value_input"];
	["player_flashes_sum_order_by"]: ValueTypes["player_flashes_sum_order_by"];
	["player_flashes_update_column"]: ValueTypes["player_flashes_update_column"];
	["player_flashes_updates"]: ValueTypes["player_flashes_updates"];
	["player_flashes_var_pop_order_by"]: ValueTypes["player_flashes_var_pop_order_by"];
	["player_flashes_var_samp_order_by"]: ValueTypes["player_flashes_var_samp_order_by"];
	["player_flashes_variance_order_by"]: ValueTypes["player_flashes_variance_order_by"];
	["player_kills_aggregate_bool_exp"]: ValueTypes["player_kills_aggregate_bool_exp"];
	["player_kills_aggregate_bool_exp_bool_and"]: ValueTypes["player_kills_aggregate_bool_exp_bool_and"];
	["player_kills_aggregate_bool_exp_bool_or"]: ValueTypes["player_kills_aggregate_bool_exp_bool_or"];
	["player_kills_aggregate_bool_exp_count"]: ValueTypes["player_kills_aggregate_bool_exp_count"];
	["player_kills_aggregate_order_by"]: ValueTypes["player_kills_aggregate_order_by"];
	["player_kills_arr_rel_insert_input"]: ValueTypes["player_kills_arr_rel_insert_input"];
	["player_kills_avg_order_by"]: ValueTypes["player_kills_avg_order_by"];
	["player_kills_bool_exp"]: ValueTypes["player_kills_bool_exp"];
	["player_kills_constraint"]: ValueTypes["player_kills_constraint"];
	["player_kills_inc_input"]: ValueTypes["player_kills_inc_input"];
	["player_kills_insert_input"]: ValueTypes["player_kills_insert_input"];
	["player_kills_max_order_by"]: ValueTypes["player_kills_max_order_by"];
	["player_kills_min_order_by"]: ValueTypes["player_kills_min_order_by"];
	["player_kills_on_conflict"]: ValueTypes["player_kills_on_conflict"];
	["player_kills_order_by"]: ValueTypes["player_kills_order_by"];
	["player_kills_pk_columns_input"]: ValueTypes["player_kills_pk_columns_input"];
	["player_kills_select_column"]: ValueTypes["player_kills_select_column"];
	["player_kills_select_column_player_kills_aggregate_bool_exp_bool_and_arguments_columns"]: ValueTypes["player_kills_select_column_player_kills_aggregate_bool_exp_bool_and_arguments_columns"];
	["player_kills_select_column_player_kills_aggregate_bool_exp_bool_or_arguments_columns"]: ValueTypes["player_kills_select_column_player_kills_aggregate_bool_exp_bool_or_arguments_columns"];
	["player_kills_set_input"]: ValueTypes["player_kills_set_input"];
	["player_kills_stddev_order_by"]: ValueTypes["player_kills_stddev_order_by"];
	["player_kills_stddev_pop_order_by"]: ValueTypes["player_kills_stddev_pop_order_by"];
	["player_kills_stddev_samp_order_by"]: ValueTypes["player_kills_stddev_samp_order_by"];
	["player_kills_stream_cursor_input"]: ValueTypes["player_kills_stream_cursor_input"];
	["player_kills_stream_cursor_value_input"]: ValueTypes["player_kills_stream_cursor_value_input"];
	["player_kills_sum_order_by"]: ValueTypes["player_kills_sum_order_by"];
	["player_kills_update_column"]: ValueTypes["player_kills_update_column"];
	["player_kills_updates"]: ValueTypes["player_kills_updates"];
	["player_kills_var_pop_order_by"]: ValueTypes["player_kills_var_pop_order_by"];
	["player_kills_var_samp_order_by"]: ValueTypes["player_kills_var_samp_order_by"];
	["player_kills_variance_order_by"]: ValueTypes["player_kills_variance_order_by"];
	["player_objectives_aggregate_bool_exp"]: ValueTypes["player_objectives_aggregate_bool_exp"];
	["player_objectives_aggregate_bool_exp_count"]: ValueTypes["player_objectives_aggregate_bool_exp_count"];
	["player_objectives_aggregate_order_by"]: ValueTypes["player_objectives_aggregate_order_by"];
	["player_objectives_arr_rel_insert_input"]: ValueTypes["player_objectives_arr_rel_insert_input"];
	["player_objectives_avg_order_by"]: ValueTypes["player_objectives_avg_order_by"];
	["player_objectives_bool_exp"]: ValueTypes["player_objectives_bool_exp"];
	["player_objectives_constraint"]: ValueTypes["player_objectives_constraint"];
	["player_objectives_inc_input"]: ValueTypes["player_objectives_inc_input"];
	["player_objectives_insert_input"]: ValueTypes["player_objectives_insert_input"];
	["player_objectives_max_order_by"]: ValueTypes["player_objectives_max_order_by"];
	["player_objectives_min_order_by"]: ValueTypes["player_objectives_min_order_by"];
	["player_objectives_on_conflict"]: ValueTypes["player_objectives_on_conflict"];
	["player_objectives_order_by"]: ValueTypes["player_objectives_order_by"];
	["player_objectives_pk_columns_input"]: ValueTypes["player_objectives_pk_columns_input"];
	["player_objectives_select_column"]: ValueTypes["player_objectives_select_column"];
	["player_objectives_set_input"]: ValueTypes["player_objectives_set_input"];
	["player_objectives_stddev_order_by"]: ValueTypes["player_objectives_stddev_order_by"];
	["player_objectives_stddev_pop_order_by"]: ValueTypes["player_objectives_stddev_pop_order_by"];
	["player_objectives_stddev_samp_order_by"]: ValueTypes["player_objectives_stddev_samp_order_by"];
	["player_objectives_stream_cursor_input"]: ValueTypes["player_objectives_stream_cursor_input"];
	["player_objectives_stream_cursor_value_input"]: ValueTypes["player_objectives_stream_cursor_value_input"];
	["player_objectives_sum_order_by"]: ValueTypes["player_objectives_sum_order_by"];
	["player_objectives_update_column"]: ValueTypes["player_objectives_update_column"];
	["player_objectives_updates"]: ValueTypes["player_objectives_updates"];
	["player_objectives_var_pop_order_by"]: ValueTypes["player_objectives_var_pop_order_by"];
	["player_objectives_var_samp_order_by"]: ValueTypes["player_objectives_var_samp_order_by"];
	["player_objectives_variance_order_by"]: ValueTypes["player_objectives_variance_order_by"];
	["player_unused_utility_aggregate_bool_exp"]: ValueTypes["player_unused_utility_aggregate_bool_exp"];
	["player_unused_utility_aggregate_bool_exp_count"]: ValueTypes["player_unused_utility_aggregate_bool_exp_count"];
	["player_unused_utility_aggregate_order_by"]: ValueTypes["player_unused_utility_aggregate_order_by"];
	["player_unused_utility_arr_rel_insert_input"]: ValueTypes["player_unused_utility_arr_rel_insert_input"];
	["player_unused_utility_avg_order_by"]: ValueTypes["player_unused_utility_avg_order_by"];
	["player_unused_utility_bool_exp"]: ValueTypes["player_unused_utility_bool_exp"];
	["player_unused_utility_constraint"]: ValueTypes["player_unused_utility_constraint"];
	["player_unused_utility_inc_input"]: ValueTypes["player_unused_utility_inc_input"];
	["player_unused_utility_insert_input"]: ValueTypes["player_unused_utility_insert_input"];
	["player_unused_utility_max_order_by"]: ValueTypes["player_unused_utility_max_order_by"];
	["player_unused_utility_min_order_by"]: ValueTypes["player_unused_utility_min_order_by"];
	["player_unused_utility_on_conflict"]: ValueTypes["player_unused_utility_on_conflict"];
	["player_unused_utility_order_by"]: ValueTypes["player_unused_utility_order_by"];
	["player_unused_utility_pk_columns_input"]: ValueTypes["player_unused_utility_pk_columns_input"];
	["player_unused_utility_select_column"]: ValueTypes["player_unused_utility_select_column"];
	["player_unused_utility_set_input"]: ValueTypes["player_unused_utility_set_input"];
	["player_unused_utility_stddev_order_by"]: ValueTypes["player_unused_utility_stddev_order_by"];
	["player_unused_utility_stddev_pop_order_by"]: ValueTypes["player_unused_utility_stddev_pop_order_by"];
	["player_unused_utility_stddev_samp_order_by"]: ValueTypes["player_unused_utility_stddev_samp_order_by"];
	["player_unused_utility_stream_cursor_input"]: ValueTypes["player_unused_utility_stream_cursor_input"];
	["player_unused_utility_stream_cursor_value_input"]: ValueTypes["player_unused_utility_stream_cursor_value_input"];
	["player_unused_utility_sum_order_by"]: ValueTypes["player_unused_utility_sum_order_by"];
	["player_unused_utility_update_column"]: ValueTypes["player_unused_utility_update_column"];
	["player_unused_utility_updates"]: ValueTypes["player_unused_utility_updates"];
	["player_unused_utility_var_pop_order_by"]: ValueTypes["player_unused_utility_var_pop_order_by"];
	["player_unused_utility_var_samp_order_by"]: ValueTypes["player_unused_utility_var_samp_order_by"];
	["player_unused_utility_variance_order_by"]: ValueTypes["player_unused_utility_variance_order_by"];
	["player_utility_aggregate_bool_exp"]: ValueTypes["player_utility_aggregate_bool_exp"];
	["player_utility_aggregate_bool_exp_count"]: ValueTypes["player_utility_aggregate_bool_exp_count"];
	["player_utility_aggregate_order_by"]: ValueTypes["player_utility_aggregate_order_by"];
	["player_utility_arr_rel_insert_input"]: ValueTypes["player_utility_arr_rel_insert_input"];
	["player_utility_avg_order_by"]: ValueTypes["player_utility_avg_order_by"];
	["player_utility_bool_exp"]: ValueTypes["player_utility_bool_exp"];
	["player_utility_constraint"]: ValueTypes["player_utility_constraint"];
	["player_utility_inc_input"]: ValueTypes["player_utility_inc_input"];
	["player_utility_insert_input"]: ValueTypes["player_utility_insert_input"];
	["player_utility_max_order_by"]: ValueTypes["player_utility_max_order_by"];
	["player_utility_min_order_by"]: ValueTypes["player_utility_min_order_by"];
	["player_utility_on_conflict"]: ValueTypes["player_utility_on_conflict"];
	["player_utility_order_by"]: ValueTypes["player_utility_order_by"];
	["player_utility_pk_columns_input"]: ValueTypes["player_utility_pk_columns_input"];
	["player_utility_select_column"]: ValueTypes["player_utility_select_column"];
	["player_utility_set_input"]: ValueTypes["player_utility_set_input"];
	["player_utility_stddev_order_by"]: ValueTypes["player_utility_stddev_order_by"];
	["player_utility_stddev_pop_order_by"]: ValueTypes["player_utility_stddev_pop_order_by"];
	["player_utility_stddev_samp_order_by"]: ValueTypes["player_utility_stddev_samp_order_by"];
	["player_utility_stream_cursor_input"]: ValueTypes["player_utility_stream_cursor_input"];
	["player_utility_stream_cursor_value_input"]: ValueTypes["player_utility_stream_cursor_value_input"];
	["player_utility_sum_order_by"]: ValueTypes["player_utility_sum_order_by"];
	["player_utility_update_column"]: ValueTypes["player_utility_update_column"];
	["player_utility_updates"]: ValueTypes["player_utility_updates"];
	["player_utility_var_pop_order_by"]: ValueTypes["player_utility_var_pop_order_by"];
	["player_utility_var_samp_order_by"]: ValueTypes["player_utility_var_samp_order_by"];
	["player_utility_variance_order_by"]: ValueTypes["player_utility_variance_order_by"];
	["players_bool_exp"]: ValueTypes["players_bool_exp"];
	["players_constraint"]: ValueTypes["players_constraint"];
	["players_inc_input"]: ValueTypes["players_inc_input"];
	["players_insert_input"]: ValueTypes["players_insert_input"];
	["players_obj_rel_insert_input"]: ValueTypes["players_obj_rel_insert_input"];
	["players_on_conflict"]: ValueTypes["players_on_conflict"];
	["players_order_by"]: ValueTypes["players_order_by"];
	["players_pk_columns_input"]: ValueTypes["players_pk_columns_input"];
	["players_select_column"]: ValueTypes["players_select_column"];
	["players_set_input"]: ValueTypes["players_set_input"];
	["players_stream_cursor_input"]: ValueTypes["players_stream_cursor_input"];
	["players_stream_cursor_value_input"]: ValueTypes["players_stream_cursor_value_input"];
	["players_update_column"]: ValueTypes["players_update_column"];
	["players_updates"]: ValueTypes["players_updates"];
	["servers_bool_exp"]: ValueTypes["servers_bool_exp"];
	["servers_constraint"]: ValueTypes["servers_constraint"];
	["servers_inc_input"]: ValueTypes["servers_inc_input"];
	["servers_insert_input"]: ValueTypes["servers_insert_input"];
	["servers_obj_rel_insert_input"]: ValueTypes["servers_obj_rel_insert_input"];
	["servers_on_conflict"]: ValueTypes["servers_on_conflict"];
	["servers_order_by"]: ValueTypes["servers_order_by"];
	["servers_pk_columns_input"]: ValueTypes["servers_pk_columns_input"];
	["servers_select_column"]: ValueTypes["servers_select_column"];
	["servers_set_input"]: ValueTypes["servers_set_input"];
	["servers_stream_cursor_input"]: ValueTypes["servers_stream_cursor_input"];
	["servers_stream_cursor_value_input"]: ValueTypes["servers_stream_cursor_value_input"];
	["servers_update_column"]: ValueTypes["servers_update_column"];
	["servers_updates"]: ValueTypes["servers_updates"];
	["team_invites_aggregate_bool_exp"]: ValueTypes["team_invites_aggregate_bool_exp"];
	["team_invites_aggregate_bool_exp_count"]: ValueTypes["team_invites_aggregate_bool_exp_count"];
	["team_invites_aggregate_order_by"]: ValueTypes["team_invites_aggregate_order_by"];
	["team_invites_arr_rel_insert_input"]: ValueTypes["team_invites_arr_rel_insert_input"];
	["team_invites_avg_order_by"]: ValueTypes["team_invites_avg_order_by"];
	["team_invites_bool_exp"]: ValueTypes["team_invites_bool_exp"];
	["team_invites_constraint"]: ValueTypes["team_invites_constraint"];
	["team_invites_inc_input"]: ValueTypes["team_invites_inc_input"];
	["team_invites_insert_input"]: ValueTypes["team_invites_insert_input"];
	["team_invites_max_order_by"]: ValueTypes["team_invites_max_order_by"];
	["team_invites_min_order_by"]: ValueTypes["team_invites_min_order_by"];
	["team_invites_on_conflict"]: ValueTypes["team_invites_on_conflict"];
	["team_invites_order_by"]: ValueTypes["team_invites_order_by"];
	["team_invites_pk_columns_input"]: ValueTypes["team_invites_pk_columns_input"];
	["team_invites_select_column"]: ValueTypes["team_invites_select_column"];
	["team_invites_set_input"]: ValueTypes["team_invites_set_input"];
	["team_invites_stddev_order_by"]: ValueTypes["team_invites_stddev_order_by"];
	["team_invites_stddev_pop_order_by"]: ValueTypes["team_invites_stddev_pop_order_by"];
	["team_invites_stddev_samp_order_by"]: ValueTypes["team_invites_stddev_samp_order_by"];
	["team_invites_stream_cursor_input"]: ValueTypes["team_invites_stream_cursor_input"];
	["team_invites_stream_cursor_value_input"]: ValueTypes["team_invites_stream_cursor_value_input"];
	["team_invites_sum_order_by"]: ValueTypes["team_invites_sum_order_by"];
	["team_invites_update_column"]: ValueTypes["team_invites_update_column"];
	["team_invites_updates"]: ValueTypes["team_invites_updates"];
	["team_invites_var_pop_order_by"]: ValueTypes["team_invites_var_pop_order_by"];
	["team_invites_var_samp_order_by"]: ValueTypes["team_invites_var_samp_order_by"];
	["team_invites_variance_order_by"]: ValueTypes["team_invites_variance_order_by"];
	["team_roster_aggregate_bool_exp"]: ValueTypes["team_roster_aggregate_bool_exp"];
	["team_roster_aggregate_bool_exp_count"]: ValueTypes["team_roster_aggregate_bool_exp_count"];
	["team_roster_aggregate_order_by"]: ValueTypes["team_roster_aggregate_order_by"];
	["team_roster_arr_rel_insert_input"]: ValueTypes["team_roster_arr_rel_insert_input"];
	["team_roster_avg_order_by"]: ValueTypes["team_roster_avg_order_by"];
	["team_roster_bool_exp"]: ValueTypes["team_roster_bool_exp"];
	["team_roster_constraint"]: ValueTypes["team_roster_constraint"];
	["team_roster_inc_input"]: ValueTypes["team_roster_inc_input"];
	["team_roster_insert_input"]: ValueTypes["team_roster_insert_input"];
	["team_roster_max_order_by"]: ValueTypes["team_roster_max_order_by"];
	["team_roster_min_order_by"]: ValueTypes["team_roster_min_order_by"];
	["team_roster_on_conflict"]: ValueTypes["team_roster_on_conflict"];
	["team_roster_order_by"]: ValueTypes["team_roster_order_by"];
	["team_roster_pk_columns_input"]: ValueTypes["team_roster_pk_columns_input"];
	["team_roster_select_column"]: ValueTypes["team_roster_select_column"];
	["team_roster_set_input"]: ValueTypes["team_roster_set_input"];
	["team_roster_stddev_order_by"]: ValueTypes["team_roster_stddev_order_by"];
	["team_roster_stddev_pop_order_by"]: ValueTypes["team_roster_stddev_pop_order_by"];
	["team_roster_stddev_samp_order_by"]: ValueTypes["team_roster_stddev_samp_order_by"];
	["team_roster_stream_cursor_input"]: ValueTypes["team_roster_stream_cursor_input"];
	["team_roster_stream_cursor_value_input"]: ValueTypes["team_roster_stream_cursor_value_input"];
	["team_roster_sum_order_by"]: ValueTypes["team_roster_sum_order_by"];
	["team_roster_update_column"]: ValueTypes["team_roster_update_column"];
	["team_roster_updates"]: ValueTypes["team_roster_updates"];
	["team_roster_var_pop_order_by"]: ValueTypes["team_roster_var_pop_order_by"];
	["team_roster_var_samp_order_by"]: ValueTypes["team_roster_var_samp_order_by"];
	["team_roster_variance_order_by"]: ValueTypes["team_roster_variance_order_by"];
	["teams_aggregate_bool_exp"]: ValueTypes["teams_aggregate_bool_exp"];
	["teams_aggregate_bool_exp_count"]: ValueTypes["teams_aggregate_bool_exp_count"];
	["teams_aggregate_order_by"]: ValueTypes["teams_aggregate_order_by"];
	["teams_arr_rel_insert_input"]: ValueTypes["teams_arr_rel_insert_input"];
	["teams_avg_order_by"]: ValueTypes["teams_avg_order_by"];
	["teams_bool_exp"]: ValueTypes["teams_bool_exp"];
	["teams_constraint"]: ValueTypes["teams_constraint"];
	["teams_inc_input"]: ValueTypes["teams_inc_input"];
	["teams_insert_input"]: ValueTypes["teams_insert_input"];
	["teams_max_order_by"]: ValueTypes["teams_max_order_by"];
	["teams_min_order_by"]: ValueTypes["teams_min_order_by"];
	["teams_obj_rel_insert_input"]: ValueTypes["teams_obj_rel_insert_input"];
	["teams_on_conflict"]: ValueTypes["teams_on_conflict"];
	["teams_order_by"]: ValueTypes["teams_order_by"];
	["teams_pk_columns_input"]: ValueTypes["teams_pk_columns_input"];
	["teams_select_column"]: ValueTypes["teams_select_column"];
	["teams_set_input"]: ValueTypes["teams_set_input"];
	["teams_stddev_order_by"]: ValueTypes["teams_stddev_order_by"];
	["teams_stddev_pop_order_by"]: ValueTypes["teams_stddev_pop_order_by"];
	["teams_stddev_samp_order_by"]: ValueTypes["teams_stddev_samp_order_by"];
	["teams_stream_cursor_input"]: ValueTypes["teams_stream_cursor_input"];
	["teams_stream_cursor_value_input"]: ValueTypes["teams_stream_cursor_value_input"];
	["teams_sum_order_by"]: ValueTypes["teams_sum_order_by"];
	["teams_update_column"]: ValueTypes["teams_update_column"];
	["teams_updates"]: ValueTypes["teams_updates"];
	["teams_var_pop_order_by"]: ValueTypes["teams_var_pop_order_by"];
	["teams_var_samp_order_by"]: ValueTypes["teams_var_samp_order_by"];
	["teams_variance_order_by"]: ValueTypes["teams_variance_order_by"];
	["timestamptz"]: ValueTypes["timestamptz"];
	["timestamptz_comparison_exp"]: ValueTypes["timestamptz_comparison_exp"];
	["tournament_organizers_aggregate_bool_exp"]: ValueTypes["tournament_organizers_aggregate_bool_exp"];
	["tournament_organizers_aggregate_bool_exp_count"]: ValueTypes["tournament_organizers_aggregate_bool_exp_count"];
	["tournament_organizers_aggregate_order_by"]: ValueTypes["tournament_organizers_aggregate_order_by"];
	["tournament_organizers_arr_rel_insert_input"]: ValueTypes["tournament_organizers_arr_rel_insert_input"];
	["tournament_organizers_avg_order_by"]: ValueTypes["tournament_organizers_avg_order_by"];
	["tournament_organizers_bool_exp"]: ValueTypes["tournament_organizers_bool_exp"];
	["tournament_organizers_constraint"]: ValueTypes["tournament_organizers_constraint"];
	["tournament_organizers_inc_input"]: ValueTypes["tournament_organizers_inc_input"];
	["tournament_organizers_insert_input"]: ValueTypes["tournament_organizers_insert_input"];
	["tournament_organizers_max_order_by"]: ValueTypes["tournament_organizers_max_order_by"];
	["tournament_organizers_min_order_by"]: ValueTypes["tournament_organizers_min_order_by"];
	["tournament_organizers_on_conflict"]: ValueTypes["tournament_organizers_on_conflict"];
	["tournament_organizers_order_by"]: ValueTypes["tournament_organizers_order_by"];
	["tournament_organizers_pk_columns_input"]: ValueTypes["tournament_organizers_pk_columns_input"];
	["tournament_organizers_select_column"]: ValueTypes["tournament_organizers_select_column"];
	["tournament_organizers_set_input"]: ValueTypes["tournament_organizers_set_input"];
	["tournament_organizers_stddev_order_by"]: ValueTypes["tournament_organizers_stddev_order_by"];
	["tournament_organizers_stddev_pop_order_by"]: ValueTypes["tournament_organizers_stddev_pop_order_by"];
	["tournament_organizers_stddev_samp_order_by"]: ValueTypes["tournament_organizers_stddev_samp_order_by"];
	["tournament_organizers_stream_cursor_input"]: ValueTypes["tournament_organizers_stream_cursor_input"];
	["tournament_organizers_stream_cursor_value_input"]: ValueTypes["tournament_organizers_stream_cursor_value_input"];
	["tournament_organizers_sum_order_by"]: ValueTypes["tournament_organizers_sum_order_by"];
	["tournament_organizers_update_column"]: ValueTypes["tournament_organizers_update_column"];
	["tournament_organizers_updates"]: ValueTypes["tournament_organizers_updates"];
	["tournament_organizers_var_pop_order_by"]: ValueTypes["tournament_organizers_var_pop_order_by"];
	["tournament_organizers_var_samp_order_by"]: ValueTypes["tournament_organizers_var_samp_order_by"];
	["tournament_organizers_variance_order_by"]: ValueTypes["tournament_organizers_variance_order_by"];
	["tournament_roster_aggregate_bool_exp"]: ValueTypes["tournament_roster_aggregate_bool_exp"];
	["tournament_roster_aggregate_bool_exp_count"]: ValueTypes["tournament_roster_aggregate_bool_exp_count"];
	["tournament_roster_aggregate_order_by"]: ValueTypes["tournament_roster_aggregate_order_by"];
	["tournament_roster_arr_rel_insert_input"]: ValueTypes["tournament_roster_arr_rel_insert_input"];
	["tournament_roster_avg_order_by"]: ValueTypes["tournament_roster_avg_order_by"];
	["tournament_roster_bool_exp"]: ValueTypes["tournament_roster_bool_exp"];
	["tournament_roster_constraint"]: ValueTypes["tournament_roster_constraint"];
	["tournament_roster_inc_input"]: ValueTypes["tournament_roster_inc_input"];
	["tournament_roster_insert_input"]: ValueTypes["tournament_roster_insert_input"];
	["tournament_roster_max_order_by"]: ValueTypes["tournament_roster_max_order_by"];
	["tournament_roster_min_order_by"]: ValueTypes["tournament_roster_min_order_by"];
	["tournament_roster_on_conflict"]: ValueTypes["tournament_roster_on_conflict"];
	["tournament_roster_order_by"]: ValueTypes["tournament_roster_order_by"];
	["tournament_roster_pk_columns_input"]: ValueTypes["tournament_roster_pk_columns_input"];
	["tournament_roster_select_column"]: ValueTypes["tournament_roster_select_column"];
	["tournament_roster_set_input"]: ValueTypes["tournament_roster_set_input"];
	["tournament_roster_stddev_order_by"]: ValueTypes["tournament_roster_stddev_order_by"];
	["tournament_roster_stddev_pop_order_by"]: ValueTypes["tournament_roster_stddev_pop_order_by"];
	["tournament_roster_stddev_samp_order_by"]: ValueTypes["tournament_roster_stddev_samp_order_by"];
	["tournament_roster_stream_cursor_input"]: ValueTypes["tournament_roster_stream_cursor_input"];
	["tournament_roster_stream_cursor_value_input"]: ValueTypes["tournament_roster_stream_cursor_value_input"];
	["tournament_roster_sum_order_by"]: ValueTypes["tournament_roster_sum_order_by"];
	["tournament_roster_update_column"]: ValueTypes["tournament_roster_update_column"];
	["tournament_roster_updates"]: ValueTypes["tournament_roster_updates"];
	["tournament_roster_var_pop_order_by"]: ValueTypes["tournament_roster_var_pop_order_by"];
	["tournament_roster_var_samp_order_by"]: ValueTypes["tournament_roster_var_samp_order_by"];
	["tournament_roster_variance_order_by"]: ValueTypes["tournament_roster_variance_order_by"];
	["tournament_servers_aggregate_bool_exp"]: ValueTypes["tournament_servers_aggregate_bool_exp"];
	["tournament_servers_aggregate_bool_exp_count"]: ValueTypes["tournament_servers_aggregate_bool_exp_count"];
	["tournament_servers_aggregate_order_by"]: ValueTypes["tournament_servers_aggregate_order_by"];
	["tournament_servers_arr_rel_insert_input"]: ValueTypes["tournament_servers_arr_rel_insert_input"];
	["tournament_servers_bool_exp"]: ValueTypes["tournament_servers_bool_exp"];
	["tournament_servers_constraint"]: ValueTypes["tournament_servers_constraint"];
	["tournament_servers_insert_input"]: ValueTypes["tournament_servers_insert_input"];
	["tournament_servers_max_order_by"]: ValueTypes["tournament_servers_max_order_by"];
	["tournament_servers_min_order_by"]: ValueTypes["tournament_servers_min_order_by"];
	["tournament_servers_on_conflict"]: ValueTypes["tournament_servers_on_conflict"];
	["tournament_servers_order_by"]: ValueTypes["tournament_servers_order_by"];
	["tournament_servers_pk_columns_input"]: ValueTypes["tournament_servers_pk_columns_input"];
	["tournament_servers_select_column"]: ValueTypes["tournament_servers_select_column"];
	["tournament_servers_set_input"]: ValueTypes["tournament_servers_set_input"];
	["tournament_servers_stream_cursor_input"]: ValueTypes["tournament_servers_stream_cursor_input"];
	["tournament_servers_stream_cursor_value_input"]: ValueTypes["tournament_servers_stream_cursor_value_input"];
	["tournament_servers_update_column"]: ValueTypes["tournament_servers_update_column"];
	["tournament_servers_updates"]: ValueTypes["tournament_servers_updates"];
	["tournament_stages_aggregate_bool_exp"]: ValueTypes["tournament_stages_aggregate_bool_exp"];
	["tournament_stages_aggregate_bool_exp_count"]: ValueTypes["tournament_stages_aggregate_bool_exp_count"];
	["tournament_stages_aggregate_order_by"]: ValueTypes["tournament_stages_aggregate_order_by"];
	["tournament_stages_append_input"]: ValueTypes["tournament_stages_append_input"];
	["tournament_stages_arr_rel_insert_input"]: ValueTypes["tournament_stages_arr_rel_insert_input"];
	["tournament_stages_avg_order_by"]: ValueTypes["tournament_stages_avg_order_by"];
	["tournament_stages_bool_exp"]: ValueTypes["tournament_stages_bool_exp"];
	["tournament_stages_constraint"]: ValueTypes["tournament_stages_constraint"];
	["tournament_stages_delete_at_path_input"]: ValueTypes["tournament_stages_delete_at_path_input"];
	["tournament_stages_delete_elem_input"]: ValueTypes["tournament_stages_delete_elem_input"];
	["tournament_stages_delete_key_input"]: ValueTypes["tournament_stages_delete_key_input"];
	["tournament_stages_inc_input"]: ValueTypes["tournament_stages_inc_input"];
	["tournament_stages_insert_input"]: ValueTypes["tournament_stages_insert_input"];
	["tournament_stages_max_order_by"]: ValueTypes["tournament_stages_max_order_by"];
	["tournament_stages_min_order_by"]: ValueTypes["tournament_stages_min_order_by"];
	["tournament_stages_on_conflict"]: ValueTypes["tournament_stages_on_conflict"];
	["tournament_stages_order_by"]: ValueTypes["tournament_stages_order_by"];
	["tournament_stages_pk_columns_input"]: ValueTypes["tournament_stages_pk_columns_input"];
	["tournament_stages_prepend_input"]: ValueTypes["tournament_stages_prepend_input"];
	["tournament_stages_select_column"]: ValueTypes["tournament_stages_select_column"];
	["tournament_stages_set_input"]: ValueTypes["tournament_stages_set_input"];
	["tournament_stages_stddev_order_by"]: ValueTypes["tournament_stages_stddev_order_by"];
	["tournament_stages_stddev_pop_order_by"]: ValueTypes["tournament_stages_stddev_pop_order_by"];
	["tournament_stages_stddev_samp_order_by"]: ValueTypes["tournament_stages_stddev_samp_order_by"];
	["tournament_stages_stream_cursor_input"]: ValueTypes["tournament_stages_stream_cursor_input"];
	["tournament_stages_stream_cursor_value_input"]: ValueTypes["tournament_stages_stream_cursor_value_input"];
	["tournament_stages_sum_order_by"]: ValueTypes["tournament_stages_sum_order_by"];
	["tournament_stages_update_column"]: ValueTypes["tournament_stages_update_column"];
	["tournament_stages_updates"]: ValueTypes["tournament_stages_updates"];
	["tournament_stages_var_pop_order_by"]: ValueTypes["tournament_stages_var_pop_order_by"];
	["tournament_stages_var_samp_order_by"]: ValueTypes["tournament_stages_var_samp_order_by"];
	["tournament_stages_variance_order_by"]: ValueTypes["tournament_stages_variance_order_by"];
	["tournament_teams_aggregate_bool_exp"]: ValueTypes["tournament_teams_aggregate_bool_exp"];
	["tournament_teams_aggregate_bool_exp_count"]: ValueTypes["tournament_teams_aggregate_bool_exp_count"];
	["tournament_teams_aggregate_order_by"]: ValueTypes["tournament_teams_aggregate_order_by"];
	["tournament_teams_arr_rel_insert_input"]: ValueTypes["tournament_teams_arr_rel_insert_input"];
	["tournament_teams_bool_exp"]: ValueTypes["tournament_teams_bool_exp"];
	["tournament_teams_constraint"]: ValueTypes["tournament_teams_constraint"];
	["tournament_teams_insert_input"]: ValueTypes["tournament_teams_insert_input"];
	["tournament_teams_max_order_by"]: ValueTypes["tournament_teams_max_order_by"];
	["tournament_teams_min_order_by"]: ValueTypes["tournament_teams_min_order_by"];
	["tournament_teams_on_conflict"]: ValueTypes["tournament_teams_on_conflict"];
	["tournament_teams_order_by"]: ValueTypes["tournament_teams_order_by"];
	["tournament_teams_pk_columns_input"]: ValueTypes["tournament_teams_pk_columns_input"];
	["tournament_teams_select_column"]: ValueTypes["tournament_teams_select_column"];
	["tournament_teams_set_input"]: ValueTypes["tournament_teams_set_input"];
	["tournament_teams_stream_cursor_input"]: ValueTypes["tournament_teams_stream_cursor_input"];
	["tournament_teams_stream_cursor_value_input"]: ValueTypes["tournament_teams_stream_cursor_value_input"];
	["tournament_teams_update_column"]: ValueTypes["tournament_teams_update_column"];
	["tournament_teams_updates"]: ValueTypes["tournament_teams_updates"];
	["tournaments_aggregate_bool_exp"]: ValueTypes["tournaments_aggregate_bool_exp"];
	["tournaments_aggregate_bool_exp_count"]: ValueTypes["tournaments_aggregate_bool_exp_count"];
	["tournaments_aggregate_order_by"]: ValueTypes["tournaments_aggregate_order_by"];
	["tournaments_arr_rel_insert_input"]: ValueTypes["tournaments_arr_rel_insert_input"];
	["tournaments_avg_order_by"]: ValueTypes["tournaments_avg_order_by"];
	["tournaments_bool_exp"]: ValueTypes["tournaments_bool_exp"];
	["tournaments_constraint"]: ValueTypes["tournaments_constraint"];
	["tournaments_inc_input"]: ValueTypes["tournaments_inc_input"];
	["tournaments_insert_input"]: ValueTypes["tournaments_insert_input"];
	["tournaments_max_order_by"]: ValueTypes["tournaments_max_order_by"];
	["tournaments_min_order_by"]: ValueTypes["tournaments_min_order_by"];
	["tournaments_obj_rel_insert_input"]: ValueTypes["tournaments_obj_rel_insert_input"];
	["tournaments_on_conflict"]: ValueTypes["tournaments_on_conflict"];
	["tournaments_order_by"]: ValueTypes["tournaments_order_by"];
	["tournaments_pk_columns_input"]: ValueTypes["tournaments_pk_columns_input"];
	["tournaments_select_column"]: ValueTypes["tournaments_select_column"];
	["tournaments_set_input"]: ValueTypes["tournaments_set_input"];
	["tournaments_stddev_order_by"]: ValueTypes["tournaments_stddev_order_by"];
	["tournaments_stddev_pop_order_by"]: ValueTypes["tournaments_stddev_pop_order_by"];
	["tournaments_stddev_samp_order_by"]: ValueTypes["tournaments_stddev_samp_order_by"];
	["tournaments_stream_cursor_input"]: ValueTypes["tournaments_stream_cursor_input"];
	["tournaments_stream_cursor_value_input"]: ValueTypes["tournaments_stream_cursor_value_input"];
	["tournaments_sum_order_by"]: ValueTypes["tournaments_sum_order_by"];
	["tournaments_update_column"]: ValueTypes["tournaments_update_column"];
	["tournaments_updates"]: ValueTypes["tournaments_updates"];
	["tournaments_var_pop_order_by"]: ValueTypes["tournaments_var_pop_order_by"];
	["tournaments_var_samp_order_by"]: ValueTypes["tournaments_var_samp_order_by"];
	["tournaments_variance_order_by"]: ValueTypes["tournaments_variance_order_by"];
	["uuid"]: ValueTypes["uuid"];
	["uuid_comparison_exp"]: ValueTypes["uuid_comparison_exp"];
	["v_match_captains_bool_exp"]: ValueTypes["v_match_captains_bool_exp"];
	["v_match_captains_inc_input"]: ValueTypes["v_match_captains_inc_input"];
	["v_match_captains_insert_input"]: ValueTypes["v_match_captains_insert_input"];
	["v_match_captains_obj_rel_insert_input"]: ValueTypes["v_match_captains_obj_rel_insert_input"];
	["v_match_captains_order_by"]: ValueTypes["v_match_captains_order_by"];
	["v_match_captains_select_column"]: ValueTypes["v_match_captains_select_column"];
	["v_match_captains_set_input"]: ValueTypes["v_match_captains_set_input"];
	["v_match_captains_stream_cursor_input"]: ValueTypes["v_match_captains_stream_cursor_input"];
	["v_match_captains_stream_cursor_value_input"]: ValueTypes["v_match_captains_stream_cursor_value_input"];
	["v_match_captains_updates"]: ValueTypes["v_match_captains_updates"];
	["v_player_arch_nemesis_bool_exp"]: ValueTypes["v_player_arch_nemesis_bool_exp"];
	["v_player_arch_nemesis_order_by"]: ValueTypes["v_player_arch_nemesis_order_by"];
	["v_player_arch_nemesis_select_column"]: ValueTypes["v_player_arch_nemesis_select_column"];
	["v_player_arch_nemesis_stream_cursor_input"]: ValueTypes["v_player_arch_nemesis_stream_cursor_input"];
	["v_player_arch_nemesis_stream_cursor_value_input"]: ValueTypes["v_player_arch_nemesis_stream_cursor_value_input"];
	["v_player_damage_bool_exp"]: ValueTypes["v_player_damage_bool_exp"];
	["v_player_damage_order_by"]: ValueTypes["v_player_damage_order_by"];
	["v_player_damage_select_column"]: ValueTypes["v_player_damage_select_column"];
	["v_player_damage_stream_cursor_input"]: ValueTypes["v_player_damage_stream_cursor_input"];
	["v_player_damage_stream_cursor_value_input"]: ValueTypes["v_player_damage_stream_cursor_value_input"];
	["v_player_killed_player_counts_bool_exp"]: ValueTypes["v_player_killed_player_counts_bool_exp"];
	["v_player_killed_player_counts_order_by"]: ValueTypes["v_player_killed_player_counts_order_by"];
	["v_player_killed_player_counts_select_column"]: ValueTypes["v_player_killed_player_counts_select_column"];
	["v_player_killed_player_counts_stream_cursor_input"]: ValueTypes["v_player_killed_player_counts_stream_cursor_input"];
	["v_player_killed_player_counts_stream_cursor_value_input"]: ValueTypes["v_player_killed_player_counts_stream_cursor_value_input"];
	["v_player_match_kills_bool_exp"]: ValueTypes["v_player_match_kills_bool_exp"];
	["v_player_match_kills_order_by"]: ValueTypes["v_player_match_kills_order_by"];
	["v_player_match_kills_select_column"]: ValueTypes["v_player_match_kills_select_column"];
	["v_player_match_kills_stream_cursor_input"]: ValueTypes["v_player_match_kills_stream_cursor_input"];
	["v_player_match_kills_stream_cursor_value_input"]: ValueTypes["v_player_match_kills_stream_cursor_value_input"];
	["v_player_multi_kills_aggregate_bool_exp"]: ValueTypes["v_player_multi_kills_aggregate_bool_exp"];
	["v_player_multi_kills_aggregate_bool_exp_count"]: ValueTypes["v_player_multi_kills_aggregate_bool_exp_count"];
	["v_player_multi_kills_aggregate_order_by"]: ValueTypes["v_player_multi_kills_aggregate_order_by"];
	["v_player_multi_kills_arr_rel_insert_input"]: ValueTypes["v_player_multi_kills_arr_rel_insert_input"];
	["v_player_multi_kills_avg_order_by"]: ValueTypes["v_player_multi_kills_avg_order_by"];
	["v_player_multi_kills_bool_exp"]: ValueTypes["v_player_multi_kills_bool_exp"];
	["v_player_multi_kills_insert_input"]: ValueTypes["v_player_multi_kills_insert_input"];
	["v_player_multi_kills_max_order_by"]: ValueTypes["v_player_multi_kills_max_order_by"];
	["v_player_multi_kills_min_order_by"]: ValueTypes["v_player_multi_kills_min_order_by"];
	["v_player_multi_kills_order_by"]: ValueTypes["v_player_multi_kills_order_by"];
	["v_player_multi_kills_select_column"]: ValueTypes["v_player_multi_kills_select_column"];
	["v_player_multi_kills_stddev_order_by"]: ValueTypes["v_player_multi_kills_stddev_order_by"];
	["v_player_multi_kills_stddev_pop_order_by"]: ValueTypes["v_player_multi_kills_stddev_pop_order_by"];
	["v_player_multi_kills_stddev_samp_order_by"]: ValueTypes["v_player_multi_kills_stddev_samp_order_by"];
	["v_player_multi_kills_stream_cursor_input"]: ValueTypes["v_player_multi_kills_stream_cursor_input"];
	["v_player_multi_kills_stream_cursor_value_input"]: ValueTypes["v_player_multi_kills_stream_cursor_value_input"];
	["v_player_multi_kills_sum_order_by"]: ValueTypes["v_player_multi_kills_sum_order_by"];
	["v_player_multi_kills_var_pop_order_by"]: ValueTypes["v_player_multi_kills_var_pop_order_by"];
	["v_player_multi_kills_var_samp_order_by"]: ValueTypes["v_player_multi_kills_var_samp_order_by"];
	["v_player_multi_kills_variance_order_by"]: ValueTypes["v_player_multi_kills_variance_order_by"];
	["v_player_opening_duels_aggregate_bool_exp"]: ValueTypes["v_player_opening_duels_aggregate_bool_exp"];
	["v_player_opening_duels_aggregate_bool_exp_count"]: ValueTypes["v_player_opening_duels_aggregate_bool_exp_count"];
	["v_player_opening_duels_aggregate_order_by"]: ValueTypes["v_player_opening_duels_aggregate_order_by"];
	["v_player_opening_duels_arr_rel_insert_input"]: ValueTypes["v_player_opening_duels_arr_rel_insert_input"];
	["v_player_opening_duels_avg_order_by"]: ValueTypes["v_player_opening_duels_avg_order_by"];
	["v_player_opening_duels_bool_exp"]: ValueTypes["v_player_opening_duels_bool_exp"];
	["v_player_opening_duels_insert_input"]: ValueTypes["v_player_opening_duels_insert_input"];
	["v_player_opening_duels_max_order_by"]: ValueTypes["v_player_opening_duels_max_order_by"];
	["v_player_opening_duels_min_order_by"]: ValueTypes["v_player_opening_duels_min_order_by"];
	["v_player_opening_duels_order_by"]: ValueTypes["v_player_opening_duels_order_by"];
	["v_player_opening_duels_select_column"]: ValueTypes["v_player_opening_duels_select_column"];
	["v_player_opening_duels_stddev_order_by"]: ValueTypes["v_player_opening_duels_stddev_order_by"];
	["v_player_opening_duels_stddev_pop_order_by"]: ValueTypes["v_player_opening_duels_stddev_pop_order_by"];
	["v_player_opening_duels_stddev_samp_order_by"]: ValueTypes["v_player_opening_duels_stddev_samp_order_by"];
	["v_player_opening_duels_stream_cursor_input"]: ValueTypes["v_player_opening_duels_stream_cursor_input"];
	["v_player_opening_duels_stream_cursor_value_input"]: ValueTypes["v_player_opening_duels_stream_cursor_value_input"];
	["v_player_opening_duels_sum_order_by"]: ValueTypes["v_player_opening_duels_sum_order_by"];
	["v_player_opening_duels_var_pop_order_by"]: ValueTypes["v_player_opening_duels_var_pop_order_by"];
	["v_player_opening_duels_var_samp_order_by"]: ValueTypes["v_player_opening_duels_var_samp_order_by"];
	["v_player_opening_duels_variance_order_by"]: ValueTypes["v_player_opening_duels_variance_order_by"];
	["v_pool_maps_aggregate_bool_exp"]: ValueTypes["v_pool_maps_aggregate_bool_exp"];
	["v_pool_maps_aggregate_bool_exp_bool_and"]: ValueTypes["v_pool_maps_aggregate_bool_exp_bool_and"];
	["v_pool_maps_aggregate_bool_exp_bool_or"]: ValueTypes["v_pool_maps_aggregate_bool_exp_bool_or"];
	["v_pool_maps_aggregate_bool_exp_count"]: ValueTypes["v_pool_maps_aggregate_bool_exp_count"];
	["v_pool_maps_aggregate_order_by"]: ValueTypes["v_pool_maps_aggregate_order_by"];
	["v_pool_maps_arr_rel_insert_input"]: ValueTypes["v_pool_maps_arr_rel_insert_input"];
	["v_pool_maps_bool_exp"]: ValueTypes["v_pool_maps_bool_exp"];
	["v_pool_maps_insert_input"]: ValueTypes["v_pool_maps_insert_input"];
	["v_pool_maps_max_order_by"]: ValueTypes["v_pool_maps_max_order_by"];
	["v_pool_maps_min_order_by"]: ValueTypes["v_pool_maps_min_order_by"];
	["v_pool_maps_order_by"]: ValueTypes["v_pool_maps_order_by"];
	["v_pool_maps_select_column"]: ValueTypes["v_pool_maps_select_column"];
	["v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_and_arguments_columns"]: ValueTypes["v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_and_arguments_columns"];
	["v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_or_arguments_columns"]: ValueTypes["v_pool_maps_select_column_v_pool_maps_aggregate_bool_exp_bool_or_arguments_columns"];
	["v_pool_maps_stream_cursor_input"]: ValueTypes["v_pool_maps_stream_cursor_input"];
	["v_pool_maps_stream_cursor_value_input"]: ValueTypes["v_pool_maps_stream_cursor_value_input"];
}